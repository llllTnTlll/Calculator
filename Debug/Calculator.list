
Calculator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b04  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08004c10  08004c10  00014c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000108  08004d90  08004d90  00014d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000348  08004e98  08004e98  00014e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051e0  080051e0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051e0  080051e0  000151e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051e4  080051e4  000151e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080051e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001268  200001e0  080053c8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001448  080053c8  00021448  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002acc0  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000521b  00000000  00000000  0004aec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  000500e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001910  00000000  00000000  00051238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eeb9  00000000  00000000  00052b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a09  00000000  00000000  00071a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bc24  00000000  00000000  0008a40a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012602e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053e0  00000000  00000000  00126080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00008d20  00000000  00000000  0012b460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004bf8 	.word	0x08004bf8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08004bf8 	.word	0x08004bf8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <selfrel_offset31>:
 800015c:	6803      	ldr	r3, [r0, #0]
 800015e:	005a      	lsls	r2, r3, #1
 8000160:	bf4c      	ite	mi
 8000162:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000166:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800016a:	4418      	add	r0, r3
 800016c:	4770      	bx	lr
 800016e:	bf00      	nop

08000170 <search_EIT_table>:
 8000170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000174:	b339      	cbz	r1, 80001c6 <search_EIT_table+0x56>
 8000176:	1e4f      	subs	r7, r1, #1
 8000178:	4604      	mov	r4, r0
 800017a:	4615      	mov	r5, r2
 800017c:	463e      	mov	r6, r7
 800017e:	f04f 0800 	mov.w	r8, #0
 8000182:	eb08 0106 	add.w	r1, r8, r6
 8000186:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800018a:	1049      	asrs	r1, r1, #1
 800018c:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000190:	4648      	mov	r0, r9
 8000192:	f7ff ffe3 	bl	800015c <selfrel_offset31>
 8000196:	4603      	mov	r3, r0
 8000198:	00c8      	lsls	r0, r1, #3
 800019a:	3008      	adds	r0, #8
 800019c:	428f      	cmp	r7, r1
 800019e:	4420      	add	r0, r4
 80001a0:	d00b      	beq.n	80001ba <search_EIT_table+0x4a>
 80001a2:	42ab      	cmp	r3, r5
 80001a4:	d80b      	bhi.n	80001be <search_EIT_table+0x4e>
 80001a6:	f7ff ffd9 	bl	800015c <selfrel_offset31>
 80001aa:	3801      	subs	r0, #1
 80001ac:	42a8      	cmp	r0, r5
 80001ae:	f101 0801 	add.w	r8, r1, #1
 80001b2:	d3e6      	bcc.n	8000182 <search_EIT_table+0x12>
 80001b4:	4648      	mov	r0, r9
 80001b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80001ba:	42ab      	cmp	r3, r5
 80001bc:	d9fa      	bls.n	80001b4 <search_EIT_table+0x44>
 80001be:	4588      	cmp	r8, r1
 80001c0:	d001      	beq.n	80001c6 <search_EIT_table+0x56>
 80001c2:	1e4e      	subs	r6, r1, #1
 80001c4:	e7dd      	b.n	8000182 <search_EIT_table+0x12>
 80001c6:	f04f 0900 	mov.w	r9, #0
 80001ca:	4648      	mov	r0, r9
 80001cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080001d0 <__gnu_unwind_get_pr_addr>:
 80001d0:	2801      	cmp	r0, #1
 80001d2:	d007      	beq.n	80001e4 <__gnu_unwind_get_pr_addr+0x14>
 80001d4:	2802      	cmp	r0, #2
 80001d6:	d007      	beq.n	80001e8 <__gnu_unwind_get_pr_addr+0x18>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__gnu_unwind_get_pr_addr+0x1c>)
 80001da:	2800      	cmp	r0, #0
 80001dc:	bf0c      	ite	eq
 80001de:	4618      	moveq	r0, r3
 80001e0:	2000      	movne	r0, #0
 80001e2:	4770      	bx	lr
 80001e4:	4802      	ldr	r0, [pc, #8]	; (80001f0 <__gnu_unwind_get_pr_addr+0x20>)
 80001e6:	4770      	bx	lr
 80001e8:	4802      	ldr	r0, [pc, #8]	; (80001f4 <__gnu_unwind_get_pr_addr+0x24>)
 80001ea:	4770      	bx	lr
 80001ec:	080008c1 	.word	0x080008c1
 80001f0:	080008c5 	.word	0x080008c5
 80001f4:	080008c9 	.word	0x080008c9

080001f8 <get_eit_entry>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	4b24      	ldr	r3, [pc, #144]	; (800028c <get_eit_entry+0x94>)
 80001fc:	4604      	mov	r4, r0
 80001fe:	b083      	sub	sp, #12
 8000200:	1e8d      	subs	r5, r1, #2
 8000202:	b33b      	cbz	r3, 8000254 <get_eit_entry+0x5c>
 8000204:	4628      	mov	r0, r5
 8000206:	a901      	add	r1, sp, #4
 8000208:	f3af 8000 	nop.w
 800020c:	b1e8      	cbz	r0, 800024a <get_eit_entry+0x52>
 800020e:	9901      	ldr	r1, [sp, #4]
 8000210:	462a      	mov	r2, r5
 8000212:	f7ff ffad 	bl	8000170 <search_EIT_table>
 8000216:	4601      	mov	r1, r0
 8000218:	b1b8      	cbz	r0, 800024a <get_eit_entry+0x52>
 800021a:	f7ff ff9f 	bl	800015c <selfrel_offset31>
 800021e:	684b      	ldr	r3, [r1, #4]
 8000220:	64a0      	str	r0, [r4, #72]	; 0x48
 8000222:	2b01      	cmp	r3, #1
 8000224:	d02e      	beq.n	8000284 <get_eit_entry+0x8c>
 8000226:	2b00      	cmp	r3, #0
 8000228:	db27      	blt.n	800027a <get_eit_entry+0x82>
 800022a:	1d08      	adds	r0, r1, #4
 800022c:	f7ff ff96 	bl	800015c <selfrel_offset31>
 8000230:	2300      	movs	r3, #0
 8000232:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000236:	6803      	ldr	r3, [r0, #0]
 8000238:	2b00      	cmp	r3, #0
 800023a:	db12      	blt.n	8000262 <get_eit_entry+0x6a>
 800023c:	f7ff ff8e 	bl	800015c <selfrel_offset31>
 8000240:	4603      	mov	r3, r0
 8000242:	2000      	movs	r0, #0
 8000244:	6123      	str	r3, [r4, #16]
 8000246:	b003      	add	sp, #12
 8000248:	bd30      	pop	{r4, r5, pc}
 800024a:	2300      	movs	r3, #0
 800024c:	2009      	movs	r0, #9
 800024e:	6123      	str	r3, [r4, #16]
 8000250:	b003      	add	sp, #12
 8000252:	bd30      	pop	{r4, r5, pc}
 8000254:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <get_eit_entry+0x98>)
 8000256:	490f      	ldr	r1, [pc, #60]	; (8000294 <get_eit_entry+0x9c>)
 8000258:	4618      	mov	r0, r3
 800025a:	1ac9      	subs	r1, r1, r3
 800025c:	10c9      	asrs	r1, r1, #3
 800025e:	9101      	str	r1, [sp, #4]
 8000260:	e7d6      	b.n	8000210 <get_eit_entry+0x18>
 8000262:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000266:	f7ff ffb3 	bl	80001d0 <__gnu_unwind_get_pr_addr>
 800026a:	2800      	cmp	r0, #0
 800026c:	4603      	mov	r3, r0
 800026e:	bf14      	ite	ne
 8000270:	2000      	movne	r0, #0
 8000272:	2009      	moveq	r0, #9
 8000274:	6123      	str	r3, [r4, #16]
 8000276:	b003      	add	sp, #12
 8000278:	bd30      	pop	{r4, r5, pc}
 800027a:	2301      	movs	r3, #1
 800027c:	1d08      	adds	r0, r1, #4
 800027e:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000282:	e7d8      	b.n	8000236 <get_eit_entry+0x3e>
 8000284:	2300      	movs	r3, #0
 8000286:	2005      	movs	r0, #5
 8000288:	6123      	str	r3, [r4, #16]
 800028a:	e7dc      	b.n	8000246 <get_eit_entry+0x4e>
 800028c:	00000000 	.word	0x00000000
 8000290:	08004e98 	.word	0x08004e98
 8000294:	080051e0 	.word	0x080051e0

08000298 <restore_non_core_regs>:
 8000298:	6803      	ldr	r3, [r0, #0]
 800029a:	b510      	push	{r4, lr}
 800029c:	07da      	lsls	r2, r3, #31
 800029e:	4604      	mov	r4, r0
 80002a0:	d406      	bmi.n	80002b0 <restore_non_core_regs+0x18>
 80002a2:	079b      	lsls	r3, r3, #30
 80002a4:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80002a8:	d509      	bpl.n	80002be <restore_non_core_regs+0x26>
 80002aa:	f000 fc5d 	bl	8000b68 <__gnu_Unwind_Restore_VFP_D>
 80002ae:	6823      	ldr	r3, [r4, #0]
 80002b0:	0759      	lsls	r1, r3, #29
 80002b2:	d509      	bpl.n	80002c8 <restore_non_core_regs+0x30>
 80002b4:	071a      	lsls	r2, r3, #28
 80002b6:	d50e      	bpl.n	80002d6 <restore_non_core_regs+0x3e>
 80002b8:	06db      	lsls	r3, r3, #27
 80002ba:	d513      	bpl.n	80002e4 <restore_non_core_regs+0x4c>
 80002bc:	bd10      	pop	{r4, pc}
 80002be:	f000 fc4b 	bl	8000b58 <__gnu_Unwind_Restore_VFP>
 80002c2:	6823      	ldr	r3, [r4, #0]
 80002c4:	0759      	lsls	r1, r3, #29
 80002c6:	d4f5      	bmi.n	80002b4 <restore_non_core_regs+0x1c>
 80002c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80002cc:	f000 fc54 	bl	8000b78 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80002d0:	6823      	ldr	r3, [r4, #0]
 80002d2:	071a      	lsls	r2, r3, #28
 80002d4:	d4f0      	bmi.n	80002b8 <restore_non_core_regs+0x20>
 80002d6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80002da:	f000 fc55 	bl	8000b88 <__gnu_Unwind_Restore_WMMXD>
 80002de:	6823      	ldr	r3, [r4, #0]
 80002e0:	06db      	lsls	r3, r3, #27
 80002e2:	d4eb      	bmi.n	80002bc <restore_non_core_regs+0x24>
 80002e4:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80002e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80002ec:	f000 bc90 	b.w	8000c10 <__gnu_Unwind_Restore_WMMXC>

080002f0 <__gnu_unwind_24bit.constprop.0>:
 80002f0:	2009      	movs	r0, #9
 80002f2:	4770      	bx	lr

080002f4 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	6800      	ldr	r0, [r0, #0]
 80002f8:	b100      	cbz	r0, 80002fc <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 80002fa:	4418      	add	r0, r3
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <_Unwind_DebugHook>:
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop

08000304 <unwind_phase2>:
 8000304:	b570      	push	{r4, r5, r6, lr}
 8000306:	4604      	mov	r4, r0
 8000308:	460e      	mov	r6, r1
 800030a:	4620      	mov	r0, r4
 800030c:	6c31      	ldr	r1, [r6, #64]	; 0x40
 800030e:	f7ff ff73 	bl	80001f8 <get_eit_entry>
 8000312:	4605      	mov	r5, r0
 8000314:	b998      	cbnz	r0, 800033e <unwind_phase2+0x3a>
 8000316:	f8d6 c040 	ldr.w	ip, [r6, #64]	; 0x40
 800031a:	4632      	mov	r2, r6
 800031c:	4621      	mov	r1, r4
 800031e:	2001      	movs	r0, #1
 8000320:	6923      	ldr	r3, [r4, #16]
 8000322:	f8c4 c014 	str.w	ip, [r4, #20]
 8000326:	4798      	blx	r3
 8000328:	2808      	cmp	r0, #8
 800032a:	d0ee      	beq.n	800030a <unwind_phase2+0x6>
 800032c:	2807      	cmp	r0, #7
 800032e:	d106      	bne.n	800033e <unwind_phase2+0x3a>
 8000330:	4628      	mov	r0, r5
 8000332:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000334:	f7ff ffe4 	bl	8000300 <_Unwind_DebugHook>
 8000338:	1d30      	adds	r0, r6, #4
 800033a:	f000 fc01 	bl	8000b40 <__restore_core_regs>
 800033e:	f004 fac5 	bl	80048cc <abort>
 8000342:	bf00      	nop

08000344 <unwind_phase2_forced>:
 8000344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000348:	f04f 0a00 	mov.w	sl, #0
 800034c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000350:	f10d 0e0c 	add.w	lr, sp, #12
 8000354:	f101 0c04 	add.w	ip, r1, #4
 8000358:	68c7      	ldr	r7, [r0, #12]
 800035a:	f8d0 8018 	ldr.w	r8, [r0, #24]
 800035e:	4606      	mov	r6, r0
 8000360:	4614      	mov	r4, r2
 8000362:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000366:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800036a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800036e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000372:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000376:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800037a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800037e:	ad02      	add	r5, sp, #8
 8000380:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000384:	f8c5 a000 	str.w	sl, [r5]
 8000388:	e021      	b.n	80003ce <unwind_phase2_forced+0x8a>
 800038a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800038c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000390:	4629      	mov	r1, r5
 8000392:	6173      	str	r3, [r6, #20]
 8000394:	a87a      	add	r0, sp, #488	; 0x1e8
 8000396:	f004 fadb 	bl	8004950 <memcpy>
 800039a:	4631      	mov	r1, r6
 800039c:	4650      	mov	r0, sl
 800039e:	6933      	ldr	r3, [r6, #16]
 80003a0:	aa7a      	add	r2, sp, #488	; 0x1e8
 80003a2:	4798      	blx	r3
 80003a4:	9c88      	ldr	r4, [sp, #544]	; 0x220
 80003a6:	4682      	mov	sl, r0
 80003a8:	646c      	str	r4, [r5, #68]	; 0x44
 80003aa:	4633      	mov	r3, r6
 80003ac:	4632      	mov	r2, r6
 80003ae:	4649      	mov	r1, r9
 80003b0:	2001      	movs	r0, #1
 80003b2:	e9cd 5800 	strd	r5, r8, [sp]
 80003b6:	47b8      	blx	r7
 80003b8:	4604      	mov	r4, r0
 80003ba:	b9f0      	cbnz	r0, 80003fa <unwind_phase2_forced+0xb6>
 80003bc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80003c0:	4628      	mov	r0, r5
 80003c2:	a97a      	add	r1, sp, #488	; 0x1e8
 80003c4:	f004 fac4 	bl	8004950 <memcpy>
 80003c8:	f1ba 0f08 	cmp.w	sl, #8
 80003cc:	d11b      	bne.n	8000406 <unwind_phase2_forced+0xc2>
 80003ce:	4630      	mov	r0, r6
 80003d0:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80003d2:	f7ff ff11 	bl	80001f8 <get_eit_entry>
 80003d6:	f104 0909 	add.w	r9, r4, #9
 80003da:	fa5f fa89 	uxtb.w	sl, r9
 80003de:	4604      	mov	r4, r0
 80003e0:	2800      	cmp	r0, #0
 80003e2:	d0d2      	beq.n	800038a <unwind_phase2_forced+0x46>
 80003e4:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80003e6:	4633      	mov	r3, r6
 80003e8:	6469      	str	r1, [r5, #68]	; 0x44
 80003ea:	4632      	mov	r2, r6
 80003ec:	2001      	movs	r0, #1
 80003ee:	e9cd 5800 	strd	r5, r8, [sp]
 80003f2:	f04a 0110 	orr.w	r1, sl, #16
 80003f6:	47b8      	blx	r7
 80003f8:	b100      	cbz	r0, 80003fc <unwind_phase2_forced+0xb8>
 80003fa:	2409      	movs	r4, #9
 80003fc:	4620      	mov	r0, r4
 80003fe:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	f1ba 0f07 	cmp.w	sl, #7
 800040a:	d1f6      	bne.n	80003fa <unwind_phase2_forced+0xb6>
 800040c:	4620      	mov	r0, r4
 800040e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000410:	f7ff ff76 	bl	8000300 <_Unwind_DebugHook>
 8000414:	a803      	add	r0, sp, #12
 8000416:	f000 fb93 	bl	8000b40 <__restore_core_regs>
 800041a:	bf00      	nop

0800041c <_Unwind_GetCFA>:
 800041c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800041e:	4770      	bx	lr

08000420 <__gnu_Unwind_RaiseException>:
 8000420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000422:	f04f 37ff 	mov.w	r7, #4294967295
 8000426:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000428:	b0f9      	sub	sp, #484	; 0x1e4
 800042a:	640b      	str	r3, [r1, #64]	; 0x40
 800042c:	ac01      	add	r4, sp, #4
 800042e:	f101 0c04 	add.w	ip, r1, #4
 8000432:	460e      	mov	r6, r1
 8000434:	4605      	mov	r5, r0
 8000436:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800043a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800043c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000440:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000442:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000448:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800044c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000450:	9700      	str	r7, [sp, #0]
 8000452:	e006      	b.n	8000462 <__gnu_Unwind_RaiseException+0x42>
 8000454:	466a      	mov	r2, sp
 8000456:	4629      	mov	r1, r5
 8000458:	692b      	ldr	r3, [r5, #16]
 800045a:	4798      	blx	r3
 800045c:	2808      	cmp	r0, #8
 800045e:	4604      	mov	r4, r0
 8000460:	d108      	bne.n	8000474 <__gnu_Unwind_RaiseException+0x54>
 8000462:	4628      	mov	r0, r5
 8000464:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000466:	f7ff fec7 	bl	80001f8 <get_eit_entry>
 800046a:	2800      	cmp	r0, #0
 800046c:	d0f2      	beq.n	8000454 <__gnu_Unwind_RaiseException+0x34>
 800046e:	2009      	movs	r0, #9
 8000470:	b079      	add	sp, #484	; 0x1e4
 8000472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000474:	4668      	mov	r0, sp
 8000476:	f7ff ff0f 	bl	8000298 <restore_non_core_regs>
 800047a:	2c06      	cmp	r4, #6
 800047c:	d1f7      	bne.n	800046e <__gnu_Unwind_RaiseException+0x4e>
 800047e:	4631      	mov	r1, r6
 8000480:	4628      	mov	r0, r5
 8000482:	f7ff ff3f 	bl	8000304 <unwind_phase2>
 8000486:	bf00      	nop

08000488 <__gnu_Unwind_ForcedUnwind>:
 8000488:	b410      	push	{r4}
 800048a:	4614      	mov	r4, r2
 800048c:	6184      	str	r4, [r0, #24]
 800048e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8000490:	60c1      	str	r1, [r0, #12]
 8000492:	2200      	movs	r2, #0
 8000494:	641c      	str	r4, [r3, #64]	; 0x40
 8000496:	4619      	mov	r1, r3
 8000498:	bc10      	pop	{r4}
 800049a:	e753      	b.n	8000344 <unwind_phase2_forced>

0800049c <__gnu_Unwind_Resume>:
 800049c:	b570      	push	{r4, r5, r6, lr}
 800049e:	6943      	ldr	r3, [r0, #20]
 80004a0:	68c6      	ldr	r6, [r0, #12]
 80004a2:	640b      	str	r3, [r1, #64]	; 0x40
 80004a4:	b9ae      	cbnz	r6, 80004d2 <__gnu_Unwind_Resume+0x36>
 80004a6:	460a      	mov	r2, r1
 80004a8:	6903      	ldr	r3, [r0, #16]
 80004aa:	4604      	mov	r4, r0
 80004ac:	460d      	mov	r5, r1
 80004ae:	4601      	mov	r1, r0
 80004b0:	2002      	movs	r0, #2
 80004b2:	4798      	blx	r3
 80004b4:	2807      	cmp	r0, #7
 80004b6:	d005      	beq.n	80004c4 <__gnu_Unwind_Resume+0x28>
 80004b8:	2808      	cmp	r0, #8
 80004ba:	d10f      	bne.n	80004dc <__gnu_Unwind_Resume+0x40>
 80004bc:	4629      	mov	r1, r5
 80004be:	4620      	mov	r0, r4
 80004c0:	f7ff ff20 	bl	8000304 <unwind_phase2>
 80004c4:	4630      	mov	r0, r6
 80004c6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004c8:	f7ff ff1a 	bl	8000300 <_Unwind_DebugHook>
 80004cc:	1d28      	adds	r0, r5, #4
 80004ce:	f000 fb37 	bl	8000b40 <__restore_core_regs>
 80004d2:	2201      	movs	r2, #1
 80004d4:	f7ff ff36 	bl	8000344 <unwind_phase2_forced>
 80004d8:	f004 f9f8 	bl	80048cc <abort>
 80004dc:	f004 f9f6 	bl	80048cc <abort>

080004e0 <__gnu_Unwind_Resume_or_Rethrow>:
 80004e0:	68c2      	ldr	r2, [r0, #12]
 80004e2:	b12a      	cbz	r2, 80004f0 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80004e4:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
 80004e8:	2200      	movs	r2, #0
 80004ea:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
 80004ee:	e729      	b.n	8000344 <unwind_phase2_forced>
 80004f0:	e796      	b.n	8000420 <__gnu_Unwind_RaiseException>
 80004f2:	bf00      	nop

080004f4 <_Unwind_Complete>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <_Unwind_DeleteException>:
 80004f8:	6883      	ldr	r3, [r0, #8]
 80004fa:	4601      	mov	r1, r0
 80004fc:	b10b      	cbz	r3, 8000502 <_Unwind_DeleteException+0xa>
 80004fe:	2001      	movs	r0, #1
 8000500:	4718      	bx	r3
 8000502:	4770      	bx	lr

08000504 <_Unwind_VRS_Get>:
 8000504:	2901      	cmp	r1, #1
 8000506:	d012      	beq.n	800052e <_Unwind_VRS_Get+0x2a>
 8000508:	d809      	bhi.n	800051e <_Unwind_VRS_Get+0x1a>
 800050a:	b973      	cbnz	r3, 800052a <_Unwind_VRS_Get+0x26>
 800050c:	2a0f      	cmp	r2, #15
 800050e:	d80c      	bhi.n	800052a <_Unwind_VRS_Get+0x26>
 8000510:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8000514:	6842      	ldr	r2, [r0, #4]
 8000516:	4618      	mov	r0, r3
 8000518:	9b00      	ldr	r3, [sp, #0]
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	4770      	bx	lr
 800051e:	3903      	subs	r1, #3
 8000520:	2901      	cmp	r1, #1
 8000522:	bf94      	ite	ls
 8000524:	2001      	movls	r0, #1
 8000526:	2002      	movhi	r0, #2
 8000528:	4770      	bx	lr
 800052a:	2002      	movs	r0, #2
 800052c:	4770      	bx	lr
 800052e:	4608      	mov	r0, r1
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <_Unwind_GetGR>:
 8000534:	2300      	movs	r3, #0
 8000536:	b500      	push	{lr}
 8000538:	b085      	sub	sp, #20
 800053a:	460a      	mov	r2, r1
 800053c:	a903      	add	r1, sp, #12
 800053e:	9100      	str	r1, [sp, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	f7ff ffdf 	bl	8000504 <_Unwind_VRS_Get>
 8000546:	9803      	ldr	r0, [sp, #12]
 8000548:	b005      	add	sp, #20
 800054a:	f85d fb04 	ldr.w	pc, [sp], #4
 800054e:	bf00      	nop

08000550 <_Unwind_VRS_Set>:
 8000550:	2901      	cmp	r1, #1
 8000552:	d012      	beq.n	800057a <_Unwind_VRS_Set+0x2a>
 8000554:	d809      	bhi.n	800056a <_Unwind_VRS_Set+0x1a>
 8000556:	b973      	cbnz	r3, 8000576 <_Unwind_VRS_Set+0x26>
 8000558:	2a0f      	cmp	r2, #15
 800055a:	d80c      	bhi.n	8000576 <_Unwind_VRS_Set+0x26>
 800055c:	9900      	ldr	r1, [sp, #0]
 800055e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000562:	6809      	ldr	r1, [r1, #0]
 8000564:	4618      	mov	r0, r3
 8000566:	6051      	str	r1, [r2, #4]
 8000568:	4770      	bx	lr
 800056a:	3903      	subs	r1, #3
 800056c:	2901      	cmp	r1, #1
 800056e:	bf94      	ite	ls
 8000570:	2001      	movls	r0, #1
 8000572:	2002      	movhi	r0, #2
 8000574:	4770      	bx	lr
 8000576:	2002      	movs	r0, #2
 8000578:	4770      	bx	lr
 800057a:	4608      	mov	r0, r1
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <_Unwind_SetGR>:
 8000580:	2300      	movs	r3, #0
 8000582:	b510      	push	{r4, lr}
 8000584:	b084      	sub	sp, #16
 8000586:	ac03      	add	r4, sp, #12
 8000588:	9203      	str	r2, [sp, #12]
 800058a:	9400      	str	r4, [sp, #0]
 800058c:	460a      	mov	r2, r1
 800058e:	4619      	mov	r1, r3
 8000590:	f7ff ffde 	bl	8000550 <_Unwind_VRS_Set>
 8000594:	b004      	add	sp, #16
 8000596:	bd10      	pop	{r4, pc}

08000598 <__gnu_Unwind_Backtrace>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 36ff 	mov.w	r6, #4294967295
 800059e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80005a0:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 80005a4:	6413      	str	r3, [r2, #64]	; 0x40
 80005a6:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 80005aa:	f102 0c04 	add.w	ip, r2, #4
 80005ae:	4605      	mov	r5, r0
 80005b0:	460c      	mov	r4, r1
 80005b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80005b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80005ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80005be:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80005c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80005c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80005ca:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80005ce:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80005d2:	9616      	str	r6, [sp, #88]	; 0x58
 80005d4:	e012      	b.n	80005fc <__gnu_Unwind_Backtrace+0x64>
 80005d6:	210c      	movs	r1, #12
 80005d8:	a816      	add	r0, sp, #88	; 0x58
 80005da:	466a      	mov	r2, sp
 80005dc:	f7ff ffd0 	bl	8000580 <_Unwind_SetGR>
 80005e0:	4621      	mov	r1, r4
 80005e2:	a816      	add	r0, sp, #88	; 0x58
 80005e4:	47a8      	blx	r5
 80005e6:	b978      	cbnz	r0, 8000608 <__gnu_Unwind_Backtrace+0x70>
 80005e8:	4669      	mov	r1, sp
 80005ea:	2008      	movs	r0, #8
 80005ec:	9b04      	ldr	r3, [sp, #16]
 80005ee:	aa16      	add	r2, sp, #88	; 0x58
 80005f0:	4798      	blx	r3
 80005f2:	2805      	cmp	r0, #5
 80005f4:	4606      	mov	r6, r0
 80005f6:	d008      	beq.n	800060a <__gnu_Unwind_Backtrace+0x72>
 80005f8:	2809      	cmp	r0, #9
 80005fa:	d005      	beq.n	8000608 <__gnu_Unwind_Backtrace+0x70>
 80005fc:	4668      	mov	r0, sp
 80005fe:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000600:	f7ff fdfa 	bl	80001f8 <get_eit_entry>
 8000604:	2800      	cmp	r0, #0
 8000606:	d0e6      	beq.n	80005d6 <__gnu_Unwind_Backtrace+0x3e>
 8000608:	2609      	movs	r6, #9
 800060a:	a816      	add	r0, sp, #88	; 0x58
 800060c:	f7ff fe44 	bl	8000298 <restore_non_core_regs>
 8000610:	4630      	mov	r0, r6
 8000612:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8000616:	bd70      	pop	{r4, r5, r6, pc}

08000618 <__gnu_unwind_pr_common>:
 8000618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800061c:	461e      	mov	r6, r3
 800061e:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000620:	b089      	sub	sp, #36	; 0x24
 8000622:	f854 3b04 	ldr.w	r3, [r4], #4
 8000626:	460d      	mov	r5, r1
 8000628:	4617      	mov	r7, r2
 800062a:	f000 0803 	and.w	r8, r0, #3
 800062e:	9406      	str	r4, [sp, #24]
 8000630:	2e00      	cmp	r6, #0
 8000632:	d079      	beq.n	8000728 <__gnu_unwind_pr_common+0x110>
 8000634:	2202      	movs	r2, #2
 8000636:	f88d 201c 	strb.w	r2, [sp, #28]
 800063a:	0c1a      	lsrs	r2, r3, #16
 800063c:	f88d 201d 	strb.w	r2, [sp, #29]
 8000640:	041b      	lsls	r3, r3, #16
 8000642:	b2d2      	uxtb	r2, r2
 8000644:	9305      	str	r3, [sp, #20]
 8000646:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800064a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800064c:	f1b8 0f02 	cmp.w	r8, #2
 8000650:	bf08      	it	eq
 8000652:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000654:	f013 0301 	ands.w	r3, r3, #1
 8000658:	d00c      	beq.n	8000674 <__gnu_unwind_pr_common+0x5c>
 800065a:	4638      	mov	r0, r7
 800065c:	a905      	add	r1, sp, #20
 800065e:	f000 fb71 	bl	8000d44 <__gnu_unwind_execute>
 8000662:	b918      	cbnz	r0, 800066c <__gnu_unwind_pr_common+0x54>
 8000664:	2008      	movs	r0, #8
 8000666:	b009      	add	sp, #36	; 0x24
 8000668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800066c:	2009      	movs	r0, #9
 800066e:	b009      	add	sp, #36	; 0x24
 8000670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000674:	f8d4 a000 	ldr.w	sl, [r4]
 8000678:	f1ba 0f00 	cmp.w	sl, #0
 800067c:	d0ed      	beq.n	800065a <__gnu_unwind_pr_common+0x42>
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	f000 0308 	and.w	r3, r0, #8
 8000684:	9302      	str	r3, [sp, #8]
 8000686:	2e02      	cmp	r6, #2
 8000688:	d04a      	beq.n	8000720 <__gnu_unwind_pr_common+0x108>
 800068a:	f8b4 a000 	ldrh.w	sl, [r4]
 800068e:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000692:	3404      	adds	r4, #4
 8000694:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8000696:	210f      	movs	r1, #15
 8000698:	4638      	mov	r0, r7
 800069a:	f029 0b01 	bic.w	fp, r9, #1
 800069e:	4493      	add	fp, r2
 80006a0:	f7ff ff48 	bl	8000534 <_Unwind_GetGR>
 80006a4:	4583      	cmp	fp, r0
 80006a6:	d839      	bhi.n	800071c <__gnu_unwind_pr_common+0x104>
 80006a8:	f02a 0201 	bic.w	r2, sl, #1
 80006ac:	445a      	add	r2, fp
 80006ae:	4282      	cmp	r2, r0
 80006b0:	bf94      	ite	ls
 80006b2:	2000      	movls	r0, #0
 80006b4:	2001      	movhi	r0, #1
 80006b6:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	f00a 0a01 	and.w	sl, sl, #1
 80006c2:	ea43 030a 	orr.w	r3, r3, sl
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d049      	beq.n	800075e <__gnu_unwind_pr_common+0x146>
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d032      	beq.n	8000734 <__gnu_unwind_pr_common+0x11c>
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d1cc      	bne.n	800066c <__gnu_unwind_pr_common+0x54>
 80006d2:	f1b8 0f00 	cmp.w	r8, #0
 80006d6:	d002      	beq.n	80006de <__gnu_unwind_pr_common+0xc6>
 80006d8:	2800      	cmp	r0, #0
 80006da:	f040 80ce 	bne.w	800087a <__gnu_unwind_pr_common+0x262>
 80006de:	3404      	adds	r4, #4
 80006e0:	f8d4 a000 	ldr.w	sl, [r4]
 80006e4:	f1ba 0f00 	cmp.w	sl, #0
 80006e8:	d1cd      	bne.n	8000686 <__gnu_unwind_pr_common+0x6e>
 80006ea:	4638      	mov	r0, r7
 80006ec:	a905      	add	r1, sp, #20
 80006ee:	f000 fb29 	bl	8000d44 <__gnu_unwind_execute>
 80006f2:	2800      	cmp	r0, #0
 80006f4:	d1ba      	bne.n	800066c <__gnu_unwind_pr_common+0x54>
 80006f6:	9b01      	ldr	r3, [sp, #4]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d0b3      	beq.n	8000664 <__gnu_unwind_pr_common+0x4c>
 80006fc:	210f      	movs	r1, #15
 80006fe:	4638      	mov	r0, r7
 8000700:	f7ff ff18 	bl	8000534 <_Unwind_GetGR>
 8000704:	210e      	movs	r1, #14
 8000706:	4602      	mov	r2, r0
 8000708:	4638      	mov	r0, r7
 800070a:	f7ff ff39 	bl	8000580 <_Unwind_SetGR>
 800070e:	4638      	mov	r0, r7
 8000710:	210f      	movs	r1, #15
 8000712:	4a6a      	ldr	r2, [pc, #424]	; (80008bc <__gnu_unwind_pr_common+0x2a4>)
 8000714:	f7ff ff34 	bl	8000580 <_Unwind_SetGR>
 8000718:	2007      	movs	r0, #7
 800071a:	e7a8      	b.n	800066e <__gnu_unwind_pr_common+0x56>
 800071c:	2000      	movs	r0, #0
 800071e:	e7ca      	b.n	80006b6 <__gnu_unwind_pr_common+0x9e>
 8000720:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000724:	3408      	adds	r4, #8
 8000726:	e7b5      	b.n	8000694 <__gnu_unwind_pr_common+0x7c>
 8000728:	021b      	lsls	r3, r3, #8
 800072a:	9305      	str	r3, [sp, #20]
 800072c:	2303      	movs	r3, #3
 800072e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000732:	e78a      	b.n	800064a <__gnu_unwind_pr_common+0x32>
 8000734:	6823      	ldr	r3, [r4, #0]
 8000736:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800073a:	f1b8 0f00 	cmp.w	r8, #0
 800073e:	d145      	bne.n	80007cc <__gnu_unwind_pr_common+0x1b4>
 8000740:	b128      	cbz	r0, 800074e <__gnu_unwind_pr_common+0x136>
 8000742:	9a02      	ldr	r2, [sp, #8]
 8000744:	2a00      	cmp	r2, #0
 8000746:	d05c      	beq.n	8000802 <__gnu_unwind_pr_common+0x1ea>
 8000748:	f1bb 0f00 	cmp.w	fp, #0
 800074c:	d074      	beq.n	8000838 <__gnu_unwind_pr_common+0x220>
 800074e:	2b00      	cmp	r3, #0
 8000750:	da00      	bge.n	8000754 <__gnu_unwind_pr_common+0x13c>
 8000752:	3404      	adds	r4, #4
 8000754:	f10b 0b01 	add.w	fp, fp, #1
 8000758:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 800075c:	e7c0      	b.n	80006e0 <__gnu_unwind_pr_common+0xc8>
 800075e:	f1b8 0f00 	cmp.w	r8, #0
 8000762:	d119      	bne.n	8000798 <__gnu_unwind_pr_common+0x180>
 8000764:	b1b0      	cbz	r0, 8000794 <__gnu_unwind_pr_common+0x17c>
 8000766:	6863      	ldr	r3, [r4, #4]
 8000768:	6822      	ldr	r2, [r4, #0]
 800076a:	1c99      	adds	r1, r3, #2
 800076c:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000770:	f43f af7c 	beq.w	800066c <__gnu_unwind_pr_common+0x54>
 8000774:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000778:	3301      	adds	r3, #1
 800077a:	9104      	str	r1, [sp, #16]
 800077c:	f000 8091 	beq.w	80008a2 <__gnu_unwind_pr_common+0x28a>
 8000780:	1d20      	adds	r0, r4, #4
 8000782:	f7ff fdb7 	bl	80002f4 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000786:	ab04      	add	r3, sp, #16
 8000788:	4601      	mov	r1, r0
 800078a:	4628      	mov	r0, r5
 800078c:	f3af 8000 	nop.w
 8000790:	2800      	cmp	r0, #0
 8000792:	d15c      	bne.n	800084e <__gnu_unwind_pr_common+0x236>
 8000794:	3408      	adds	r4, #8
 8000796:	e7a3      	b.n	80006e0 <__gnu_unwind_pr_common+0xc8>
 8000798:	210d      	movs	r1, #13
 800079a:	4638      	mov	r0, r7
 800079c:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80007a0:	f7ff fec8 	bl	8000534 <_Unwind_GetGR>
 80007a4:	4581      	cmp	r9, r0
 80007a6:	d1f5      	bne.n	8000794 <__gnu_unwind_pr_common+0x17c>
 80007a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80007aa:	429c      	cmp	r4, r3
 80007ac:	d1f2      	bne.n	8000794 <__gnu_unwind_pr_common+0x17c>
 80007ae:	4620      	mov	r0, r4
 80007b0:	f7ff fcd4 	bl	800015c <selfrel_offset31>
 80007b4:	210f      	movs	r1, #15
 80007b6:	4602      	mov	r2, r0
 80007b8:	4638      	mov	r0, r7
 80007ba:	f7ff fee1 	bl	8000580 <_Unwind_SetGR>
 80007be:	4638      	mov	r0, r7
 80007c0:	462a      	mov	r2, r5
 80007c2:	2100      	movs	r1, #0
 80007c4:	f7ff fedc 	bl	8000580 <_Unwind_SetGR>
 80007c8:	2007      	movs	r0, #7
 80007ca:	e750      	b.n	800066e <__gnu_unwind_pr_common+0x56>
 80007cc:	210d      	movs	r1, #13
 80007ce:	4638      	mov	r0, r7
 80007d0:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80007d4:	f7ff feae 	bl	8000534 <_Unwind_GetGR>
 80007d8:	4581      	cmp	r9, r0
 80007da:	d001      	beq.n	80007e0 <__gnu_unwind_pr_common+0x1c8>
 80007dc:	6823      	ldr	r3, [r4, #0]
 80007de:	e7b6      	b.n	800074e <__gnu_unwind_pr_common+0x136>
 80007e0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80007e2:	429c      	cmp	r4, r3
 80007e4:	d1fa      	bne.n	80007dc <__gnu_unwind_pr_common+0x1c4>
 80007e6:	2304      	movs	r3, #4
 80007e8:	2200      	movs	r2, #0
 80007ea:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 80007ee:	18e3      	adds	r3, r4, r3
 80007f0:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 80007f4:	636b      	str	r3, [r5, #52]	; 0x34
 80007f6:	6823      	ldr	r3, [r4, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	db5a      	blt.n	80008b2 <__gnu_unwind_pr_common+0x29a>
 80007fc:	2301      	movs	r3, #1
 80007fe:	9301      	str	r3, [sp, #4]
 8000800:	e7a8      	b.n	8000754 <__gnu_unwind_pr_common+0x13c>
 8000802:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000806:	f8cd 800c 	str.w	r8, [sp, #12]
 800080a:	4691      	mov	r9, r2
 800080c:	46b0      	mov	r8, r6
 800080e:	f104 0a04 	add.w	sl, r4, #4
 8000812:	461e      	mov	r6, r3
 8000814:	e00e      	b.n	8000834 <__gnu_unwind_pr_common+0x21c>
 8000816:	4650      	mov	r0, sl
 8000818:	9604      	str	r6, [sp, #16]
 800081a:	f7ff fd6b 	bl	80002f4 <_Unwind_decode_typeinfo_ptr.constprop.0>
 800081e:	2200      	movs	r2, #0
 8000820:	4601      	mov	r1, r0
 8000822:	ab04      	add	r3, sp, #16
 8000824:	4628      	mov	r0, r5
 8000826:	f109 0901 	add.w	r9, r9, #1
 800082a:	f10a 0a04 	add.w	sl, sl, #4
 800082e:	f3af 8000 	nop.w
 8000832:	b9e8      	cbnz	r0, 8000870 <__gnu_unwind_pr_common+0x258>
 8000834:	45d9      	cmp	r9, fp
 8000836:	d1ee      	bne.n	8000816 <__gnu_unwind_pr_common+0x1fe>
 8000838:	210d      	movs	r1, #13
 800083a:	4638      	mov	r0, r7
 800083c:	f7ff fe7a 	bl	8000534 <_Unwind_GetGR>
 8000840:	4603      	mov	r3, r0
 8000842:	9a04      	ldr	r2, [sp, #16]
 8000844:	2006      	movs	r0, #6
 8000846:	e9c5 2409 	strd	r2, r4, [r5, #36]	; 0x24
 800084a:	622b      	str	r3, [r5, #32]
 800084c:	e70f      	b.n	800066e <__gnu_unwind_pr_common+0x56>
 800084e:	4681      	mov	r9, r0
 8000850:	210d      	movs	r1, #13
 8000852:	4638      	mov	r0, r7
 8000854:	f7ff fe6e 	bl	8000534 <_Unwind_GetGR>
 8000858:	f1b9 0f02 	cmp.w	r9, #2
 800085c:	6228      	str	r0, [r5, #32]
 800085e:	d125      	bne.n	80008ac <__gnu_unwind_pr_common+0x294>
 8000860:	462b      	mov	r3, r5
 8000862:	9a04      	ldr	r2, [sp, #16]
 8000864:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000868:	626b      	str	r3, [r5, #36]	; 0x24
 800086a:	2006      	movs	r0, #6
 800086c:	62ac      	str	r4, [r5, #40]	; 0x28
 800086e:	e6fe      	b.n	800066e <__gnu_unwind_pr_common+0x56>
 8000870:	4646      	mov	r6, r8
 8000872:	6823      	ldr	r3, [r4, #0]
 8000874:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000878:	e769      	b.n	800074e <__gnu_unwind_pr_common+0x136>
 800087a:	4620      	mov	r0, r4
 800087c:	f7ff fc6e 	bl	800015c <selfrel_offset31>
 8000880:	4602      	mov	r2, r0
 8000882:	3404      	adds	r4, #4
 8000884:	63ac      	str	r4, [r5, #56]	; 0x38
 8000886:	4628      	mov	r0, r5
 8000888:	4614      	mov	r4, r2
 800088a:	f3af 8000 	nop.w
 800088e:	2800      	cmp	r0, #0
 8000890:	f43f aeec 	beq.w	800066c <__gnu_unwind_pr_common+0x54>
 8000894:	4638      	mov	r0, r7
 8000896:	4622      	mov	r2, r4
 8000898:	210f      	movs	r1, #15
 800089a:	f7ff fe71 	bl	8000580 <_Unwind_SetGR>
 800089e:	2007      	movs	r0, #7
 80008a0:	e6e5      	b.n	800066e <__gnu_unwind_pr_common+0x56>
 80008a2:	210d      	movs	r1, #13
 80008a4:	4638      	mov	r0, r7
 80008a6:	f7ff fe45 	bl	8000534 <_Unwind_GetGR>
 80008aa:	6228      	str	r0, [r5, #32]
 80008ac:	9b04      	ldr	r3, [sp, #16]
 80008ae:	626b      	str	r3, [r5, #36]	; 0x24
 80008b0:	e7db      	b.n	800086a <__gnu_unwind_pr_common+0x252>
 80008b2:	f10b 0001 	add.w	r0, fp, #1
 80008b6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80008ba:	e779      	b.n	80007b0 <__gnu_unwind_pr_common+0x198>
 80008bc:	00000000 	.word	0x00000000

080008c0 <__aeabi_unwind_cpp_pr0>:
 80008c0:	2300      	movs	r3, #0
 80008c2:	e6a9      	b.n	8000618 <__gnu_unwind_pr_common>

080008c4 <__aeabi_unwind_cpp_pr1>:
 80008c4:	2301      	movs	r3, #1
 80008c6:	e6a7      	b.n	8000618 <__gnu_unwind_pr_common>

080008c8 <__aeabi_unwind_cpp_pr2>:
 80008c8:	2302      	movs	r3, #2
 80008ca:	e6a5      	b.n	8000618 <__gnu_unwind_pr_common>

080008cc <_Unwind_VRS_Pop>:
 80008cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80008d0:	4606      	mov	r6, r0
 80008d2:	4615      	mov	r5, r2
 80008d4:	461c      	mov	r4, r3
 80008d6:	b0c3      	sub	sp, #268	; 0x10c
 80008d8:	2904      	cmp	r1, #4
 80008da:	f200 80b8 	bhi.w	8000a4e <_Unwind_VRS_Pop+0x182>
 80008de:	e8df f001 	tbb	[pc, r1]
 80008e2:	569c      	.short	0x569c
 80008e4:	2db6      	.short	0x2db6
 80008e6:	03          	.byte	0x03
 80008e7:	00          	.byte	0x00
 80008e8:	2c00      	cmp	r4, #0
 80008ea:	f040 80b0 	bne.w	8000a4e <_Unwind_VRS_Pop+0x182>
 80008ee:	2a10      	cmp	r2, #16
 80008f0:	f200 80ad 	bhi.w	8000a4e <_Unwind_VRS_Pop+0x182>
 80008f4:	6803      	ldr	r3, [r0, #0]
 80008f6:	06d8      	lsls	r0, r3, #27
 80008f8:	f100 80f1 	bmi.w	8000ade <_Unwind_VRS_Pop+0x212>
 80008fc:	af20      	add	r7, sp, #128	; 0x80
 80008fe:	4638      	mov	r0, r7
 8000900:	f000 f990 	bl	8000c24 <__gnu_Unwind_Save_WMMXC>
 8000904:	2401      	movs	r4, #1
 8000906:	4638      	mov	r0, r7
 8000908:	2300      	movs	r3, #0
 800090a:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 800090c:	fa04 f203 	lsl.w	r2, r4, r3
 8000910:	422a      	tst	r2, r5
 8000912:	f103 0301 	add.w	r3, r3, #1
 8000916:	d005      	beq.n	8000924 <_Unwind_VRS_Pop+0x58>
 8000918:	460a      	mov	r2, r1
 800091a:	f852 cb04 	ldr.w	ip, [r2], #4
 800091e:	4611      	mov	r1, r2
 8000920:	f8c0 c000 	str.w	ip, [r0]
 8000924:	2b04      	cmp	r3, #4
 8000926:	f100 0004 	add.w	r0, r0, #4
 800092a:	d1ef      	bne.n	800090c <_Unwind_VRS_Pop+0x40>
 800092c:	4638      	mov	r0, r7
 800092e:	63b1      	str	r1, [r6, #56]	; 0x38
 8000930:	f000 f96e 	bl	8000c10 <__gnu_Unwind_Restore_WMMXC>
 8000934:	2000      	movs	r0, #0
 8000936:	b043      	add	sp, #268	; 0x10c
 8000938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800093c:	2c03      	cmp	r4, #3
 800093e:	f040 8086 	bne.w	8000a4e <_Unwind_VRS_Pop+0x182>
 8000942:	b294      	uxth	r4, r2
 8000944:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000948:	2b10      	cmp	r3, #16
 800094a:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800094e:	d87e      	bhi.n	8000a4e <_Unwind_VRS_Pop+0x182>
 8000950:	6803      	ldr	r3, [r0, #0]
 8000952:	071f      	lsls	r7, r3, #28
 8000954:	f100 80cb 	bmi.w	8000aee <_Unwind_VRS_Pop+0x222>
 8000958:	af20      	add	r7, sp, #128	; 0x80
 800095a:	4638      	mov	r0, r7
 800095c:	f000 f936 	bl	8000bcc <__gnu_Unwind_Save_WMMXD>
 8000960:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8000962:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000966:	b154      	cbz	r4, 800097e <_Unwind_VRS_Pop+0xb2>
 8000968:	460b      	mov	r3, r1
 800096a:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800096e:	1ad0      	subs	r0, r2, r3
 8000970:	00e4      	lsls	r4, r4, #3
 8000972:	581d      	ldr	r5, [r3, r0]
 8000974:	f843 5b04 	str.w	r5, [r3], #4
 8000978:	428b      	cmp	r3, r1
 800097a:	d1fa      	bne.n	8000972 <_Unwind_VRS_Pop+0xa6>
 800097c:	4422      	add	r2, r4
 800097e:	4638      	mov	r0, r7
 8000980:	63b2      	str	r2, [r6, #56]	; 0x38
 8000982:	f000 f901 	bl	8000b88 <__gnu_Unwind_Restore_WMMXD>
 8000986:	2000      	movs	r0, #0
 8000988:	b043      	add	sp, #268	; 0x10c
 800098a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800098e:	2c01      	cmp	r4, #1
 8000990:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000994:	b295      	uxth	r5, r2
 8000996:	d056      	beq.n	8000a46 <_Unwind_VRS_Pop+0x17a>
 8000998:	2c05      	cmp	r4, #5
 800099a:	d158      	bne.n	8000a4e <_Unwind_VRS_Pop+0x182>
 800099c:	eb08 0905 	add.w	r9, r8, r5
 80009a0:	f1b9 0f20 	cmp.w	r9, #32
 80009a4:	d853      	bhi.n	8000a4e <_Unwind_VRS_Pop+0x182>
 80009a6:	f1b8 0f0f 	cmp.w	r8, #15
 80009aa:	d973      	bls.n	8000a94 <_Unwind_VRS_Pop+0x1c8>
 80009ac:	46a9      	mov	r9, r5
 80009ae:	2d00      	cmp	r5, #0
 80009b0:	f040 8084 	bne.w	8000abc <_Unwind_VRS_Pop+0x1f0>
 80009b4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80009b6:	b365      	cbz	r5, 8000a12 <_Unwind_VRS_Pop+0x146>
 80009b8:	af20      	add	r7, sp, #128	; 0x80
 80009ba:	f04f 0900 	mov.w	r9, #0
 80009be:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 80009c2:	3f04      	subs	r7, #4
 80009c4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80009c8:	f853 1b04 	ldr.w	r1, [r3], #4
 80009cc:	42ab      	cmp	r3, r5
 80009ce:	f847 1f04 	str.w	r1, [r7, #4]!
 80009d2:	d1f9      	bne.n	80009c8 <_Unwind_VRS_Pop+0xfc>
 80009d4:	f1b9 0f00 	cmp.w	r9, #0
 80009d8:	d00f      	beq.n	80009fa <_Unwind_VRS_Pop+0x12e>
 80009da:	466f      	mov	r7, sp
 80009dc:	4641      	mov	r1, r8
 80009de:	2910      	cmp	r1, #16
 80009e0:	bf38      	it	cc
 80009e2:	2110      	movcc	r1, #16
 80009e4:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80009e8:	3984      	subs	r1, #132	; 0x84
 80009ea:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 80009ee:	f853 0b04 	ldr.w	r0, [r3], #4
 80009f2:	42ab      	cmp	r3, r5
 80009f4:	f841 0f04 	str.w	r0, [r1, #4]!
 80009f8:	d1f9      	bne.n	80009ee <_Unwind_VRS_Pop+0x122>
 80009fa:	2c01      	cmp	r4, #1
 80009fc:	d07f      	beq.n	8000afe <_Unwind_VRS_Pop+0x232>
 80009fe:	f1b8 0f0f 	cmp.w	r8, #15
 8000a02:	63b5      	str	r5, [r6, #56]	; 0x38
 8000a04:	d942      	bls.n	8000a8c <_Unwind_VRS_Pop+0x1c0>
 8000a06:	f1b9 0f00 	cmp.w	r9, #0
 8000a0a:	d002      	beq.n	8000a12 <_Unwind_VRS_Pop+0x146>
 8000a0c:	4668      	mov	r0, sp
 8000a0e:	f000 f8b3 	bl	8000b78 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000a12:	2000      	movs	r0, #0
 8000a14:	b043      	add	sp, #268	; 0x10c
 8000a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a1a:	b9c4      	cbnz	r4, 8000a4e <_Unwind_VRS_Pop+0x182>
 8000a1c:	4623      	mov	r3, r4
 8000a1e:	2401      	movs	r4, #1
 8000a20:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000a22:	1d37      	adds	r7, r6, #4
 8000a24:	b2a8      	uxth	r0, r5
 8000a26:	fa04 f103 	lsl.w	r1, r4, r3
 8000a2a:	4201      	tst	r1, r0
 8000a2c:	bf1c      	itt	ne
 8000a2e:	f852 1b04 	ldrne.w	r1, [r2], #4
 8000a32:	f847 1023 	strne.w	r1, [r7, r3, lsl #2]
 8000a36:	3301      	adds	r3, #1
 8000a38:	2b10      	cmp	r3, #16
 8000a3a:	d1f4      	bne.n	8000a26 <_Unwind_VRS_Pop+0x15a>
 8000a3c:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8000a40:	d1e7      	bne.n	8000a12 <_Unwind_VRS_Pop+0x146>
 8000a42:	63b2      	str	r2, [r6, #56]	; 0x38
 8000a44:	e004      	b.n	8000a50 <_Unwind_VRS_Pop+0x184>
 8000a46:	eb08 0305 	add.w	r3, r8, r5
 8000a4a:	2b10      	cmp	r3, #16
 8000a4c:	d903      	bls.n	8000a56 <_Unwind_VRS_Pop+0x18a>
 8000a4e:	2002      	movs	r0, #2
 8000a50:	b043      	add	sp, #268	; 0x10c
 8000a52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a56:	f1b8 0f0f 	cmp.w	r8, #15
 8000a5a:	d8f8      	bhi.n	8000a4e <_Unwind_VRS_Pop+0x182>
 8000a5c:	6833      	ldr	r3, [r6, #0]
 8000a5e:	07da      	lsls	r2, r3, #31
 8000a60:	d506      	bpl.n	8000a70 <_Unwind_VRS_Pop+0x1a4>
 8000a62:	4630      	mov	r0, r6
 8000a64:	f023 0303 	bic.w	r3, r3, #3
 8000a68:	f840 3b48 	str.w	r3, [r0], #72
 8000a6c:	f000 f878 	bl	8000b60 <__gnu_Unwind_Save_VFP>
 8000a70:	af20      	add	r7, sp, #128	; 0x80
 8000a72:	4638      	mov	r0, r7
 8000a74:	f000 f874 	bl	8000b60 <__gnu_Unwind_Save_VFP>
 8000a78:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000a7a:	2d00      	cmp	r5, #0
 8000a7c:	d19d      	bne.n	80009ba <_Unwind_VRS_Pop+0xee>
 8000a7e:	461d      	mov	r5, r3
 8000a80:	3504      	adds	r5, #4
 8000a82:	4638      	mov	r0, r7
 8000a84:	63b5      	str	r5, [r6, #56]	; 0x38
 8000a86:	f000 f867 	bl	8000b58 <__gnu_Unwind_Restore_VFP>
 8000a8a:	e7c2      	b.n	8000a12 <_Unwind_VRS_Pop+0x146>
 8000a8c:	a820      	add	r0, sp, #128	; 0x80
 8000a8e:	f000 f86b 	bl	8000b68 <__gnu_Unwind_Restore_VFP_D>
 8000a92:	e7b8      	b.n	8000a06 <_Unwind_VRS_Pop+0x13a>
 8000a94:	f1b9 0f10 	cmp.w	r9, #16
 8000a98:	d93f      	bls.n	8000b1a <_Unwind_VRS_Pop+0x24e>
 8000a9a:	f1a9 0910 	sub.w	r9, r9, #16
 8000a9e:	6833      	ldr	r3, [r6, #0]
 8000aa0:	07d9      	lsls	r1, r3, #31
 8000aa2:	d508      	bpl.n	8000ab6 <_Unwind_VRS_Pop+0x1ea>
 8000aa4:	4630      	mov	r0, r6
 8000aa6:	f023 0301 	bic.w	r3, r3, #1
 8000aaa:	f043 0302 	orr.w	r3, r3, #2
 8000aae:	f840 3b48 	str.w	r3, [r0], #72
 8000ab2:	f000 f85d 	bl	8000b70 <__gnu_Unwind_Save_VFP_D>
 8000ab6:	f1b9 0f00 	cmp.w	r9, #0
 8000aba:	d031      	beq.n	8000b20 <_Unwind_VRS_Pop+0x254>
 8000abc:	6833      	ldr	r3, [r6, #0]
 8000abe:	075a      	lsls	r2, r3, #29
 8000ac0:	d41f      	bmi.n	8000b02 <_Unwind_VRS_Pop+0x236>
 8000ac2:	f1b8 0f0f 	cmp.w	r8, #15
 8000ac6:	d924      	bls.n	8000b12 <_Unwind_VRS_Pop+0x246>
 8000ac8:	466f      	mov	r7, sp
 8000aca:	f1c8 0510 	rsb	r5, r8, #16
 8000ace:	4638      	mov	r0, r7
 8000ad0:	f000 f856 	bl	8000b80 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000ad4:	2d00      	cmp	r5, #0
 8000ad6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000ad8:	dd80      	ble.n	80009dc <_Unwind_VRS_Pop+0x110>
 8000ada:	af20      	add	r7, sp, #128	; 0x80
 8000adc:	e76f      	b.n	80009be <_Unwind_VRS_Pop+0xf2>
 8000ade:	f023 0310 	bic.w	r3, r3, #16
 8000ae2:	6033      	str	r3, [r6, #0]
 8000ae4:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000ae8:	f000 f89c 	bl	8000c24 <__gnu_Unwind_Save_WMMXC>
 8000aec:	e706      	b.n	80008fc <_Unwind_VRS_Pop+0x30>
 8000aee:	f023 0308 	bic.w	r3, r3, #8
 8000af2:	6003      	str	r3, [r0, #0]
 8000af4:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000af8:	f000 f868 	bl	8000bcc <__gnu_Unwind_Save_WMMXD>
 8000afc:	e72c      	b.n	8000958 <_Unwind_VRS_Pop+0x8c>
 8000afe:	af20      	add	r7, sp, #128	; 0x80
 8000b00:	e7be      	b.n	8000a80 <_Unwind_VRS_Pop+0x1b4>
 8000b02:	4630      	mov	r0, r6
 8000b04:	f023 0304 	bic.w	r3, r3, #4
 8000b08:	f840 3bd0 	str.w	r3, [r0], #208
 8000b0c:	f000 f838 	bl	8000b80 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b10:	e7d7      	b.n	8000ac2 <_Unwind_VRS_Pop+0x1f6>
 8000b12:	a820      	add	r0, sp, #128	; 0x80
 8000b14:	f000 f82c 	bl	8000b70 <__gnu_Unwind_Save_VFP_D>
 8000b18:	e7d6      	b.n	8000ac8 <_Unwind_VRS_Pop+0x1fc>
 8000b1a:	f04f 0900 	mov.w	r9, #0
 8000b1e:	e7be      	b.n	8000a9e <_Unwind_VRS_Pop+0x1d2>
 8000b20:	f1b8 0f0f 	cmp.w	r8, #15
 8000b24:	f63f af46 	bhi.w	80009b4 <_Unwind_VRS_Pop+0xe8>
 8000b28:	af20      	add	r7, sp, #128	; 0x80
 8000b2a:	4638      	mov	r0, r7
 8000b2c:	f000 f820 	bl	8000b70 <__gnu_Unwind_Save_VFP_D>
 8000b30:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f47f af41 	bne.w	80009ba <_Unwind_VRS_Pop+0xee>
 8000b38:	4638      	mov	r0, r7
 8000b3a:	f000 f815 	bl	8000b68 <__gnu_Unwind_Restore_VFP_D>
 8000b3e:	e768      	b.n	8000a12 <_Unwind_VRS_Pop+0x146>

08000b40 <__restore_core_regs>:
 8000b40:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000b44:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000b48:	469c      	mov	ip, r3
 8000b4a:	46a6      	mov	lr, r4
 8000b4c:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000b50:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000b54:	46e5      	mov	sp, ip
 8000b56:	bd00      	pop	{pc}

08000b58 <__gnu_Unwind_Restore_VFP>:
 8000b58:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__gnu_Unwind_Save_VFP>:
 8000b60:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__gnu_Unwind_Restore_VFP_D>:
 8000b68:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <__gnu_Unwind_Save_VFP_D>:
 8000b70:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000b78:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000b80:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__gnu_Unwind_Restore_WMMXD>:
 8000b88:	ecf0 0102 	ldfe	f0, [r0], #8
 8000b8c:	ecf0 1102 	ldfe	f1, [r0], #8
 8000b90:	ecf0 2102 	ldfe	f2, [r0], #8
 8000b94:	ecf0 3102 	ldfe	f3, [r0], #8
 8000b98:	ecf0 4102 	ldfe	f4, [r0], #8
 8000b9c:	ecf0 5102 	ldfe	f5, [r0], #8
 8000ba0:	ecf0 6102 	ldfe	f6, [r0], #8
 8000ba4:	ecf0 7102 	ldfe	f7, [r0], #8
 8000ba8:	ecf0 8102 	ldfp	f0, [r0], #8
 8000bac:	ecf0 9102 	ldfp	f1, [r0], #8
 8000bb0:	ecf0 a102 	ldfp	f2, [r0], #8
 8000bb4:	ecf0 b102 	ldfp	f3, [r0], #8
 8000bb8:	ecf0 c102 	ldfp	f4, [r0], #8
 8000bbc:	ecf0 d102 	ldfp	f5, [r0], #8
 8000bc0:	ecf0 e102 	ldfp	f6, [r0], #8
 8000bc4:	ecf0 f102 	ldfp	f7, [r0], #8
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__gnu_Unwind_Save_WMMXD>:
 8000bcc:	ece0 0102 	stfe	f0, [r0], #8
 8000bd0:	ece0 1102 	stfe	f1, [r0], #8
 8000bd4:	ece0 2102 	stfe	f2, [r0], #8
 8000bd8:	ece0 3102 	stfe	f3, [r0], #8
 8000bdc:	ece0 4102 	stfe	f4, [r0], #8
 8000be0:	ece0 5102 	stfe	f5, [r0], #8
 8000be4:	ece0 6102 	stfe	f6, [r0], #8
 8000be8:	ece0 7102 	stfe	f7, [r0], #8
 8000bec:	ece0 8102 	stfp	f0, [r0], #8
 8000bf0:	ece0 9102 	stfp	f1, [r0], #8
 8000bf4:	ece0 a102 	stfp	f2, [r0], #8
 8000bf8:	ece0 b102 	stfp	f3, [r0], #8
 8000bfc:	ece0 c102 	stfp	f4, [r0], #8
 8000c00:	ece0 d102 	stfp	f5, [r0], #8
 8000c04:	ece0 e102 	stfp	f6, [r0], #8
 8000c08:	ece0 f102 	stfp	f7, [r0], #8
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__gnu_Unwind_Restore_WMMXC>:
 8000c10:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000c14:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000c18:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000c1c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop

08000c24 <__gnu_Unwind_Save_WMMXC>:
 8000c24:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000c28:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000c2c:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000c30:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <_Unwind_RaiseException>:
 8000c38:	46ec      	mov	ip, sp
 8000c3a:	b500      	push	{lr}
 8000c3c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c40:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c4c:	a901      	add	r1, sp, #4
 8000c4e:	f7ff fbe7 	bl	8000420 <__gnu_Unwind_RaiseException>
 8000c52:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c56:	b012      	add	sp, #72	; 0x48
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <_Unwind_Resume>:
 8000c5c:	46ec      	mov	ip, sp
 8000c5e:	b500      	push	{lr}
 8000c60:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c64:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c70:	a901      	add	r1, sp, #4
 8000c72:	f7ff fc13 	bl	800049c <__gnu_Unwind_Resume>
 8000c76:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c7a:	b012      	add	sp, #72	; 0x48
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <_Unwind_Resume_or_Rethrow>:
 8000c80:	46ec      	mov	ip, sp
 8000c82:	b500      	push	{lr}
 8000c84:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c88:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c94:	a901      	add	r1, sp, #4
 8000c96:	f7ff fc23 	bl	80004e0 <__gnu_Unwind_Resume_or_Rethrow>
 8000c9a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c9e:	b012      	add	sp, #72	; 0x48
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <_Unwind_ForcedUnwind>:
 8000ca4:	46ec      	mov	ip, sp
 8000ca6:	b500      	push	{lr}
 8000ca8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cb8:	ab01      	add	r3, sp, #4
 8000cba:	f7ff fbe5 	bl	8000488 <__gnu_Unwind_ForcedUnwind>
 8000cbe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cc2:	b012      	add	sp, #72	; 0x48
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <_Unwind_Backtrace>:
 8000cc8:	46ec      	mov	ip, sp
 8000cca:	b500      	push	{lr}
 8000ccc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cd0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cdc:	aa01      	add	r2, sp, #4
 8000cde:	f7ff fc5b 	bl	8000598 <__gnu_Unwind_Backtrace>
 8000ce2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000ce6:	b012      	add	sp, #72	; 0x48
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <next_unwind_byte>:
 8000cec:	7a02      	ldrb	r2, [r0, #8]
 8000cee:	4603      	mov	r3, r0
 8000cf0:	b97a      	cbnz	r2, 8000d12 <next_unwind_byte+0x26>
 8000cf2:	7a42      	ldrb	r2, [r0, #9]
 8000cf4:	b1a2      	cbz	r2, 8000d20 <next_unwind_byte+0x34>
 8000cf6:	f04f 0c03 	mov.w	ip, #3
 8000cfa:	6841      	ldr	r1, [r0, #4]
 8000cfc:	3a01      	subs	r2, #1
 8000cfe:	7242      	strb	r2, [r0, #9]
 8000d00:	6808      	ldr	r0, [r1, #0]
 8000d02:	1d0a      	adds	r2, r1, #4
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	0202      	lsls	r2, r0, #8
 8000d08:	f883 c008 	strb.w	ip, [r3, #8]
 8000d0c:	0e00      	lsrs	r0, r0, #24
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	4770      	bx	lr
 8000d12:	6800      	ldr	r0, [r0, #0]
 8000d14:	3a01      	subs	r2, #1
 8000d16:	721a      	strb	r2, [r3, #8]
 8000d18:	0202      	lsls	r2, r0, #8
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	0e00      	lsrs	r0, r0, #24
 8000d1e:	4770      	bx	lr
 8000d20:	20b0      	movs	r0, #176	; 0xb0
 8000d22:	4770      	bx	lr

08000d24 <_Unwind_GetGR.constprop.0>:
 8000d24:	2300      	movs	r3, #0
 8000d26:	b500      	push	{lr}
 8000d28:	b085      	sub	sp, #20
 8000d2a:	a903      	add	r1, sp, #12
 8000d2c:	9100      	str	r1, [sp, #0]
 8000d2e:	220c      	movs	r2, #12
 8000d30:	4619      	mov	r1, r3
 8000d32:	f7ff fbe7 	bl	8000504 <_Unwind_VRS_Get>
 8000d36:	9803      	ldr	r0, [sp, #12]
 8000d38:	b005      	add	sp, #20
 8000d3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d3e:	bf00      	nop

08000d40 <unwind_UCB_from_context>:
 8000d40:	e7f0      	b.n	8000d24 <_Unwind_GetGR.constprop.0>
 8000d42:	bf00      	nop

08000d44 <__gnu_unwind_execute>:
 8000d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d48:	f04f 0800 	mov.w	r8, #0
 8000d4c:	4605      	mov	r5, r0
 8000d4e:	460e      	mov	r6, r1
 8000d50:	b085      	sub	sp, #20
 8000d52:	4630      	mov	r0, r6
 8000d54:	f7ff ffca 	bl	8000cec <next_unwind_byte>
 8000d58:	28b0      	cmp	r0, #176	; 0xb0
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f000 80ba 	beq.w	8000ed4 <__gnu_unwind_execute+0x190>
 8000d60:	0607      	lsls	r7, r0, #24
 8000d62:	d520      	bpl.n	8000da6 <__gnu_unwind_execute+0x62>
 8000d64:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000d68:	2b80      	cmp	r3, #128	; 0x80
 8000d6a:	d04d      	beq.n	8000e08 <__gnu_unwind_execute+0xc4>
 8000d6c:	2b90      	cmp	r3, #144	; 0x90
 8000d6e:	d036      	beq.n	8000dde <__gnu_unwind_execute+0x9a>
 8000d70:	2ba0      	cmp	r3, #160	; 0xa0
 8000d72:	d060      	beq.n	8000e36 <__gnu_unwind_execute+0xf2>
 8000d74:	2bb0      	cmp	r3, #176	; 0xb0
 8000d76:	d073      	beq.n	8000e60 <__gnu_unwind_execute+0x11c>
 8000d78:	2bc0      	cmp	r3, #192	; 0xc0
 8000d7a:	f000 808a 	beq.w	8000e92 <__gnu_unwind_execute+0x14e>
 8000d7e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000d82:	2bd0      	cmp	r3, #208	; 0xd0
 8000d84:	d10b      	bne.n	8000d9e <__gnu_unwind_execute+0x5a>
 8000d86:	f000 0207 	and.w	r2, r0, #7
 8000d8a:	3201      	adds	r2, #1
 8000d8c:	2305      	movs	r3, #5
 8000d8e:	2101      	movs	r1, #1
 8000d90:	4628      	mov	r0, r5
 8000d92:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000d96:	f7ff fd99 	bl	80008cc <_Unwind_VRS_Pop>
 8000d9a:	2800      	cmp	r0, #0
 8000d9c:	d0d9      	beq.n	8000d52 <__gnu_unwind_execute+0xe>
 8000d9e:	2009      	movs	r0, #9
 8000da0:	b005      	add	sp, #20
 8000da2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000da6:	0083      	lsls	r3, r0, #2
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	1d1f      	adds	r7, r3, #4
 8000dac:	2300      	movs	r3, #0
 8000dae:	f10d 090c 	add.w	r9, sp, #12
 8000db2:	4619      	mov	r1, r3
 8000db4:	220d      	movs	r2, #13
 8000db6:	4628      	mov	r0, r5
 8000db8:	f8cd 9000 	str.w	r9, [sp]
 8000dbc:	f7ff fba2 	bl	8000504 <_Unwind_VRS_Get>
 8000dc0:	9b03      	ldr	r3, [sp, #12]
 8000dc2:	0660      	lsls	r0, r4, #25
 8000dc4:	bf4c      	ite	mi
 8000dc6:	1bdf      	submi	r7, r3, r7
 8000dc8:	18ff      	addpl	r7, r7, r3
 8000dca:	2300      	movs	r3, #0
 8000dcc:	220d      	movs	r2, #13
 8000dce:	4628      	mov	r0, r5
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f8cd 9000 	str.w	r9, [sp]
 8000dd6:	9703      	str	r7, [sp, #12]
 8000dd8:	f7ff fbba 	bl	8000550 <_Unwind_VRS_Set>
 8000ddc:	e7b9      	b.n	8000d52 <__gnu_unwind_execute+0xe>
 8000dde:	f000 030d 	and.w	r3, r0, #13
 8000de2:	2b0d      	cmp	r3, #13
 8000de4:	d0db      	beq.n	8000d9e <__gnu_unwind_execute+0x5a>
 8000de6:	2300      	movs	r3, #0
 8000de8:	af03      	add	r7, sp, #12
 8000dea:	4619      	mov	r1, r3
 8000dec:	f000 020f 	and.w	r2, r0, #15
 8000df0:	9700      	str	r7, [sp, #0]
 8000df2:	4628      	mov	r0, r5
 8000df4:	f7ff fb86 	bl	8000504 <_Unwind_VRS_Get>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	220d      	movs	r2, #13
 8000dfc:	4628      	mov	r0, r5
 8000dfe:	4619      	mov	r1, r3
 8000e00:	9700      	str	r7, [sp, #0]
 8000e02:	f7ff fba5 	bl	8000550 <_Unwind_VRS_Set>
 8000e06:	e7a4      	b.n	8000d52 <__gnu_unwind_execute+0xe>
 8000e08:	4630      	mov	r0, r6
 8000e0a:	f7ff ff6f 	bl	8000cec <next_unwind_byte>
 8000e0e:	0224      	lsls	r4, r4, #8
 8000e10:	4320      	orrs	r0, r4
 8000e12:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000e16:	d0c2      	beq.n	8000d9e <__gnu_unwind_execute+0x5a>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	0104      	lsls	r4, r0, #4
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4628      	mov	r0, r5
 8000e20:	b2a2      	uxth	r2, r4
 8000e22:	f7ff fd53 	bl	80008cc <_Unwind_VRS_Pop>
 8000e26:	2800      	cmp	r0, #0
 8000e28:	d1b9      	bne.n	8000d9e <__gnu_unwind_execute+0x5a>
 8000e2a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000e2e:	bf18      	it	ne
 8000e30:	f04f 0801 	movne.w	r8, #1
 8000e34:	e78d      	b.n	8000d52 <__gnu_unwind_execute+0xe>
 8000e36:	43c3      	mvns	r3, r0
 8000e38:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	411a      	asrs	r2, r3
 8000e42:	2300      	movs	r3, #0
 8000e44:	0701      	lsls	r1, r0, #28
 8000e46:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000e4a:	bf48      	it	mi
 8000e4c:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000e50:	4628      	mov	r0, r5
 8000e52:	4619      	mov	r1, r3
 8000e54:	f7ff fd3a 	bl	80008cc <_Unwind_VRS_Pop>
 8000e58:	2800      	cmp	r0, #0
 8000e5a:	f43f af7a 	beq.w	8000d52 <__gnu_unwind_execute+0xe>
 8000e5e:	e79e      	b.n	8000d9e <__gnu_unwind_execute+0x5a>
 8000e60:	28b1      	cmp	r0, #177	; 0xb1
 8000e62:	d03c      	beq.n	8000ede <__gnu_unwind_execute+0x19a>
 8000e64:	28b2      	cmp	r0, #178	; 0xb2
 8000e66:	f000 80b0 	beq.w	8000fca <__gnu_unwind_execute+0x286>
 8000e6a:	28b3      	cmp	r0, #179	; 0xb3
 8000e6c:	d04a      	beq.n	8000f04 <__gnu_unwind_execute+0x1c0>
 8000e6e:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000e72:	2bb4      	cmp	r3, #180	; 0xb4
 8000e74:	d093      	beq.n	8000d9e <__gnu_unwind_execute+0x5a>
 8000e76:	2301      	movs	r3, #1
 8000e78:	f000 0207 	and.w	r2, r0, #7
 8000e7c:	441a      	add	r2, r3
 8000e7e:	4628      	mov	r0, r5
 8000e80:	4619      	mov	r1, r3
 8000e82:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e86:	f7ff fd21 	bl	80008cc <_Unwind_VRS_Pop>
 8000e8a:	2800      	cmp	r0, #0
 8000e8c:	f43f af61 	beq.w	8000d52 <__gnu_unwind_execute+0xe>
 8000e90:	e785      	b.n	8000d9e <__gnu_unwind_execute+0x5a>
 8000e92:	28c6      	cmp	r0, #198	; 0xc6
 8000e94:	d04f      	beq.n	8000f36 <__gnu_unwind_execute+0x1f2>
 8000e96:	28c7      	cmp	r0, #199	; 0xc7
 8000e98:	d061      	beq.n	8000f5e <__gnu_unwind_execute+0x21a>
 8000e9a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000e9e:	2bc0      	cmp	r3, #192	; 0xc0
 8000ea0:	d070      	beq.n	8000f84 <__gnu_unwind_execute+0x240>
 8000ea2:	28c8      	cmp	r0, #200	; 0xc8
 8000ea4:	d07c      	beq.n	8000fa0 <__gnu_unwind_execute+0x25c>
 8000ea6:	28c9      	cmp	r0, #201	; 0xc9
 8000ea8:	f47f af79 	bne.w	8000d9e <__gnu_unwind_execute+0x5a>
 8000eac:	4630      	mov	r0, r6
 8000eae:	f7ff ff1d 	bl	8000cec <next_unwind_byte>
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	4628      	mov	r0, r5
 8000eba:	0314      	lsls	r4, r2, #12
 8000ebc:	f002 020f 	and.w	r2, r2, #15
 8000ec0:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8000ec4:	440a      	add	r2, r1
 8000ec6:	4322      	orrs	r2, r4
 8000ec8:	f7ff fd00 	bl	80008cc <_Unwind_VRS_Pop>
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	f43f af40 	beq.w	8000d52 <__gnu_unwind_execute+0xe>
 8000ed2:	e764      	b.n	8000d9e <__gnu_unwind_execute+0x5a>
 8000ed4:	f1b8 0f00 	cmp.w	r8, #0
 8000ed8:	d01c      	beq.n	8000f14 <__gnu_unwind_execute+0x1d0>
 8000eda:	2000      	movs	r0, #0
 8000edc:	e760      	b.n	8000da0 <__gnu_unwind_execute+0x5c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	f7ff ff04 	bl	8000cec <next_unwind_byte>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	2800      	cmp	r0, #0
 8000ee8:	f43f af59 	beq.w	8000d9e <__gnu_unwind_execute+0x5a>
 8000eec:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000ef0:	f47f af55 	bne.w	8000d9e <__gnu_unwind_execute+0x5a>
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4628      	mov	r0, r5
 8000ef8:	f7ff fce8 	bl	80008cc <_Unwind_VRS_Pop>
 8000efc:	2800      	cmp	r0, #0
 8000efe:	f43f af28 	beq.w	8000d52 <__gnu_unwind_execute+0xe>
 8000f02:	e74c      	b.n	8000d9e <__gnu_unwind_execute+0x5a>
 8000f04:	4630      	mov	r0, r6
 8000f06:	f7ff fef1 	bl	8000cec <next_unwind_byte>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4628      	mov	r0, r5
 8000f12:	e7d2      	b.n	8000eba <__gnu_unwind_execute+0x176>
 8000f14:	ac03      	add	r4, sp, #12
 8000f16:	4643      	mov	r3, r8
 8000f18:	220e      	movs	r2, #14
 8000f1a:	4641      	mov	r1, r8
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	9400      	str	r4, [sp, #0]
 8000f20:	f7ff faf0 	bl	8000504 <_Unwind_VRS_Get>
 8000f24:	4643      	mov	r3, r8
 8000f26:	220f      	movs	r2, #15
 8000f28:	4628      	mov	r0, r5
 8000f2a:	4641      	mov	r1, r8
 8000f2c:	9400      	str	r4, [sp, #0]
 8000f2e:	f7ff fb0f 	bl	8000550 <_Unwind_VRS_Set>
 8000f32:	4640      	mov	r0, r8
 8000f34:	e734      	b.n	8000da0 <__gnu_unwind_execute+0x5c>
 8000f36:	4630      	mov	r0, r6
 8000f38:	f7ff fed8 	bl	8000cec <next_unwind_byte>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	2303      	movs	r3, #3
 8000f40:	0314      	lsls	r4, r2, #12
 8000f42:	f002 020f 	and.w	r2, r2, #15
 8000f46:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8000f4a:	3201      	adds	r2, #1
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4322      	orrs	r2, r4
 8000f52:	f7ff fcbb 	bl	80008cc <_Unwind_VRS_Pop>
 8000f56:	2800      	cmp	r0, #0
 8000f58:	f43f aefb 	beq.w	8000d52 <__gnu_unwind_execute+0xe>
 8000f5c:	e71f      	b.n	8000d9e <__gnu_unwind_execute+0x5a>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	f7ff fec4 	bl	8000cec <next_unwind_byte>
 8000f64:	4602      	mov	r2, r0
 8000f66:	2800      	cmp	r0, #0
 8000f68:	f43f af19 	beq.w	8000d9e <__gnu_unwind_execute+0x5a>
 8000f6c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000f70:	f47f af15 	bne.w	8000d9e <__gnu_unwind_execute+0x5a>
 8000f74:	2104      	movs	r1, #4
 8000f76:	4628      	mov	r0, r5
 8000f78:	f7ff fca8 	bl	80008cc <_Unwind_VRS_Pop>
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	f43f aee8 	beq.w	8000d52 <__gnu_unwind_execute+0xe>
 8000f82:	e70c      	b.n	8000d9e <__gnu_unwind_execute+0x5a>
 8000f84:	2303      	movs	r3, #3
 8000f86:	f000 020f 	and.w	r2, r0, #15
 8000f8a:	3201      	adds	r2, #1
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8000f94:	f7ff fc9a 	bl	80008cc <_Unwind_VRS_Pop>
 8000f98:	2800      	cmp	r0, #0
 8000f9a:	f43f aeda 	beq.w	8000d52 <__gnu_unwind_execute+0xe>
 8000f9e:	e6fe      	b.n	8000d9e <__gnu_unwind_execute+0x5a>
 8000fa0:	4630      	mov	r0, r6
 8000fa2:	f7ff fea3 	bl	8000cec <next_unwind_byte>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	2101      	movs	r1, #1
 8000faa:	f002 04f0 	and.w	r4, r2, #240	; 0xf0
 8000fae:	f002 020f 	and.w	r2, r2, #15
 8000fb2:	3410      	adds	r4, #16
 8000fb4:	440a      	add	r2, r1
 8000fb6:	2305      	movs	r3, #5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8000fbe:	f7ff fc85 	bl	80008cc <_Unwind_VRS_Pop>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	f43f aec5 	beq.w	8000d52 <__gnu_unwind_execute+0xe>
 8000fc8:	e6e9      	b.n	8000d9e <__gnu_unwind_execute+0x5a>
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f10d 090c 	add.w	r9, sp, #12
 8000fd0:	220d      	movs	r2, #13
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4628      	mov	r0, r5
 8000fd6:	f8cd 9000 	str.w	r9, [sp]
 8000fda:	f7ff fa93 	bl	8000504 <_Unwind_VRS_Get>
 8000fde:	4630      	mov	r0, r6
 8000fe0:	f7ff fe84 	bl	8000cec <next_unwind_byte>
 8000fe4:	0602      	lsls	r2, r0, #24
 8000fe6:	f04f 0402 	mov.w	r4, #2
 8000fea:	d50c      	bpl.n	8001006 <__gnu_unwind_execute+0x2c2>
 8000fec:	9b03      	ldr	r3, [sp, #12]
 8000fee:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8000ff2:	40a0      	lsls	r0, r4
 8000ff4:	4418      	add	r0, r3
 8000ff6:	9003      	str	r0, [sp, #12]
 8000ff8:	4630      	mov	r0, r6
 8000ffa:	f7ff fe77 	bl	8000cec <next_unwind_byte>
 8000ffe:	0603      	lsls	r3, r0, #24
 8001000:	f104 0407 	add.w	r4, r4, #7
 8001004:	d4f2      	bmi.n	8000fec <__gnu_unwind_execute+0x2a8>
 8001006:	9b03      	ldr	r3, [sp, #12]
 8001008:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800100c:	40a2      	lsls	r2, r4
 800100e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001012:	441a      	add	r2, r3
 8001014:	2300      	movs	r3, #0
 8001016:	9203      	str	r2, [sp, #12]
 8001018:	4628      	mov	r0, r5
 800101a:	220d      	movs	r2, #13
 800101c:	4619      	mov	r1, r3
 800101e:	f8cd 9000 	str.w	r9, [sp]
 8001022:	f7ff fa95 	bl	8000550 <_Unwind_VRS_Set>
 8001026:	e694      	b.n	8000d52 <__gnu_unwind_execute+0xe>

08001028 <__gnu_unwind_frame>:
 8001028:	460b      	mov	r3, r1
 800102a:	f04f 0c03 	mov.w	ip, #3
 800102e:	b500      	push	{lr}
 8001030:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001032:	4618      	mov	r0, r3
 8001034:	6853      	ldr	r3, [r2, #4]
 8001036:	b085      	sub	sp, #20
 8001038:	3208      	adds	r2, #8
 800103a:	9202      	str	r2, [sp, #8]
 800103c:	a901      	add	r1, sp, #4
 800103e:	0e1a      	lsrs	r2, r3, #24
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	f88d c00c 	strb.w	ip, [sp, #12]
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	f88d 200d 	strb.w	r2, [sp, #13]
 800104c:	f7ff fe7a 	bl	8000d44 <__gnu_unwind_execute>
 8001050:	b005      	add	sp, #20
 8001052:	f85d fb04 	ldr.w	pc, [sp], #4
 8001056:	bf00      	nop

08001058 <_Unwind_GetRegionStart>:
 8001058:	b508      	push	{r3, lr}
 800105a:	f7ff fe71 	bl	8000d40 <unwind_UCB_from_context>
 800105e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001060:	bd08      	pop	{r3, pc}
 8001062:	bf00      	nop

08001064 <_Unwind_GetLanguageSpecificData>:
 8001064:	b508      	push	{r3, lr}
 8001066:	f7ff fe6b 	bl	8000d40 <unwind_UCB_from_context>
 800106a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800106c:	79c3      	ldrb	r3, [r0, #7]
 800106e:	3302      	adds	r3, #2
 8001070:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001074:	bd08      	pop	{r3, pc}
 8001076:	bf00      	nop

08001078 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8001086:	68b8      	ldr	r0, [r7, #8]
 8001088:	f000 f83e 	bl	8001108 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	429a      	cmp	r2, r3
 8001098:	d001      	beq.n	800109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800109a:	2301      	movs	r3, #1
 800109c:	e000      	b.n	80010a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 800109e:	2300      	movs	r3, #0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 80010a4:	4817      	ldr	r0, [pc, #92]	; (8001104 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 80010a6:	f003 fb65 	bl	8004774 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	68b8      	ldr	r0, [r7, #8]
 80010ae:	f000 f83a 	bl	8001126 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 80010b2:	4603      	mov	r3, r0
 80010b4:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	2b0f      	cmp	r3, #15
 80010ba:	d910      	bls.n	80010de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	4619      	mov	r1, r3
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f003 fb6b 	bl	80047a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4619      	mov	r1, r3
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f003 fb5a 	bl	8004788 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	4619      	mov	r1, r3
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	f003 fb59 	bl	8004790 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f003 fb54 	bl	800478c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80010e4:	4603      	mov	r3, r0
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f003 fb8c 	bl	8004808 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	4619      	mov	r1, r3
 80010f4:	68f8      	ldr	r0, [r7, #12]
 80010f6:	f003 fb4d 	bl	8004794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	08004c50 	.word	0x08004c50

08001108 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	bf0c      	ite	eq
 8001116:	2301      	moveq	r3, #1
 8001118:	2300      	movne	r3, #0
 800111a:	b2db      	uxtb	r3, r3
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr

08001126 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8001126:	b5b0      	push	{r4, r5, r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8001130:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	4618      	mov	r0, r3
 8001136:	f000 f80a 	bl	800114e <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 800113a:	462a      	mov	r2, r5
 800113c:	6839      	ldr	r1, [r7, #0]
 800113e:	4620      	mov	r0, r4
 8001140:	f000 f80f 	bl	8001162 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8001144:	4603      	mov	r3, r0
    }
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bdb0      	pop	{r4, r5, r7, pc}

0800114e <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001156:	bf00      	nop
 8001158:	4618      	mov	r0, r3
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8001162:	b480      	push	{r7}
 8001164:	b085      	sub	sp, #20
 8001166:	af00      	add	r7, sp, #0
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	1ad3      	subs	r3, r2, r3
    }
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
	...

08001180 <delayMSecs>:
	while((SysTick->CTRL & 0x00010000) == 0);
	SysTick->CTRL = 0;
}

void delayMSecs(uint32_t ms){
	SysTick->CTRL = 0;
 8001180:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001184:	2200      	movs	r2, #0
	SysTick->LOAD = SYSTEMCLOCKS_PER_SEC / 1000 * ms - 1;
 8001186:	4907      	ldr	r1, [pc, #28]	; (80011a4 <delayMSecs+0x24>)
	SysTick->CTRL = 0;
 8001188:	611a      	str	r2, [r3, #16]
	SysTick->LOAD = SYSTEMCLOCKS_PER_SEC / 1000 * ms - 1;
 800118a:	4348      	muls	r0, r1
 800118c:	3801      	subs	r0, #1
 800118e:	6158      	str	r0, [r3, #20]
	SysTick->VAL = 0;
 8001190:	619a      	str	r2, [r3, #24]
	SysTick->CTRL = 5;
 8001192:	2205      	movs	r2, #5
 8001194:	611a      	str	r2, [r3, #16]
	while((SysTick->CTRL & 0x00010000) == 0);
 8001196:	691a      	ldr	r2, [r3, #16]
 8001198:	03d2      	lsls	r2, r2, #15
 800119a:	d5fc      	bpl.n	8001196 <delayMSecs+0x16>
	SysTick->CTRL = 0;
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	00011940 	.word	0x00011940

080011a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011a8:	b510      	push	{r4, lr}
 80011aa:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	2210      	movs	r2, #16
 80011ae:	2100      	movs	r1, #0
 80011b0:	a802      	add	r0, sp, #8
 80011b2:	f003 fbdb 	bl	800496c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MX_GPIO_Init+0x5c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80011b8:	4c13      	ldr	r4, [pc, #76]	; (8001208 <MX_GPIO_Init+0x60>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ba:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80011bc:	4620      	mov	r0, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011be:	f042 0220 	orr.w	r2, r2, #32
 80011c2:	619a      	str	r2, [r3, #24]
 80011c4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80011c6:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c8:	f002 0220 	and.w	r2, r2, #32
 80011cc:	9200      	str	r2, [sp, #0]
 80011ce:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	699a      	ldr	r2, [r3, #24]
 80011d2:	f042 0204 	orr.w	r2, r2, #4
 80011d6:	619a      	str	r2, [r3, #24]
 80011d8:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80011da:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80011e4:	f000 fbbe 	bl	8001964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2240      	movs	r2, #64	; 0x40
 80011ea:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2100      	movs	r1, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2302      	movs	r3, #2
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80011f4:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	e9cd 1304 	strd	r1, r3, [sp, #16]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80011fa:	a902      	add	r1, sp, #8
 80011fc:	f000 fad8 	bl	80017b0 <HAL_GPIO_Init>

}
 8001200:	b006      	add	sp, #24
 8001202:	bd10      	pop	{r4, pc}
 8001204:	40021000 	.word	0x40021000
 8001208:	40010800 	.word	0x40010800

0800120c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08e      	sub	sp, #56	; 0x38
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001212:	f000 fa43 	bl	800169c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001216:	f000 f833 	bl	8001280 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800121a:	f7ff ffc5 	bl	80011a8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800121e:	f003 f8b9 	bl	8004394 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001222:	f000 f943 	bl	80014ac <MX_SPI1_Init>
  MAX7219 Max7219;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Max7219.max7219Init();
 8001226:	f107 0318 	add.w	r3, r7, #24
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f8c6 	bl	80013bc <_ZN7MAX721911max7219InitEv>
  std::string test = "3.1415";
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4618      	mov	r0, r3
 8001236:	f003 fa98 	bl	800476a <_ZNSaIcEC1Ev>
 800123a:	f107 021c 	add.w	r2, r7, #28
 800123e:	463b      	mov	r3, r7
 8001240:	490e      	ldr	r1, [pc, #56]	; (800127c <main+0x70>)
 8001242:	4618      	mov	r0, r3
 8001244:	f003 fb22 	bl	800488c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4618      	mov	r0, r3
 800124e:	f003 fa8d 	bl	800476c <_ZNSaIcED1Ev>
  Max7219.refreshScreen(test);
 8001252:	463a      	mov	r2, r7
 8001254:	f107 0320 	add.w	r3, r7, #32
 8001258:	4611      	mov	r1, r2
 800125a:	4618      	mov	r0, r3
 800125c:	f003 fae4 	bl	8004828 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001260:	f107 0220 	add.w	r2, r7, #32
 8001264:	f107 0318 	add.w	r3, r7, #24
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f000 f8f2 	bl	8001454 <_ZN7MAX721913refreshScreenENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001270:	f107 0320 	add.w	r3, r7, #32
 8001274:	4618      	mov	r0, r3
 8001276:	f003 fad1 	bl	800481c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  while (1)
 800127a:	e7fe      	b.n	800127a <main+0x6e>
 800127c:	08004c7c 	.word	0x08004c7c

08001280 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b094      	sub	sp, #80	; 0x50
 8001284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001286:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800128a:	2228      	movs	r2, #40	; 0x28
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f003 fb6c 	bl	800496c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b0:	2301      	movs	r3, #1
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012be:	2301      	movs	r3, #1
 80012c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c2:	2302      	movs	r3, #2
 80012c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80012cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 f9da 	bl	8002690 <HAL_RCC_OscConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	bf14      	ite	ne
 80012e2:	2301      	movne	r3, #1
 80012e4:	2300      	moveq	r3, #0
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 80012ec:	f000 f832 	bl	8001354 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f0:	230f      	movs	r3, #15
 80012f2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f4:	2302      	movs	r3, #2
 80012f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001300:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	2101      	movs	r1, #1
 800130c:	4618      	mov	r0, r3
 800130e:	f001 fb81 	bl	8002a14 <HAL_RCC_ClockConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	bf14      	ite	ne
 8001318:	2301      	movne	r3, #1
 800131a:	2300      	moveq	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8001322:	f000 f817 	bl	8001354 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001326:	2310      	movs	r3, #16
 8001328:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800132a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800132e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	4618      	mov	r0, r3
 8001334:	f001 fc0a 	bl	8002b4c <HAL_RCCEx_PeriphCLKConfig>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	bf14      	ite	ne
 800133e:	2301      	movne	r3, #1
 8001340:	2300      	moveq	r3, #0
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 8001348:	f000 f804 	bl	8001354 <Error_Handler>
  }
}
 800134c:	bf00      	nop
 800134e:	3750      	adds	r7, #80	; 0x50
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001358:	b672      	cpsid	i
}
 800135a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800135c:	e7fe      	b.n	800135c <Error_Handler+0x8>
	...

08001360 <_ZN7MAX721911max7219SendEhh>:
 *  Created on: Nov 16, 2023
 *      Author: zhiyuan
 */
# include "max7219.hpp"

void MAX7219::max7219Send(uint8_t address,uint8_t data){
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	70fb      	strb	r3, [r7, #3]
 800136c:	4613      	mov	r3, r2
 800136e:	70bb      	strb	r3, [r7, #2]

	uint16_t Transmit_buf = (0x00ff&data)|(0xff00&(address<<8));
 8001370:	78bb      	ldrb	r3, [r7, #2]
 8001372:	b21a      	sxth	r2, r3
 8001374:	78fb      	ldrb	r3, [r7, #3]
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	b21b      	sxth	r3, r3
 800137a:	4313      	orrs	r3, r2
 800137c:	b21b      	sxth	r3, r3
 800137e:	b29b      	uxth	r3, r3
 8001380:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	2140      	movs	r1, #64	; 0x40
 8001386:	480b      	ldr	r0, [pc, #44]	; (80013b4 <_ZN7MAX721911max7219SendEhh+0x54>)
 8001388:	f000 faec 	bl	8001964 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&MAX7219_SPI,(uint8_t*)&Transmit_buf,1,TRANSMIT_OVERTIME);
 800138c:	f107 010e 	add.w	r1, r7, #14
 8001390:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001394:	2201      	movs	r2, #1
 8001396:	4808      	ldr	r0, [pc, #32]	; (80013b8 <_ZN7MAX721911max7219SendEhh+0x58>)
 8001398:	f001 fd0e 	bl	8002db8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800139c:	2201      	movs	r2, #1
 800139e:	2140      	movs	r1, #64	; 0x40
 80013a0:	4804      	ldr	r0, [pc, #16]	; (80013b4 <_ZN7MAX721911max7219SendEhh+0x54>)
 80013a2:	f000 fadf 	bl	8001964 <HAL_GPIO_WritePin>

	delayMSecs(100);
 80013a6:	2064      	movs	r0, #100	; 0x64
 80013a8:	f7ff feea 	bl	8001180 <delayMSecs>
}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40010800 	.word	0x40010800
 80013b8:	200001fc 	.word	0x200001fc

080013bc <_ZN7MAX721911max7219InitEv>:

void MAX7219::max7219Init(){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	//进入正常工作模式
	setWorkMode(true);
 80013c4:	2101      	movs	r1, #1
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f80c 	bl	80013e4 <_ZN7MAX721911setWorkModeEb>
	//七位全扫描模式
	setScanMode(0x07);
 80013cc:	2107      	movs	r1, #7
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f830 	bl	8001434 <_ZN7MAX721911setScanModeEh>
	//打开译码模式
	setDecodeMode(DECODE_D0_D7);
 80013d4:	21ff      	movs	r1, #255	; 0xff
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 f81c 	bl	8001414 <_ZN7MAX721913setDecodeModeEh>
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <_ZN7MAX721911setWorkModeEb>:
		max7219Send(DISPLAY_TEST, 0x01);
	else
		max7219Send(DISPLAY_TEST, 0x00);
}

void MAX7219::setWorkMode(bool status){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	70fb      	strb	r3, [r7, #3]
	if(status)
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d005      	beq.n	8001402 <_ZN7MAX721911setWorkModeEb+0x1e>
		max7219Send(SHUT_DOWN, 1);
 80013f6:	2201      	movs	r2, #1
 80013f8:	210c      	movs	r1, #12
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ffb0 	bl	8001360 <_ZN7MAX721911max7219SendEhh>
	else
		max7219Send(SHUT_DOWN, 0);
}
 8001400:	e004      	b.n	800140c <_ZN7MAX721911setWorkModeEb+0x28>
		max7219Send(SHUT_DOWN, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	210c      	movs	r1, #12
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffaa 	bl	8001360 <_ZN7MAX721911max7219SendEhh>
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <_ZN7MAX721913setDecodeModeEh>:

void MAX7219::setDecodeMode(uint8_t mode){
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	70fb      	strb	r3, [r7, #3]
	max7219Send(DECODE_MODE, mode);
 8001420:	78fb      	ldrb	r3, [r7, #3]
 8001422:	461a      	mov	r2, r3
 8001424:	2109      	movs	r1, #9
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ff9a 	bl	8001360 <_ZN7MAX721911max7219SendEhh>
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <_ZN7MAX721911setScanModeEh>:

void MAX7219::setScanMode(uint8_t mode){
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	70fb      	strb	r3, [r7, #3]
	max7219Send(SCAN_LIMIT, mode);
 8001440:	78fb      	ldrb	r3, [r7, #3]
 8001442:	461a      	mov	r2, r3
 8001444:	210b      	movs	r1, #11
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ff8a 	bl	8001360 <_ZN7MAX721911max7219SendEhh>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <_ZN7MAX721913refreshScreenENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void MAX7219::refreshScreen(std::string s){
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
//	    if (isDP) {
//	        data |= 0b10000000;
//	        isDP = false;
//     }
//	    max7219Send(9 - i, data);
	max7219Send(0x01, 5);
 800145e:	2205      	movs	r2, #5
 8001460:	2101      	movs	r1, #1
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ff7c 	bl	8001360 <_ZN7MAX721911max7219SendEhh>
	max7219Send(0x02, 2);
 8001468:	2202      	movs	r2, #2
 800146a:	2102      	movs	r1, #2
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff77 	bl	8001360 <_ZN7MAX721911max7219SendEhh>
	max7219Send(0x03, 1);
 8001472:	2201      	movs	r2, #1
 8001474:	2103      	movs	r1, #3
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ff72 	bl	8001360 <_ZN7MAX721911max7219SendEhh>
	max7219Send(0x04, 1);
 800147c:	2201      	movs	r2, #1
 800147e:	2104      	movs	r1, #4
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff6d 	bl	8001360 <_ZN7MAX721911max7219SendEhh>
	max7219Send(0x05, 3);
 8001486:	2203      	movs	r2, #3
 8001488:	2105      	movs	r1, #5
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ff68 	bl	8001360 <_ZN7MAX721911max7219SendEhh>
	max7219Send(0x06, 1);
 8001490:	2201      	movs	r2, #1
 8001492:	2106      	movs	r1, #6
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff63 	bl	8001360 <_ZN7MAX721911max7219SendEhh>
	max7219Send(0x07, 4);
 800149a:	2204      	movs	r2, #4
 800149c:	2107      	movs	r1, #7
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ff5e 	bl	8001360 <_ZN7MAX721911max7219SendEhh>

}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80014ac:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014ae:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 80014b2:	480e      	ldr	r0, [pc, #56]	; (80014ec <MX_SPI1_Init+0x40>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014b4:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <MX_SPI1_Init+0x44>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80014b6:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014ba:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80014be:	2300      	movs	r3, #0
 80014c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014c4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80014c8:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014cc:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80014d0:	2210      	movs	r2, #16
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014d4:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80014d6:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 80014da:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014dc:	f001 fc14 	bl	8002d08 <HAL_SPI_Init>
 80014e0:	b118      	cbz	r0, 80014ea <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80014e6:	f7ff bf35 	b.w	8001354 <Error_Handler>
}
 80014ea:	bd08      	pop	{r3, pc}
 80014ec:	200001fc 	.word	0x200001fc
 80014f0:	40013000 	.word	0x40013000

080014f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014f4:	b510      	push	{r4, lr}
 80014f6:	4604      	mov	r4, r0
 80014f8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fa:	2210      	movs	r2, #16
 80014fc:	2100      	movs	r1, #0
 80014fe:	a802      	add	r0, sp, #8
 8001500:	f003 fa34 	bl	800496c <memset>
  if(spiHandle->Instance==SPI1)
 8001504:	6822      	ldr	r2, [r4, #0]
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <HAL_SPI_MspInit+0x58>)
 8001508:	429a      	cmp	r2, r3
 800150a:	d11d      	bne.n	8001548 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800150c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001510:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	480f      	ldr	r0, [pc, #60]	; (8001550 <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001514:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001518:	619a      	str	r2, [r3, #24]
 800151a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 800151e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001522:	9200      	str	r2, [sp, #0]
 8001524:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	699a      	ldr	r2, [r3, #24]
 8001528:	f042 0204 	orr.w	r2, r2, #4
 800152c:	619a      	str	r2, [r3, #24]
 800152e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	22a0      	movs	r2, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	9301      	str	r3, [sp, #4]
 8001538:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001540:	2303      	movs	r3, #3
 8001542:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f000 f934 	bl	80017b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001548:	b006      	add	sp, #24
 800154a:	bd10      	pop	{r4, pc}
 800154c:	40013000 	.word	0x40013000
 8001550:	40010800 	.word	0x40010800

08001554 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_MspInit+0x2c>)
{
 8001556:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001558:	699a      	ldr	r2, [r3, #24]
 800155a:	f042 0201 	orr.w	r2, r2, #1
 800155e:	619a      	str	r2, [r3, #24]
 8001560:	699a      	ldr	r2, [r3, #24]
 8001562:	f002 0201 	and.w	r2, r2, #1
 8001566:	9200      	str	r2, [sp, #0]
 8001568:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	69da      	ldr	r2, [r3, #28]
 800156c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001570:	61da      	str	r2, [r3, #28]
 8001572:	69db      	ldr	r3, [r3, #28]
 8001574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001578:	9301      	str	r3, [sp, #4]
 800157a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157c:	b002      	add	sp, #8
 800157e:	4770      	bx	lr
 8001580:	40021000 	.word	0x40021000

08001584 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <NMI_Handler>

08001586 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <HardFault_Handler>

08001588 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <MemManage_Handler>

0800158a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <BusFault_Handler>

0800158c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <UsageFault_Handler>

0800158e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800158e:	4770      	bx	lr

08001590 <DebugMon_Handler>:
 8001590:	4770      	bx	lr

08001592 <PendSV_Handler>:
 8001592:	4770      	bx	lr

08001594 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001594:	f000 b894 	b.w	80016c0 <HAL_IncTick>

08001598 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001598:	4801      	ldr	r0, [pc, #4]	; (80015a0 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 800159a:	f000 ba8d 	b.w	8001ab8 <HAL_PCD_IRQHandler>
 800159e:	bf00      	nop
 80015a0:	20000f24 	.word	0x20000f24

080015a4 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80015a4:	2001      	movs	r0, #1
 80015a6:	4770      	bx	lr

080015a8 <_kill>:

int _kill(int pid, int sig)
{
 80015a8:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015aa:	f003 f997 	bl	80048dc <__errno>
 80015ae:	2316      	movs	r3, #22
 80015b0:	6003      	str	r3, [r0, #0]
  return -1;
}
 80015b2:	f04f 30ff 	mov.w	r0, #4294967295
 80015b6:	bd08      	pop	{r3, pc}

080015b8 <_exit>:

void _exit (int status)
{
 80015b8:	b508      	push	{r3, lr}
  errno = EINVAL;
 80015ba:	f003 f98f 	bl	80048dc <__errno>
 80015be:	2316      	movs	r3, #22
 80015c0:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80015c2:	e7fe      	b.n	80015c2 <_exit+0xa>

080015c4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c4:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <_sbrk+0x30>)
{
 80015c6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80015c8:	6811      	ldr	r1, [r2, #0]
{
 80015ca:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80015cc:	b909      	cbnz	r1, 80015d2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80015ce:	490a      	ldr	r1, [pc, #40]	; (80015f8 <_sbrk+0x34>)
 80015d0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d2:	6810      	ldr	r0, [r2, #0]
 80015d4:	4909      	ldr	r1, [pc, #36]	; (80015fc <_sbrk+0x38>)
 80015d6:	4c0a      	ldr	r4, [pc, #40]	; (8001600 <_sbrk+0x3c>)
 80015d8:	4403      	add	r3, r0
 80015da:	1b09      	subs	r1, r1, r4
 80015dc:	428b      	cmp	r3, r1
 80015de:	d906      	bls.n	80015ee <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80015e0:	f003 f97c 	bl	80048dc <__errno>
 80015e4:	230c      	movs	r3, #12
 80015e6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80015ec:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80015ee:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80015f0:	e7fc      	b.n	80015ec <_sbrk+0x28>
 80015f2:	bf00      	nop
 80015f4:	20000254 	.word	0x20000254
 80015f8:	20001448 	.word	0x20001448
 80015fc:	20005000 	.word	0x20005000
 8001600:	00000400 	.word	0x00000400

08001604 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001604:	4770      	bx	lr
	...

08001608 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001608:	f7ff fffc 	bl	8001604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800160c:	480b      	ldr	r0, [pc, #44]	; (800163c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800160e:	490c      	ldr	r1, [pc, #48]	; (8001640 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001610:	4a0c      	ldr	r2, [pc, #48]	; (8001644 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001622:	4a09      	ldr	r2, [pc, #36]	; (8001648 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001624:	4c09      	ldr	r4, [pc, #36]	; (800164c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001632:	f003 f959 	bl	80048e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001636:	f7ff fde9 	bl	800120c <main>
  bx lr
 800163a:	4770      	bx	lr
  ldr r0, =_sdata
 800163c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001640:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001644:	080051e8 	.word	0x080051e8
  ldr r2, =_sbss
 8001648:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800164c:	20001448 	.word	0x20001448

08001650 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001650:	e7fe      	b.n	8001650 <ADC1_2_IRQHandler>
	...

08001654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001654:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <HAL_InitTick+0x3c>)
{
 8001658:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800165a:	7818      	ldrb	r0, [r3, #0]
 800165c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001660:	fbb3 f3f0 	udiv	r3, r3, r0
 8001664:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <HAL_InitTick+0x40>)
 8001666:	6810      	ldr	r0, [r2, #0]
 8001668:	fbb0 f0f3 	udiv	r0, r0, r3
 800166c:	f000 f88c 	bl	8001788 <HAL_SYSTICK_Config>
 8001670:	4604      	mov	r4, r0
 8001672:	b958      	cbnz	r0, 800168c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001674:	2d0f      	cmp	r5, #15
 8001676:	d809      	bhi.n	800168c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001678:	4602      	mov	r2, r0
 800167a:	4629      	mov	r1, r5
 800167c:	f04f 30ff 	mov.w	r0, #4294967295
 8001680:	f000 f842 	bl	8001708 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001684:	4620      	mov	r0, r4
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <HAL_InitTick+0x44>)
 8001688:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800168a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800168c:	2001      	movs	r0, #1
 800168e:	e7fc      	b.n	800168a <HAL_InitTick+0x36>
 8001690:	20000004 	.word	0x20000004
 8001694:	20000000 	.word	0x20000000
 8001698:	20000008 	.word	0x20000008

0800169c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800169c:	4a07      	ldr	r2, [pc, #28]	; (80016bc <HAL_Init+0x20>)
{
 800169e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a4:	f043 0310 	orr.w	r3, r3, #16
 80016a8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016aa:	f000 f81b 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ae:	200f      	movs	r0, #15
 80016b0:	f7ff ffd0 	bl	8001654 <HAL_InitTick>
  HAL_MspInit();
 80016b4:	f7ff ff4e 	bl	8001554 <HAL_MspInit>
}
 80016b8:	2000      	movs	r0, #0
 80016ba:	bd08      	pop	{r3, pc}
 80016bc:	40022000 	.word	0x40022000

080016c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80016c0:	4a03      	ldr	r2, [pc, #12]	; (80016d0 <HAL_IncTick+0x10>)
 80016c2:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <HAL_IncTick+0x14>)
 80016c4:	6811      	ldr	r1, [r2, #0]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	440b      	add	r3, r1
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000258 	.word	0x20000258
 80016d4:	20000004 	.word	0x20000004

080016d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80016d8:	4b01      	ldr	r3, [pc, #4]	; (80016e0 <HAL_GetTick+0x8>)
 80016da:	6818      	ldr	r0, [r3, #0]
}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	20000258 	.word	0x20000258

080016e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e4:	4907      	ldr	r1, [pc, #28]	; (8001704 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016e6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80016f2:	0412      	lsls	r2, r2, #16
 80016f4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001700:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001708:	4b16      	ldr	r3, [pc, #88]	; (8001764 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170a:	b530      	push	{r4, r5, lr}
 800170c:	68dc      	ldr	r4, [r3, #12]
 800170e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001712:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001716:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001718:	2b04      	cmp	r3, #4
 800171a:	bf28      	it	cs
 800171c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001724:	bf98      	it	ls
 8001726:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172c:	bf88      	it	hi
 800172e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	ea21 0303 	bic.w	r3, r1, r3
 8001734:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001736:	fa05 f404 	lsl.w	r4, r5, r4
 800173a:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800173e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001744:	bfac      	ite	ge
 8001746:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	4a07      	ldrlt	r2, [pc, #28]	; (8001768 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001750:	b2db      	uxtb	r3, r3
 8001752:	bfab      	itete	ge
 8001754:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001760:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001762:	bd30      	pop	{r4, r5, pc}
 8001764:	e000ed00 	.word	0xe000ed00
 8001768:	e000ed14 	.word	0xe000ed14

0800176c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800176c:	2800      	cmp	r0, #0
 800176e:	db08      	blt.n	8001782 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001770:	2301      	movs	r3, #1
 8001772:	0942      	lsrs	r2, r0, #5
 8001774:	f000 001f 	and.w	r0, r0, #31
 8001778:	fa03 f000 	lsl.w	r0, r3, r0
 800177c:	4b01      	ldr	r3, [pc, #4]	; (8001784 <HAL_NVIC_EnableIRQ+0x18>)
 800177e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001782:	4770      	bx	lr
 8001784:	e000e100 	.word	0xe000e100

08001788 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001788:	3801      	subs	r0, #1
 800178a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800178e:	d20b      	bcs.n	80017a8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001790:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001794:	21f0      	movs	r1, #240	; 0xf0
 8001796:	4a05      	ldr	r2, [pc, #20]	; (80017ac <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001798:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800179e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80017a8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017b4:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80017b6:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017b8:	4f64      	ldr	r7, [pc, #400]	; (800194c <HAL_GPIO_Init+0x19c>)
 80017ba:	4b65      	ldr	r3, [pc, #404]	; (8001950 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 80017bc:	f8df c194 	ldr.w	ip, [pc, #404]	; 8001954 <HAL_GPIO_Init+0x1a4>
 80017c0:	f8df e194 	ldr.w	lr, [pc, #404]	; 8001958 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c4:	680d      	ldr	r5, [r1, #0]
 80017c6:	fa35 f406 	lsrs.w	r4, r5, r6
 80017ca:	d102      	bne.n	80017d2 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 80017cc:	b003      	add	sp, #12
 80017ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80017d2:	f04f 0801 	mov.w	r8, #1
 80017d6:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017da:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 80017de:	ea38 0505 	bics.w	r5, r8, r5
 80017e2:	d17b      	bne.n	80018dc <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 80017e4:	684d      	ldr	r5, [r1, #4]
 80017e6:	2d03      	cmp	r5, #3
 80017e8:	d807      	bhi.n	80017fa <HAL_GPIO_Init+0x4a>
 80017ea:	3d01      	subs	r5, #1
 80017ec:	2d02      	cmp	r5, #2
 80017ee:	f200 8088 	bhi.w	8001902 <HAL_GPIO_Init+0x152>
 80017f2:	e8df f005 	tbb	[pc, r5]
 80017f6:	9b96      	.short	0x9b96
 80017f8:	a1          	.byte	0xa1
 80017f9:	00          	.byte	0x00
 80017fa:	2d12      	cmp	r5, #18
 80017fc:	f000 8099 	beq.w	8001932 <HAL_GPIO_Init+0x182>
 8001800:	d86e      	bhi.n	80018e0 <HAL_GPIO_Init+0x130>
 8001802:	2d11      	cmp	r5, #17
 8001804:	f000 808f 	beq.w	8001926 <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001808:	2cff      	cmp	r4, #255	; 0xff
 800180a:	bf98      	it	ls
 800180c:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800180e:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001812:	bf88      	it	hi
 8001814:	f100 0a04 	addhi.w	sl, r0, #4
 8001818:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800181c:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001820:	bf88      	it	hi
 8001822:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001824:	fa09 fb05 	lsl.w	fp, r9, r5
 8001828:	ea28 080b 	bic.w	r8, r8, fp
 800182c:	fa02 f505 	lsl.w	r5, r2, r5
 8001830:	ea48 0505 	orr.w	r5, r8, r5
 8001834:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001838:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800183c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001840:	d04c      	beq.n	80018dc <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001842:	69bd      	ldr	r5, [r7, #24]
 8001844:	f026 0803 	bic.w	r8, r6, #3
 8001848:	f045 0501 	orr.w	r5, r5, #1
 800184c:	61bd      	str	r5, [r7, #24]
 800184e:	69bd      	ldr	r5, [r7, #24]
 8001850:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001854:	f005 0501 	and.w	r5, r5, #1
 8001858:	9501      	str	r5, [sp, #4]
 800185a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800185e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001862:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001864:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001868:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800186c:	fa09 f90b 	lsl.w	r9, r9, fp
 8001870:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001874:	4d39      	ldr	r5, [pc, #228]	; (800195c <HAL_GPIO_Init+0x1ac>)
 8001876:	42a8      	cmp	r0, r5
 8001878:	d062      	beq.n	8001940 <HAL_GPIO_Init+0x190>
 800187a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800187e:	42a8      	cmp	r0, r5
 8001880:	d060      	beq.n	8001944 <HAL_GPIO_Init+0x194>
 8001882:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001886:	42a8      	cmp	r0, r5
 8001888:	d05e      	beq.n	8001948 <HAL_GPIO_Init+0x198>
 800188a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800188e:	42a8      	cmp	r0, r5
 8001890:	bf0c      	ite	eq
 8001892:	2503      	moveq	r5, #3
 8001894:	2504      	movne	r5, #4
 8001896:	fa05 f50b 	lsl.w	r5, r5, fp
 800189a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800189e:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 80018a2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018a4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80018a8:	bf14      	ite	ne
 80018aa:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018ac:	43a5      	biceq	r5, r4
 80018ae:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80018b0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018b2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80018b6:	bf14      	ite	ne
 80018b8:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018ba:	43a5      	biceq	r5, r4
 80018bc:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80018be:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018c0:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80018c4:	bf14      	ite	ne
 80018c6:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018c8:	43a5      	biceq	r5, r4
 80018ca:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80018cc:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018ce:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80018d2:	bf14      	ite	ne
 80018d4:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018d6:	ea25 0404 	biceq.w	r4, r5, r4
 80018da:	601c      	str	r4, [r3, #0]
	position++;
 80018dc:	3601      	adds	r6, #1
 80018de:	e771      	b.n	80017c4 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 80018e0:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8001960 <HAL_GPIO_Init+0x1b0>
 80018e4:	454d      	cmp	r5, r9
 80018e6:	d00c      	beq.n	8001902 <HAL_GPIO_Init+0x152>
 80018e8:	d817      	bhi.n	800191a <HAL_GPIO_Init+0x16a>
 80018ea:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80018ee:	454d      	cmp	r5, r9
 80018f0:	d007      	beq.n	8001902 <HAL_GPIO_Init+0x152>
 80018f2:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 80018f6:	454d      	cmp	r5, r9
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_Init+0x152>
 80018fa:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80018fe:	454d      	cmp	r5, r9
 8001900:	d182      	bne.n	8001808 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001902:	688a      	ldr	r2, [r1, #8]
 8001904:	b1d2      	cbz	r2, 800193c <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001906:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001908:	bf08      	it	eq
 800190a:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800190e:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8001912:	bf18      	it	ne
 8001914:	f8c0 8014 	strne.w	r8, [r0, #20]
 8001918:	e776      	b.n	8001808 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 800191a:	4565      	cmp	r5, ip
 800191c:	d0f1      	beq.n	8001902 <HAL_GPIO_Init+0x152>
 800191e:	4575      	cmp	r5, lr
 8001920:	e7ee      	b.n	8001900 <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001922:	68ca      	ldr	r2, [r1, #12]
          break;
 8001924:	e770      	b.n	8001808 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001926:	68ca      	ldr	r2, [r1, #12]
 8001928:	3204      	adds	r2, #4
          break;
 800192a:	e76d      	b.n	8001808 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800192c:	68ca      	ldr	r2, [r1, #12]
 800192e:	3208      	adds	r2, #8
          break;
 8001930:	e76a      	b.n	8001808 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001932:	68ca      	ldr	r2, [r1, #12]
 8001934:	320c      	adds	r2, #12
          break;
 8001936:	e767      	b.n	8001808 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8001938:	2200      	movs	r2, #0
 800193a:	e765      	b.n	8001808 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800193c:	2204      	movs	r2, #4
 800193e:	e763      	b.n	8001808 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001940:	2500      	movs	r5, #0
 8001942:	e7a8      	b.n	8001896 <HAL_GPIO_Init+0xe6>
 8001944:	2501      	movs	r5, #1
 8001946:	e7a6      	b.n	8001896 <HAL_GPIO_Init+0xe6>
 8001948:	2502      	movs	r5, #2
 800194a:	e7a4      	b.n	8001896 <HAL_GPIO_Init+0xe6>
 800194c:	40021000 	.word	0x40021000
 8001950:	40010400 	.word	0x40010400
 8001954:	10310000 	.word	0x10310000
 8001958:	10320000 	.word	0x10320000
 800195c:	40010800 	.word	0x40010800
 8001960:	10220000 	.word	0x10220000

08001964 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001964:	b10a      	cbz	r2, 800196a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001966:	6101      	str	r1, [r0, #16]
  }
}
 8001968:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800196a:	0409      	lsls	r1, r1, #16
 800196c:	e7fb      	b.n	8001966 <HAL_GPIO_WritePin+0x2>

0800196e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800196e:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001970:	4604      	mov	r4, r0
{
 8001972:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8001974:	b310      	cbz	r0, 80019bc <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001976:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 800197a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800197e:	b91b      	cbnz	r3, 8001988 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001980:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001984:	f002 fdd4 	bl	8004530 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001988:	2303      	movs	r3, #3
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800198a:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800198c:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 800198e:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8001992:	f855 0b10 	ldr.w	r0, [r5], #16
 8001996:	f001 fad3 	bl	8002f40 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800199a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800199c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800199e:	682b      	ldr	r3, [r5, #0]
 80019a0:	1d27      	adds	r7, r4, #4
 80019a2:	6033      	str	r3, [r6, #0]
 80019a4:	4626      	mov	r6, r4
 80019a6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80019aa:	f856 0b10 	ldr.w	r0, [r6], #16
 80019ae:	f001 fab7 	bl	8002f20 <USB_CoreInit>
 80019b2:	4605      	mov	r5, r0
 80019b4:	b120      	cbz	r0, 80019c0 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019b6:	2302      	movs	r3, #2
 80019b8:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 80019bc:	2501      	movs	r5, #1
 80019be:	e04b      	b.n	8001a58 <HAL_PCD_Init+0xea>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019c0:	4601      	mov	r1, r0
 80019c2:	6820      	ldr	r0, [r4, #0]
 80019c4:	f001 fac6 	bl	8002f54 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019c8:	4629      	mov	r1, r5
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019ca:	f04f 0e01 	mov.w	lr, #1
 80019ce:	2528      	movs	r5, #40	; 0x28
    hpcd->IN_ep[i].num = i;
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019d0:	460a      	mov	r2, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019d2:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80019d6:	b2c8      	uxtb	r0, r1
 80019d8:	4584      	cmp	ip, r0
 80019da:	f101 0101 	add.w	r1, r1, #1
 80019de:	d81b      	bhi.n	8001a18 <HAL_PCD_Init+0xaa>
 80019e0:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019e2:	2528      	movs	r5, #40	; 0x28
 80019e4:	4619      	mov	r1, r3
 80019e6:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019e8:	4584      	cmp	ip, r0
 80019ea:	f103 0301 	add.w	r3, r3, #1
 80019ee:	d81f      	bhi.n	8001a30 <HAL_PCD_Init+0xc2>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019f0:	46ec      	mov	ip, sp
 80019f2:	4635      	mov	r5, r6
 80019f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80019fa:	682b      	ldr	r3, [r5, #0]
 80019fc:	f8cc 3000 	str.w	r3, [ip]
 8001a00:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001a04:	6820      	ldr	r0, [r4, #0]
 8001a06:	f001 faa7 	bl	8002f58 <USB_DevInit>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	4605      	mov	r5, r0
 8001a0e:	b1e0      	cbz	r0, 8001a4a <HAL_PCD_Init+0xdc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a10:	2202      	movs	r2, #2
 8001a12:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8001a16:	e7d1      	b.n	80019bc <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 8001a18:	fb05 4300 	mla	r3, r5, r0, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a1c:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8001a20:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8001a24:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a28:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a2c:	641a      	str	r2, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a2e:	e7d2      	b.n	80019d6 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 8001a30:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a34:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8001a38:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8001a3c:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a40:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a44:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a48:	e7cd      	b.n	80019e6 <HAL_PCD_Init+0x78>
  }

  hpcd->USB_Address = 0U;
 8001a4a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a4e:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a50:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a54:	f001 fd38 	bl	80034c8 <USB_DevDisconnect>

  return HAL_OK;
}
 8001a58:	4628      	mov	r0, r5
 8001a5a:	b007      	add	sp, #28
 8001a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a5e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a5e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8001a60:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 8001a64:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d010      	beq.n	8001a8c <HAL_PCD_Start+0x2e>
 8001a6a:	2501      	movs	r5, #1
 8001a6c:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001a70:	6800      	ldr	r0, [r0, #0]
 8001a72:	f001 fa5c 	bl	8002f2e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001a76:	4629      	mov	r1, r5
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f002 fe64 	bl	8004746 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001a7e:	6820      	ldr	r0, [r4, #0]
 8001a80:	f001 fd20 	bl	80034c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a84:	2000      	movs	r0, #0
 8001a86:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8001a8a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001a8c:	2002      	movs	r0, #2
 8001a8e:	e7fc      	b.n	8001a8a <HAL_PCD_Start+0x2c>

08001a90 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a90:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001a92:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 8001a96:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001a98:	2a01      	cmp	r2, #1
 8001a9a:	d00b      	beq.n	8001ab4 <HAL_PCD_SetAddress+0x24>
 8001a9c:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8001a9e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8001aa2:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001aa6:	6800      	ldr	r0, [r0, #0]
 8001aa8:	f001 fd06 	bl	80034b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001aac:	2000      	movs	r0, #0
 8001aae:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8001ab2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001ab4:	2002      	movs	r0, #2
 8001ab6:	e7fc      	b.n	8001ab2 <HAL_PCD_SetAddress+0x22>

08001ab8 <HAL_PCD_IRQHandler>:
{
 8001ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001abc:	4604      	mov	r4, r0
 8001abe:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001ac0:	6800      	ldr	r0, [r0, #0]
 8001ac2:	f001 fd03 	bl	80034cc <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001ac6:	f410 4500 	ands.w	r5, r0, #32768	; 0x8000
 8001aca:	f000 8428 	beq.w	800231e <HAL_PCD_IRQHandler+0x866>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001ace:	f8df 9320 	ldr.w	r9, [pc, #800]	; 8001df0 <HAL_PCD_IRQHandler+0x338>
 8001ad2:	f8df 8320 	ldr.w	r8, [pc, #800]	; 8001df4 <HAL_PCD_IRQHandler+0x33c>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ad6:	6820      	ldr	r0, [r4, #0]
 8001ad8:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001adc:	041f      	lsls	r7, r3, #16
 8001ade:	d402      	bmi.n	8001ae6 <HAL_PCD_IRQHandler+0x2e>
}
 8001ae0:	b005      	add	sp, #20
 8001ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8001ae6:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 8001aea:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 8001aec:	f016 060f 	ands.w	r6, r6, #15
 8001af0:	f040 80c6 	bne.w	8001c80 <HAL_PCD_IRQHandler+0x1c8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001af4:	f011 0110 	ands.w	r1, r1, #16
 8001af8:	d12b      	bne.n	8001b52 <HAL_PCD_IRQHandler+0x9a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001afa:	8803      	ldrh	r3, [r0, #0]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	ea03 0309 	and.w	r3, r3, r9
 8001b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b06:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b08:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001b0c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001b16:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8001b1a:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8001b1e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b24:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001b26:	4413      	add	r3, r2
 8001b28:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	f002 fd2f 	bl	800458e <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b30:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0ce      	beq.n	8001ad6 <HAL_PCD_IRQHandler+0x1e>
 8001b38:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b3a:	2a00      	cmp	r2, #0
 8001b3c:	d1cb      	bne.n	8001ad6 <HAL_PCD_IRQHandler+0x1e>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b3e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001b42:	6821      	ldr	r1, [r4, #0]
 8001b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b48:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001b4c:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8001b50:	e7c1      	b.n	8001ad6 <HAL_PCD_IRQHandler+0x1e>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b52:	8805      	ldrh	r5, [r0, #0]
 8001b54:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b56:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 8001b5a:	d021      	beq.n	8001ba0 <HAL_PCD_IRQHandler+0xe8>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b5c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001b60:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001b6a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001b6e:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b72:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8001b76:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b7a:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b7e:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8001b82:	f001 fef1 	bl	8003968 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b86:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001b88:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b8a:	8813      	ldrh	r3, [r2, #0]
 8001b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b90:	051b      	lsls	r3, r3, #20
 8001b92:	0d1b      	lsrs	r3, r3, #20
 8001b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b98:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001b9a:	f002 fce9 	bl	8004570 <HAL_PCD_SetupStageCallback>
 8001b9e:	e79a      	b.n	8001ad6 <HAL_PCD_IRQHandler+0x1e>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ba0:	0419      	lsls	r1, r3, #16
 8001ba2:	d598      	bpl.n	8001ad6 <HAL_PCD_IRQHandler+0x1e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ba4:	8803      	ldrh	r3, [r0, #0]
 8001ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001baa:	051b      	lsls	r3, r3, #20
 8001bac:	0d1b      	lsrs	r3, r3, #20
 8001bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb2:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bb4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001bb8:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001bc2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001bc6:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8001bca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bce:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001bd2:	b18b      	cbz	r3, 8001bf8 <HAL_PCD_IRQHandler+0x140>
 8001bd4:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8001bd8:	b171      	cbz	r1, 8001bf8 <HAL_PCD_IRQHandler+0x140>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001bda:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8001bde:	f001 fec3 	bl	8003968 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001be2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8001be6:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001bea:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8001bec:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001bee:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8001bf0:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001bf4:	f002 fcc2 	bl	800457c <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001bf8:	6821      	ldr	r1, [r4, #0]
 8001bfa:	880a      	ldrh	r2, [r1, #0]
 8001bfc:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001bfe:	0512      	lsls	r2, r2, #20
 8001c00:	f53f af69 	bmi.w	8001ad6 <HAL_PCD_IRQHandler+0x1e>
 8001c04:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001c08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001c0c:	f43f af63 	beq.w	8001ad6 <HAL_PCD_IRQHandler+0x1e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c10:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8001c14:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	5ac2      	ldrh	r2, [r0, r3]
 8001c1c:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 8001c20:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001c24:	2d3e      	cmp	r5, #62	; 0x3e
 8001c26:	52c2      	strh	r2, [r0, r3]
 8001c28:	d90c      	bls.n	8001c44 <HAL_PCD_IRQHandler+0x18c>
 8001c2a:	5ac2      	ldrh	r2, [r0, r3]
 8001c2c:	096e      	lsrs	r6, r5, #5
 8001c2e:	06ef      	lsls	r7, r5, #27
 8001c30:	bf08      	it	eq
 8001c32:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8001c36:	b292      	uxth	r2, r2
 8001c38:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8001c3c:	ea42 0208 	orr.w	r2, r2, r8
 8001c40:	b292      	uxth	r2, r2
 8001c42:	e004      	b.n	8001c4e <HAL_PCD_IRQHandler+0x196>
 8001c44:	b99d      	cbnz	r5, 8001c6e <HAL_PCD_IRQHandler+0x1b6>
 8001c46:	5ac2      	ldrh	r2, [r0, r3]
 8001c48:	b292      	uxth	r2, r2
 8001c4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c4e:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001c50:	880b      	ldrh	r3, [r1, #0]
 8001c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c5a:	041b      	lsls	r3, r3, #16
 8001c5c:	0c1b      	lsrs	r3, r3, #16
 8001c5e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c6a:	800b      	strh	r3, [r1, #0]
 8001c6c:	e733      	b.n	8001ad6 <HAL_PCD_IRQHandler+0x1e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c6e:	5ac2      	ldrh	r2, [r0, r3]
 8001c70:	086e      	lsrs	r6, r5, #1
 8001c72:	07ed      	lsls	r5, r5, #31
 8001c74:	bf48      	it	mi
 8001c76:	3601      	addmi	r6, #1
 8001c78:	b292      	uxth	r2, r2
 8001c7a:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8001c7e:	e7df      	b.n	8001c40 <HAL_PCD_IRQHandler+0x188>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001c80:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c84:	041a      	lsls	r2, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001c86:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c88:	f140 80f4 	bpl.w	8001e74 <HAL_PCD_IRQHandler+0x3bc>
        if (ep->doublebuffer == 0U)
 8001c8c:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c8e:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8001c92:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c9a:	051b      	lsls	r3, r3, #20
 8001c9c:	0d1b      	lsrs	r3, r3, #20
 8001c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca2:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8001ca6:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8001caa:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8001cae:	b9b3      	cbnz	r3, 8001cde <HAL_PCD_IRQHandler+0x226>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cb0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001cb4:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	3306      	adds	r3, #6
 8001cbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001cc0:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8001cc4:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8001cc8:	2d00      	cmp	r5, #0
 8001cca:	f000 80b7 	beq.w	8001e3c <HAL_PCD_IRQHandler+0x384>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001cce:	462b      	mov	r3, r5
 8001cd0:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001cd4:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001cd8:	f001 fe46 	bl	8003968 <USB_ReadPMA>
 8001cdc:	e0ae      	b.n	8001e3c <HAL_PCD_IRQHandler+0x384>
          if (ep->type == EP_TYPE_BULK)
 8001cde:	f891 216b 	ldrb.w	r2, [r1, #363]	; 0x16b
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ce2:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
          if (ep->type == EP_TYPE_BULK)
 8001ce6:	2a02      	cmp	r2, #2
 8001ce8:	f040 8086 	bne.w	8001df8 <HAL_PCD_IRQHandler+0x340>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001cec:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001cf0:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000

    if (ep->xfer_len >= count)
 8001cf4:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cf8:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001cfc:	b2ad      	uxth	r5, r5
 8001cfe:	f007 0e40 	and.w	lr, r7, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d02:	d03b      	beq.n	8001d7c <HAL_PCD_IRQHandler+0x2c4>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d04:	44ab      	add	fp, r5
 8001d06:	f10b 0b02 	add.w	fp, fp, #2
 8001d0a:	f83c 501b 	ldrh.w	r5, [ip, fp, lsl #1]
 8001d0e:	f3c5 0509 	ubfx	r5, r5, #0, #10
    if (ep->xfer_len >= count)
 8001d12:	4295      	cmp	r5, r2
 8001d14:	d913      	bls.n	8001d3e <HAL_PCD_IRQHandler+0x286>
 8001d16:	2200      	movs	r2, #0
 8001d18:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d1c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001d20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d24:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d28:	0412      	lsls	r2, r2, #16
 8001d2a:	0c12      	lsrs	r2, r2, #16
 8001d2c:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8001d30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d38:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8001d3c:	e004      	b.n	8001d48 <HAL_PCD_IRQHandler+0x290>
      ep->xfer_len -= count;
 8001d3e:	1b52      	subs	r2, r2, r5
 8001d40:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8001d44:	2a00      	cmp	r2, #0
 8001d46:	d0e9      	beq.n	8001d1c <HAL_PCD_IRQHandler+0x264>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d48:	f1be 0f00 	cmp.w	lr, #0
 8001d4c:	d00d      	beq.n	8001d6a <HAL_PCD_IRQHandler+0x2b2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001d4e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001d52:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001d56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d5a:	0412      	lsls	r2, r2, #16
 8001d5c:	0c12      	lsrs	r2, r2, #16
 8001d5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d62:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001d66:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8001d6a:	2d00      	cmp	r5, #0
 8001d6c:	d066      	beq.n	8001e3c <HAL_PCD_IRQHandler+0x384>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d6e:	2128      	movs	r1, #40	; 0x28
 8001d70:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d74:	462b      	mov	r3, r5
 8001d76:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8001d7a:	e7ab      	b.n	8001cd4 <HAL_PCD_IRQHandler+0x21c>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d7c:	445d      	add	r5, fp
 8001d7e:	3506      	adds	r5, #6
 8001d80:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 8001d84:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8001d88:	4295      	cmp	r5, r2
 8001d8a:	d912      	bls.n	8001db2 <HAL_PCD_IRQHandler+0x2fa>
 8001d8c:	f8c1 a180 	str.w	sl, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d90:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001d94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d9c:	0412      	lsls	r2, r2, #16
 8001d9e:	0c12      	lsrs	r2, r2, #16
 8001da0:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8001da4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001da8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dac:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8001db0:	e004      	b.n	8001dbc <HAL_PCD_IRQHandler+0x304>
      ep->xfer_len -= count;
 8001db2:	1b52      	subs	r2, r2, r5
 8001db4:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8001db8:	2a00      	cmp	r2, #0
 8001dba:	d0e9      	beq.n	8001d90 <HAL_PCD_IRQHandler+0x2d8>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001dbc:	f1be 0f00 	cmp.w	lr, #0
 8001dc0:	d10d      	bne.n	8001dde <HAL_PCD_IRQHandler+0x326>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001dc2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001dc6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001dca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001dce:	0412      	lsls	r2, r2, #16
 8001dd0:	0c12      	lsrs	r2, r2, #16
 8001dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dd6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001dda:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8001dde:	b36d      	cbz	r5, 8001e3c <HAL_PCD_IRQHandler+0x384>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001de0:	2128      	movs	r1, #40	; 0x28
 8001de2:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001de6:	462b      	mov	r3, r5
 8001de8:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8001dec:	e772      	b.n	8001cd4 <HAL_PCD_IRQHandler+0x21c>
 8001dee:	bf00      	nop
 8001df0:	ffff8f0f 	.word	0xffff8f0f
 8001df4:	ffff8000 	.word	0xffff8000
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001df8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001dfc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001e00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e04:	0412      	lsls	r2, r2, #16
 8001e06:	0c12      	lsrs	r2, r2, #16
 8001e08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e0c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001e10:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001e14:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 8001e18:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001e1c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8001e20:	ea4f 02c3 	mov.w	r2, r3, lsl #3
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e24:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001e28:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001e2a:	d056      	beq.n	8001eda <HAL_PCD_IRQHandler+0x422>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e2c:	3302      	adds	r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8001e34:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8001e38:	2d00      	cmp	r5, #0
 8001e3a:	d19b      	bne.n	8001d74 <HAL_PCD_IRQHandler+0x2bc>
        ep->xfer_count += count;
 8001e3c:	2128      	movs	r1, #40	; 0x28
 8001e3e:	4371      	muls	r1, r6
 8001e40:	1863      	adds	r3, r4, r1
 8001e42:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8001e46:	442a      	add	r2, r5
 8001e48:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8001e4c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8001e50:	442a      	add	r2, r5
 8001e52:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001e56:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8001e5a:	b11a      	cbz	r2, 8001e64 <HAL_PCD_IRQHandler+0x3ac>
 8001e5c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8001e60:	429d      	cmp	r5, r3
 8001e62:	d243      	bcs.n	8001eec <HAL_PCD_IRQHandler+0x434>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001e64:	2328      	movs	r3, #40	; 0x28
 8001e66:	fb03 4306 	mla	r3, r3, r6, r4
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8001e70:	f002 fb84 	bl	800457c <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001e74:	063b      	lsls	r3, r7, #24
 8001e76:	f57f ae2e 	bpl.w	8001ad6 <HAL_PCD_IRQHandler+0x1e>
 8001e7a:	f04f 0c28 	mov.w	ip, #40	; 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e7e:	6820      	ldr	r0, [r4, #0]
 8001e80:	fb0c 4506 	mla	r5, ip, r6, r4
 8001e84:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	ea03 0309 	and.w	r3, r3, r9
 8001e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e92:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8001e96:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d150      	bne.n	8001f40 <HAL_PCD_IRQHandler+0x488>
          ep->xfer_len = 0U;
 8001e9e:	2100      	movs	r1, #0
          if (ep->doublebuffer != 0U)
 8001ea0:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
          ep->xfer_len = 0U;
 8001ea4:	6429      	str	r1, [r5, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8001ea6:	b393      	cbz	r3, 8001f0e <HAL_PCD_IRQHandler+0x456>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ea8:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8001eac:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8001eb0:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8001eb4:	d031      	beq.n	8001f1a <HAL_PCD_IRQHandler+0x462>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001eb6:	bb02      	cbnz	r2, 8001efa <HAL_PCD_IRQHandler+0x442>
 8001eb8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	b292      	uxth	r2, r2
 8001ec0:	f200 4004 	addw	r0, r0, #1028	; 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ec4:	4410      	add	r0, r2
 8001ec6:	5a1a      	ldrh	r2, [r3, r0]
 8001ec8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001ecc:	521a      	strh	r2, [r3, r0]
 8001ece:	5a1a      	ldrh	r2, [r3, r0]
 8001ed0:	b292      	uxth	r2, r2
 8001ed2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ed6:	521a      	strh	r2, [r3, r0]
 8001ed8:	e019      	b.n	8001f0e <HAL_PCD_IRQHandler+0x456>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001eda:	3306      	adds	r3, #6
 8001edc:	4413      	add	r3, r2
 8001ede:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8001ee2:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8001ee6:	2d00      	cmp	r5, #0
 8001ee8:	d0a8      	beq.n	8001e3c <HAL_PCD_IRQHandler+0x384>
 8001eea:	e77c      	b.n	8001de6 <HAL_PCD_IRQHandler+0x32e>
        ep = &hpcd->OUT_ep[epindex];
 8001eec:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ef0:	6820      	ldr	r0, [r4, #0]
 8001ef2:	4421      	add	r1, r4
 8001ef4:	f001 fb00 	bl	80034f8 <USB_EPStartXfer>
 8001ef8:	e7bc      	b.n	8001e74 <HAL_PCD_IRQHandler+0x3bc>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001efa:	2a01      	cmp	r2, #1
 8001efc:	d107      	bne.n	8001f0e <HAL_PCD_IRQHandler+0x456>
 8001efe:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001f02:	f200 4004 	addw	r0, r0, #1028	; 0x404
 8001f06:	b292      	uxth	r2, r2
 8001f08:	011b      	lsls	r3, r3, #4
 8001f0a:	4410      	add	r0, r2
 8001f0c:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f0e:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f12:	4620      	mov	r0, r4
 8001f14:	f002 fb3b 	bl	800458e <HAL_PCD_DataInStageCallback>
 8001f18:	e5dd      	b.n	8001ad6 <HAL_PCD_IRQHandler+0x1e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f1a:	b932      	cbnz	r2, 8001f2a <HAL_PCD_IRQHandler+0x472>
 8001f1c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	b292      	uxth	r2, r2
 8001f24:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8001f28:	e7cc      	b.n	8001ec4 <HAL_PCD_IRQHandler+0x40c>
 8001f2a:	2a01      	cmp	r2, #1
 8001f2c:	d1ef      	bne.n	8001f0e <HAL_PCD_IRQHandler+0x456>
 8001f2e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001f32:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8001f36:	b292      	uxth	r2, r2
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	4410      	add	r0, r2
 8001f3c:	521f      	strh	r7, [r3, r0]
 8001f3e:	e7e6      	b.n	8001f0e <HAL_PCD_IRQHandler+0x456>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f40:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001f44:	f417 7280 	ands.w	r2, r7, #256	; 0x100
            if (ep->xfer_len > TxPctSize)
 8001f48:	6c2b      	ldr	r3, [r5, #64]	; 0x40
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f4a:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8001f4e:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001f52:	d11c      	bne.n	8001f8e <HAL_PCD_IRQHandler+0x4d6>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f54:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8001f58:	b2bf      	uxth	r7, r7
 8001f5a:	44ba      	add	sl, r7
 8001f5c:	f10a 0a02 	add.w	sl, sl, #2
 8001f60:	f83e 701a 	ldrh.w	r7, [lr, sl, lsl #1]
            if (ep->xfer_len > TxPctSize)
 8001f64:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8001f68:	429f      	cmp	r7, r3
 8001f6a:	d301      	bcc.n	8001f70 <HAL_PCD_IRQHandler+0x4b8>
 8001f6c:	642a      	str	r2, [r5, #64]	; 0x40
 8001f6e:	e7d0      	b.n	8001f12 <HAL_PCD_IRQHandler+0x45a>
              ep->xfer_len -= TxPctSize;
 8001f70:	1bdb      	subs	r3, r3, r7
 8001f72:	642b      	str	r3, [r5, #64]	; 0x40
              ep->xfer_buff += TxPctSize;
 8001f74:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 8001f76:	fb06 cc0c 	mla	ip, r6, ip, ip
              ep->xfer_buff += TxPctSize;
 8001f7a:	443b      	add	r3, r7
 8001f7c:	63eb      	str	r3, [r5, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8001f7e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f80:	eb04 010c 	add.w	r1, r4, ip
              ep->xfer_count += TxPctSize;
 8001f84:	443b      	add	r3, r7
 8001f86:	646b      	str	r3, [r5, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f88:	f001 fab6 	bl	80034f8 <USB_EPStartXfer>
 8001f8c:	e5a3      	b.n	8001ad6 <HAL_PCD_IRQHandler+0x1e>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f8e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f92:	f017 0c40 	ands.w	ip, r7, #64	; 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f96:	b292      	uxth	r2, r2
 8001f98:	4452      	add	r2, sl
 8001f9a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f9e:	f000 80dc 	beq.w	800215a <HAL_PCD_IRQHandler+0x6a2>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fa2:	3202      	adds	r2, #2
 8001fa4:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8001fa8:	f04f 0c28 	mov.w	ip, #40	; 0x28

    if (ep->xfer_len > TxPctSize)
 8001fac:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001fb0:	429a      	cmp	r2, r3
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 8001fb2:	bf28      	it	cs
 8001fb4:	2300      	movcs	r3, #0
 8001fb6:	fb0c 4c06 	mla	ip, ip, r6, r4
      ep->xfer_len -= TxPctSize;
 8001fba:	bf38      	it	cc
 8001fbc:	1a9b      	subcc	r3, r3, r2
 8001fbe:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001fc2:	b2bf      	uxth	r7, r7
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d14d      	bne.n	8002064 <HAL_PCD_IRQHandler+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fc8:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8001fcc:	2a00      	cmp	r2, #0
 8001fce:	d136      	bne.n	800203e <HAL_PCD_IRQHandler+0x586>
 8001fd0:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8001fd4:	010b      	lsls	r3, r1, #4
 8001fd6:	b2b2      	uxth	r2, r6
 8001fd8:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8001fdc:	4416      	add	r6, r2
 8001fde:	5af2      	ldrh	r2, [r6, r3]
 8001fe0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001fe4:	52f2      	strh	r2, [r6, r3]
 8001fe6:	5af2      	ldrh	r2, [r6, r3]
 8001fe8:	b292      	uxth	r2, r2
 8001fea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fee:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ff0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001ff4:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8001ff8:	b292      	uxth	r2, r2
 8001ffa:	4410      	add	r0, r2
 8001ffc:	5ac2      	ldrh	r2, [r0, r3]
 8001ffe:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002002:	52c2      	strh	r2, [r0, r3]
 8002004:	5ac2      	ldrh	r2, [r0, r3]
 8002006:	b292      	uxth	r2, r2
 8002008:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800200c:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800200e:	4620      	mov	r0, r4
 8002010:	f002 fabd 	bl	800458e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002014:	2f00      	cmp	r7, #0
 8002016:	f000 80dc 	beq.w	80021d2 <HAL_PCD_IRQHandler+0x71a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800201a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800201e:	6822      	ldr	r2, [r4, #0]
 8002020:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800202c:	041b      	lsls	r3, r3, #16
 800202e:	0c1b      	lsrs	r3, r3, #16
 8002030:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002038:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800203c:	e0c9      	b.n	80021d2 <HAL_PCD_IRQHandler+0x71a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800203e:	2a01      	cmp	r2, #1
 8002040:	d1e5      	bne.n	800200e <HAL_PCD_IRQHandler+0x556>
 8002042:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8002046:	010a      	lsls	r2, r1, #4
 8002048:	fa1f fc86 	uxth.w	ip, r6
 800204c:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8002050:	4466      	add	r6, ip
 8002052:	52b3      	strh	r3, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002054:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8002058:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 800205c:	b2b6      	uxth	r6, r6
 800205e:	4430      	add	r0, r6
 8002060:	5283      	strh	r3, [r0, r2]
 8002062:	e7d4      	b.n	800200e <HAL_PCD_IRQHandler+0x556>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002064:	b16f      	cbz	r7, 8002082 <HAL_PCD_IRQHandler+0x5ca>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002066:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800206a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800206e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002072:	041b      	lsls	r3, r3, #16
 8002074:	0c1b      	lsrs	r3, r3, #16
 8002076:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800207a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800207e:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002082:	2728      	movs	r7, #40	; 0x28
 8002084:	fb07 4706 	mla	r7, r7, r6, r4
 8002088:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800208c:	2b01      	cmp	r3, #1
 800208e:	f040 80a0 	bne.w	80021d2 <HAL_PCD_IRQHandler+0x71a>
        ep->xfer_buff += TxPctSize;
 8002092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8002094:	f8d7 e048 	ldr.w	lr, [r7, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 8002098:	eb03 0c02 	add.w	ip, r3, r2
        ep->xfer_count += TxPctSize;
 800209c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 800209e:	f8c7 c03c 	str.w	ip, [r7, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 80020a2:	4413      	add	r3, r2
 80020a4:	647b      	str	r3, [r7, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80020a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a8:	459e      	cmp	lr, r3
 80020aa:	d32c      	bcc.n	8002106 <HAL_PCD_IRQHandler+0x64e>
          ep->xfer_len_db -= len;
 80020ac:	ebae 0203 	sub.w	r2, lr, r3
 80020b0:	64ba      	str	r2, [r7, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80020b2:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 80020b6:	fa1f fe83 	uxth.w	lr, r3
 80020ba:	2a00      	cmp	r2, #0
 80020bc:	d141      	bne.n	8002142 <HAL_PCD_IRQHandler+0x68a>
 80020be:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80020c2:	f200 4704 	addw	r7, r0, #1028	; 0x404
 80020c6:	b292      	uxth	r2, r2
 80020c8:	443a      	add	r2, r7
 80020ca:	0109      	lsls	r1, r1, #4
 80020cc:	5a57      	ldrh	r7, [r2, r1]
 80020ce:	2b3e      	cmp	r3, #62	; 0x3e
 80020d0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80020d4:	5257      	strh	r7, [r2, r1]
 80020d6:	d923      	bls.n	8002120 <HAL_PCD_IRQHandler+0x668>
 80020d8:	06df      	lsls	r7, r3, #27
 80020da:	5a57      	ldrh	r7, [r2, r1]
 80020dc:	ea4f 1a53 	mov.w	sl, r3, lsr #5
 80020e0:	bf08      	it	eq
 80020e2:	f10a 3aff 	addeq.w	sl, sl, #4294967295
 80020e6:	b2bf      	uxth	r7, r7
 80020e8:	ea47 278a 	orr.w	r7, r7, sl, lsl #10
 80020ec:	ea47 0708 	orr.w	r7, r7, r8
 80020f0:	b2bf      	uxth	r7, r7
 80020f2:	5257      	strh	r7, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80020f4:	2128      	movs	r1, #40	; 0x28
 80020f6:	4673      	mov	r3, lr
 80020f8:	fb01 4606 	mla	r6, r1, r6, r4
 80020fc:	4661      	mov	r1, ip
 80020fe:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002100:	f001 f9ea 	bl	80034d8 <USB_WritePMA>
 8002104:	e065      	b.n	80021d2 <HAL_PCD_IRQHandler+0x71a>
        else if (ep->xfer_len_db == 0U)
 8002106:	f1be 0f00 	cmp.w	lr, #0
 800210a:	d103      	bne.n	8002114 <HAL_PCD_IRQHandler+0x65c>
    if (ep->xfer_len > TxPctSize)
 800210c:	4613      	mov	r3, r2
          ep->xfer_fill_db = 0U;
 800210e:	f887 e04c 	strb.w	lr, [r7, #76]	; 0x4c
 8002112:	e7ce      	b.n	80020b2 <HAL_PCD_IRQHandler+0x5fa>
          ep->xfer_fill_db = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 800211a:	64bb      	str	r3, [r7, #72]	; 0x48
 800211c:	4673      	mov	r3, lr
 800211e:	e7c8      	b.n	80020b2 <HAL_PCD_IRQHandler+0x5fa>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002120:	b92b      	cbnz	r3, 800212e <HAL_PCD_IRQHandler+0x676>
 8002122:	5a53      	ldrh	r3, [r2, r1]
 8002124:	b29b      	uxth	r3, r3
 8002126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800212a:	5253      	strh	r3, [r2, r1]
 800212c:	e7e2      	b.n	80020f4 <HAL_PCD_IRQHandler+0x63c>
 800212e:	085f      	lsrs	r7, r3, #1
 8002130:	07db      	lsls	r3, r3, #31
 8002132:	5a53      	ldrh	r3, [r2, r1]
 8002134:	bf48      	it	mi
 8002136:	3701      	addmi	r7, #1
 8002138:	b29b      	uxth	r3, r3
 800213a:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 800213e:	b29b      	uxth	r3, r3
 8002140:	e7f3      	b.n	800212a <HAL_PCD_IRQHandler+0x672>
 8002142:	2a01      	cmp	r2, #1
 8002144:	d1d6      	bne.n	80020f4 <HAL_PCD_IRQHandler+0x63c>
 8002146:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800214a:	0109      	lsls	r1, r1, #4
 800214c:	b29a      	uxth	r2, r3
 800214e:	f200 4304 	addw	r3, r0, #1028	; 0x404
 8002152:	4413      	add	r3, r2
 8002154:	f823 e001 	strh.w	lr, [r3, r1]
 8002158:	e7cc      	b.n	80020f4 <HAL_PCD_IRQHandler+0x63c>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800215a:	3206      	adds	r2, #6
 800215c:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8002160:	b2bf      	uxth	r7, r7
    if (ep->xfer_len >= TxPctSize)
 8002162:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002166:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8002168:	bf88      	it	hi
 800216a:	4663      	movhi	r3, ip
 800216c:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8002170:	fb0c 4c06 	mla	ip, ip, r6, r4
      ep->xfer_len -= TxPctSize;
 8002174:	bf98      	it	ls
 8002176:	1a9b      	subls	r3, r3, r2
 8002178:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 800217c:	2b00      	cmp	r3, #0
 800217e:	d14e      	bne.n	800221e <HAL_PCD_IRQHandler+0x766>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002180:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8002184:	2a00      	cmp	r2, #0
 8002186:	d137      	bne.n	80021f8 <HAL_PCD_IRQHandler+0x740>
 8002188:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 800218c:	010b      	lsls	r3, r1, #4
 800218e:	b2b2      	uxth	r2, r6
 8002190:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8002194:	4416      	add	r6, r2
 8002196:	5af2      	ldrh	r2, [r6, r3]
 8002198:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800219c:	52f2      	strh	r2, [r6, r3]
 800219e:	5af2      	ldrh	r2, [r6, r3]
 80021a0:	b292      	uxth	r2, r2
 80021a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021a6:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021a8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80021ac:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 80021b0:	b292      	uxth	r2, r2
 80021b2:	4410      	add	r0, r2
 80021b4:	5ac2      	ldrh	r2, [r0, r3]
 80021b6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80021ba:	52c2      	strh	r2, [r0, r3]
 80021bc:	5ac2      	ldrh	r2, [r0, r3]
 80021be:	b292      	uxth	r2, r2
 80021c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021c4:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021c6:	4620      	mov	r0, r4
 80021c8:	f002 f9e1 	bl	800458e <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80021cc:	2f00      	cmp	r7, #0
 80021ce:	f43f af24 	beq.w	800201a <HAL_PCD_IRQHandler+0x562>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80021d2:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80021d6:	6822      	ldr	r2, [r4, #0]
 80021d8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021e6:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80021ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80021f6:	e46e      	b.n	8001ad6 <HAL_PCD_IRQHandler+0x1e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021f8:	2a01      	cmp	r2, #1
 80021fa:	d1e4      	bne.n	80021c6 <HAL_PCD_IRQHandler+0x70e>
 80021fc:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8002200:	010a      	lsls	r2, r1, #4
 8002202:	fa1f fc86 	uxth.w	ip, r6
 8002206:	f200 4604 	addw	r6, r0, #1028	; 0x404
 800220a:	4466      	add	r6, ip
 800220c:	52b3      	strh	r3, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800220e:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8002212:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8002216:	b2b6      	uxth	r6, r6
 8002218:	4430      	add	r0, r6
 800221a:	5283      	strh	r3, [r0, r2]
 800221c:	e7d3      	b.n	80021c6 <HAL_PCD_IRQHandler+0x70e>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800221e:	b96f      	cbnz	r7, 800223c <HAL_PCD_IRQHandler+0x784>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002220:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002224:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800222c:	041b      	lsls	r3, r3, #16
 800222e:	0c1b      	lsrs	r3, r3, #16
 8002230:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002238:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800223c:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8002240:	fb0c 4c06 	mla	ip, ip, r6, r4
 8002244:	f89c 304c 	ldrb.w	r3, [ip, #76]	; 0x4c
 8002248:	2b01      	cmp	r3, #1
 800224a:	d1c2      	bne.n	80021d2 <HAL_PCD_IRQHandler+0x71a>
        ep->xfer_count += TxPctSize;
 800224c:	f8dc 3044 	ldr.w	r3, [ip, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8002250:	f8dc 703c 	ldr.w	r7, [ip, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 8002254:	4413      	add	r3, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 8002256:	f8dc e048 	ldr.w	lr, [ip, #72]	; 0x48
        ep->xfer_count += TxPctSize;
 800225a:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800225e:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
        ep->xfer_buff += TxPctSize;
 8002262:	4417      	add	r7, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 8002264:	459e      	cmp	lr, r3
        ep->xfer_buff += TxPctSize;
 8002266:	f8cc 703c 	str.w	r7, [ip, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800226a:	d326      	bcc.n	80022ba <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db -= len;
 800226c:	ebae 0203 	sub.w	r2, lr, r3
 8002270:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002274:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8002278:	fa1f fc83 	uxth.w	ip, r3
 800227c:	2a00      	cmp	r2, #0
 800227e:	d142      	bne.n	8002306 <HAL_PCD_IRQHandler+0x84e>
 8002280:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002284:	f200 4e0c 	addw	lr, r0, #1036	; 0x40c
 8002288:	b292      	uxth	r2, r2
 800228a:	4472      	add	r2, lr
 800228c:	0109      	lsls	r1, r1, #4
 800228e:	f832 e001 	ldrh.w	lr, [r2, r1]
 8002292:	2b3e      	cmp	r3, #62	; 0x3e
 8002294:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8002298:	f822 e001 	strh.w	lr, [r2, r1]
 800229c:	d91b      	bls.n	80022d6 <HAL_PCD_IRQHandler+0x81e>
 800229e:	ea4f 1e53 	mov.w	lr, r3, lsr #5
 80022a2:	06db      	lsls	r3, r3, #27
 80022a4:	5a53      	ldrh	r3, [r2, r1]
 80022a6:	bf08      	it	eq
 80022a8:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
 80022b2:	ea43 0308 	orr.w	r3, r3, r8
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	e012      	b.n	80022e0 <HAL_PCD_IRQHandler+0x828>
        else if (ep->xfer_len_db == 0U)
 80022ba:	f1be 0f00 	cmp.w	lr, #0
 80022be:	d103      	bne.n	80022c8 <HAL_PCD_IRQHandler+0x810>
    if (ep->xfer_len >= TxPctSize)
 80022c0:	4613      	mov	r3, r2
          ep->xfer_fill_db = 0U;
 80022c2:	f88c e04c 	strb.w	lr, [ip, #76]	; 0x4c
 80022c6:	e7d5      	b.n	8002274 <HAL_PCD_IRQHandler+0x7bc>
          ep->xfer_len_db = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
          ep->xfer_fill_db = 0;
 80022ce:	f88c 304c 	strb.w	r3, [ip, #76]	; 0x4c
 80022d2:	4673      	mov	r3, lr
 80022d4:	e7ce      	b.n	8002274 <HAL_PCD_IRQHandler+0x7bc>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80022d6:	b95b      	cbnz	r3, 80022f0 <HAL_PCD_IRQHandler+0x838>
 80022d8:	5a53      	ldrh	r3, [r2, r1]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022e0:	5253      	strh	r3, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80022e2:	2128      	movs	r1, #40	; 0x28
 80022e4:	fb01 4606 	mla	r6, r1, r6, r4
 80022e8:	4663      	mov	r3, ip
 80022ea:	4639      	mov	r1, r7
 80022ec:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 80022ee:	e707      	b.n	8002100 <HAL_PCD_IRQHandler+0x648>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80022f0:	ea4f 0e53 	mov.w	lr, r3, lsr #1
 80022f4:	07db      	lsls	r3, r3, #31
 80022f6:	5a53      	ldrh	r3, [r2, r1]
 80022f8:	bf48      	it	mi
 80022fa:	f10e 0e01 	addmi.w	lr, lr, #1
 80022fe:	b29b      	uxth	r3, r3
 8002300:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
 8002304:	e7d7      	b.n	80022b6 <HAL_PCD_IRQHandler+0x7fe>
 8002306:	2a01      	cmp	r2, #1
 8002308:	d1eb      	bne.n	80022e2 <HAL_PCD_IRQHandler+0x82a>
 800230a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800230e:	b29a      	uxth	r2, r3
 8002310:	f200 430c 	addw	r3, r0, #1036	; 0x40c
 8002314:	4413      	add	r3, r2
 8002316:	010a      	lsls	r2, r1, #4
 8002318:	f823 c002 	strh.w	ip, [r3, r2]
 800231c:	e7e1      	b.n	80022e2 <HAL_PCD_IRQHandler+0x82a>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800231e:	0546      	lsls	r6, r0, #21
 8002320:	d512      	bpl.n	8002348 <HAL_PCD_IRQHandler+0x890>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002322:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8002324:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002326:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800232a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800232e:	041b      	lsls	r3, r3, #16
 8002330:	0c1b      	lsrs	r3, r3, #16
 8002332:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8002336:	f002 f936 	bl	80045a6 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800233a:	4629      	mov	r1, r5
 800233c:	4620      	mov	r0, r4
}
 800233e:	b005      	add	sp, #20
 8002340:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002344:	f7ff bba4 	b.w	8001a90 <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002348:	0441      	lsls	r1, r0, #17
 800234a:	d50a      	bpl.n	8002362 <HAL_PCD_IRQHandler+0x8aa>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800234c:	6822      	ldr	r2, [r4, #0]
 800234e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002352:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002356:	041b      	lsls	r3, r3, #16
 8002358:	0c1b      	lsrs	r3, r3, #16
 800235a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 800235e:	f7ff bbbf 	b.w	8001ae0 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002362:	0482      	lsls	r2, r0, #18
 8002364:	d505      	bpl.n	8002372 <HAL_PCD_IRQHandler+0x8ba>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002366:	6822      	ldr	r2, [r4, #0]
 8002368:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800236c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002370:	e7f1      	b.n	8002356 <HAL_PCD_IRQHandler+0x89e>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002372:	04c3      	lsls	r3, r0, #19
 8002374:	d519      	bpl.n	80023aa <HAL_PCD_IRQHandler+0x8f2>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002376:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8002378:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800237a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800237e:	f023 0304 	bic.w	r3, r3, #4
 8002382:	041b      	lsls	r3, r3, #16
 8002384:	0c1b      	lsrs	r3, r3, #16
 8002386:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800238a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800238e:	f023 0308 	bic.w	r3, r3, #8
 8002392:	041b      	lsls	r3, r3, #16
 8002394:	0c1b      	lsrs	r3, r3, #16
 8002396:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 800239a:	f002 f927 	bl	80045ec <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800239e:	6822      	ldr	r2, [r4, #0]
 80023a0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80023a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023a8:	e7d5      	b.n	8002356 <HAL_PCD_IRQHandler+0x89e>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80023aa:	0507      	lsls	r7, r0, #20
 80023ac:	d548      	bpl.n	8002440 <HAL_PCD_IRQHandler+0x988>
 80023ae:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80023b0:	6822      	ldr	r2, [r4, #0]
 80023b2:	4606      	mov	r6, r0
 80023b4:	4611      	mov	r1, r2
 80023b6:	4613      	mov	r3, r2
 80023b8:	f102 0520 	add.w	r5, r2, #32
 80023bc:	f833 7b04 	ldrh.w	r7, [r3], #4
    for (i = 0U; i < 8U; i++)
 80023c0:	429d      	cmp	r5, r3
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80023c2:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 80023c6:	d1f9      	bne.n	80023bc <HAL_PCD_IRQHandler+0x904>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80023c8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80023d6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80023da:	f023 0301 	bic.w	r3, r3, #1
 80023de:	041b      	lsls	r3, r3, #16
 80023e0:	0c1b      	lsrs	r3, r3, #16
 80023e2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80023e6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80023ea:	055e      	lsls	r6, r3, #21
 80023ec:	d5fb      	bpl.n	80023e6 <HAL_PCD_IRQHandler+0x92e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80023ee:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80023f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023f6:	041b      	lsls	r3, r3, #16
 80023f8:	0c1b      	lsrs	r3, r3, #16
 80023fa:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80023fe:	f830 3b02 	ldrh.w	r3, [r0], #2
 8002402:	f821 3b04 	strh.w	r3, [r1], #4
    for (i = 0U; i < 8U; i++)
 8002406:	428d      	cmp	r5, r1
 8002408:	d1f9      	bne.n	80023fe <HAL_PCD_IRQHandler+0x946>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800240a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800240e:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002410:	b29b      	uxth	r3, r3
 8002412:	f043 0308 	orr.w	r3, r3, #8
 8002416:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800241a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800241e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002422:	041b      	lsls	r3, r3, #16
 8002424:	0c1b      	lsrs	r3, r3, #16
 8002426:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800242a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800242e:	b29b      	uxth	r3, r3
 8002430:	f043 0304 	orr.w	r3, r3, #4
 8002434:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8002438:	f002 f8c8 	bl	80045cc <HAL_PCD_SuspendCallback>
    return;
 800243c:	f7ff bb50 	b.w	8001ae0 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002440:	0582      	lsls	r2, r0, #22
 8002442:	d50d      	bpl.n	8002460 <HAL_PCD_IRQHandler+0x9a8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002444:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8002446:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002448:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800244c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002450:	041b      	lsls	r3, r3, #16
 8002452:	0c1b      	lsrs	r3, r3, #16
 8002454:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8002458:	f002 f8a1 	bl	800459e <HAL_PCD_SOFCallback>
    return;
 800245c:	f7ff bb40 	b.w	8001ae0 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002460:	05c3      	lsls	r3, r0, #23
 8002462:	f57f ab3d 	bpl.w	8001ae0 <HAL_PCD_IRQHandler+0x28>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002466:	6822      	ldr	r2, [r4, #0]
 8002468:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800246c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002470:	e771      	b.n	8002356 <HAL_PCD_IRQHandler+0x89e>
 8002472:	bf00      	nop

08002474 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8002474:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8002478:	b570      	push	{r4, r5, r6, lr}
 800247a:	4605      	mov	r5, r0
 800247c:	f04f 0428 	mov.w	r4, #40	; 0x28
 8002480:	f001 0007 	and.w	r0, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 8002484:	d01a      	beq.n	80024bc <HAL_PCD_EP_Open+0x48>
    ep->is_in = 1U;
 8002486:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002488:	fb00 4104 	mla	r1, r0, r4, r4
 800248c:	4429      	add	r1, r5
    ep->is_in = 1U;
 800248e:	704e      	strb	r6, [r1, #1]
  if (ep_type == EP_TYPE_BULK)
 8002490:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8002492:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 8002494:	bf08      	it	eq
 8002496:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002498:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 800249a:	bf08      	it	eq
 800249c:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 800249e:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 80024a0:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d012      	beq.n	80024ce <HAL_PCD_EP_Open+0x5a>
 80024a8:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024aa:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 80024ac:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024b0:	f000 fd66 	bl	8002f80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024b4:	2000      	movs	r0, #0
 80024b6:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 80024ba:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 80024bc:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024be:	4344      	muls	r4, r0
 80024c0:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    ep->is_in = 0U;
 80024c4:	442c      	add	r4, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024c6:	4429      	add	r1, r5
    ep->is_in = 0U;
 80024c8:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
 80024cc:	e7e0      	b.n	8002490 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 80024ce:	2002      	movs	r0, #2
 80024d0:	e7f3      	b.n	80024ba <HAL_PCD_EP_Open+0x46>

080024d2 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80024d2:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80024d6:	b510      	push	{r4, lr}
 80024d8:	f04f 0328 	mov.w	r3, #40	; 0x28
 80024dc:	4604      	mov	r4, r0
 80024de:	f001 0207 	and.w	r2, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 80024e2:	d013      	beq.n	800250c <HAL_PCD_EP_Close+0x3a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024e4:	fb02 3103 	mla	r1, r2, r3, r3
 80024e8:	4401      	add	r1, r0
    ep->is_in = 1U;
 80024ea:	2001      	movs	r0, #1
 80024ec:	7048      	strb	r0, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024ee:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80024f0:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d012      	beq.n	800251e <HAL_PCD_EP_Close+0x4c>
 80024f8:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80024fa:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80024fc:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002500:	f000 fea0 	bl	8003244 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002504:	2000      	movs	r0, #0
 8002506:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800250a:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800250c:	4353      	muls	r3, r2
 800250e:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8002512:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002514:	4403      	add	r3, r0
 8002516:	2000      	movs	r0, #0
 8002518:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 800251c:	e7e7      	b.n	80024ee <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 800251e:	2002      	movs	r0, #2
 8002520:	e7f3      	b.n	800250a <HAL_PCD_EP_Close+0x38>

08002522 <HAL_PCD_EP_Receive>:
{
 8002522:	b570      	push	{r4, r5, r6, lr}
 8002524:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 8002528:	2128      	movs	r1, #40	; 0x28
  ep->xfer_count = 0U;
 800252a:	2600      	movs	r6, #0
  ep->xfer_buff = pBuf;
 800252c:	4369      	muls	r1, r5
 800252e:	1844      	adds	r4, r0, r1
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002530:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002534:	4401      	add	r1, r0
  ep->xfer_len = len;
 8002536:	e9c4 235f 	strd	r2, r3, [r4, #380]	; 0x17c
  ep->xfer_count = 0U;
 800253a:	f8c4 6184 	str.w	r6, [r4, #388]	; 0x184
  ep->is_in = 0U;
 800253e:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8002542:	f884 5168 	strb.w	r5, [r4, #360]	; 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002546:	6800      	ldr	r0, [r0, #0]
 8002548:	f000 ffd6 	bl	80034f8 <USB_EPStartXfer>
}
 800254c:	4630      	mov	r0, r6
 800254e:	bd70      	pop	{r4, r5, r6, pc}

08002550 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002550:	2328      	movs	r3, #40	; 0x28
 8002552:	f001 0107 	and.w	r1, r1, #7
 8002556:	fb03 0001 	mla	r0, r3, r1, r0
}
 800255a:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 800255e:	4770      	bx	lr

08002560 <HAL_PCD_EP_Transmit>:
{
 8002560:	b570      	push	{r4, r5, r6, lr}
 8002562:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 8002566:	2128      	movs	r1, #40	; 0x28
 8002568:	fb01 0405 	mla	r4, r1, r5, r0
  ep->xfer_count = 0U;
 800256c:	2600      	movs	r6, #0
  ep->xfer_len = len;
 800256e:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 8002572:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002574:	fb05 1101 	mla	r1, r5, r1, r1
  ep->xfer_fill_db = 1U;
 8002578:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800257c:	4401      	add	r1, r0
  ep->xfer_len_db = len;
 800257e:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8002580:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8002582:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8002586:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800258a:	6800      	ldr	r0, [r0, #0]
 800258c:	f000 ffb4 	bl	80034f8 <USB_EPStartXfer>
}
 8002590:	4630      	mov	r0, r6
 8002592:	bd70      	pop	{r4, r5, r6, pc}

08002594 <HAL_PCD_EP_SetStall>:
{
 8002594:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002596:	6843      	ldr	r3, [r0, #4]
 8002598:	f001 0507 	and.w	r5, r1, #7
 800259c:	429d      	cmp	r5, r3
{
 800259e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025a0:	d828      	bhi.n	80025f4 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 80025a2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80025a6:	f04f 0328 	mov.w	r3, #40	; 0x28
 80025aa:	d01a      	beq.n	80025e2 <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 80025ac:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025ae:	fb05 3103 	mla	r1, r5, r3, r3
 80025b2:	4401      	add	r1, r0
    ep->is_in = 1U;
 80025b4:	704a      	strb	r2, [r1, #1]
  ep->is_stall = 1U;
 80025b6:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80025b8:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80025ba:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80025bc:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d019      	beq.n	80025f8 <HAL_PCD_EP_SetStall+0x64>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80025c4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80025c6:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80025ca:	f000 ff0c 	bl	80033e6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025ce:	b925      	cbnz	r5, 80025da <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80025d0:	6820      	ldr	r0, [r4, #0]
 80025d2:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 80025d6:	f000 ff7d 	bl	80034d4 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80025da:	2000      	movs	r0, #0
 80025dc:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80025e0:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80025e2:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80025e4:	434b      	muls	r3, r1
 80025e6:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 80025ea:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80025ec:	4401      	add	r1, r0
    ep->is_in = 0U;
 80025ee:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 80025f2:	e7e0      	b.n	80025b6 <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 80025f4:	2001      	movs	r0, #1
 80025f6:	e7f3      	b.n	80025e0 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 80025f8:	2002      	movs	r0, #2
 80025fa:	e7f1      	b.n	80025e0 <HAL_PCD_EP_SetStall+0x4c>

080025fc <HAL_PCD_EP_ClrStall>:
{
 80025fc:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025fe:	6843      	ldr	r3, [r0, #4]
 8002600:	f001 020f 	and.w	r2, r1, #15
 8002604:	429a      	cmp	r2, r3
{
 8002606:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002608:	d825      	bhi.n	8002656 <HAL_PCD_EP_ClrStall+0x5a>
  if ((0x80U & ep_addr) == 0x80U)
 800260a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800260e:	f04f 0328 	mov.w	r3, #40	; 0x28
 8002612:	f001 0207 	and.w	r2, r1, #7
 8002616:	d015      	beq.n	8002644 <HAL_PCD_EP_ClrStall+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002618:	fb02 3103 	mla	r1, r2, r3, r3
 800261c:	4401      	add	r1, r0
    ep->is_in = 1U;
 800261e:	2001      	movs	r0, #1
 8002620:	7048      	strb	r0, [r1, #1]
  ep->is_stall = 0U;
 8002622:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002624:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8002626:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8002628:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800262c:	2b01      	cmp	r3, #1
 800262e:	d014      	beq.n	800265a <HAL_PCD_EP_ClrStall+0x5e>
 8002630:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002632:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002634:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002638:	f000 fef5 	bl	8003426 <USB_EPClearStall>
  return HAL_OK;
 800263c:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800263e:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 8002642:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002644:	4353      	muls	r3, r2
 8002646:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 800264a:	4401      	add	r1, r0
    ep->is_in = 0U;
 800264c:	4403      	add	r3, r0
 800264e:	2000      	movs	r0, #0
 8002650:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8002654:	e7e5      	b.n	8002622 <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 8002656:	2001      	movs	r0, #1
 8002658:	e7f3      	b.n	8002642 <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 800265a:	2002      	movs	r0, #2
 800265c:	e7f1      	b.n	8002642 <HAL_PCD_EP_ClrStall+0x46>

0800265e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800265e:	b510      	push	{r4, lr}
 8002660:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002662:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002666:	bf1b      	ittet	ne
 8002668:	f001 0107 	andne.w	r1, r1, #7
 800266c:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002670:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002674:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 8002676:	bf08      	it	eq
 8002678:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800267c:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 800267e:	b91a      	cbnz	r2, 8002688 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 8002680:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8002682:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8002684:	2000      	movs	r0, #0
 8002686:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8002688:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800268a:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 800268c:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800268e:	e7f9      	b.n	8002684 <HAL_PCDEx_PMAConfig+0x26>

08002690 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002690:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002694:	4605      	mov	r5, r0
 8002696:	b338      	cbz	r0, 80026e8 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002698:	6803      	ldr	r3, [r0, #0]
 800269a:	07db      	lsls	r3, r3, #31
 800269c:	d410      	bmi.n	80026c0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800269e:	682b      	ldr	r3, [r5, #0]
 80026a0:	079f      	lsls	r7, r3, #30
 80026a2:	d45e      	bmi.n	8002762 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a4:	682b      	ldr	r3, [r5, #0]
 80026a6:	0719      	lsls	r1, r3, #28
 80026a8:	f100 8095 	bmi.w	80027d6 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ac:	682b      	ldr	r3, [r5, #0]
 80026ae:	075a      	lsls	r2, r3, #29
 80026b0:	f100 80c1 	bmi.w	8002836 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026b4:	69e8      	ldr	r0, [r5, #28]
 80026b6:	2800      	cmp	r0, #0
 80026b8:	f040 812c 	bne.w	8002914 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80026bc:	2000      	movs	r0, #0
 80026be:	e029      	b.n	8002714 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026c0:	4c90      	ldr	r4, [pc, #576]	; (8002904 <HAL_RCC_OscConfig+0x274>)
 80026c2:	6863      	ldr	r3, [r4, #4]
 80026c4:	f003 030c 	and.w	r3, r3, #12
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d007      	beq.n	80026dc <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026cc:	6863      	ldr	r3, [r4, #4]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d10a      	bne.n	80026ec <HAL_RCC_OscConfig+0x5c>
 80026d6:	6863      	ldr	r3, [r4, #4]
 80026d8:	03de      	lsls	r6, r3, #15
 80026da:	d507      	bpl.n	80026ec <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	039c      	lsls	r4, r3, #14
 80026e0:	d5dd      	bpl.n	800269e <HAL_RCC_OscConfig+0xe>
 80026e2:	686b      	ldr	r3, [r5, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1da      	bne.n	800269e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80026e8:	2001      	movs	r0, #1
 80026ea:	e013      	b.n	8002714 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ec:	686b      	ldr	r3, [r5, #4]
 80026ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f2:	d112      	bne.n	800271a <HAL_RCC_OscConfig+0x8a>
 80026f4:	6823      	ldr	r3, [r4, #0]
 80026f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80026fc:	f7fe ffec 	bl	80016d8 <HAL_GetTick>
 8002700:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002702:	6823      	ldr	r3, [r4, #0]
 8002704:	0398      	lsls	r0, r3, #14
 8002706:	d4ca      	bmi.n	800269e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002708:	f7fe ffe6 	bl	80016d8 <HAL_GetTick>
 800270c:	1b80      	subs	r0, r0, r6
 800270e:	2864      	cmp	r0, #100	; 0x64
 8002710:	d9f7      	bls.n	8002702 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8002712:	2003      	movs	r0, #3
}
 8002714:	b002      	add	sp, #8
 8002716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800271a:	b99b      	cbnz	r3, 8002744 <HAL_RCC_OscConfig+0xb4>
 800271c:	6823      	ldr	r3, [r4, #0]
 800271e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002722:	6023      	str	r3, [r4, #0]
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800272a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800272c:	f7fe ffd4 	bl	80016d8 <HAL_GetTick>
 8002730:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002732:	6823      	ldr	r3, [r4, #0]
 8002734:	0399      	lsls	r1, r3, #14
 8002736:	d5b2      	bpl.n	800269e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002738:	f7fe ffce 	bl	80016d8 <HAL_GetTick>
 800273c:	1b80      	subs	r0, r0, r6
 800273e:	2864      	cmp	r0, #100	; 0x64
 8002740:	d9f7      	bls.n	8002732 <HAL_RCC_OscConfig+0xa2>
 8002742:	e7e6      	b.n	8002712 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002748:	6823      	ldr	r3, [r4, #0]
 800274a:	d103      	bne.n	8002754 <HAL_RCC_OscConfig+0xc4>
 800274c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002750:	6023      	str	r3, [r4, #0]
 8002752:	e7cf      	b.n	80026f4 <HAL_RCC_OscConfig+0x64>
 8002754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002758:	6023      	str	r3, [r4, #0]
 800275a:	6823      	ldr	r3, [r4, #0]
 800275c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002760:	e7cb      	b.n	80026fa <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002762:	4c68      	ldr	r4, [pc, #416]	; (8002904 <HAL_RCC_OscConfig+0x274>)
 8002764:	6863      	ldr	r3, [r4, #4]
 8002766:	f013 0f0c 	tst.w	r3, #12
 800276a:	d007      	beq.n	800277c <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800276c:	6863      	ldr	r3, [r4, #4]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b08      	cmp	r3, #8
 8002774:	d110      	bne.n	8002798 <HAL_RCC_OscConfig+0x108>
 8002776:	6863      	ldr	r3, [r4, #4]
 8002778:	03da      	lsls	r2, r3, #15
 800277a:	d40d      	bmi.n	8002798 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277c:	6823      	ldr	r3, [r4, #0]
 800277e:	079b      	lsls	r3, r3, #30
 8002780:	d502      	bpl.n	8002788 <HAL_RCC_OscConfig+0xf8>
 8002782:	692b      	ldr	r3, [r5, #16]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d1af      	bne.n	80026e8 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002788:	6823      	ldr	r3, [r4, #0]
 800278a:	696a      	ldr	r2, [r5, #20]
 800278c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002790:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002794:	6023      	str	r3, [r4, #0]
 8002796:	e785      	b.n	80026a4 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002798:	692a      	ldr	r2, [r5, #16]
 800279a:	4b5b      	ldr	r3, [pc, #364]	; (8002908 <HAL_RCC_OscConfig+0x278>)
 800279c:	b16a      	cbz	r2, 80027ba <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800279e:	2201      	movs	r2, #1
 80027a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80027a2:	f7fe ff99 	bl	80016d8 <HAL_GetTick>
 80027a6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a8:	6823      	ldr	r3, [r4, #0]
 80027aa:	079f      	lsls	r7, r3, #30
 80027ac:	d4ec      	bmi.n	8002788 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ae:	f7fe ff93 	bl	80016d8 <HAL_GetTick>
 80027b2:	1b80      	subs	r0, r0, r6
 80027b4:	2802      	cmp	r0, #2
 80027b6:	d9f7      	bls.n	80027a8 <HAL_RCC_OscConfig+0x118>
 80027b8:	e7ab      	b.n	8002712 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80027ba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80027bc:	f7fe ff8c 	bl	80016d8 <HAL_GetTick>
 80027c0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c2:	6823      	ldr	r3, [r4, #0]
 80027c4:	0798      	lsls	r0, r3, #30
 80027c6:	f57f af6d 	bpl.w	80026a4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ca:	f7fe ff85 	bl	80016d8 <HAL_GetTick>
 80027ce:	1b80      	subs	r0, r0, r6
 80027d0:	2802      	cmp	r0, #2
 80027d2:	d9f6      	bls.n	80027c2 <HAL_RCC_OscConfig+0x132>
 80027d4:	e79d      	b.n	8002712 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027d6:	69aa      	ldr	r2, [r5, #24]
 80027d8:	4e4a      	ldr	r6, [pc, #296]	; (8002904 <HAL_RCC_OscConfig+0x274>)
 80027da:	4b4b      	ldr	r3, [pc, #300]	; (8002908 <HAL_RCC_OscConfig+0x278>)
 80027dc:	b1e2      	cbz	r2, 8002818 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80027de:	2201      	movs	r2, #1
 80027e0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80027e4:	f7fe ff78 	bl	80016d8 <HAL_GetTick>
 80027e8:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80027ec:	079b      	lsls	r3, r3, #30
 80027ee:	d50d      	bpl.n	800280c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027f0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80027f4:	4b45      	ldr	r3, [pc, #276]	; (800290c <HAL_RCC_OscConfig+0x27c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80027fc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80027fe:	bf00      	nop
  }
  while (Delay --);
 8002800:	9b01      	ldr	r3, [sp, #4]
 8002802:	1e5a      	subs	r2, r3, #1
 8002804:	9201      	str	r2, [sp, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f9      	bne.n	80027fe <HAL_RCC_OscConfig+0x16e>
 800280a:	e74f      	b.n	80026ac <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800280c:	f7fe ff64 	bl	80016d8 <HAL_GetTick>
 8002810:	1b00      	subs	r0, r0, r4
 8002812:	2802      	cmp	r0, #2
 8002814:	d9e9      	bls.n	80027ea <HAL_RCC_OscConfig+0x15a>
 8002816:	e77c      	b.n	8002712 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8002818:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800281c:	f7fe ff5c 	bl	80016d8 <HAL_GetTick>
 8002820:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002822:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002824:	079f      	lsls	r7, r3, #30
 8002826:	f57f af41 	bpl.w	80026ac <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800282a:	f7fe ff55 	bl	80016d8 <HAL_GetTick>
 800282e:	1b00      	subs	r0, r0, r4
 8002830:	2802      	cmp	r0, #2
 8002832:	d9f6      	bls.n	8002822 <HAL_RCC_OscConfig+0x192>
 8002834:	e76d      	b.n	8002712 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002836:	4c33      	ldr	r4, [pc, #204]	; (8002904 <HAL_RCC_OscConfig+0x274>)
 8002838:	69e3      	ldr	r3, [r4, #28]
 800283a:	00d8      	lsls	r0, r3, #3
 800283c:	d424      	bmi.n	8002888 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800283e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002840:	69e3      	ldr	r3, [r4, #28]
 8002842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002846:	61e3      	str	r3, [r4, #28]
 8002848:	69e3      	ldr	r3, [r4, #28]
 800284a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002852:	4e2f      	ldr	r6, [pc, #188]	; (8002910 <HAL_RCC_OscConfig+0x280>)
 8002854:	6833      	ldr	r3, [r6, #0]
 8002856:	05d9      	lsls	r1, r3, #23
 8002858:	d518      	bpl.n	800288c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800285a:	68eb      	ldr	r3, [r5, #12]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d126      	bne.n	80028ae <HAL_RCC_OscConfig+0x21e>
 8002860:	6a23      	ldr	r3, [r4, #32]
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002868:	f7fe ff36 	bl	80016d8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002870:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002872:	6a23      	ldr	r3, [r4, #32]
 8002874:	079b      	lsls	r3, r3, #30
 8002876:	d53f      	bpl.n	80028f8 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8002878:	2f00      	cmp	r7, #0
 800287a:	f43f af1b 	beq.w	80026b4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800287e:	69e3      	ldr	r3, [r4, #28]
 8002880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002884:	61e3      	str	r3, [r4, #28]
 8002886:	e715      	b.n	80026b4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002888:	2700      	movs	r7, #0
 800288a:	e7e2      	b.n	8002852 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800288c:	6833      	ldr	r3, [r6, #0]
 800288e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002892:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002894:	f7fe ff20 	bl	80016d8 <HAL_GetTick>
 8002898:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289a:	6833      	ldr	r3, [r6, #0]
 800289c:	05da      	lsls	r2, r3, #23
 800289e:	d4dc      	bmi.n	800285a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a0:	f7fe ff1a 	bl	80016d8 <HAL_GetTick>
 80028a4:	eba0 0008 	sub.w	r0, r0, r8
 80028a8:	2864      	cmp	r0, #100	; 0x64
 80028aa:	d9f6      	bls.n	800289a <HAL_RCC_OscConfig+0x20a>
 80028ac:	e731      	b.n	8002712 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ae:	b9ab      	cbnz	r3, 80028dc <HAL_RCC_OscConfig+0x24c>
 80028b0:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	6223      	str	r3, [r4, #32]
 80028bc:	6a23      	ldr	r3, [r4, #32]
 80028be:	f023 0304 	bic.w	r3, r3, #4
 80028c2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80028c4:	f7fe ff08 	bl	80016d8 <HAL_GetTick>
 80028c8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ca:	6a23      	ldr	r3, [r4, #32]
 80028cc:	0798      	lsls	r0, r3, #30
 80028ce:	d5d3      	bpl.n	8002878 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d0:	f7fe ff02 	bl	80016d8 <HAL_GetTick>
 80028d4:	1b80      	subs	r0, r0, r6
 80028d6:	4540      	cmp	r0, r8
 80028d8:	d9f7      	bls.n	80028ca <HAL_RCC_OscConfig+0x23a>
 80028da:	e71a      	b.n	8002712 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028dc:	2b05      	cmp	r3, #5
 80028de:	6a23      	ldr	r3, [r4, #32]
 80028e0:	d103      	bne.n	80028ea <HAL_RCC_OscConfig+0x25a>
 80028e2:	f043 0304 	orr.w	r3, r3, #4
 80028e6:	6223      	str	r3, [r4, #32]
 80028e8:	e7ba      	b.n	8002860 <HAL_RCC_OscConfig+0x1d0>
 80028ea:	f023 0301 	bic.w	r3, r3, #1
 80028ee:	6223      	str	r3, [r4, #32]
 80028f0:	6a23      	ldr	r3, [r4, #32]
 80028f2:	f023 0304 	bic.w	r3, r3, #4
 80028f6:	e7b6      	b.n	8002866 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f8:	f7fe feee 	bl	80016d8 <HAL_GetTick>
 80028fc:	1b80      	subs	r0, r0, r6
 80028fe:	4540      	cmp	r0, r8
 8002900:	d9b7      	bls.n	8002872 <HAL_RCC_OscConfig+0x1e2>
 8002902:	e706      	b.n	8002712 <HAL_RCC_OscConfig+0x82>
 8002904:	40021000 	.word	0x40021000
 8002908:	42420000 	.word	0x42420000
 800290c:	20000000 	.word	0x20000000
 8002910:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002914:	4c2a      	ldr	r4, [pc, #168]	; (80029c0 <HAL_RCC_OscConfig+0x330>)
 8002916:	6863      	ldr	r3, [r4, #4]
 8002918:	f003 030c 	and.w	r3, r3, #12
 800291c:	2b08      	cmp	r3, #8
 800291e:	d03e      	beq.n	800299e <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002920:	2200      	movs	r2, #0
 8002922:	4b28      	ldr	r3, [pc, #160]	; (80029c4 <HAL_RCC_OscConfig+0x334>)
 8002924:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002926:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002928:	d12c      	bne.n	8002984 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800292a:	f7fe fed5 	bl	80016d8 <HAL_GetTick>
 800292e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002930:	6823      	ldr	r3, [r4, #0]
 8002932:	0199      	lsls	r1, r3, #6
 8002934:	d420      	bmi.n	8002978 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002936:	6a2b      	ldr	r3, [r5, #32]
 8002938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800293c:	d105      	bne.n	800294a <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800293e:	6862      	ldr	r2, [r4, #4]
 8002940:	68a9      	ldr	r1, [r5, #8]
 8002942:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002946:	430a      	orrs	r2, r1
 8002948:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800294a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800294c:	6862      	ldr	r2, [r4, #4]
 800294e:	430b      	orrs	r3, r1
 8002950:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002954:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8002956:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002958:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800295a:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <HAL_RCC_OscConfig+0x334>)
 800295c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800295e:	f7fe febb 	bl	80016d8 <HAL_GetTick>
 8002962:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002964:	6823      	ldr	r3, [r4, #0]
 8002966:	019a      	lsls	r2, r3, #6
 8002968:	f53f aea8 	bmi.w	80026bc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296c:	f7fe feb4 	bl	80016d8 <HAL_GetTick>
 8002970:	1b40      	subs	r0, r0, r5
 8002972:	2802      	cmp	r0, #2
 8002974:	d9f6      	bls.n	8002964 <HAL_RCC_OscConfig+0x2d4>
 8002976:	e6cc      	b.n	8002712 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002978:	f7fe feae 	bl	80016d8 <HAL_GetTick>
 800297c:	1b80      	subs	r0, r0, r6
 800297e:	2802      	cmp	r0, #2
 8002980:	d9d6      	bls.n	8002930 <HAL_RCC_OscConfig+0x2a0>
 8002982:	e6c6      	b.n	8002712 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8002984:	f7fe fea8 	bl	80016d8 <HAL_GetTick>
 8002988:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	019b      	lsls	r3, r3, #6
 800298e:	f57f ae95 	bpl.w	80026bc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002992:	f7fe fea1 	bl	80016d8 <HAL_GetTick>
 8002996:	1b40      	subs	r0, r0, r5
 8002998:	2802      	cmp	r0, #2
 800299a:	d9f6      	bls.n	800298a <HAL_RCC_OscConfig+0x2fa>
 800299c:	e6b9      	b.n	8002712 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800299e:	2801      	cmp	r0, #1
 80029a0:	f43f aeb8 	beq.w	8002714 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80029a4:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a6:	6a2a      	ldr	r2, [r5, #32]
 80029a8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80029ac:	4291      	cmp	r1, r2
 80029ae:	f47f ae9b 	bne.w	80026e8 <HAL_RCC_OscConfig+0x58>
 80029b2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029b4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b8:	4293      	cmp	r3, r2
 80029ba:	f43f ae7f 	beq.w	80026bc <HAL_RCC_OscConfig+0x2c>
 80029be:	e693      	b.n	80026e8 <HAL_RCC_OscConfig+0x58>
 80029c0:	40021000 	.word	0x40021000
 80029c4:	42420000 	.word	0x42420000

080029c8 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80029c8:	4a0d      	ldr	r2, [pc, #52]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x38>)
 80029ca:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80029cc:	f003 010c 	and.w	r1, r3, #12
 80029d0:	2908      	cmp	r1, #8
 80029d2:	d112      	bne.n	80029fa <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029d4:	480b      	ldr	r0, [pc, #44]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x3c>)
 80029d6:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029da:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029dc:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029de:	d509      	bpl.n	80029f4 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029e0:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029e2:	4a09      	ldr	r2, [pc, #36]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029e4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029e8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029ea:	4a08      	ldr	r2, [pc, #32]	; (8002a0c <HAL_RCC_GetSysClockFreq+0x44>)
 80029ec:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80029f2:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x48>)
 80029f6:	4358      	muls	r0, r3
 80029f8:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80029fa:	4803      	ldr	r0, [pc, #12]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x40>)
}
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000
 8002a04:	08004c93 	.word	0x08004c93
 8002a08:	007a1200 	.word	0x007a1200
 8002a0c:	08004ca3 	.word	0x08004ca3
 8002a10:	003d0900 	.word	0x003d0900

08002a14 <HAL_RCC_ClockConfig>:
{
 8002a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a18:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002a1a:	4604      	mov	r4, r0
 8002a1c:	b910      	cbnz	r0, 8002a24 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002a1e:	2001      	movs	r0, #1
}
 8002a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a24:	4a44      	ldr	r2, [pc, #272]	; (8002b38 <HAL_RCC_ClockConfig+0x124>)
 8002a26:	6813      	ldr	r3, [r2, #0]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	428b      	cmp	r3, r1
 8002a2e:	d328      	bcc.n	8002a82 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a30:	6821      	ldr	r1, [r4, #0]
 8002a32:	078e      	lsls	r6, r1, #30
 8002a34:	d430      	bmi.n	8002a98 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a36:	07ca      	lsls	r2, r1, #31
 8002a38:	d443      	bmi.n	8002ac2 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a3a:	4a3f      	ldr	r2, [pc, #252]	; (8002b38 <HAL_RCC_ClockConfig+0x124>)
 8002a3c:	6813      	ldr	r3, [r2, #0]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	42ab      	cmp	r3, r5
 8002a44:	d865      	bhi.n	8002b12 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a46:	6822      	ldr	r2, [r4, #0]
 8002a48:	4d3c      	ldr	r5, [pc, #240]	; (8002b3c <HAL_RCC_ClockConfig+0x128>)
 8002a4a:	f012 0f04 	tst.w	r2, #4
 8002a4e:	d16c      	bne.n	8002b2a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a50:	0713      	lsls	r3, r2, #28
 8002a52:	d506      	bpl.n	8002a62 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a54:	686b      	ldr	r3, [r5, #4]
 8002a56:	6922      	ldr	r2, [r4, #16]
 8002a58:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002a5c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002a60:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a62:	f7ff ffb1 	bl	80029c8 <HAL_RCC_GetSysClockFreq>
 8002a66:	686b      	ldr	r3, [r5, #4]
 8002a68:	4a35      	ldr	r2, [pc, #212]	; (8002b40 <HAL_RCC_ClockConfig+0x12c>)
 8002a6a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002a6e:	5cd3      	ldrb	r3, [r2, r3]
 8002a70:	40d8      	lsrs	r0, r3
 8002a72:	4b34      	ldr	r3, [pc, #208]	; (8002b44 <HAL_RCC_ClockConfig+0x130>)
 8002a74:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002a76:	4b34      	ldr	r3, [pc, #208]	; (8002b48 <HAL_RCC_ClockConfig+0x134>)
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	f7fe fdeb 	bl	8001654 <HAL_InitTick>
  return HAL_OK;
 8002a7e:	2000      	movs	r0, #0
 8002a80:	e7ce      	b.n	8002a20 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	6813      	ldr	r3, [r2, #0]
 8002a84:	f023 0307 	bic.w	r3, r3, #7
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8c:	6813      	ldr	r3, [r2, #0]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	428b      	cmp	r3, r1
 8002a94:	d1c3      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xa>
 8002a96:	e7cb      	b.n	8002a30 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a98:	4b28      	ldr	r3, [pc, #160]	; (8002b3c <HAL_RCC_ClockConfig+0x128>)
 8002a9a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a9e:	bf1e      	ittt	ne
 8002aa0:	685a      	ldrne	r2, [r3, #4]
 8002aa2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8002aa6:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aaa:	bf42      	ittt	mi
 8002aac:	685a      	ldrmi	r2, [r3, #4]
 8002aae:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002ab2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	68a0      	ldr	r0, [r4, #8]
 8002ab8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002abc:	4302      	orrs	r2, r0
 8002abe:	605a      	str	r2, [r3, #4]
 8002ac0:	e7b9      	b.n	8002a36 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ac2:	6862      	ldr	r2, [r4, #4]
 8002ac4:	4e1d      	ldr	r6, [pc, #116]	; (8002b3c <HAL_RCC_ClockConfig+0x128>)
 8002ac6:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac8:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aca:	d11a      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002acc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad0:	d0a5      	beq.n	8002a1e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ad2:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ad8:	f023 0303 	bic.w	r3, r3, #3
 8002adc:	4313      	orrs	r3, r2
 8002ade:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002ae0:	f7fe fdfa 	bl	80016d8 <HAL_GetTick>
 8002ae4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae6:	6873      	ldr	r3, [r6, #4]
 8002ae8:	6862      	ldr	r2, [r4, #4]
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002af2:	d0a2      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af4:	f7fe fdf0 	bl	80016d8 <HAL_GetTick>
 8002af8:	1bc0      	subs	r0, r0, r7
 8002afa:	4540      	cmp	r0, r8
 8002afc:	d9f3      	bls.n	8002ae6 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8002afe:	2003      	movs	r0, #3
 8002b00:	e78e      	b.n	8002a20 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b02:	2a02      	cmp	r2, #2
 8002b04:	d102      	bne.n	8002b0c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b06:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002b0a:	e7e1      	b.n	8002ad0 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0c:	f013 0f02 	tst.w	r3, #2
 8002b10:	e7de      	b.n	8002ad0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b12:	6813      	ldr	r3, [r2, #0]
 8002b14:	f023 0307 	bic.w	r3, r3, #7
 8002b18:	432b      	orrs	r3, r5
 8002b1a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1c:	6813      	ldr	r3, [r2, #0]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	42ab      	cmp	r3, r5
 8002b24:	f47f af7b 	bne.w	8002a1e <HAL_RCC_ClockConfig+0xa>
 8002b28:	e78d      	b.n	8002a46 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b2a:	686b      	ldr	r3, [r5, #4]
 8002b2c:	68e1      	ldr	r1, [r4, #12]
 8002b2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b32:	430b      	orrs	r3, r1
 8002b34:	606b      	str	r3, [r5, #4]
 8002b36:	e78b      	b.n	8002a50 <HAL_RCC_ClockConfig+0x3c>
 8002b38:	40022000 	.word	0x40022000
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	08004c83 	.word	0x08004c83
 8002b44:	20000000 	.word	0x20000000
 8002b48:	20000008 	.word	0x20000008

08002b4c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b4c:	6803      	ldr	r3, [r0, #0]
{
 8002b4e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b52:	07d9      	lsls	r1, r3, #31
{
 8002b54:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b56:	d520      	bpl.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b58:	4c36      	ldr	r4, [pc, #216]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002b5a:	69e3      	ldr	r3, [r4, #28]
 8002b5c:	00da      	lsls	r2, r3, #3
 8002b5e:	d432      	bmi.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002b60:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b62:	69e3      	ldr	r3, [r4, #28]
 8002b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b68:	61e3      	str	r3, [r4, #28]
 8002b6a:	69e3      	ldr	r3, [r4, #28]
 8002b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b74:	4f30      	ldr	r7, [pc, #192]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	05db      	lsls	r3, r3, #23
 8002b7a:	d526      	bpl.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b7c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b7e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002b82:	d136      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b84:	6a23      	ldr	r3, [r4, #32]
 8002b86:	686a      	ldr	r2, [r5, #4]
 8002b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b90:	b11e      	cbz	r6, 8002b9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b92:	69e3      	ldr	r3, [r4, #28]
 8002b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b98:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b9a:	6828      	ldr	r0, [r5, #0]
 8002b9c:	0783      	lsls	r3, r0, #30
 8002b9e:	d506      	bpl.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ba0:	4924      	ldr	r1, [pc, #144]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002ba2:	68ab      	ldr	r3, [r5, #8]
 8002ba4:	684a      	ldr	r2, [r1, #4]
 8002ba6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002baa:	431a      	orrs	r2, r3
 8002bac:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bae:	f010 0010 	ands.w	r0, r0, #16
 8002bb2:	d01b      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bb4:	4a1f      	ldr	r2, [pc, #124]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002bb6:	68e9      	ldr	r1, [r5, #12]
 8002bb8:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002bba:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bbc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002bc0:	430b      	orrs	r3, r1
 8002bc2:	6053      	str	r3, [r2, #4]
 8002bc4:	e012      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 8002bc6:	2600      	movs	r6, #0
 8002bc8:	e7d4      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd0:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002bd2:	f7fe fd81 	bl	80016d8 <HAL_GetTick>
 8002bd6:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	05d8      	lsls	r0, r3, #23
 8002bdc:	d4ce      	bmi.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bde:	f7fe fd7b 	bl	80016d8 <HAL_GetTick>
 8002be2:	eba0 0008 	sub.w	r0, r0, r8
 8002be6:	2864      	cmp	r0, #100	; 0x64
 8002be8:	d9f6      	bls.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8002bea:	2003      	movs	r0, #3
}
 8002bec:	b002      	add	sp, #8
 8002bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bf2:	686a      	ldr	r2, [r5, #4]
 8002bf4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d0c3      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	4a0f      	ldr	r2, [pc, #60]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c00:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c02:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c06:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c08:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c0c:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8002c10:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c12:	07d9      	lsls	r1, r3, #31
 8002c14:	d5b6      	bpl.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8002c16:	f7fe fd5f 	bl	80016d8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c1a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002c1e:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c20:	6a23      	ldr	r3, [r4, #32]
 8002c22:	079a      	lsls	r2, r3, #30
 8002c24:	d4ae      	bmi.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c26:	f7fe fd57 	bl	80016d8 <HAL_GetTick>
 8002c2a:	1bc0      	subs	r0, r0, r7
 8002c2c:	4540      	cmp	r0, r8
 8002c2e:	d9f7      	bls.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c30:	e7db      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002c32:	bf00      	nop
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40007000 	.word	0x40007000
 8002c3c:	42420000 	.word	0x42420000

08002c40 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002c40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002c44:	461c      	mov	r4, r3
 8002c46:	4616      	mov	r6, r2
 8002c48:	460f      	mov	r7, r1
 8002c4a:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c4c:	f7fe fd44 	bl	80016d8 <HAL_GetTick>
 8002c50:	4434      	add	r4, r6
 8002c52:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8002c54:	f7fe fd40 	bl	80016d8 <HAL_GetTick>
 8002c58:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c5a:	4b23      	ldr	r3, [pc, #140]	; (8002ce8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002c62:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c64:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8002c66:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c68:	6893      	ldr	r3, [r2, #8]
 8002c6a:	ea37 0303 	bics.w	r3, r7, r3
 8002c6e:	d001      	beq.n	8002c74 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8002c70:	2000      	movs	r0, #0
 8002c72:	e02e      	b.n	8002cd2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8002c74:	1c73      	adds	r3, r6, #1
 8002c76:	d0f7      	beq.n	8002c68 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c78:	f7fe fd2e 	bl	80016d8 <HAL_GetTick>
 8002c7c:	eba0 0008 	sub.w	r0, r0, r8
 8002c80:	42a0      	cmp	r0, r4
 8002c82:	d329      	bcc.n	8002cd8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c84:	682b      	ldr	r3, [r5, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c8c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c8e:	686a      	ldr	r2, [r5, #4]
 8002c90:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002c94:	d10a      	bne.n	8002cac <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 8002c96:	68aa      	ldr	r2, [r5, #8]
 8002c98:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002c9c:	d002      	beq.n	8002ca4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c9e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002ca2:	d103      	bne.n	8002cac <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002caa:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002cae:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002cb2:	d107      	bne.n	8002cc4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cc2:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002cca:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8002ccc:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8002cce:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8002cd2:	b002      	add	sp, #8
 8002cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (count == 0U)
 8002cd8:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002cda:	2b00      	cmp	r3, #0
      count--;
 8002cdc:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002cde:	bf08      	it	eq
 8002ce0:	2400      	moveq	r4, #0
      count--;
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	e7be      	b.n	8002c64 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8002ce6:	bf00      	nop
 8002ce8:	20000000 	.word	0x20000000

08002cec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cec:	b510      	push	{r4, lr}
 8002cee:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf0:	460a      	mov	r2, r1
 8002cf2:	2180      	movs	r1, #128	; 0x80
{
 8002cf4:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf6:	f7ff ffa3 	bl	8002c40 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8002cfa:	b120      	cbz	r0, 8002d06 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8002cfc:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cfe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d00:	f043 0320 	orr.w	r3, r3, #32
 8002d04:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8002d06:	bd10      	pop	{r4, pc}

08002d08 <HAL_SPI_Init>:
{
 8002d08:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8002d0a:	4604      	mov	r4, r0
 8002d0c:	2800      	cmp	r0, #0
 8002d0e:	d051      	beq.n	8002db4 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d14a      	bne.n	8002dac <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d16:	6842      	ldr	r2, [r0, #4]
 8002d18:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002d1c:	d000      	beq.n	8002d20 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d1e:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d20:	2300      	movs	r3, #0
 8002d22:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d24:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002d28:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d2c:	b923      	cbnz	r3, 8002d38 <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 8002d2e:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8002d30:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002d34:	f7fe fbde 	bl	80014f4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002d38:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002d3a:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002d3c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002d40:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d42:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8002d44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d48:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d4a:	6863      	ldr	r3, [r4, #4]
 8002d4c:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8002d50:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8002d54:	4303      	orrs	r3, r0
 8002d56:	68e0      	ldr	r0, [r4, #12]
 8002d58:	69a1      	ldr	r1, [r4, #24]
 8002d5a:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8002d5e:	4303      	orrs	r3, r0
 8002d60:	6920      	ldr	r0, [r4, #16]
 8002d62:	f000 0002 	and.w	r0, r0, #2
 8002d66:	4303      	orrs	r3, r0
 8002d68:	6960      	ldr	r0, [r4, #20]
 8002d6a:	f000 0001 	and.w	r0, r0, #1
 8002d6e:	4303      	orrs	r3, r0
 8002d70:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8002d74:	4303      	orrs	r3, r0
 8002d76:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d78:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d7a:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8002d7e:	4303      	orrs	r3, r0
 8002d80:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d82:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d86:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8002d8a:	4303      	orrs	r3, r0
 8002d8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002d8e:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8002d92:	4303      	orrs	r3, r0
 8002d94:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d96:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d98:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d9a:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002da0:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002da2:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002da4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002da6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8002daa:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dac:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002db2:	e7b5      	b.n	8002d20 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8002db4:	2001      	movs	r0, #1
 8002db6:	e7f8      	b.n	8002daa <HAL_SPI_Init+0xa2>

08002db8 <HAL_SPI_Transmit>:
{
 8002db8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002dbc:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002dbe:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002dc2:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8002dc4:	2b01      	cmp	r3, #1
{
 8002dc6:	460d      	mov	r5, r1
 8002dc8:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 8002dca:	f000 80a6 	beq.w	8002f1a <HAL_SPI_Transmit+0x162>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002dd4:	f7fe fc80 	bl	80016d8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002dd8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8002ddc:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	fa5f f883 	uxtb.w	r8, r3
 8002de4:	f040 8096 	bne.w	8002f14 <HAL_SPI_Transmit+0x15c>
  if ((pData == NULL) || (Size == 0U))
 8002de8:	2d00      	cmp	r5, #0
 8002dea:	d063      	beq.n	8002eb4 <HAL_SPI_Transmit+0xfc>
 8002dec:	2f00      	cmp	r7, #0
 8002dee:	d061      	beq.n	8002eb4 <HAL_SPI_Transmit+0xfc>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002df0:	2303      	movs	r3, #3
 8002df2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002df6:	2300      	movs	r3, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002df8:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dfa:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dfc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->RxISR       = NULL;
 8002e00:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8002e04:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e06:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002e08:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002e0a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e0c:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_DISABLE(hspi);
 8002e0e:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8002e10:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e12:	d107      	bne.n	8002e24 <HAL_SPI_Transmit+0x6c>
    __HAL_SPI_DISABLE(hspi);
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e1a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e22:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e24:	681a      	ldr	r2, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e26:	6861      	ldr	r1, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e28:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002e2a:	bf5e      	ittt	pl
 8002e2c:	681a      	ldrpl	r2, [r3, #0]
 8002e2e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002e32:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e34:	68e2      	ldr	r2, [r4, #12]
 8002e36:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002e3a:	d145      	bne.n	8002ec8 <HAL_SPI_Transmit+0x110>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e3c:	b109      	cbz	r1, 8002e42 <HAL_SPI_Transmit+0x8a>
 8002e3e:	2f01      	cmp	r7, #1
 8002e40:	d107      	bne.n	8002e52 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e42:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002e46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e48:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002e4a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002e52:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	b9b3      	cbnz	r3, 8002e86 <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e58:	464a      	mov	r2, r9
 8002e5a:	4631      	mov	r1, r6
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f7ff ff45 	bl	8002cec <SPI_EndRxTxTransaction>
 8002e62:	2800      	cmp	r0, #0
 8002e64:	d153      	bne.n	8002f0e <HAL_SPI_Transmit+0x156>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e66:	68a3      	ldr	r3, [r4, #8]
 8002e68:	b933      	cbnz	r3, 8002e78 <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	6823      	ldr	r3, [r4, #0]
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	9201      	str	r2, [sp, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	9301      	str	r3, [sp, #4]
 8002e76:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e78:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e7a:	b9db      	cbnz	r3, 8002eb4 <HAL_SPI_Transmit+0xfc>
    hspi->State = HAL_SPI_STATE_READY;
 8002e7c:	2201      	movs	r2, #1
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e7e:	4698      	mov	r8, r3
    hspi->State = HAL_SPI_STATE_READY;
 8002e80:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
 8002e84:	e016      	b.n	8002eb4 <HAL_SPI_Transmit+0xfc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e86:	6822      	ldr	r2, [r4, #0]
 8002e88:	6893      	ldr	r3, [r2, #8]
 8002e8a:	0798      	lsls	r0, r3, #30
 8002e8c:	d505      	bpl.n	8002e9a <HAL_SPI_Transmit+0xe2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e90:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002e94:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e96:	6323      	str	r3, [r4, #48]	; 0x30
 8002e98:	e7d7      	b.n	8002e4a <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e9a:	f7fe fc1d 	bl	80016d8 <HAL_GetTick>
 8002e9e:	eba0 0009 	sub.w	r0, r0, r9
 8002ea2:	42b0      	cmp	r0, r6
 8002ea4:	d30d      	bcc.n	8002ec2 <HAL_SPI_Transmit+0x10a>
 8002ea6:	1c71      	adds	r1, r6, #1
 8002ea8:	d0d3      	beq.n	8002e52 <HAL_SPI_Transmit+0x9a>
          hspi->State = HAL_SPI_STATE_READY;
 8002eaa:	2301      	movs	r3, #1
          errorcode = HAL_TIMEOUT;
 8002eac:	f04f 0803 	mov.w	r8, #3
          hspi->State = HAL_SPI_STATE_READY;
 8002eb0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002eba:	4640      	mov	r0, r8
 8002ebc:	b003      	add	sp, #12
 8002ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ec2:	2e00      	cmp	r6, #0
 8002ec4:	d1c5      	bne.n	8002e52 <HAL_SPI_Transmit+0x9a>
 8002ec6:	e7f0      	b.n	8002eaa <HAL_SPI_Transmit+0xf2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ec8:	b109      	cbz	r1, 8002ece <HAL_SPI_Transmit+0x116>
 8002eca:	2f01      	cmp	r7, #1
 8002ecc:	d108      	bne.n	8002ee0 <HAL_SPI_Transmit+0x128>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ece:	782a      	ldrb	r2, [r5, #0]
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ed0:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ed2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002ed8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002ee0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0b7      	beq.n	8002e58 <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	0792      	lsls	r2, r2, #30
 8002eee:	d502      	bpl.n	8002ef6 <HAL_SPI_Transmit+0x13e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ef0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002ef2:	7812      	ldrb	r2, [r2, #0]
 8002ef4:	e7ec      	b.n	8002ed0 <HAL_SPI_Transmit+0x118>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ef6:	f7fe fbef 	bl	80016d8 <HAL_GetTick>
 8002efa:	eba0 0009 	sub.w	r0, r0, r9
 8002efe:	42b0      	cmp	r0, r6
 8002f00:	d302      	bcc.n	8002f08 <HAL_SPI_Transmit+0x150>
 8002f02:	1c73      	adds	r3, r6, #1
 8002f04:	d0ec      	beq.n	8002ee0 <HAL_SPI_Transmit+0x128>
 8002f06:	e7d0      	b.n	8002eaa <HAL_SPI_Transmit+0xf2>
 8002f08:	2e00      	cmp	r6, #0
 8002f0a:	d1e9      	bne.n	8002ee0 <HAL_SPI_Transmit+0x128>
 8002f0c:	e7cd      	b.n	8002eaa <HAL_SPI_Transmit+0xf2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f0e:	2320      	movs	r3, #32
 8002f10:	6563      	str	r3, [r4, #84]	; 0x54
 8002f12:	e7a8      	b.n	8002e66 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 8002f14:	f04f 0802 	mov.w	r8, #2
 8002f18:	e7cc      	b.n	8002eb4 <HAL_SPI_Transmit+0xfc>
  __HAL_LOCK(hspi);
 8002f1a:	f04f 0802 	mov.w	r8, #2
 8002f1e:	e7cc      	b.n	8002eba <HAL_SPI_Transmit+0x102>

08002f20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002f20:	b084      	sub	sp, #16
 8002f22:	a801      	add	r0, sp, #4
 8002f24:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002f28:	b004      	add	sp, #16
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	4770      	bx	lr

08002f2e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002f2e:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002f30:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8002f34:	2000      	movs	r0, #0
 8002f36:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8002f3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8002f3e:	4770      	bx	lr

08002f40 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002f40:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002f44:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f48:	045b      	lsls	r3, r3, #17
 8002f4a:	0c5b      	lsrs	r3, r3, #17
 8002f4c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002f50:	2000      	movs	r0, #0
 8002f52:	4770      	bx	lr

08002f54 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002f54:	2000      	movs	r0, #0
 8002f56:	4770      	bx	lr

08002f58 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002f58:	b084      	sub	sp, #16
 8002f5a:	b510      	push	{r4, lr}
 8002f5c:	4604      	mov	r4, r0
 8002f5e:	a803      	add	r0, sp, #12
 8002f60:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002f64:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002f66:	2301      	movs	r3, #1
 8002f68:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0U;
 8002f6c:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002f70:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002f74:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 8002f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f7c:	b004      	add	sp, #16
 8002f7e:	4770      	bx	lr

08002f80 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002f80:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002f82:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8002f84:	78ce      	ldrb	r6, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002f86:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 8002f8a:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002f8c:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8002f90:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8002f94:	0424      	lsls	r4, r4, #16
 8002f96:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 8002f98:	2e03      	cmp	r6, #3
 8002f9a:	d84c      	bhi.n	8003036 <USB_ActivateEndpoint+0xb6>
 8002f9c:	e8df f006 	tbb	[pc, r6]
 8002fa0:	44464802 	.word	0x44464802
  HAL_StatusTypeDef ret = HAL_OK;
 8002fa4:	4630      	mov	r0, r6
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002fa6:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002faa:	f248 0780 	movw	r7, #32896	; 0x8080
 8002fae:	433c      	orrs	r4, r7
 8002fb0:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002fb4:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002fb8:	f8df c27c 	ldr.w	ip, [pc, #636]	; 8003238 <USB_ActivateEndpoint+0x2b8>
 8002fbc:	b2a4      	uxth	r4, r4
 8002fbe:	ea04 040c 	and.w	r4, r4, ip
 8002fc2:	4314      	orrs	r4, r2
 8002fc4:	433c      	orrs	r4, r7
 8002fc6:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8002fca:	7b0c      	ldrb	r4, [r1, #12]
 8002fcc:	eb03 1e02 	add.w	lr, r3, r2, lsl #4
 8002fd0:	2c00      	cmp	r4, #0
 8002fd2:	f040 808b 	bne.w	80030ec <USB_ActivateEndpoint+0x16c>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002fd6:	88cd      	ldrh	r5, [r1, #6]
    if (ep->is_in != 0U)
 8002fd8:	784c      	ldrb	r4, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002fda:	086d      	lsrs	r5, r5, #1
 8002fdc:	006d      	lsls	r5, r5, #1
    if (ep->is_in != 0U)
 8002fde:	b364      	cbz	r4, 800303a <USB_ActivateEndpoint+0xba>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002fe0:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8002fe4:	b2a4      	uxth	r4, r4
 8002fe6:	4474      	add	r4, lr
 8002fe8:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002fec:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002ff0:	064f      	lsls	r7, r1, #25
 8002ff2:	d50a      	bpl.n	800300a <USB_ActivateEndpoint+0x8a>
 8002ff4:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8002ff8:	b2ad      	uxth	r5, r5
 8002ffa:	ea05 050c 	and.w	r5, r5, ip
 8002ffe:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8003002:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
 8003006:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800300a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800300e:	4c8b      	ldr	r4, [pc, #556]	; (800323c <USB_ActivateEndpoint+0x2bc>)
 8003010:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8003012:	2e01      	cmp	r6, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003014:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8003018:	d001      	beq.n	800301e <USB_ActivateEndpoint+0x9e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800301a:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800301e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003022:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003026:	e0bf      	b.n	80031a8 <USB_ActivateEndpoint+0x228>
      wEpRegVal |= USB_EP_INTERRUPT;
 8003028:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800302c:	2000      	movs	r0, #0
      break;
 800302e:	e7bc      	b.n	8002faa <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003030:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
      break;
 8003034:	e7fa      	b.n	800302c <USB_ActivateEndpoint+0xac>
  switch (ep->type)
 8003036:	2001      	movs	r0, #1
 8003038:	e7b7      	b.n	8002faa <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800303a:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800303e:	b2a4      	uxth	r4, r4
 8003040:	4474      	add	r4, lr
 8003042:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003046:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800304a:	b2a4      	uxth	r4, r4
 800304c:	4474      	add	r4, lr
 800304e:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	; 0x40c
 8003052:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003056:	f8a4 540c 	strh.w	r5, [r4, #1036]	; 0x40c
 800305a:	690d      	ldr	r5, [r1, #16]
 800305c:	2d3e      	cmp	r5, #62	; 0x3e
 800305e:	d92f      	bls.n	80030c0 <USB_ActivateEndpoint+0x140>
 8003060:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 8003064:	096e      	lsrs	r6, r5, #5
 8003066:	06ed      	lsls	r5, r5, #27
 8003068:	bf08      	it	eq
 800306a:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800306e:	b289      	uxth	r1, r1
 8003070:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8003074:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003078:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800307c:	b289      	uxth	r1, r1
 800307e:	f8a4 140c 	strh.w	r1, [r4, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003082:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003086:	044f      	lsls	r7, r1, #17
 8003088:	d50d      	bpl.n	80030a6 <USB_ActivateEndpoint+0x126>
 800308a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800308e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8003092:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003096:	0409      	lsls	r1, r1, #16
 8003098:	0c09      	lsrs	r1, r1, #16
 800309a:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800309e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80030a2:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 80030a6:	4c66      	ldr	r4, [pc, #408]	; (8003240 <USB_ActivateEndpoint+0x2c0>)
 80030a8:	b9ca      	cbnz	r2, 80030de <USB_ActivateEndpoint+0x15e>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80030aa:	8819      	ldrh	r1, [r3, #0]
 80030ac:	b289      	uxth	r1, r1
 80030ae:	4021      	ands	r1, r4
 80030b0:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 80030b4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80030b8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80030bc:	8019      	strh	r1, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 80030be:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80030c0:	b915      	cbnz	r5, 80030c8 <USB_ActivateEndpoint+0x148>
 80030c2:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 80030c6:	e7d5      	b.n	8003074 <USB_ActivateEndpoint+0xf4>
 80030c8:	07e9      	lsls	r1, r5, #31
 80030ca:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 80030ce:	ea4f 0655 	mov.w	r6, r5, lsr #1
 80030d2:	bf48      	it	mi
 80030d4:	3601      	addmi	r6, #1
 80030d6:	b289      	uxth	r1, r1
 80030d8:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80030dc:	e7ce      	b.n	800307c <USB_ActivateEndpoint+0xfc>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80030de:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80030e2:	b289      	uxth	r1, r1
 80030e4:	4021      	ands	r1, r4
 80030e6:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 80030ea:	e798      	b.n	800301e <USB_ActivateEndpoint+0x9e>
    if (ep->type == EP_TYPE_BULK)
 80030ec:	2e02      	cmp	r6, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80030ee:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 80030f2:	d15c      	bne.n	80031ae <USB_ActivateEndpoint+0x22e>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80030f4:	b2ad      	uxth	r5, r5
 80030f6:	ea05 050c 	and.w	r5, r5, ip
 80030fa:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 80030fe:	f045 0580 	orr.w	r5, r5, #128	; 0x80
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003102:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003106:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800310a:	890d      	ldrh	r5, [r1, #8]
 800310c:	b2a4      	uxth	r4, r4
 800310e:	086d      	lsrs	r5, r5, #1
 8003110:	4474      	add	r4, lr
 8003112:	006d      	lsls	r5, r5, #1
 8003114:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
 8003118:	894d      	ldrh	r5, [r1, #10]
 800311a:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800311e:	086d      	lsrs	r5, r5, #1
 8003120:	b2a4      	uxth	r4, r4
 8003122:	4474      	add	r4, lr
 8003124:	006d      	lsls	r5, r5, #1
 8003126:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
    if (ep->is_in == 0U)
 800312a:	7849      	ldrb	r1, [r1, #1]
 800312c:	2900      	cmp	r1, #0
 800312e:	d146      	bne.n	80031be <USB_ActivateEndpoint+0x23e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003130:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003134:	044e      	lsls	r6, r1, #17
 8003136:	d50d      	bpl.n	8003154 <USB_ActivateEndpoint+0x1d4>
 8003138:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800313c:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8003140:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003144:	0409      	lsls	r1, r1, #16
 8003146:	0c09      	lsrs	r1, r1, #16
 8003148:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800314c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003150:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003154:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003158:	064d      	lsls	r5, r1, #25
 800315a:	d50d      	bpl.n	8003178 <USB_ActivateEndpoint+0x1f8>
 800315c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003160:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8003164:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003168:	0409      	lsls	r1, r1, #16
 800316a:	0c09      	lsrs	r1, r1, #16
 800316c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003170:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8003174:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003178:	f248 0480 	movw	r4, #32896	; 0x8080
 800317c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003180:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8003184:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003188:	0409      	lsls	r1, r1, #16
 800318a:	0c09      	lsrs	r1, r1, #16
 800318c:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8003190:	4321      	orrs	r1, r4
 8003192:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003196:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800319a:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800319e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80031a2:	0409      	lsls	r1, r1, #16
 80031a4:	0c09      	lsrs	r1, r1, #16
 80031a6:	4321      	orrs	r1, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80031a8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 80031ac:	e787      	b.n	80030be <USB_ActivateEndpoint+0x13e>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80031ae:	f425 45e2 	bic.w	r5, r5, #28928	; 0x7100
 80031b2:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 80031b6:	042d      	lsls	r5, r5, #16
 80031b8:	0c2d      	lsrs	r5, r5, #16
 80031ba:	433d      	orrs	r5, r7
 80031bc:	e7a1      	b.n	8003102 <USB_ActivateEndpoint+0x182>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80031be:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80031c2:	044c      	lsls	r4, r1, #17
 80031c4:	d50d      	bpl.n	80031e2 <USB_ActivateEndpoint+0x262>
 80031c6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80031ca:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80031ce:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80031d2:	0409      	lsls	r1, r1, #16
 80031d4:	0c09      	lsrs	r1, r1, #16
 80031d6:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80031da:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80031de:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031e2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80031e6:	0649      	lsls	r1, r1, #25
 80031e8:	d50d      	bpl.n	8003206 <USB_ActivateEndpoint+0x286>
 80031ea:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80031ee:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80031f2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80031f6:	0409      	lsls	r1, r1, #16
 80031f8:	0c09      	lsrs	r1, r1, #16
 80031fa:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80031fe:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8003202:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003206:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800320a:	4c0c      	ldr	r4, [pc, #48]	; (800323c <USB_ActivateEndpoint+0x2bc>)
 800320c:	b289      	uxth	r1, r1
 800320e:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8003210:	2e01      	cmp	r6, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003212:	bf18      	it	ne
 8003214:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003218:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800321c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003220:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003224:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003228:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800322c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003230:	0409      	lsls	r1, r1, #16
 8003232:	0c09      	lsrs	r1, r1, #16
 8003234:	e6f3      	b.n	800301e <USB_ActivateEndpoint+0x9e>
 8003236:	bf00      	nop
 8003238:	ffff8f8f 	.word	0xffff8f8f
 800323c:	ffff8fbf 	.word	0xffff8fbf
 8003240:	ffffbf8f 	.word	0xffffbf8f

08003244 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8003244:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003246:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8003248:	7b09      	ldrb	r1, [r1, #12]
 800324a:	bbd9      	cbnz	r1, 80032c4 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 800324c:	b30a      	cbz	r2, 8003292 <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800324e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003252:	0651      	lsls	r1, r2, #25
 8003254:	d50d      	bpl.n	8003272 <USB_DeactivateEndpoint+0x2e>
 8003256:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800325a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800325e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003262:	0412      	lsls	r2, r2, #16
 8003264:	0c12      	lsrs	r2, r2, #16
 8003266:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800326a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800326e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003272:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003276:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800327a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800327e:	0412      	lsls	r2, r2, #16
 8003280:	0c12      	lsrs	r2, r2, #16
 8003282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003286:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800328a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800328e:	2000      	movs	r0, #0
 8003290:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003292:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003296:	0452      	lsls	r2, r2, #17
 8003298:	d50d      	bpl.n	80032b6 <USB_DeactivateEndpoint+0x72>
 800329a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800329e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80032a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80032a6:	0412      	lsls	r2, r2, #16
 80032a8:	0c12      	lsrs	r2, r2, #16
 80032aa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80032ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032b2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80032b6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80032ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80032c2:	e7dc      	b.n	800327e <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 80032c4:	2a00      	cmp	r2, #0
 80032c6:	d148      	bne.n	800335a <USB_DeactivateEndpoint+0x116>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80032c8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80032cc:	0451      	lsls	r1, r2, #17
 80032ce:	d50d      	bpl.n	80032ec <USB_DeactivateEndpoint+0xa8>
 80032d0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80032d4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80032d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80032dc:	0412      	lsls	r2, r2, #16
 80032de:	0c12      	lsrs	r2, r2, #16
 80032e0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80032e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032e8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032ec:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80032f0:	0652      	lsls	r2, r2, #25
 80032f2:	d50d      	bpl.n	8003310 <USB_DeactivateEndpoint+0xcc>
 80032f4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80032f8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80032fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003300:	0412      	lsls	r2, r2, #16
 8003302:	0c12      	lsrs	r2, r2, #16
 8003304:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003308:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800330c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003310:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8003314:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003318:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800331c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003320:	0412      	lsls	r2, r2, #16
 8003322:	0c12      	lsrs	r2, r2, #16
 8003324:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003328:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800332c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003330:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003334:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003338:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800333c:	0412      	lsls	r2, r2, #16
 800333e:	0c12      	lsrs	r2, r2, #16
 8003340:	430a      	orrs	r2, r1
 8003342:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003346:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800334a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800334e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003352:	0412      	lsls	r2, r2, #16
 8003354:	0c12      	lsrs	r2, r2, #16
 8003356:	430a      	orrs	r2, r1
 8003358:	e797      	b.n	800328a <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800335a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800335e:	0451      	lsls	r1, r2, #17
 8003360:	d50d      	bpl.n	800337e <USB_DeactivateEndpoint+0x13a>
 8003362:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003366:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800336a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800336e:	0412      	lsls	r2, r2, #16
 8003370:	0c12      	lsrs	r2, r2, #16
 8003372:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003376:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800337a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800337e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003382:	0652      	lsls	r2, r2, #25
 8003384:	d50d      	bpl.n	80033a2 <USB_DeactivateEndpoint+0x15e>
 8003386:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800338a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800338e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003392:	0412      	lsls	r2, r2, #16
 8003394:	0c12      	lsrs	r2, r2, #16
 8003396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800339a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800339e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033a2:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 80033a6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80033aa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80033ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80033b2:	0412      	lsls	r2, r2, #16
 80033b4:	0c12      	lsrs	r2, r2, #16
 80033b6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80033ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033be:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033c2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80033c6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80033ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ce:	0412      	lsls	r2, r2, #16
 80033d0:	0c12      	lsrs	r2, r2, #16
 80033d2:	430a      	orrs	r2, r1
 80033d4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80033d8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80033dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80033e4:	e7b5      	b.n	8003352 <USB_DeactivateEndpoint+0x10e>

080033e6 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80033e6:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80033e8:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 80033ea:	b18b      	cbz	r3, 8003410 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80033ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80033f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033f8:	041b      	lsls	r3, r3, #16
 80033fa:	0c1b      	lsrs	r3, r3, #16
 80033fc:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003408:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800340c:	2000      	movs	r0, #0
 800340e:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003410:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003414:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341c:	041b      	lsls	r3, r3, #16
 800341e:	0c1b      	lsrs	r3, r3, #16
 8003420:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003424:	e7ec      	b.n	8003400 <USB_EPSetStall+0x1a>

08003426 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003426:	7b0b      	ldrb	r3, [r1, #12]
 8003428:	bb3b      	cbnz	r3, 800347a <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 800342a:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800342c:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800342e:	b333      	cbz	r3, 800347e <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003430:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003434:	065b      	lsls	r3, r3, #25
 8003436:	d50d      	bpl.n	8003454 <USB_EPClearStall+0x2e>
 8003438:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800343c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003444:	041b      	lsls	r3, r3, #16
 8003446:	0c1b      	lsrs	r3, r3, #16
 8003448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800344c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003450:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003454:	78cb      	ldrb	r3, [r1, #3]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d00f      	beq.n	800347a <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800345a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800345e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003466:	041b      	lsls	r3, r3, #16
 8003468:	0c1b      	lsrs	r3, r3, #16
 800346a:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800346e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003476:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800347a:	2000      	movs	r0, #0
 800347c:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800347e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003482:	045b      	lsls	r3, r3, #17
 8003484:	d50d      	bpl.n	80034a2 <USB_EPClearStall+0x7c>
 8003486:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800348a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800348e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003492:	041b      	lsls	r3, r3, #16
 8003494:	0c1b      	lsrs	r3, r3, #16
 8003496:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800349a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800349e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80034a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80034a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ae:	041b      	lsls	r3, r3, #16
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80034b6:	e7da      	b.n	800346e <USB_EPClearStall+0x48>

080034b8 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80034b8:	b911      	cbnz	r1, 80034c0 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80034ba:	2380      	movs	r3, #128	; 0x80
 80034bc:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 80034c0:	2000      	movs	r0, #0
 80034c2:	4770      	bx	lr

080034c4 <USB_DevConnect>:
 80034c4:	2000      	movs	r0, #0
 80034c6:	4770      	bx	lr

080034c8 <USB_DevDisconnect>:
 80034c8:	2000      	movs	r0, #0
 80034ca:	4770      	bx	lr

080034cc <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80034cc:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80034d0:	b280      	uxth	r0, r0
 80034d2:	4770      	bx	lr

080034d4 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80034d4:	2000      	movs	r0, #0
 80034d6:	4770      	bx	lr

080034d8 <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80034d8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80034dc:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80034de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80034e2:	085b      	lsrs	r3, r3, #1
 80034e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (count = n; count != 0U; count--)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d100      	bne.n	80034ee <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 80034ec:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 80034ee:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 80034f2:	f822 0b04 	strh.w	r0, [r2], #4
  for (count = n; count != 0U; count--)
 80034f6:	e7f7      	b.n	80034e8 <USB_WritePMA+0x10>

080034f8 <USB_EPStartXfer>:
{
 80034f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034fc:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 80034fe:	7849      	ldrb	r1, [r1, #1]
{
 8003500:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 8003502:	2901      	cmp	r1, #1
    if (ep->doublebuffer == 0U)
 8003504:	7b22      	ldrb	r2, [r4, #12]
  if (ep->is_in == 1U)
 8003506:	f040 811e 	bne.w	8003746 <USB_EPStartXfer+0x24e>
    if (ep->xfer_len > ep->maxpacket)
 800350a:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800350e:	69a6      	ldr	r6, [r4, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003510:	6961      	ldr	r1, [r4, #20]
 8003512:	4576      	cmp	r6, lr
 8003514:	bf28      	it	cs
 8003516:	4676      	movcs	r6, lr
    if (ep->doublebuffer == 0U)
 8003518:	bb0a      	cbnz	r2, 800355e <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800351a:	b2b6      	uxth	r6, r6
 800351c:	88e2      	ldrh	r2, [r4, #6]
 800351e:	4633      	mov	r3, r6
 8003520:	f7ff ffda 	bl	80034d8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003524:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003528:	7821      	ldrb	r1, [r4, #0]
 800352a:	b290      	uxth	r0, r2
 800352c:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8003530:	0109      	lsls	r1, r1, #4
 8003532:	4402      	add	r2, r0
 8003534:	528e      	strh	r6, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003536:	7822      	ldrb	r2, [r4, #0]
 8003538:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800353c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003544:	041b      	lsls	r3, r3, #16
 8003546:	0c1b      	lsrs	r3, r3, #16
 8003548:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 800354c:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800354e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003556:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 800355a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (ep->type == EP_TYPE_BULK)
 800355e:	78e2      	ldrb	r2, [r4, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003560:	7827      	ldrb	r7, [r4, #0]
      if (ep->type == EP_TYPE_BULK)
 8003562:	2a02      	cmp	r2, #2
        if (ep->xfer_len_db > ep->maxpacket)
 8003564:	6a23      	ldr	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003566:	ea4f 1c07 	mov.w	ip, r7, lsl #4
      if (ep->type == EP_TYPE_BULK)
 800356a:	f040 80d6 	bne.w	800371a <USB_EPStartXfer+0x222>
        if (ep->xfer_len_db > ep->maxpacket)
 800356e:	459e      	cmp	lr, r3
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003570:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8003574:	f080 80ba 	bcs.w	80036ec <USB_EPStartXfer+0x1f4>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003578:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800357c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003580:	0412      	lsls	r2, r2, #16
 8003582:	0c12      	lsrs	r2, r2, #16
 8003584:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8003588:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800358c:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003590:	f830 8027 	ldrh.w	r8, [r0, r7, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003594:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003598:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800359a:	f018 0840 	ands.w	r8, r8, #64	; 0x40
          ep->xfer_len_db -= len;
 800359e:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80035a0:	b297      	uxth	r7, r2
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80035a2:	b2b3      	uxth	r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80035a4:	d052      	beq.n	800364c <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80035a6:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 80035aa:	443a      	add	r2, r7
 80035ac:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80035b0:	8962      	ldrh	r2, [r4, #10]
 80035b2:	f7ff ff91 	bl	80034d8 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80035b6:	6a27      	ldr	r7, [r4, #32]
 80035b8:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 80035ba:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80035bc:	429f      	cmp	r7, r3
              ep->xfer_len_db -= len;
 80035be:	bf8a      	itet	hi
 80035c0:	1bbb      	subhi	r3, r7, r6
              ep->xfer_len_db = 0U;
 80035c2:	2300      	movls	r3, #0
 80035c4:	4637      	movhi	r7, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80035c6:	7862      	ldrb	r2, [r4, #1]
            ep->xfer_buff += len;
 80035c8:	4431      	add	r1, r6
 80035ca:	6223      	str	r3, [r4, #32]
 80035cc:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80035ce:	b2bb      	uxth	r3, r7
 80035d0:	bb82      	cbnz	r2, 8003634 <USB_EPStartXfer+0x13c>
 80035d2:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 80035d6:	7826      	ldrb	r6, [r4, #0]
 80035d8:	b282      	uxth	r2, r0
 80035da:	f205 4004 	addw	r0, r5, #1028	; 0x404
 80035de:	0136      	lsls	r6, r6, #4
 80035e0:	4410      	add	r0, r2
 80035e2:	5a32      	ldrh	r2, [r6, r0]
 80035e4:	2f3e      	cmp	r7, #62	; 0x3e
 80035e6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80035ea:	5232      	strh	r2, [r6, r0]
 80035ec:	d914      	bls.n	8003618 <USB_EPStartXfer+0x120>
 80035ee:	06fa      	lsls	r2, r7, #27
 80035f0:	5a32      	ldrh	r2, [r6, r0]
 80035f2:	ea4f 1c57 	mov.w	ip, r7, lsr #5
 80035f6:	bf08      	it	eq
 80035f8:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 80035fc:	b292      	uxth	r2, r2
 80035fe:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 8003602:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003606:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800360a:	b292      	uxth	r2, r2
 800360c:	5232      	strh	r2, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800360e:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003610:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003612:	f7ff ff61 	bl	80034d8 <USB_WritePMA>
 8003616:	e78e      	b.n	8003536 <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003618:	b90f      	cbnz	r7, 800361e <USB_EPStartXfer+0x126>
 800361a:	5a32      	ldrh	r2, [r6, r0]
 800361c:	e7f1      	b.n	8003602 <USB_EPStartXfer+0x10a>
 800361e:	5a32      	ldrh	r2, [r6, r0]
 8003620:	ea4f 0c57 	mov.w	ip, r7, lsr #1
 8003624:	07ff      	lsls	r7, r7, #31
 8003626:	bf48      	it	mi
 8003628:	f10c 0c01 	addmi.w	ip, ip, #1
 800362c:	b292      	uxth	r2, r2
 800362e:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 8003632:	e7ea      	b.n	800360a <USB_EPStartXfer+0x112>
 8003634:	2a01      	cmp	r2, #1
 8003636:	d1ea      	bne.n	800360e <USB_EPStartXfer+0x116>
 8003638:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800363c:	7820      	ldrb	r0, [r4, #0]
 800363e:	b296      	uxth	r6, r2
 8003640:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8003644:	0100      	lsls	r0, r0, #4
 8003646:	4432      	add	r2, r6
 8003648:	5283      	strh	r3, [r0, r2]
 800364a:	e7e0      	b.n	800360e <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800364c:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003650:	443a      	add	r2, r7
 8003652:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003656:	8922      	ldrh	r2, [r4, #8]
 8003658:	f7ff ff3e 	bl	80034d8 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800365c:	6a27      	ldr	r7, [r4, #32]
 800365e:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8003660:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8003662:	429f      	cmp	r7, r3
              ep->xfer_len_db -= len;
 8003664:	bf8a      	itet	hi
 8003666:	1bbb      	subhi	r3, r7, r6
              ep->xfer_len_db = 0U;
 8003668:	4643      	movls	r3, r8
 800366a:	4637      	movhi	r7, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800366c:	7862      	ldrb	r2, [r4, #1]
            ep->xfer_buff += len;
 800366e:	4431      	add	r1, r6
 8003670:	6223      	str	r3, [r4, #32]
 8003672:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003674:	b2bb      	uxth	r3, r7
 8003676:	bb6a      	cbnz	r2, 80036d4 <USB_EPStartXfer+0x1dc>
 8003678:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800367c:	7826      	ldrb	r6, [r4, #0]
 800367e:	b282      	uxth	r2, r0
 8003680:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8003684:	0136      	lsls	r6, r6, #4
 8003686:	4410      	add	r0, r2
 8003688:	5a32      	ldrh	r2, [r6, r0]
 800368a:	2f3e      	cmp	r7, #62	; 0x3e
 800368c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003690:	5232      	strh	r2, [r6, r0]
 8003692:	d911      	bls.n	80036b8 <USB_EPStartXfer+0x1c0>
 8003694:	06fa      	lsls	r2, r7, #27
 8003696:	5a32      	ldrh	r2, [r6, r0]
 8003698:	ea4f 1c57 	mov.w	ip, r7, lsr #5
 800369c:	bf08      	it	eq
 800369e:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 80036a2:	b292      	uxth	r2, r2
 80036a4:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 80036a8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80036ac:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80036b0:	b292      	uxth	r2, r2
 80036b2:	5232      	strh	r2, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80036b4:	8962      	ldrh	r2, [r4, #10]
 80036b6:	e7ab      	b.n	8003610 <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80036b8:	b90f      	cbnz	r7, 80036be <USB_EPStartXfer+0x1c6>
 80036ba:	5a32      	ldrh	r2, [r6, r0]
 80036bc:	e7f4      	b.n	80036a8 <USB_EPStartXfer+0x1b0>
 80036be:	5a32      	ldrh	r2, [r6, r0]
 80036c0:	ea4f 0c57 	mov.w	ip, r7, lsr #1
 80036c4:	07ff      	lsls	r7, r7, #31
 80036c6:	bf48      	it	mi
 80036c8:	f10c 0c01 	addmi.w	ip, ip, #1
 80036cc:	b292      	uxth	r2, r2
 80036ce:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 80036d2:	e7ed      	b.n	80036b0 <USB_EPStartXfer+0x1b8>
 80036d4:	2a01      	cmp	r2, #1
 80036d6:	d1ed      	bne.n	80036b4 <USB_EPStartXfer+0x1bc>
 80036d8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80036dc:	7820      	ldrb	r0, [r4, #0]
 80036de:	b296      	uxth	r6, r2
 80036e0:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 80036e4:	0100      	lsls	r0, r0, #4
 80036e6:	4432      	add	r2, r6
 80036e8:	5283      	strh	r3, [r0, r2]
 80036ea:	e7e3      	b.n	80036b4 <USB_EPStartXfer+0x1bc>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80036ec:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 80036f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80036f4:	0412      	lsls	r2, r2, #16
 80036f6:	0c12      	lsrs	r2, r2, #16
 80036f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003700:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003704:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003708:	b29b      	uxth	r3, r3
 800370a:	b296      	uxth	r6, r2
 800370c:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003710:	4432      	add	r2, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003712:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003716:	8922      	ldrh	r2, [r4, #8]
 8003718:	e77b      	b.n	8003612 <USB_EPStartXfer+0x11a>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800371a:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        ep->xfer_len_db -= len;
 800371e:	1b9b      	subs	r3, r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003720:	f012 0f40 	tst.w	r2, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003724:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
        ep->xfer_len_db -= len;
 8003728:	6223      	str	r3, [r4, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800372a:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800372c:	b296      	uxth	r6, r2
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800372e:	d006      	beq.n	800373e <USB_EPStartXfer+0x246>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003730:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8003734:	4432      	add	r2, r6
 8003736:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800373a:	8962      	ldrh	r2, [r4, #10]
 800373c:	e769      	b.n	8003612 <USB_EPStartXfer+0x11a>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800373e:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003742:	4432      	add	r2, r6
 8003744:	e7e5      	b.n	8003712 <USB_EPStartXfer+0x21a>
    if (ep->doublebuffer == 0U)
 8003746:	2a00      	cmp	r2, #0
 8003748:	d131      	bne.n	80037ae <USB_EPStartXfer+0x2b6>
      if (ep->xfer_len > ep->maxpacket)
 800374a:	69a0      	ldr	r0, [r4, #24]
 800374c:	6923      	ldr	r3, [r4, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800374e:	7821      	ldrb	r1, [r4, #0]
      if (ep->xfer_len > ep->maxpacket)
 8003750:	4298      	cmp	r0, r3
        ep->xfer_len -= len;
 8003752:	bf84      	itt	hi
 8003754:	1ac2      	subhi	r2, r0, r3
 8003756:	4618      	movhi	r0, r3
 8003758:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800375a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800375e:	0109      	lsls	r1, r1, #4
 8003760:	b293      	uxth	r3, r2
 8003762:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8003766:	441a      	add	r2, r3
 8003768:	5a8b      	ldrh	r3, [r1, r2]
 800376a:	283e      	cmp	r0, #62	; 0x3e
 800376c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003770:	528b      	strh	r3, [r1, r2]
 8003772:	d90d      	bls.n	8003790 <USB_EPStartXfer+0x298>
 8003774:	5a8b      	ldrh	r3, [r1, r2]
 8003776:	0946      	lsrs	r6, r0, #5
 8003778:	06c0      	lsls	r0, r0, #27
 800377a:	bf08      	it	eq
 800377c:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8003780:	b29b      	uxth	r3, r3
 8003782:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800378a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800378e:	e00b      	b.n	80037a8 <USB_EPStartXfer+0x2b0>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003790:	b908      	cbnz	r0, 8003796 <USB_EPStartXfer+0x29e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003792:	5a53      	ldrh	r3, [r2, r1]
 8003794:	e7f7      	b.n	8003786 <USB_EPStartXfer+0x28e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003796:	07c3      	lsls	r3, r0, #31
 8003798:	5a8b      	ldrh	r3, [r1, r2]
 800379a:	ea4f 0650 	mov.w	r6, r0, lsr #1
 800379e:	bf48      	it	mi
 80037a0:	3601      	addmi	r6, #1
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	5253      	strh	r3, [r2, r1]
 80037ac:	e06a      	b.n	8003884 <USB_EPStartXfer+0x38c>
      if (ep->type == EP_TYPE_BULK)
 80037ae:	78e3      	ldrb	r3, [r4, #3]
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d17c      	bne.n	80038ae <USB_EPStartXfer+0x3b6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80037b4:	2900      	cmp	r1, #0
 80037b6:	d14b      	bne.n	8003850 <USB_EPStartXfer+0x358>
 80037b8:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80037bc:	7820      	ldrb	r0, [r4, #0]
 80037be:	b28b      	uxth	r3, r1
 80037c0:	f205 4104 	addw	r1, r5, #1028	; 0x404
 80037c4:	0100      	lsls	r0, r0, #4
 80037c6:	4419      	add	r1, r3
 80037c8:	5a43      	ldrh	r3, [r0, r1]
 80037ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037ce:	5243      	strh	r3, [r0, r1]
 80037d0:	6923      	ldr	r3, [r4, #16]
 80037d2:	2b3e      	cmp	r3, #62	; 0x3e
 80037d4:	d920      	bls.n	8003818 <USB_EPStartXfer+0x320>
 80037d6:	5a42      	ldrh	r2, [r0, r1]
 80037d8:	095e      	lsrs	r6, r3, #5
 80037da:	06df      	lsls	r7, r3, #27
 80037dc:	bf08      	it	eq
 80037de:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80037e2:	b292      	uxth	r2, r2
 80037e4:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80037e8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80037ec:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80037f0:	b292      	uxth	r2, r2
 80037f2:	5242      	strh	r2, [r0, r1]
 80037f4:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80037f8:	7822      	ldrb	r2, [r4, #0]
 80037fa:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 80037fe:	b289      	uxth	r1, r1
 8003800:	0112      	lsls	r2, r2, #4
 8003802:	4401      	add	r1, r0
 8003804:	5a50      	ldrh	r0, [r2, r1]
 8003806:	2b3e      	cmp	r3, #62	; 0x3e
 8003808:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800380c:	5250      	strh	r0, [r2, r1]
 800380e:	d810      	bhi.n	8003832 <USB_EPStartXfer+0x33a>
 8003810:	2b00      	cmp	r3, #0
 8003812:	d143      	bne.n	800389c <USB_EPStartXfer+0x3a4>
 8003814:	5a53      	ldrh	r3, [r2, r1]
 8003816:	e015      	b.n	8003844 <USB_EPStartXfer+0x34c>
 8003818:	b90b      	cbnz	r3, 800381e <USB_EPStartXfer+0x326>
 800381a:	5a42      	ldrh	r2, [r0, r1]
 800381c:	e7e4      	b.n	80037e8 <USB_EPStartXfer+0x2f0>
 800381e:	07da      	lsls	r2, r3, #31
 8003820:	5a42      	ldrh	r2, [r0, r1]
 8003822:	ea4f 0653 	mov.w	r6, r3, lsr #1
 8003826:	bf48      	it	mi
 8003828:	3601      	addmi	r6, #1
 800382a:	b292      	uxth	r2, r2
 800382c:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8003830:	e7de      	b.n	80037f0 <USB_EPStartXfer+0x2f8>
 8003832:	0958      	lsrs	r0, r3, #5
 8003834:	06df      	lsls	r7, r3, #27
 8003836:	5a53      	ldrh	r3, [r2, r1]
 8003838:	bf08      	it	eq
 800383a:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800383e:	b29b      	uxth	r3, r3
 8003840:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8003844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800384c:	b29b      	uxth	r3, r3
 800384e:	5253      	strh	r3, [r2, r1]
        if (ep->xfer_count != 0U)
 8003850:	69e3      	ldr	r3, [r4, #28]
 8003852:	b1bb      	cbz	r3, 8003884 <USB_EPStartXfer+0x38c>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8003854:	f244 0340 	movw	r3, #16448	; 0x4040
 8003858:	7822      	ldrb	r2, [r4, #0]
 800385a:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800385e:	ea03 0001 	and.w	r0, r3, r1
 8003862:	438b      	bics	r3, r1
 8003864:	d000      	beq.n	8003868 <USB_EPStartXfer+0x370>
 8003866:	b968      	cbnz	r0, 8003884 <USB_EPStartXfer+0x38c>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8003868:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800386c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003874:	041b      	lsls	r3, r3, #16
 8003876:	0c1b      	lsrs	r3, r3, #16
 8003878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800387c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003880:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003884:	7822      	ldrb	r2, [r4, #0]
 8003886:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800388a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800388e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003892:	041b      	lsls	r3, r3, #16
 8003894:	0c1b      	lsrs	r3, r3, #16
 8003896:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800389a:	e657      	b.n	800354c <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800389c:	0858      	lsrs	r0, r3, #1
 800389e:	07de      	lsls	r6, r3, #31
 80038a0:	5a53      	ldrh	r3, [r2, r1]
 80038a2:	bf48      	it	mi
 80038a4:	3001      	addmi	r0, #1
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80038ac:	e7ce      	b.n	800384c <USB_EPStartXfer+0x354>
      else if (ep->type == EP_TYPE_ISOC)
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d158      	bne.n	8003964 <USB_EPStartXfer+0x46c>
        if (ep->xfer_len > ep->maxpacket)
 80038b2:	69a3      	ldr	r3, [r4, #24]
 80038b4:	6922      	ldr	r2, [r4, #16]
 80038b6:	4293      	cmp	r3, r2
          ep->xfer_len = 0U;
 80038b8:	bf94      	ite	ls
 80038ba:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 80038bc:	1a98      	subhi	r0, r3, r2
 80038be:	61a0      	str	r0, [r4, #24]
 80038c0:	bf88      	it	hi
 80038c2:	4613      	movhi	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80038c4:	2900      	cmp	r1, #0
 80038c6:	d1dd      	bne.n	8003884 <USB_EPStartXfer+0x38c>
 80038c8:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80038cc:	7820      	ldrb	r0, [r4, #0]
 80038ce:	b28a      	uxth	r2, r1
 80038d0:	f205 4104 	addw	r1, r5, #1028	; 0x404
 80038d4:	0100      	lsls	r0, r0, #4
 80038d6:	4411      	add	r1, r2
 80038d8:	5a42      	ldrh	r2, [r0, r1]
 80038da:	2b3e      	cmp	r3, #62	; 0x3e
 80038dc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80038e0:	5242      	strh	r2, [r0, r1]
 80038e2:	d929      	bls.n	8003938 <USB_EPStartXfer+0x440>
 80038e4:	06da      	lsls	r2, r3, #27
 80038e6:	5a42      	ldrh	r2, [r0, r1]
 80038e8:	ea4f 1653 	mov.w	r6, r3, lsr #5
 80038ec:	bf08      	it	eq
 80038ee:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80038f2:	b292      	uxth	r2, r2
 80038f4:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80038f8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80038fc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003900:	b292      	uxth	r2, r2
 8003902:	5242      	strh	r2, [r0, r1]
 8003904:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8003908:	7822      	ldrb	r2, [r4, #0]
 800390a:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 800390e:	b289      	uxth	r1, r1
 8003910:	0112      	lsls	r2, r2, #4
 8003912:	4401      	add	r1, r0
 8003914:	5a50      	ldrh	r0, [r2, r1]
 8003916:	2b3e      	cmp	r3, #62	; 0x3e
 8003918:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800391c:	5250      	strh	r0, [r2, r1]
 800391e:	d817      	bhi.n	8003950 <USB_EPStartXfer+0x458>
 8003920:	2b00      	cmp	r3, #0
 8003922:	f43f af36 	beq.w	8003792 <USB_EPStartXfer+0x29a>
 8003926:	0858      	lsrs	r0, r3, #1
 8003928:	07db      	lsls	r3, r3, #31
 800392a:	5a53      	ldrh	r3, [r2, r1]
 800392c:	bf48      	it	mi
 800392e:	3001      	addmi	r0, #1
 8003930:	b29b      	uxth	r3, r3
 8003932:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8003936:	e737      	b.n	80037a8 <USB_EPStartXfer+0x2b0>
 8003938:	b90b      	cbnz	r3, 800393e <USB_EPStartXfer+0x446>
 800393a:	5a42      	ldrh	r2, [r0, r1]
 800393c:	e7dc      	b.n	80038f8 <USB_EPStartXfer+0x400>
 800393e:	5a42      	ldrh	r2, [r0, r1]
 8003940:	085e      	lsrs	r6, r3, #1
 8003942:	07df      	lsls	r7, r3, #31
 8003944:	bf48      	it	mi
 8003946:	3601      	addmi	r6, #1
 8003948:	b292      	uxth	r2, r2
 800394a:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 800394e:	e7d7      	b.n	8003900 <USB_EPStartXfer+0x408>
 8003950:	0958      	lsrs	r0, r3, #5
 8003952:	06de      	lsls	r6, r3, #27
 8003954:	5a53      	ldrh	r3, [r2, r1]
 8003956:	bf08      	it	eq
 8003958:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800395c:	b29b      	uxth	r3, r3
 800395e:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8003962:	e710      	b.n	8003786 <USB_EPStartXfer+0x28e>
        return HAL_ERROR;
 8003964:	2001      	movs	r0, #1
 8003966:	e5f8      	b.n	800355a <USB_EPStartXfer+0x62>

08003968 <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003968:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 800396c:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800396e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003972:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 8003974:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003976:	4617      	mov	r7, r2
  for (count = n; count != 0U; count--)
 8003978:	462e      	mov	r6, r5
 800397a:	3402      	adds	r4, #2
 800397c:	b936      	cbnz	r6, 800398c <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800397e:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 8003980:	bf44      	itt	mi
 8003982:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8003986:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 800398a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 800398c:	f837 0b04 	ldrh.w	r0, [r7], #4
  for (count = n; count != 0U; count--)
 8003990:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8003992:	b280      	uxth	r0, r0
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8003994:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8003998:	0a00      	lsrs	r0, r0, #8
 800399a:	f804 0c01 	strb.w	r0, [r4, #-1]
  for (count = n; count != 0U; count--)
 800399e:	e7ec      	b.n	800397a <USB_ReadPMA+0x12>

080039a0 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80039a0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 80039a4:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80039a6:	b16b      	cbz	r3, 80039c4 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80039a8:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80039ac:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80039b0:	28ff      	cmp	r0, #255	; 0xff
 80039b2:	d007      	beq.n	80039c4 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	4621      	mov	r1, r4
 80039b8:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80039bc:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80039be:	23ff      	movs	r3, #255	; 0xff
 80039c0:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80039c4:	2000      	movs	r0, #0
 80039c6:	bd10      	pop	{r4, pc}

080039c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80039c8:	2343      	movs	r3, #67	; 0x43
 80039ca:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80039cc:	4800      	ldr	r0, [pc, #0]	; (80039d0 <USBD_CDC_GetFSCfgDesc+0x8>)
 80039ce:	4770      	bx	lr
 80039d0:	20000044 	.word	0x20000044

080039d4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80039d4:	2343      	movs	r3, #67	; 0x43
 80039d6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80039d8:	4800      	ldr	r0, [pc, #0]	; (80039dc <USBD_CDC_GetHSCfgDesc+0x8>)
 80039da:	4770      	bx	lr
 80039dc:	20000088 	.word	0x20000088

080039e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80039e0:	2343      	movs	r3, #67	; 0x43
 80039e2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80039e4:	4800      	ldr	r0, [pc, #0]	; (80039e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80039e6:	4770      	bx	lr
 80039e8:	200000d8 	.word	0x200000d8

080039ec <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80039ec:	230a      	movs	r3, #10
 80039ee:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80039f0:	4800      	ldr	r0, [pc, #0]	; (80039f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80039f2:	4770      	bx	lr
 80039f4:	200000cc 	.word	0x200000cc

080039f8 <USBD_CDC_DataOut>:
{
 80039f8:	b538      	push	{r3, r4, r5, lr}
 80039fa:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80039fc:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003a00:	f000 fe97 	bl	8004732 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8003a04:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003a08:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8003a0c:	b14b      	cbz	r3, 8003a22 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003a0e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003a12:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8003a1c:	4798      	blx	r3
    return USBD_OK;
 8003a1e:	2000      	movs	r0, #0
}
 8003a20:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003a22:	2002      	movs	r0, #2
 8003a24:	e7fc      	b.n	8003a20 <USBD_CDC_DataOut+0x28>

08003a26 <USBD_CDC_DataIn>:
{
 8003a26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003a28:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8003a2c:	b1d6      	cbz	r6, 8003a64 <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003a2e:	2214      	movs	r2, #20
 8003a30:	fb02 0201 	mla	r2, r2, r1, r0
 8003a34:	69d4      	ldr	r4, [r2, #28]
 8003a36:	b18c      	cbz	r4, 8003a5c <USBD_CDC_DataIn+0x36>
 8003a38:	2728      	movs	r7, #40	; 0x28
 8003a3a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8003a3e:	fb07 3501 	mla	r5, r7, r1, r3
 8003a42:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003a44:	fbb4 f5f3 	udiv	r5, r4, r3
 8003a48:	fb03 4415 	mls	r4, r3, r5, r4
 8003a4c:	b934      	cbnz	r4, 8003a5c <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 8003a4e:	61d4      	str	r4, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003a50:	4623      	mov	r3, r4
 8003a52:	4622      	mov	r2, r4
 8003a54:	f000 fe5b 	bl	800470e <USBD_LL_Transmit>
    return USBD_OK;
 8003a58:	4620      	mov	r0, r4
}
 8003a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8003a62:	e7fa      	b.n	8003a5a <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 8003a64:	2002      	movs	r0, #2
 8003a66:	e7f8      	b.n	8003a5a <USBD_CDC_DataIn+0x34>

08003a68 <USBD_CDC_Setup>:
{
 8003a68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8003a6c:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003a70:	780a      	ldrb	r2, [r1, #0]
{
 8003a72:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003a74:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8003a78:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003a7a:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8003a7e:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8003a82:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003a86:	d028      	beq.n	8003ada <USBD_CDC_Setup+0x72>
 8003a88:	2c20      	cmp	r4, #32
 8003a8a:	d142      	bne.n	8003b12 <USBD_CDC_Setup+0xaa>
      if (req->wLength)
 8003a8c:	88cc      	ldrh	r4, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003a8e:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 8003a90:	b1e4      	cbz	r4, 8003acc <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8003a92:	0612      	lsls	r2, r2, #24
 8003a94:	d511      	bpl.n	8003aba <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003a96:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003a9a:	4639      	mov	r1, r7
 8003a9c:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	4622      	mov	r2, r4
 8003aa4:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003aa6:	4639      	mov	r1, r7
 8003aa8:	4628      	mov	r0, r5
 8003aaa:	88f2      	ldrh	r2, [r6, #6]
 8003aac:	f000 fc31 	bl	8004312 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003ab0:	4644      	mov	r4, r8
}
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	b003      	add	sp, #12
 8003ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003aba:	4622      	mov	r2, r4
 8003abc:	4639      	mov	r1, r7
          hcdc->CmdOpCode = req->bRequest;
 8003abe:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003ac2:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003ac6:	f000 fc39 	bl	800433c <USBD_CtlPrepareRx>
 8003aca:	e7f1      	b.n	8003ab0 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003acc:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	6895      	ldr	r5, [r2, #8]
 8003ad4:	4622      	mov	r2, r4
 8003ad6:	47a8      	blx	r5
 8003ad8:	e7eb      	b.n	8003ab2 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8003ada:	784b      	ldrb	r3, [r1, #1]
 8003adc:	2b0a      	cmp	r3, #10
 8003ade:	d00c      	beq.n	8003afa <USBD_CDC_Setup+0x92>
 8003ae0:	2b0b      	cmp	r3, #11
 8003ae2:	d012      	beq.n	8003b0a <USBD_CDC_Setup+0xa2>
 8003ae4:	b9ab      	cbnz	r3, 8003b12 <USBD_CDC_Setup+0xaa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003ae6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d111      	bne.n	8003b12 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003aee:	2202      	movs	r2, #2
 8003af0:	f10d 0106 	add.w	r1, sp, #6
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003af4:	f000 fc0d 	bl	8004312 <USBD_CtlSendData>
 8003af8:	e7db      	b.n	8003ab2 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003afa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d107      	bne.n	8003b12 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003b02:	2201      	movs	r2, #1
 8003b04:	f10d 0105 	add.w	r1, sp, #5
 8003b08:	e7f4      	b.n	8003af4 <USBD_CDC_Setup+0x8c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003b0a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d0cf      	beq.n	8003ab2 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 8003b12:	4631      	mov	r1, r6
 8003b14:	4628      	mov	r0, r5
 8003b16:	f000 fbd5 	bl	80042c4 <USBD_CtlError>
          ret = USBD_FAIL;
 8003b1a:	2402      	movs	r4, #2
 8003b1c:	e7c9      	b.n	8003ab2 <USBD_CDC_Setup+0x4a>

08003b1e <USBD_CDC_DeInit>:
{
 8003b1e:	b538      	push	{r3, r4, r5, lr}
 8003b20:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003b22:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003b24:	2181      	movs	r1, #129	; 0x81
 8003b26:	f000 fdbc 	bl	80046a2 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003b2e:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003b30:	f000 fdb7 	bl	80046a2 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003b34:	2182      	movs	r1, #130	; 0x82
 8003b36:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003b38:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003b3c:	f000 fdb1 	bl	80046a2 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8003b40:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003b44:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8003b46:	b14b      	cbz	r3, 8003b5c <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003b48:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003b50:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8003b54:	f000 fdf6 	bl	8004744 <USBD_static_free>
    pdev->pClassData = NULL;
 8003b58:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	bd38      	pop	{r3, r4, r5, pc}

08003b60 <USBD_CDC_Init>:
{
 8003b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003b64:	7c03      	ldrb	r3, [r0, #16]
{
 8003b66:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003b68:	bbbb      	cbnz	r3, 8003bda <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003b6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b6e:	2202      	movs	r2, #2
 8003b70:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003b72:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003b74:	f000 fd89 	bl	800468a <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003b78:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003b7c:	62e5      	str	r5, [r4, #44]	; 0x2c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003b7e:	2701      	movs	r7, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003b80:	4629      	mov	r1, r5
 8003b82:	2202      	movs	r2, #2
 8003b84:	4620      	mov	r0, r4
 8003b86:	f000 fd80 	bl	800468a <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003b8a:	2308      	movs	r3, #8
 8003b8c:	2203      	movs	r2, #3
 8003b8e:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003b90:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003b94:	4620      	mov	r0, r4
 8003b96:	f000 fd78 	bl	800468a <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003b9a:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003b9e:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003ba0:	f000 fdcc 	bl	800473c <USBD_static_malloc>
 8003ba4:	4605      	mov	r5, r0
 8003ba6:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8003baa:	b340      	cbz	r0, 8003bfe <USBD_CDC_Init+0x9e>
    hcdc->TxState = 0U;
 8003bac:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003bb0:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4798      	blx	r3
    hcdc->TxState = 0U;
 8003bb8:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8003bbc:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003bc0:	7c26      	ldrb	r6, [r4, #16]
 8003bc2:	b99e      	cbnz	r6, 8003bec <USBD_CDC_Init+0x8c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bc8:	4639      	mov	r1, r7
 8003bca:	4620      	mov	r0, r4
 8003bcc:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8003bd0:	f000 fda6 	bl	8004720 <USBD_LL_PrepareReceive>
}
 8003bd4:	4630      	mov	r0, r6
 8003bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003bda:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003bdc:	2340      	movs	r3, #64	; 0x40
 8003bde:	2202      	movs	r2, #2
 8003be0:	2181      	movs	r1, #129	; 0x81
 8003be2:	f000 fd52 	bl	800468a <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003be6:	2340      	movs	r3, #64	; 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003be8:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003bea:	e7c8      	b.n	8003b7e <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003bec:	2340      	movs	r3, #64	; 0x40
 8003bee:	4639      	mov	r1, r7
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8003bf6:	f000 fd93 	bl	8004720 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003bfa:	4646      	mov	r6, r8
 8003bfc:	e7ea      	b.n	8003bd4 <USBD_CDC_Init+0x74>
    ret = 1U;
 8003bfe:	463e      	mov	r6, r7
 8003c00:	e7e8      	b.n	8003bd4 <USBD_CDC_Init+0x74>

08003c02 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8003c02:	b119      	cbz	r1, 8003c0c <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8003c04:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8003c08:	2000      	movs	r0, #0
 8003c0a:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003c0c:	2002      	movs	r0, #2
  }

  return ret;
}
 8003c0e:	4770      	bx	lr

08003c10 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003c10:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8003c14:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8003c16:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003c1a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8003c1e:	4770      	bx	lr

08003c20 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8003c20:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8003c24:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8003c26:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8003c2a:	4770      	bx	lr

08003c2c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003c2c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8003c30:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8003c32:	b182      	cbz	r2, 8003c56 <USBD_CDC_ReceivePacket+0x2a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003c34:	7c04      	ldrb	r4, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003c36:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003c3a:	b934      	cbnz	r4, 8003c4a <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 8003c3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c40:	2101      	movs	r1, #1
 8003c42:	f000 fd6d 	bl	8004720 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8003c46:	4620      	mov	r0, r4
 8003c48:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8003c4a:	2340      	movs	r3, #64	; 0x40
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	f000 fd67 	bl	8004720 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8003c52:	2400      	movs	r4, #0
 8003c54:	e7f7      	b.n	8003c46 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8003c56:	2402      	movs	r4, #2
 8003c58:	e7f5      	b.n	8003c46 <USBD_CDC_ReceivePacket+0x1a>

08003c5a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003c5a:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003c5c:	b180      	cbz	r0, 8003c80 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003c5e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003c62:	b113      	cbz	r3, 8003c6a <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003c6a:	b109      	cbz	r1, 8003c70 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003c6c:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003c70:	2301      	movs	r3, #1
  pdev->id = id;
 8003c72:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003c74:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003c78:	f000 fcbc 	bl	80045f4 <USBD_LL_Init>

  return USBD_OK;
 8003c7c:	2000      	movs	r0, #0
}
 8003c7e:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003c80:	2002      	movs	r0, #2
 8003c82:	e7fc      	b.n	8003c7e <USBD_Init+0x24>

08003c84 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8003c84:	b119      	cbz	r1, 8003c8e <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003c86:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003c8e:	2002      	movs	r0, #2
  }

  return status;
}
 8003c90:	4770      	bx	lr

08003c92 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003c92:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003c94:	f000 fcf0 	bl	8004678 <USBD_LL_Start>

  return USBD_OK;
}
 8003c98:	2000      	movs	r0, #0
 8003c9a:	bd08      	pop	{r3, pc}

08003c9c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003c9c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8003c9e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003ca2:	b90b      	cbnz	r3, 8003ca8 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003ca4:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8003ca6:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4798      	blx	r3
 8003cac:	2800      	cmp	r0, #0
 8003cae:	d0fa      	beq.n	8003ca6 <USBD_SetClassConfig+0xa>
 8003cb0:	e7f8      	b.n	8003ca4 <USBD_SetClassConfig+0x8>

08003cb2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003cb2:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003cb4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	4798      	blx	r3

  return USBD_OK;
}
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	bd08      	pop	{r3, pc}

08003cc0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003cc0:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003cc2:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8003cc6:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003cc8:	4628      	mov	r0, r5
 8003cca:	f000 fae7 	bl	800429c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003cce:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8003cd0:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8003cd4:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8003cd8:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8003cdc:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8003ce0:	f001 031f 	and.w	r3, r1, #31
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d008      	beq.n	8003cfa <USBD_LL_SetupStage+0x3a>
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d00b      	beq.n	8003d04 <USBD_LL_SetupStage+0x44>
 8003cec:	b97b      	cbnz	r3, 8003d0e <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8003cee:	4629      	mov	r1, r5
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	f000 f8fb 	bl	8003eec <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f000 fa1f 	bl	8004140 <USBD_StdItfReq>
      break;
 8003d02:	e7f8      	b.n	8003cf6 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 8003d04:	4629      	mov	r1, r5
 8003d06:	4620      	mov	r0, r4
 8003d08:	f000 fa3e 	bl	8004188 <USBD_StdEPReq>
      break;
 8003d0c:	e7f3      	b.n	8003cf6 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003d0e:	4620      	mov	r0, r4
 8003d10:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003d14:	f000 fcce 	bl	80046b4 <USBD_LL_StallEP>
      break;
 8003d18:	e7ed      	b.n	8003cf6 <USBD_LL_SetupStage+0x36>

08003d1a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1c:	4604      	mov	r4, r0
 8003d1e:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003d20:	460d      	mov	r5, r1
 8003d22:	bb39      	cbnz	r1, 8003d74 <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003d24:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	d11c      	bne.n	8003d66 <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 8003d2c:	e9d0 6258 	ldrd	r6, r2, [r0, #352]	; 0x160
 8003d30:	4296      	cmp	r6, r2
 8003d32:	d90b      	bls.n	8003d4c <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 8003d34:	1ab6      	subs	r6, r6, r2

        USBD_CtlContinueRx(pdev, pdata,
 8003d36:	42b2      	cmp	r2, r6
 8003d38:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 8003d3a:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8003d3e:	bf8c      	ite	hi
 8003d40:	b2b2      	uxthhi	r2, r6
 8003d42:	b292      	uxthls	r2, r2
 8003d44:	f000 fb07 	bl	8004356 <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8003d48:	4628      	mov	r0, r5
 8003d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003d4c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	b123      	cbz	r3, 8003d5e <USBD_LL_DataOutStage+0x44>
 8003d54:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003d58:	2a03      	cmp	r2, #3
 8003d5a:	d100      	bne.n	8003d5e <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 8003d5c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003d5e:	4620      	mov	r0, r4
 8003d60:	f000 fb01 	bl	8004366 <USBD_CtlSendStatus>
 8003d64:	e7f0      	b.n	8003d48 <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003d66:	2b05      	cmp	r3, #5
 8003d68:	d1ee      	bne.n	8003d48 <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003d6a:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8003d6e:	f000 fca1 	bl	80046b4 <USBD_LL_StallEP>
 8003d72:	e7e9      	b.n	8003d48 <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 8003d74:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	b133      	cbz	r3, 8003d8a <USBD_LL_DataOutStage+0x70>
 8003d7c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003d80:	2a03      	cmp	r2, #3
 8003d82:	d102      	bne.n	8003d8a <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8003d84:	4798      	blx	r3
  return USBD_OK;
 8003d86:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 8003d88:	e7de      	b.n	8003d48 <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 8003d8a:	2502      	movs	r5, #2
 8003d8c:	e7dc      	b.n	8003d48 <USBD_LL_DataOutStage+0x2e>

08003d8e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003d8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d90:	4604      	mov	r4, r0
 8003d92:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003d94:	460d      	mov	r5, r1
 8003d96:	2900      	cmp	r1, #0
 8003d98:	d147      	bne.n	8003e2a <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003d9a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d13c      	bne.n	8003e1c <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8003da2:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 8003da6:	429e      	cmp	r6, r3
 8003da8:	d914      	bls.n	8003dd4 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8003daa:	1af3      	subs	r3, r6, r3

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003dac:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 8003dae:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	f000 fabb 	bl	800432c <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003db6:	462b      	mov	r3, r5
 8003db8:	462a      	mov	r2, r5
 8003dba:	4629      	mov	r1, r5
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	f000 fcaf 	bl	8004720 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003dc2:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d102      	bne.n	8003dd0 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003dd4:	69c2      	ldr	r2, [r0, #28]
 8003dd6:	fbb2 f6f3 	udiv	r6, r2, r3
 8003dda:	fb03 2616 	mls	r6, r3, r6, r2
 8003dde:	b95e      	cbnz	r6, 8003df8 <USBD_LL_DataInStage+0x6a>
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d809      	bhi.n	8003df8 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8003de4:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d205      	bcs.n	8003df8 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003dec:	460a      	mov	r2, r1
 8003dee:	f000 fa9d 	bl	800432c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003df2:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8003df6:	e7de      	b.n	8003db6 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003df8:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	b12b      	cbz	r3, 8003e0c <USBD_LL_DataInStage+0x7e>
 8003e00:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8003e04:	2a03      	cmp	r2, #3
 8003e06:	d101      	bne.n	8003e0c <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8003e08:	4620      	mov	r0, r4
 8003e0a:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8003e0c:	2180      	movs	r1, #128	; 0x80
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f000 fc50 	bl	80046b4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003e14:	4620      	mov	r0, r4
 8003e16:	f000 fab1 	bl	800437c <USBD_CtlReceiveStatus>
 8003e1a:	e7d2      	b.n	8003dc2 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003e1c:	f033 0304 	bics.w	r3, r3, #4
 8003e20:	d1cf      	bne.n	8003dc2 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8003e22:	2180      	movs	r1, #128	; 0x80
 8003e24:	f000 fc46 	bl	80046b4 <USBD_LL_StallEP>
 8003e28:	e7cb      	b.n	8003dc2 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8003e2a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	b133      	cbz	r3, 8003e40 <USBD_LL_DataInStage+0xb2>
 8003e32:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003e36:	2a03      	cmp	r2, #3
 8003e38:	d102      	bne.n	8003e40 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 8003e3a:	4798      	blx	r3
  return USBD_OK;
 8003e3c:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 8003e3e:	e7c7      	b.n	8003dd0 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8003e40:	2502      	movs	r5, #2
 8003e42:	e7c5      	b.n	8003dd0 <USBD_LL_DataInStage+0x42>

08003e44 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003e44:	2200      	movs	r2, #0
{
 8003e46:	b570      	push	{r4, r5, r6, lr}
 8003e48:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003e4a:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003e4c:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003e4e:	4611      	mov	r1, r2
 8003e50:	2340      	movs	r3, #64	; 0x40
 8003e52:	f000 fc1a 	bl	800468a <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003e56:	4633      	mov	r3, r6
 8003e58:	2180      	movs	r1, #128	; 0x80
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003e5e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003e62:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003e66:	f000 fc10 	bl	800468a <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8003e6a:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8003e6c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003e70:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003e72:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003e74:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003e78:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8003e7c:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8003e7e:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8003e82:	b123      	cbz	r3, 8003e8e <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003e84:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003e88:	4620      	mov	r0, r4
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003e8e:	2000      	movs	r0, #0
 8003e90:	bd70      	pop	{r4, r5, r6, pc}

08003e92 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003e92:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003e94:	2000      	movs	r0, #0
 8003e96:	4770      	bx	lr

08003e98 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003e98:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003e9c:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	4770      	bx	lr

08003eaa <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003eaa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003eae:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8003eb0:	bf04      	itt	eq
 8003eb2:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8003eb6:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8003eba:	2000      	movs	r0, #0
 8003ebc:	4770      	bx	lr

08003ebe <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003ebe:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003ec0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003ec4:	2a03      	cmp	r2, #3
 8003ec6:	d104      	bne.n	8003ed2 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8003ec8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	b103      	cbz	r3, 8003ed2 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8003ed0:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	bd08      	pop	{r3, pc}

08003ed6 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8003ed6:	b510      	push	{r4, lr}
 8003ed8:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8003eda:	2180      	movs	r1, #128	; 0x80
 8003edc:	f000 fbea 	bl	80046b4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8003ee0:	4620      	mov	r0, r4
}
 8003ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	f000 bbe4 	b.w	80046b4 <USBD_LL_StallEP>

08003eec <USBD_StdDevReq>:
{
 8003eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003eee:	780b      	ldrb	r3, [r1, #0]
 8003ef0:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003ef2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003ef6:	2b20      	cmp	r3, #32
{
 8003ef8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003efa:	d012      	beq.n	8003f22 <USBD_StdDevReq+0x36>
 8003efc:	2b40      	cmp	r3, #64	; 0x40
 8003efe:	d010      	beq.n	8003f22 <USBD_StdDevReq+0x36>
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d151      	bne.n	8003fa8 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 8003f04:	784b      	ldrb	r3, [r1, #1]
 8003f06:	2b09      	cmp	r3, #9
 8003f08:	d84e      	bhi.n	8003fa8 <USBD_StdDevReq+0xbc>
 8003f0a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003f0e:	00ee      	.short	0x00ee
 8003f10:	004d010a 	.word	0x004d010a
 8003f14:	004d0103 	.word	0x004d0103
 8003f18:	00130087 	.word	0x00130087
 8003f1c:	00d6004d 	.word	0x00d6004d
 8003f20:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 8003f22:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003f26:	4629      	mov	r1, r5
 8003f28:	4620      	mov	r0, r4
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4798      	blx	r3
}
 8003f2e:	2000      	movs	r0, #0
 8003f30:	b003      	add	sp, #12
 8003f32:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8003f3a:	884b      	ldrh	r3, [r1, #2]
 8003f3c:	0a1a      	lsrs	r2, r3, #8
 8003f3e:	3a01      	subs	r2, #1
 8003f40:	2a06      	cmp	r2, #6
 8003f42:	d831      	bhi.n	8003fa8 <USBD_StdDevReq+0xbc>
 8003f44:	e8df f002 	tbb	[pc, r2]
 8003f48:	30231604 	.word	0x30231604
 8003f4c:	4830      	.short	0x4830
 8003f4e:	52          	.byte	0x52
 8003f4f:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003f50:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003f54:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003f56:	7c20      	ldrb	r0, [r4, #16]
 8003f58:	f10d 0106 	add.w	r1, sp, #6
 8003f5c:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8003f5e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003f62:	2a00      	cmp	r2, #0
 8003f64:	d056      	beq.n	8004014 <USBD_StdDevReq+0x128>
 8003f66:	88eb      	ldrh	r3, [r5, #6]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d14a      	bne.n	8004002 <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f000 f9fa 	bl	8004366 <USBD_CtlSendStatus>
 8003f72:	e7dc      	b.n	8003f2e <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003f74:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 8003f76:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003f7a:	b932      	cbnz	r2, 8003f8a <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003f7e:	f10d 0006 	add.w	r0, sp, #6
 8003f82:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003f84:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003f86:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003f88:	e7e9      	b.n	8003f5e <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	e7f7      	b.n	8003f7e <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b05      	cmp	r3, #5
 8003f92:	d809      	bhi.n	8003fa8 <USBD_StdDevReq+0xbc>
 8003f94:	e8df f003 	tbb	[pc, r3]
 8003f98:	14100c03 	.word	0x14100c03
 8003f9c:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003f9e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003fa2:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1d6      	bne.n	8003f56 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f7ff ff94 	bl	8003ed6 <USBD_CtlError.constprop.0>
        break;
 8003fae:	e7be      	b.n	8003f2e <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003fb0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	e7f5      	b.n	8003fa4 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003fb8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	e7f1      	b.n	8003fa4 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003fc0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	e7ed      	b.n	8003fa4 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003fc8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	e7e9      	b.n	8003fa4 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003fd0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	e7e5      	b.n	8003fa4 <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003fd8:	7c03      	ldrb	r3, [r0, #16]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1e4      	bne.n	8003fa8 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003fde:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003fe2:	f10d 0006 	add.w	r0, sp, #6
 8003fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe8:	4798      	blx	r3
 8003fea:	e7b8      	b.n	8003f5e <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003fec:	7c03      	ldrb	r3, [r0, #16]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1da      	bne.n	8003fa8 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003ff2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003ff6:	f10d 0006 	add.w	r0, sp, #6
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003ffe:	2307      	movs	r3, #7
 8004000:	e7c1      	b.n	8003f86 <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 8004002:	429a      	cmp	r2, r3
 8004004:	bf28      	it	cs
 8004006:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004008:	4601      	mov	r1, r0
 800400a:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800400c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004010:	f000 f97f 	bl	8004312 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8004014:	88eb      	ldrh	r3, [r5, #6]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d189      	bne.n	8003f2e <USBD_StdDevReq+0x42>
 800401a:	e7a7      	b.n	8003f6c <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800401c:	888b      	ldrh	r3, [r1, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1c2      	bne.n	8003fa8 <USBD_StdDevReq+0xbc>
 8004022:	88cb      	ldrh	r3, [r1, #6]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1bf      	bne.n	8003fa8 <USBD_StdDevReq+0xbc>
 8004028:	884d      	ldrh	r5, [r1, #2]
 800402a:	2d7f      	cmp	r5, #127	; 0x7f
 800402c:	d8bc      	bhi.n	8003fa8 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800402e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004032:	2b03      	cmp	r3, #3
 8004034:	d0b8      	beq.n	8003fa8 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004036:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8004038:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800403c:	f000 fb5e 	bl	80046fc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004040:	4620      	mov	r0, r4
 8004042:	f000 f990 	bl	8004366 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004046:	b11d      	cbz	r5, 8004050 <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004048:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800404a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800404e:	e76e      	b.n	8003f2e <USBD_StdDevReq+0x42>
 8004050:	2301      	movs	r3, #1
 8004052:	e7fa      	b.n	800404a <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 8004054:	7889      	ldrb	r1, [r1, #2]
 8004056:	4d39      	ldr	r5, [pc, #228]	; (800413c <USBD_StdDevReq+0x250>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004058:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800405a:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800405c:	d8a4      	bhi.n	8003fa8 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 800405e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004062:	2b02      	cmp	r3, #2
 8004064:	d008      	beq.n	8004078 <USBD_StdDevReq+0x18c>
 8004066:	2b03      	cmp	r3, #3
 8004068:	d015      	beq.n	8004096 <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 800406a:	f7ff ff34 	bl	8003ed6 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 800406e:	4620      	mov	r0, r4
 8004070:	7829      	ldrb	r1, [r5, #0]
 8004072:	f7ff fe1e 	bl	8003cb2 <USBD_ClrClassConfig>
        break;
 8004076:	e75a      	b.n	8003f2e <USBD_StdDevReq+0x42>
        if (cfgidx)
 8004078:	2900      	cmp	r1, #0
 800407a:	f43f af77 	beq.w	8003f6c <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 800407e:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004080:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8004082:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004084:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004088:	4620      	mov	r0, r4
 800408a:	f7ff fe07 	bl	8003c9c <USBD_SetClassConfig>
 800408e:	2802      	cmp	r0, #2
 8004090:	f47f af6c 	bne.w	8003f6c <USBD_StdDevReq+0x80>
 8004094:	e788      	b.n	8003fa8 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 8004096:	b931      	cbnz	r1, 80040a6 <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004098:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800409a:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800409c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 80040a0:	f7ff fe07 	bl	8003cb2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80040a4:	e762      	b.n	8003f6c <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 80040a6:	6841      	ldr	r1, [r0, #4]
 80040a8:	2901      	cmp	r1, #1
 80040aa:	f43f af5f 	beq.w	8003f6c <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80040ae:	b2c9      	uxtb	r1, r1
 80040b0:	f7ff fdff 	bl	8003cb2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80040b4:	7829      	ldrb	r1, [r5, #0]
 80040b6:	6061      	str	r1, [r4, #4]
 80040b8:	e7e6      	b.n	8004088 <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 80040ba:	88ca      	ldrh	r2, [r1, #6]
 80040bc:	2a01      	cmp	r2, #1
 80040be:	f47f af73 	bne.w	8003fa8 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 80040c2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d80a      	bhi.n	80040e0 <USBD_StdDevReq+0x1f4>
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f43f af6c 	beq.w	8003fa8 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 80040d0:	4601      	mov	r1, r0
 80040d2:	2300      	movs	r3, #0
 80040d4:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80040d8:	4620      	mov	r0, r4
 80040da:	f000 f91a 	bl	8004312 <USBD_CtlSendData>
      break;
 80040de:	e726      	b.n	8003f2e <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 80040e0:	2b03      	cmp	r3, #3
 80040e2:	f47f af61 	bne.w	8003fa8 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80040e6:	1d01      	adds	r1, r0, #4
 80040e8:	e7f6      	b.n	80040d8 <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 80040ea:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80040ee:	3b01      	subs	r3, #1
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	f63f af59 	bhi.w	8003fa8 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 80040f6:	88cb      	ldrh	r3, [r1, #6]
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	f47f af55 	bne.w	8003fa8 <USBD_StdDevReq+0xbc>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80040fe:	2301      	movs	r3, #1
 8004100:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8004102:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8004106:	b10b      	cbz	r3, 800410c <USBD_StdDevReq+0x220>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004108:	2303      	movs	r3, #3
 800410a:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800410c:	2202      	movs	r2, #2
 800410e:	f104 010c 	add.w	r1, r4, #12
 8004112:	e7e1      	b.n	80040d8 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004114:	884b      	ldrh	r3, [r1, #2]
 8004116:	2b01      	cmp	r3, #1
 8004118:	f47f af09 	bne.w	8003f2e <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800411c:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8004120:	e724      	b.n	8003f6c <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 8004122:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004126:	3b01      	subs	r3, #1
 8004128:	2b02      	cmp	r3, #2
 800412a:	f63f af3d 	bhi.w	8003fa8 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800412e:	884b      	ldrh	r3, [r1, #2]
 8004130:	2b01      	cmp	r3, #1
 8004132:	f47f aefc 	bne.w	8003f2e <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	e7f0      	b.n	800411c <USBD_StdDevReq+0x230>
 800413a:	bf00      	nop
 800413c:	2000025c 	.word	0x2000025c

08004140 <USBD_StdItfReq>:
{
 8004140:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004142:	780b      	ldrb	r3, [r1, #0]
{
 8004144:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004146:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800414a:	2a40      	cmp	r2, #64	; 0x40
{
 800414c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800414e:	d001      	beq.n	8004154 <USBD_StdItfReq+0x14>
 8004150:	065b      	lsls	r3, r3, #25
 8004152:	d415      	bmi.n	8004180 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8004154:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004158:	3b01      	subs	r3, #1
 800415a:	2b02      	cmp	r3, #2
 800415c:	d810      	bhi.n	8004180 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800415e:	792b      	ldrb	r3, [r5, #4]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d80d      	bhi.n	8004180 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004164:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004168:	4629      	mov	r1, r5
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	4620      	mov	r0, r4
 800416e:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004170:	88eb      	ldrh	r3, [r5, #6]
 8004172:	b91b      	cbnz	r3, 800417c <USBD_StdItfReq+0x3c>
 8004174:	b910      	cbnz	r0, 800417c <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 8004176:	4620      	mov	r0, r4
 8004178:	f000 f8f5 	bl	8004366 <USBD_CtlSendStatus>
}
 800417c:	2000      	movs	r0, #0
 800417e:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8004180:	4620      	mov	r0, r4
 8004182:	f7ff fea8 	bl	8003ed6 <USBD_CtlError.constprop.0>
          break;
 8004186:	e7f9      	b.n	800417c <USBD_StdItfReq+0x3c>

08004188 <USBD_StdEPReq>:
{
 8004188:	b538      	push	{r3, r4, r5, lr}
 800418a:	780a      	ldrb	r2, [r1, #0]
 800418c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800418e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8004192:	2a20      	cmp	r2, #32
{
 8004194:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004196:	d027      	beq.n	80041e8 <USBD_StdEPReq+0x60>
 8004198:	2a40      	cmp	r2, #64	; 0x40
 800419a:	d025      	beq.n	80041e8 <USBD_StdEPReq+0x60>
 800419c:	bb92      	cbnz	r2, 8004204 <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 800419e:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80041a0:	888d      	ldrh	r5, [r1, #4]
 80041a2:	2a01      	cmp	r2, #1
 80041a4:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 80041a6:	d03d      	beq.n	8004224 <USBD_StdEPReq+0x9c>
 80041a8:	2a03      	cmp	r2, #3
 80041aa:	d025      	beq.n	80041f8 <USBD_StdEPReq+0x70>
 80041ac:	bb52      	cbnz	r2, 8004204 <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 80041ae:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d04d      	beq.n	8004252 <USBD_StdEPReq+0xca>
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	d124      	bne.n	8004204 <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 80041ba:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80041bc:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80041c0:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80041c4:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80041c8:	d054      	beq.n	8004274 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	b1d3      	cbz	r3, 8004204 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80041ce:	2314      	movs	r3, #20
 80041d0:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80041d4:	fb05 3303 	mla	r3, r5, r3, r3
 80041d8:	18c5      	adds	r5, r0, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80041da:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80041de:	d155      	bne.n	800428c <USBD_StdEPReq+0x104>
                pep->status = 0x0001U;
 80041e0:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80041e2:	2202      	movs	r2, #2
 80041e4:	4629      	mov	r1, r5
 80041e6:	e041      	b.n	800426c <USBD_StdEPReq+0xe4>
      pdev->pClass->Setup(pdev, req);
 80041e8:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 80041ec:	4619      	mov	r1, r3
 80041ee:	4620      	mov	r0, r4
 80041f0:	6892      	ldr	r2, [r2, #8]
 80041f2:	4790      	blx	r2
}
 80041f4:	2000      	movs	r0, #0
 80041f6:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 80041f8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80041fc:	2a02      	cmp	r2, #2
 80041fe:	d01f      	beq.n	8004240 <USBD_StdEPReq+0xb8>
 8004200:	2a03      	cmp	r2, #3
 8004202:	d003      	beq.n	800420c <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 8004204:	4620      	mov	r0, r4
 8004206:	f7ff fe66 	bl	8003ed6 <USBD_CtlError.constprop.0>
              break;
 800420a:	e7f3      	b.n	80041f4 <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800420c:	885a      	ldrh	r2, [r3, #2]
 800420e:	b92a      	cbnz	r2, 800421c <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 8004210:	064a      	lsls	r2, r1, #25
 8004212:	d003      	beq.n	800421c <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004214:	88db      	ldrh	r3, [r3, #6]
 8004216:	b90b      	cbnz	r3, 800421c <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 8004218:	f000 fa4c 	bl	80046b4 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 800421c:	4620      	mov	r0, r4
 800421e:	f000 f8a2 	bl	8004366 <USBD_CtlSendStatus>
              break;
 8004222:	e7e7      	b.n	80041f4 <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 8004224:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004228:	2a02      	cmp	r2, #2
 800422a:	d009      	beq.n	8004240 <USBD_StdEPReq+0xb8>
 800422c:	2a03      	cmp	r2, #3
 800422e:	d1e9      	bne.n	8004204 <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004230:	885b      	ldrh	r3, [r3, #2]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1de      	bne.n	80041f4 <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004236:	064d      	lsls	r5, r1, #25
 8004238:	d0f0      	beq.n	800421c <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800423a:	f000 fa44 	bl	80046c6 <USBD_LL_ClearStallEP>
 800423e:	e7ed      	b.n	800421c <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004240:	064b      	lsls	r3, r1, #25
 8004242:	d0df      	beq.n	8004204 <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 8004244:	f000 fa36 	bl	80046b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004248:	2180      	movs	r1, #128	; 0x80
 800424a:	4620      	mov	r0, r4
 800424c:	f000 fa32 	bl	80046b4 <USBD_LL_StallEP>
 8004250:	e7d0      	b.n	80041f4 <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004252:	064a      	lsls	r2, r1, #25
 8004254:	d1d6      	bne.n	8004204 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004256:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8004258:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800425c:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004260:	bf4c      	ite	mi
 8004262:	f100 0114 	addmi.w	r1, r0, #20
 8004266:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 800426a:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800426c:	4620      	mov	r0, r4
 800426e:	f000 f850 	bl	8004312 <USBD_CtlSendData>
              break;
 8004272:	e7bf      	b.n	80041f4 <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004274:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0c3      	beq.n	8004204 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800427c:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 800427e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004282:	fb03 0505 	mla	r5, r3, r5, r0
 8004286:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 800428a:	e7a6      	b.n	80041da <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800428c:	4620      	mov	r0, r4
 800428e:	f000 fa23 	bl	80046d8 <USBD_LL_IsStallEP>
 8004292:	b108      	cbz	r0, 8004298 <USBD_StdEPReq+0x110>
                pep->status = 0x0001U;
 8004294:	2301      	movs	r3, #1
 8004296:	e7a3      	b.n	80041e0 <USBD_StdEPReq+0x58>
                pep->status = 0x0000U;
 8004298:	6028      	str	r0, [r5, #0]
 800429a:	e7a2      	b.n	80041e2 <USBD_StdEPReq+0x5a>

0800429c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800429c:	780b      	ldrb	r3, [r1, #0]
 800429e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80042a0:	784b      	ldrb	r3, [r1, #1]
 80042a2:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80042a4:	78ca      	ldrb	r2, [r1, #3]
 80042a6:	788b      	ldrb	r3, [r1, #2]
 80042a8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80042ac:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80042ae:	794a      	ldrb	r2, [r1, #5]
 80042b0:	790b      	ldrb	r3, [r1, #4]
 80042b2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80042b6:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80042b8:	79ca      	ldrb	r2, [r1, #7]
 80042ba:	798b      	ldrb	r3, [r1, #6]
 80042bc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80042c0:	80c3      	strh	r3, [r0, #6]
}
 80042c2:	4770      	bx	lr

080042c4 <USBD_CtlError>:
{
 80042c4:	b510      	push	{r4, lr}
 80042c6:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80042c8:	2180      	movs	r1, #128	; 0x80
 80042ca:	f000 f9f3 	bl	80046b4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80042ce:	4620      	mov	r0, r4
}
 80042d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80042d4:	2100      	movs	r1, #0
 80042d6:	f000 b9ed 	b.w	80046b4 <USBD_LL_StallEP>

080042da <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80042da:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 80042dc:	b188      	cbz	r0, 8004302 <USBD_GetString+0x28>
 80042de:	2400      	movs	r4, #0
 80042e0:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80042e2:	4623      	mov	r3, r4
 80042e4:	3401      	adds	r4, #1
 80042e6:	5d05      	ldrb	r5, [r0, r4]
 80042e8:	2d00      	cmp	r5, #0
 80042ea:	d1fa      	bne.n	80042e2 <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	3301      	adds	r3, #1
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80042f4:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80042f6:	2303      	movs	r3, #3
 80042f8:	704b      	strb	r3, [r1, #1]
 80042fa:	2302      	movs	r3, #2
    while (*desc != '\0')
 80042fc:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8004300:	b904      	cbnz	r4, 8004304 <USBD_GetString+0x2a>
}
 8004302:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	54cc      	strb	r4, [r1, r3]
 8004308:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 800430a:	3302      	adds	r3, #2
 800430c:	b2db      	uxtb	r3, r3
 800430e:	548d      	strb	r5, [r1, r2]
 8004310:	e7f4      	b.n	80042fc <USBD_GetString+0x22>

08004312 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004312:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004314:	2202      	movs	r2, #2
{
 8004316:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8004318:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800431c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004320:	460a      	mov	r2, r1
 8004322:	2100      	movs	r1, #0
 8004324:	f000 f9f3 	bl	800470e <USBD_LL_Transmit>

  return USBD_OK;
}
 8004328:	2000      	movs	r0, #0
 800432a:	bd10      	pop	{r4, pc}

0800432c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800432c:	b508      	push	{r3, lr}
 800432e:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004330:	460a      	mov	r2, r1
 8004332:	2100      	movs	r1, #0
 8004334:	f000 f9eb 	bl	800470e <USBD_LL_Transmit>

  return USBD_OK;
}
 8004338:	2000      	movs	r0, #0
 800433a:	bd08      	pop	{r3, pc}

0800433c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800433c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800433e:	2203      	movs	r2, #3
{
 8004340:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8004342:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004346:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800434a:	460a      	mov	r2, r1
 800434c:	2100      	movs	r1, #0
 800434e:	f000 f9e7 	bl	8004720 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004352:	2000      	movs	r0, #0
 8004354:	bd10      	pop	{r4, pc}

08004356 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004356:	b508      	push	{r3, lr}
 8004358:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800435a:	460a      	mov	r2, r1
 800435c:	2100      	movs	r1, #0
 800435e:	f000 f9df 	bl	8004720 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004362:	2000      	movs	r0, #0
 8004364:	bd08      	pop	{r3, pc}

08004366 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004366:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004368:	2304      	movs	r3, #4
 800436a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800436e:	2300      	movs	r3, #0
 8004370:	461a      	mov	r2, r3
 8004372:	4619      	mov	r1, r3
 8004374:	f000 f9cb 	bl	800470e <USBD_LL_Transmit>

  return USBD_OK;
}
 8004378:	2000      	movs	r0, #0
 800437a:	bd08      	pop	{r3, pc}

0800437c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800437c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800437e:	2305      	movs	r3, #5
 8004380:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004384:	2300      	movs	r3, #0
 8004386:	461a      	mov	r2, r3
 8004388:	4619      	mov	r1, r3
 800438a:	f000 f9c9 	bl	8004720 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800438e:	2000      	movs	r0, #0
 8004390:	bd08      	pop	{r3, pc}
	...

08004394 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004394:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004396:	2200      	movs	r2, #0
 8004398:	490e      	ldr	r1, [pc, #56]	; (80043d4 <MX_USB_DEVICE_Init+0x40>)
 800439a:	480f      	ldr	r0, [pc, #60]	; (80043d8 <MX_USB_DEVICE_Init+0x44>)
 800439c:	f7ff fc5d 	bl	8003c5a <USBD_Init>
 80043a0:	b108      	cbz	r0, 80043a6 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 80043a2:	f7fc ffd7 	bl	8001354 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80043a6:	490d      	ldr	r1, [pc, #52]	; (80043dc <MX_USB_DEVICE_Init+0x48>)
 80043a8:	480b      	ldr	r0, [pc, #44]	; (80043d8 <MX_USB_DEVICE_Init+0x44>)
 80043aa:	f7ff fc6b 	bl	8003c84 <USBD_RegisterClass>
 80043ae:	b108      	cbz	r0, 80043b4 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80043b0:	f7fc ffd0 	bl	8001354 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80043b4:	490a      	ldr	r1, [pc, #40]	; (80043e0 <MX_USB_DEVICE_Init+0x4c>)
 80043b6:	4808      	ldr	r0, [pc, #32]	; (80043d8 <MX_USB_DEVICE_Init+0x44>)
 80043b8:	f7ff fc23 	bl	8003c02 <USBD_CDC_RegisterInterface>
 80043bc:	b108      	cbz	r0, 80043c2 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80043be:	f7fc ffc9 	bl	8001354 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80043c2:	4805      	ldr	r0, [pc, #20]	; (80043d8 <MX_USB_DEVICE_Init+0x44>)
 80043c4:	f7ff fc65 	bl	8003c92 <USBD_Start>
 80043c8:	b118      	cbz	r0, 80043d2 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80043ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80043ce:	f7fc bfc1 	b.w	8001354 <Error_Handler>
}
 80043d2:	bd08      	pop	{r3, pc}
 80043d4:	2000012c 	.word	0x2000012c
 80043d8:	20000260 	.word	0x20000260
 80043dc:	2000000c 	.word	0x2000000c
 80043e0:	2000011c 	.word	0x2000011c

080043e4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80043e4:	2000      	movs	r0, #0
 80043e6:	4770      	bx	lr

080043e8 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80043e8:	2000      	movs	r0, #0
 80043ea:	4770      	bx	lr

080043ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80043ec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80043ee:	4c05      	ldr	r4, [pc, #20]	; (8004404 <CDC_Receive_FS+0x18>)
{
 80043f0:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80043f2:	4620      	mov	r0, r4
 80043f4:	f7ff fc14 	bl	8003c20 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80043f8:	4620      	mov	r0, r4
 80043fa:	f7ff fc17 	bl	8003c2c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80043fe:	2000      	movs	r0, #0
 8004400:	bd10      	pop	{r4, pc}
 8004402:	bf00      	nop
 8004404:	20000260 	.word	0x20000260

08004408 <CDC_Init_FS>:
{
 8004408:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800440a:	4c06      	ldr	r4, [pc, #24]	; (8004424 <CDC_Init_FS+0x1c>)
 800440c:	2200      	movs	r2, #0
 800440e:	4620      	mov	r0, r4
 8004410:	4905      	ldr	r1, [pc, #20]	; (8004428 <CDC_Init_FS+0x20>)
 8004412:	f7ff fbfd 	bl	8003c10 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004416:	4620      	mov	r0, r4
 8004418:	4904      	ldr	r1, [pc, #16]	; (800442c <CDC_Init_FS+0x24>)
 800441a:	f7ff fc01 	bl	8003c20 <USBD_CDC_SetRxBuffer>
}
 800441e:	2000      	movs	r0, #0
 8004420:	bd10      	pop	{r4, pc}
 8004422:	bf00      	nop
 8004424:	20000260 	.word	0x20000260
 8004428:	20000924 	.word	0x20000924
 800442c:	20000524 	.word	0x20000524

08004430 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004430:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8004432:	4801      	ldr	r0, [pc, #4]	; (8004438 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8004434:	800b      	strh	r3, [r1, #0]
}
 8004436:	4770      	bx	lr
 8004438:	20000148 	.word	0x20000148

0800443c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800443c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800443e:	4801      	ldr	r0, [pc, #4]	; (8004444 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8004440:	800b      	strh	r3, [r1, #0]
}
 8004442:	4770      	bx	lr
 8004444:	2000015c 	.word	0x2000015c

08004448 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004448:	2300      	movs	r3, #0
 800444a:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800444c:	461e      	mov	r6, r3
 800444e:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 8004450:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 8004452:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8004456:	bf34      	ite	cc
 8004458:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800445a:	3437      	addcs	r4, #55	; 0x37
 800445c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8004460:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 8004464:	3301      	adds	r3, #1
 8004466:	b2dc      	uxtb	r4, r3
 8004468:	42a2      	cmp	r2, r4
    value = value << 4;
 800446a:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 800446e:	d8ef      	bhi.n	8004450 <IntToUnicode+0x8>
  }
}
 8004470:	bd70      	pop	{r4, r5, r6, pc}
	...

08004474 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8004474:	231a      	movs	r3, #26
{
 8004476:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004478:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800447a:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <USBD_FS_SerialStrDescriptor+0x30>)
 800447c:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial0 += deviceserial2;
 8004480:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 8004484:	1880      	adds	r0, r0, r2
 8004486:	d00a      	beq.n	800449e <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004488:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	; 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800448c:	4906      	ldr	r1, [pc, #24]	; (80044a8 <USBD_FS_SerialStrDescriptor+0x34>)
 800448e:	2208      	movs	r2, #8
 8004490:	f7ff ffda 	bl	8004448 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004494:	2204      	movs	r2, #4
 8004496:	4620      	mov	r0, r4
 8004498:	3110      	adds	r1, #16
 800449a:	f7ff ffd5 	bl	8004448 <IntToUnicode>
}
 800449e:	4803      	ldr	r0, [pc, #12]	; (80044ac <USBD_FS_SerialStrDescriptor+0x38>)
 80044a0:	bd10      	pop	{r4, pc}
 80044a2:	bf00      	nop
 80044a4:	1ffff000 	.word	0x1ffff000
 80044a8:	20000162 	.word	0x20000162
 80044ac:	20000160 	.word	0x20000160

080044b0 <USBD_FS_ManufacturerStrDescriptor>:
{
 80044b0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80044b2:	4c04      	ldr	r4, [pc, #16]	; (80044c4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 80044b4:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80044b6:	4804      	ldr	r0, [pc, #16]	; (80044c8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80044b8:	4621      	mov	r1, r4
 80044ba:	f7ff ff0e 	bl	80042da <USBD_GetString>
}
 80044be:	4620      	mov	r0, r4
 80044c0:	bd10      	pop	{r4, pc}
 80044c2:	bf00      	nop
 80044c4:	20000d24 	.word	0x20000d24
 80044c8:	08004ca5 	.word	0x08004ca5

080044cc <USBD_FS_ProductStrDescriptor>:
{
 80044cc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80044ce:	4c04      	ldr	r4, [pc, #16]	; (80044e0 <USBD_FS_ProductStrDescriptor+0x14>)
{
 80044d0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80044d2:	4804      	ldr	r0, [pc, #16]	; (80044e4 <USBD_FS_ProductStrDescriptor+0x18>)
 80044d4:	4621      	mov	r1, r4
 80044d6:	f7ff ff00 	bl	80042da <USBD_GetString>
}
 80044da:	4620      	mov	r0, r4
 80044dc:	bd10      	pop	{r4, pc}
 80044de:	bf00      	nop
 80044e0:	20000d24 	.word	0x20000d24
 80044e4:	08004cb8 	.word	0x08004cb8

080044e8 <USBD_FS_ConfigStrDescriptor>:
{
 80044e8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80044ea:	4c04      	ldr	r4, [pc, #16]	; (80044fc <USBD_FS_ConfigStrDescriptor+0x14>)
{
 80044ec:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80044ee:	4804      	ldr	r0, [pc, #16]	; (8004500 <USBD_FS_ConfigStrDescriptor+0x18>)
 80044f0:	4621      	mov	r1, r4
 80044f2:	f7ff fef2 	bl	80042da <USBD_GetString>
}
 80044f6:	4620      	mov	r0, r4
 80044f8:	bd10      	pop	{r4, pc}
 80044fa:	bf00      	nop
 80044fc:	20000d24 	.word	0x20000d24
 8004500:	08004cce 	.word	0x08004cce

08004504 <USBD_FS_InterfaceStrDescriptor>:
{
 8004504:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004506:	4c04      	ldr	r4, [pc, #16]	; (8004518 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8004508:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800450a:	4804      	ldr	r0, [pc, #16]	; (800451c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800450c:	4621      	mov	r1, r4
 800450e:	f7ff fee4 	bl	80042da <USBD_GetString>
}
 8004512:	4620      	mov	r0, r4
 8004514:	bd10      	pop	{r4, pc}
 8004516:	bf00      	nop
 8004518:	20000d24 	.word	0x20000d24
 800451c:	08004cd9 	.word	0x08004cd9

08004520 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8004520:	2803      	cmp	r0, #3
 8004522:	bf9a      	itte	ls
 8004524:	4b01      	ldrls	r3, [pc, #4]	; (800452c <USBD_Get_USB_Status+0xc>)
 8004526:	5c18      	ldrbls	r0, [r3, r0]
{
 8004528:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800452a:	4770      	bx	lr
 800452c:	08004ce7 	.word	0x08004ce7

08004530 <HAL_PCD_MspInit>:
{
 8004530:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8004532:	4b0e      	ldr	r3, [pc, #56]	; (800456c <HAL_PCD_MspInit+0x3c>)
 8004534:	6802      	ldr	r2, [r0, #0]
 8004536:	429a      	cmp	r2, r3
 8004538:	d115      	bne.n	8004566 <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 800453a:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800453e:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004540:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8004542:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004546:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004548:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800454a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800454c:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800454e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004552:	9301      	str	r3, [sp, #4]
 8004554:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004556:	f7fd f8d7 	bl	8001708 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800455a:	2014      	movs	r0, #20
}
 800455c:	b003      	add	sp, #12
 800455e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004562:	f7fd b903 	b.w	800176c <HAL_NVIC_EnableIRQ>
}
 8004566:	b003      	add	sp, #12
 8004568:	f85d fb04 	ldr.w	pc, [sp], #4
 800456c:	40005c00 	.word	0x40005c00

08004570 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004570:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8004574:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8004578:	f7ff bba2 	b.w	8003cc0 <USBD_LL_SetupStage>

0800457c <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800457c:	2328      	movs	r3, #40	; 0x28
 800457e:	fb03 0301 	mla	r3, r3, r1, r0
 8004582:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8004586:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800458a:	f7ff bbc6 	b.w	8003d1a <USBD_LL_DataOutStage>

0800458e <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800458e:	2328      	movs	r3, #40	; 0x28
 8004590:	fb03 0301 	mla	r3, r3, r1, r0
 8004594:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8004598:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800459a:	f7ff bbf8 	b.w	8003d8e <USBD_LL_DataInStage>

0800459e <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800459e:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 80045a2:	f7ff bc8c 	b.w	8003ebe <USBD_LL_SOF>

080045a6 <HAL_PCD_ResetCallback>:
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80045a6:	6883      	ldr	r3, [r0, #8]
{
 80045a8:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80045aa:	2b02      	cmp	r3, #2
{
 80045ac:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80045ae:	d001      	beq.n	80045b4 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 80045b0:	f7fc fed0 	bl	8001354 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80045b4:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
 80045b8:	2101      	movs	r1, #1
 80045ba:	f7ff fc6a 	bl	8003e92 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80045be:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
}
 80045c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80045c6:	f7ff bc3d 	b.w	8003e44 <USBD_LL_Reset>
	...

080045cc <HAL_PCD_SuspendCallback>:
{
 80045cc:	b510      	push	{r4, lr}
 80045ce:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80045d0:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 80045d4:	f7ff fc60 	bl	8003e98 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 80045d8:	69a3      	ldr	r3, [r4, #24]
 80045da:	b123      	cbz	r3, 80045e6 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80045dc:	4a02      	ldr	r2, [pc, #8]	; (80045e8 <HAL_PCD_SuspendCallback+0x1c>)
 80045de:	6913      	ldr	r3, [r2, #16]
 80045e0:	f043 0306 	orr.w	r3, r3, #6
 80045e4:	6113      	str	r3, [r2, #16]
}
 80045e6:	bd10      	pop	{r4, pc}
 80045e8:	e000ed00 	.word	0xe000ed00

080045ec <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80045ec:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 80045f0:	f7ff bc5b 	b.w	8003eaa <USBD_LL_Resume>

080045f4 <USBD_LL_Init>:
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80045f4:	2308      	movs	r3, #8
{
 80045f6:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80045f8:	4a1d      	ldr	r2, [pc, #116]	; (8004670 <USBD_LL_Init+0x7c>)
{
 80045fa:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80045fc:	481d      	ldr	r0, [pc, #116]	; (8004674 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80045fe:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004602:	2302      	movs	r3, #2
 8004604:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004606:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8004608:	f8c0 42ec 	str.w	r4, [r0, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800460c:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004610:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004614:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004616:	f7fd f9aa 	bl	800196e <HAL_PCD_Init>
 800461a:	b108      	cbz	r0, 8004620 <USBD_LL_Init+0x2c>
    Error_Handler( );
 800461c:	f7fc fe9a 	bl	8001354 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004620:	2200      	movs	r2, #0
 8004622:	2318      	movs	r3, #24
 8004624:	4611      	mov	r1, r2
 8004626:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800462a:	f7fe f818 	bl	800265e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800462e:	2358      	movs	r3, #88	; 0x58
 8004630:	2200      	movs	r2, #0
 8004632:	2180      	movs	r1, #128	; 0x80
 8004634:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004638:	f7fe f811 	bl	800265e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800463c:	23c0      	movs	r3, #192	; 0xc0
 800463e:	2200      	movs	r2, #0
 8004640:	2181      	movs	r1, #129	; 0x81
 8004642:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004646:	f7fe f80a 	bl	800265e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800464a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800464e:	2200      	movs	r2, #0
 8004650:	2101      	movs	r1, #1
 8004652:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004656:	f7fe f802 	bl	800265e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800465a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800465e:	2200      	movs	r2, #0
 8004660:	2182      	movs	r1, #130	; 0x82
 8004662:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004666:	f7fd fffa 	bl	800265e <HAL_PCDEx_PMAConfig>
}
 800466a:	2000      	movs	r0, #0
 800466c:	bd10      	pop	{r4, pc}
 800466e:	bf00      	nop
 8004670:	40005c00 	.word	0x40005c00
 8004674:	20000f24 	.word	0x20000f24

08004678 <USBD_LL_Start>:
{
 8004678:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800467a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800467e:	f7fd f9ee 	bl	8001a5e <HAL_PCD_Start>
}
 8004682:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004686:	f7ff bf4b 	b.w	8004520 <USBD_Get_USB_Status>

0800468a <USBD_LL_OpenEP>:
{
 800468a:	b510      	push	{r4, lr}
 800468c:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800468e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 8004692:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004694:	4623      	mov	r3, r4
 8004696:	f7fd feed 	bl	8002474 <HAL_PCD_EP_Open>
}
 800469a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800469e:	f7ff bf3f 	b.w	8004520 <USBD_Get_USB_Status>

080046a2 <USBD_LL_CloseEP>:
{
 80046a2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80046a4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80046a8:	f7fd ff13 	bl	80024d2 <HAL_PCD_EP_Close>
}
 80046ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80046b0:	f7ff bf36 	b.w	8004520 <USBD_Get_USB_Status>

080046b4 <USBD_LL_StallEP>:
{
 80046b4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80046b6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80046ba:	f7fd ff6b 	bl	8002594 <HAL_PCD_EP_SetStall>
}
 80046be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80046c2:	f7ff bf2d 	b.w	8004520 <USBD_Get_USB_Status>

080046c6 <USBD_LL_ClearStallEP>:
{
 80046c6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80046c8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80046cc:	f7fd ff96 	bl	80025fc <HAL_PCD_EP_ClrStall>
}
 80046d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80046d4:	f7ff bf24 	b.w	8004520 <USBD_Get_USB_Status>

080046d8 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80046d8:	2228      	movs	r2, #40	; 0x28
  if((ep_addr & 0x80) == 0x80)
 80046da:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80046de:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80046e2:	bf1b      	ittet	ne
 80046e4:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 80046e8:	fb01 2102 	mlane	r1, r1, r2, r2
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80046ec:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80046f0:	185b      	addne	r3, r3, r1
 80046f2:	bf14      	ite	ne
 80046f4:	7898      	ldrbne	r0, [r3, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80046f6:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
}
 80046fa:	4770      	bx	lr

080046fc <USBD_LL_SetUSBAddress>:
{
 80046fc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80046fe:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004702:	f7fd f9c5 	bl	8001a90 <HAL_PCD_SetAddress>
}
 8004706:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800470a:	f7ff bf09 	b.w	8004520 <USBD_Get_USB_Status>

0800470e <USBD_LL_Transmit>:
{
 800470e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004710:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004714:	f7fd ff24 	bl	8002560 <HAL_PCD_EP_Transmit>
}
 8004718:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800471c:	f7ff bf00 	b.w	8004520 <USBD_Get_USB_Status>

08004720 <USBD_LL_PrepareReceive>:
{
 8004720:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004722:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004726:	f7fd fefc 	bl	8002522 <HAL_PCD_EP_Receive>
}
 800472a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800472e:	f7ff bef7 	b.w	8004520 <USBD_Get_USB_Status>

08004732 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004732:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004736:	f7fd bf0b 	b.w	8002550 <HAL_PCD_EP_GetRxCount>
	...

0800473c <USBD_static_malloc>:
}
 800473c:	4800      	ldr	r0, [pc, #0]	; (8004740 <USBD_static_malloc+0x4>)
 800473e:	4770      	bx	lr
 8004740:	20001214 	.word	0x20001214

08004744 <USBD_static_free>:
}
 8004744:	4770      	bx	lr

08004746 <HAL_PCDEx_SetConnectionState>:
}
 8004746:	4770      	bx	lr

08004748 <_Znwj>:
 8004748:	2801      	cmp	r0, #1
 800474a:	bf38      	it	cc
 800474c:	2001      	movcc	r0, #1
 800474e:	b510      	push	{r4, lr}
 8004750:	4604      	mov	r4, r0
 8004752:	4620      	mov	r0, r4
 8004754:	f000 f8ec 	bl	8004930 <malloc>
 8004758:	b930      	cbnz	r0, 8004768 <_Znwj+0x20>
 800475a:	f000 f8af 	bl	80048bc <_ZSt15get_new_handlerv>
 800475e:	b908      	cbnz	r0, 8004764 <_Znwj+0x1c>
 8004760:	f000 f8b4 	bl	80048cc <abort>
 8004764:	4780      	blx	r0
 8004766:	e7f4      	b.n	8004752 <_Znwj+0xa>
 8004768:	bd10      	pop	{r4, pc}

0800476a <_ZNSaIcEC1Ev>:
 800476a:	4770      	bx	lr

0800476c <_ZNSaIcED1Ev>:
 800476c:	4770      	bx	lr

0800476e <_ZSt17__throw_bad_allocv>:
 800476e:	b508      	push	{r3, lr}
 8004770:	f000 f8ac 	bl	80048cc <abort>

08004774 <_ZSt19__throw_logic_errorPKc>:
 8004774:	b508      	push	{r3, lr}
 8004776:	f000 f8a9 	bl	80048cc <abort>

0800477a <_ZSt20__throw_length_errorPKc>:
 800477a:	b508      	push	{r3, lr}
 800477c:	f000 f8a6 	bl	80048cc <abort>

08004780 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8004780:	b10a      	cbz	r2, 8004786 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8004782:	f000 b8e5 	b.w	8004950 <memcpy>
 8004786:	4770      	bx	lr

08004788 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8004788:	6001      	str	r1, [r0, #0]
 800478a:	4770      	bx	lr

0800478c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 800478c:	6800      	ldr	r0, [r0, #0]
 800478e:	4770      	bx	lr

08004790 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8004790:	6081      	str	r1, [r0, #8]
 8004792:	4770      	bx	lr

08004794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8004794:	2200      	movs	r2, #0
 8004796:	6803      	ldr	r3, [r0, #0]
 8004798:	6041      	str	r1, [r0, #4]
 800479a:	545a      	strb	r2, [r3, r1]
 800479c:	4770      	bx	lr
	...

080047a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80047a0:	b508      	push	{r3, lr}
 80047a2:	680b      	ldr	r3, [r1, #0]
 80047a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a8:	d302      	bcc.n	80047b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80047aa:	480d      	ldr	r0, [pc, #52]	; (80047e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80047ac:	f7ff ffe5 	bl	800477a <_ZSt20__throw_length_errorPKc>
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d90b      	bls.n	80047cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80047b4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80047b8:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80047bc:	d206      	bcs.n	80047cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80047be:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80047c2:	bf2a      	itet	cs
 80047c4:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 80047c8:	6008      	strcc	r0, [r1, #0]
 80047ca:	600b      	strcs	r3, [r1, #0]
 80047cc:	6808      	ldr	r0, [r1, #0]
 80047ce:	3001      	adds	r0, #1
 80047d0:	d501      	bpl.n	80047d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80047d2:	f7ff ffcc 	bl	800476e <_ZSt17__throw_bad_allocv>
 80047d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80047da:	f7ff bfb5 	b.w	8004748 <_Znwj>
 80047de:	bf00      	nop
 80047e0:	08004ceb 	.word	0x08004ceb

080047e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80047e4:	4603      	mov	r3, r0
 80047e6:	f853 0b08 	ldr.w	r0, [r3], #8
 80047ea:	4298      	cmp	r0, r3
 80047ec:	d001      	beq.n	80047f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80047ee:	f000 b862 	b.w	80048b6 <_ZdlPv>
 80047f2:	4770      	bx	lr

080047f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80047f4:	2a01      	cmp	r2, #1
 80047f6:	b410      	push	{r4}
 80047f8:	d103      	bne.n	8004802 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xe>
 80047fa:	780a      	ldrb	r2, [r1, #0]
 80047fc:	bc10      	pop	{r4}
 80047fe:	7002      	strb	r2, [r0, #0]
 8004800:	4770      	bx	lr
 8004802:	bc10      	pop	{r4}
 8004804:	f7ff bfbc 	b.w	8004780 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08004808 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8004808:	b508      	push	{r3, lr}
 800480a:	1a52      	subs	r2, r2, r1
 800480c:	f7ff fff2 	bl	80047f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004810:	bd08      	pop	{r3, pc}

08004812 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8004812:	b508      	push	{r3, lr}
 8004814:	1a52      	subs	r2, r2, r1
 8004816:	f7ff ffed 	bl	80047f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800481a:	bd08      	pop	{r3, pc}

0800481c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800481c:	b510      	push	{r4, lr}
 800481e:	4604      	mov	r4, r0
 8004820:	f7ff ffe0 	bl	80047e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004824:	4620      	mov	r0, r4
 8004826:	bd10      	pop	{r4, pc}

08004828 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8004828:	b510      	push	{r4, lr}
 800482a:	4604      	mov	r4, r0
 800482c:	f100 0208 	add.w	r2, r0, #8
 8004830:	6002      	str	r2, [r0, #0]
 8004832:	e9d1 1200 	ldrd	r1, r2, [r1]
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	440a      	add	r2, r1
 800483c:	f7fc fc1c 	bl	8001078 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8004840:	4620      	mov	r0, r4
 8004842:	bd10      	pop	{r4, pc}

08004844 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8004844:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004846:	4604      	mov	r4, r0
 8004848:	4616      	mov	r6, r2
 800484a:	460d      	mov	r5, r1
 800484c:	b919      	cbnz	r1, 8004856 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800484e:	b112      	cbz	r2, 8004856 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8004850:	480d      	ldr	r0, [pc, #52]	; (8004888 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8004852:	f7ff ff8f 	bl	8004774 <_ZSt19__throw_logic_errorPKc>
 8004856:	1b73      	subs	r3, r6, r5
 8004858:	2b0f      	cmp	r3, #15
 800485a:	9301      	str	r3, [sp, #4]
 800485c:	d907      	bls.n	800486e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800485e:	2200      	movs	r2, #0
 8004860:	4620      	mov	r0, r4
 8004862:	a901      	add	r1, sp, #4
 8004864:	f7ff ff9c 	bl	80047a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004868:	9b01      	ldr	r3, [sp, #4]
 800486a:	6020      	str	r0, [r4, #0]
 800486c:	60a3      	str	r3, [r4, #8]
 800486e:	4632      	mov	r2, r6
 8004870:	4629      	mov	r1, r5
 8004872:	6820      	ldr	r0, [r4, #0]
 8004874:	f7ff ffcd 	bl	8004812 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8004878:	2100      	movs	r1, #0
 800487a:	9b01      	ldr	r3, [sp, #4]
 800487c:	6822      	ldr	r2, [r4, #0]
 800487e:	6063      	str	r3, [r4, #4]
 8004880:	54d1      	strb	r1, [r2, r3]
 8004882:	b002      	add	sp, #8
 8004884:	bd70      	pop	{r4, r5, r6, pc}
 8004886:	bf00      	nop
 8004888:	08004d03 	.word	0x08004d03

0800488c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800488c:	b538      	push	{r3, r4, r5, lr}
 800488e:	f100 0308 	add.w	r3, r0, #8
 8004892:	4604      	mov	r4, r0
 8004894:	460d      	mov	r5, r1
 8004896:	6003      	str	r3, [r0, #0]
 8004898:	b159      	cbz	r1, 80048b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800489a:	4608      	mov	r0, r1
 800489c:	f7fb fc56 	bl	800014c <strlen>
 80048a0:	182a      	adds	r2, r5, r0
 80048a2:	4620      	mov	r0, r4
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	4629      	mov	r1, r5
 80048aa:	f7ff ffcb 	bl	8004844 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80048ae:	4620      	mov	r0, r4
 80048b0:	bd38      	pop	{r3, r4, r5, pc}
 80048b2:	2201      	movs	r2, #1
 80048b4:	e7f5      	b.n	80048a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080048b6 <_ZdlPv>:
 80048b6:	f000 b843 	b.w	8004940 <free>
	...

080048bc <_ZSt15get_new_handlerv>:
 80048bc:	4b02      	ldr	r3, [pc, #8]	; (80048c8 <_ZSt15get_new_handlerv+0xc>)
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	f3bf 8f5b 	dmb	ish
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	20001434 	.word	0x20001434

080048cc <abort>:
 80048cc:	2006      	movs	r0, #6
 80048ce:	b508      	push	{r3, lr}
 80048d0:	f000 f968 	bl	8004ba4 <raise>
 80048d4:	2001      	movs	r0, #1
 80048d6:	f7fc fe6f 	bl	80015b8 <_exit>
	...

080048dc <__errno>:
 80048dc:	4b01      	ldr	r3, [pc, #4]	; (80048e4 <__errno+0x8>)
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	2000017c 	.word	0x2000017c

080048e8 <__libc_init_array>:
 80048e8:	b570      	push	{r4, r5, r6, lr}
 80048ea:	2600      	movs	r6, #0
 80048ec:	4d0c      	ldr	r5, [pc, #48]	; (8004920 <__libc_init_array+0x38>)
 80048ee:	4c0d      	ldr	r4, [pc, #52]	; (8004924 <__libc_init_array+0x3c>)
 80048f0:	1b64      	subs	r4, r4, r5
 80048f2:	10a4      	asrs	r4, r4, #2
 80048f4:	42a6      	cmp	r6, r4
 80048f6:	d109      	bne.n	800490c <__libc_init_array+0x24>
 80048f8:	f000 f97e 	bl	8004bf8 <_init>
 80048fc:	2600      	movs	r6, #0
 80048fe:	4d0a      	ldr	r5, [pc, #40]	; (8004928 <__libc_init_array+0x40>)
 8004900:	4c0a      	ldr	r4, [pc, #40]	; (800492c <__libc_init_array+0x44>)
 8004902:	1b64      	subs	r4, r4, r5
 8004904:	10a4      	asrs	r4, r4, #2
 8004906:	42a6      	cmp	r6, r4
 8004908:	d105      	bne.n	8004916 <__libc_init_array+0x2e>
 800490a:	bd70      	pop	{r4, r5, r6, pc}
 800490c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004910:	4798      	blx	r3
 8004912:	3601      	adds	r6, #1
 8004914:	e7ee      	b.n	80048f4 <__libc_init_array+0xc>
 8004916:	f855 3b04 	ldr.w	r3, [r5], #4
 800491a:	4798      	blx	r3
 800491c:	3601      	adds	r6, #1
 800491e:	e7f2      	b.n	8004906 <__libc_init_array+0x1e>
 8004920:	080051e0 	.word	0x080051e0
 8004924:	080051e0 	.word	0x080051e0
 8004928:	080051e0 	.word	0x080051e0
 800492c:	080051e4 	.word	0x080051e4

08004930 <malloc>:
 8004930:	4b02      	ldr	r3, [pc, #8]	; (800493c <malloc+0xc>)
 8004932:	4601      	mov	r1, r0
 8004934:	6818      	ldr	r0, [r3, #0]
 8004936:	f000 b889 	b.w	8004a4c <_malloc_r>
 800493a:	bf00      	nop
 800493c:	2000017c 	.word	0x2000017c

08004940 <free>:
 8004940:	4b02      	ldr	r3, [pc, #8]	; (800494c <free+0xc>)
 8004942:	4601      	mov	r1, r0
 8004944:	6818      	ldr	r0, [r3, #0]
 8004946:	f000 b819 	b.w	800497c <_free_r>
 800494a:	bf00      	nop
 800494c:	2000017c 	.word	0x2000017c

08004950 <memcpy>:
 8004950:	440a      	add	r2, r1
 8004952:	4291      	cmp	r1, r2
 8004954:	f100 33ff 	add.w	r3, r0, #4294967295
 8004958:	d100      	bne.n	800495c <memcpy+0xc>
 800495a:	4770      	bx	lr
 800495c:	b510      	push	{r4, lr}
 800495e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004962:	4291      	cmp	r1, r2
 8004964:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004968:	d1f9      	bne.n	800495e <memcpy+0xe>
 800496a:	bd10      	pop	{r4, pc}

0800496c <memset>:
 800496c:	4603      	mov	r3, r0
 800496e:	4402      	add	r2, r0
 8004970:	4293      	cmp	r3, r2
 8004972:	d100      	bne.n	8004976 <memset+0xa>
 8004974:	4770      	bx	lr
 8004976:	f803 1b01 	strb.w	r1, [r3], #1
 800497a:	e7f9      	b.n	8004970 <memset+0x4>

0800497c <_free_r>:
 800497c:	b538      	push	{r3, r4, r5, lr}
 800497e:	4605      	mov	r5, r0
 8004980:	2900      	cmp	r1, #0
 8004982:	d040      	beq.n	8004a06 <_free_r+0x8a>
 8004984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004988:	1f0c      	subs	r4, r1, #4
 800498a:	2b00      	cmp	r3, #0
 800498c:	bfb8      	it	lt
 800498e:	18e4      	addlt	r4, r4, r3
 8004990:	f000 f924 	bl	8004bdc <__malloc_lock>
 8004994:	4a1c      	ldr	r2, [pc, #112]	; (8004a08 <_free_r+0x8c>)
 8004996:	6813      	ldr	r3, [r2, #0]
 8004998:	b933      	cbnz	r3, 80049a8 <_free_r+0x2c>
 800499a:	6063      	str	r3, [r4, #4]
 800499c:	6014      	str	r4, [r2, #0]
 800499e:	4628      	mov	r0, r5
 80049a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049a4:	f000 b920 	b.w	8004be8 <__malloc_unlock>
 80049a8:	42a3      	cmp	r3, r4
 80049aa:	d908      	bls.n	80049be <_free_r+0x42>
 80049ac:	6820      	ldr	r0, [r4, #0]
 80049ae:	1821      	adds	r1, r4, r0
 80049b0:	428b      	cmp	r3, r1
 80049b2:	bf01      	itttt	eq
 80049b4:	6819      	ldreq	r1, [r3, #0]
 80049b6:	685b      	ldreq	r3, [r3, #4]
 80049b8:	1809      	addeq	r1, r1, r0
 80049ba:	6021      	streq	r1, [r4, #0]
 80049bc:	e7ed      	b.n	800499a <_free_r+0x1e>
 80049be:	461a      	mov	r2, r3
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	b10b      	cbz	r3, 80049c8 <_free_r+0x4c>
 80049c4:	42a3      	cmp	r3, r4
 80049c6:	d9fa      	bls.n	80049be <_free_r+0x42>
 80049c8:	6811      	ldr	r1, [r2, #0]
 80049ca:	1850      	adds	r0, r2, r1
 80049cc:	42a0      	cmp	r0, r4
 80049ce:	d10b      	bne.n	80049e8 <_free_r+0x6c>
 80049d0:	6820      	ldr	r0, [r4, #0]
 80049d2:	4401      	add	r1, r0
 80049d4:	1850      	adds	r0, r2, r1
 80049d6:	4283      	cmp	r3, r0
 80049d8:	6011      	str	r1, [r2, #0]
 80049da:	d1e0      	bne.n	800499e <_free_r+0x22>
 80049dc:	6818      	ldr	r0, [r3, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	4401      	add	r1, r0
 80049e2:	6011      	str	r1, [r2, #0]
 80049e4:	6053      	str	r3, [r2, #4]
 80049e6:	e7da      	b.n	800499e <_free_r+0x22>
 80049e8:	d902      	bls.n	80049f0 <_free_r+0x74>
 80049ea:	230c      	movs	r3, #12
 80049ec:	602b      	str	r3, [r5, #0]
 80049ee:	e7d6      	b.n	800499e <_free_r+0x22>
 80049f0:	6820      	ldr	r0, [r4, #0]
 80049f2:	1821      	adds	r1, r4, r0
 80049f4:	428b      	cmp	r3, r1
 80049f6:	bf01      	itttt	eq
 80049f8:	6819      	ldreq	r1, [r3, #0]
 80049fa:	685b      	ldreq	r3, [r3, #4]
 80049fc:	1809      	addeq	r1, r1, r0
 80049fe:	6021      	streq	r1, [r4, #0]
 8004a00:	6063      	str	r3, [r4, #4]
 8004a02:	6054      	str	r4, [r2, #4]
 8004a04:	e7cb      	b.n	800499e <_free_r+0x22>
 8004a06:	bd38      	pop	{r3, r4, r5, pc}
 8004a08:	20001438 	.word	0x20001438

08004a0c <sbrk_aligned>:
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	4e0e      	ldr	r6, [pc, #56]	; (8004a48 <sbrk_aligned+0x3c>)
 8004a10:	460c      	mov	r4, r1
 8004a12:	6831      	ldr	r1, [r6, #0]
 8004a14:	4605      	mov	r5, r0
 8004a16:	b911      	cbnz	r1, 8004a1e <sbrk_aligned+0x12>
 8004a18:	f000 f88c 	bl	8004b34 <_sbrk_r>
 8004a1c:	6030      	str	r0, [r6, #0]
 8004a1e:	4621      	mov	r1, r4
 8004a20:	4628      	mov	r0, r5
 8004a22:	f000 f887 	bl	8004b34 <_sbrk_r>
 8004a26:	1c43      	adds	r3, r0, #1
 8004a28:	d00a      	beq.n	8004a40 <sbrk_aligned+0x34>
 8004a2a:	1cc4      	adds	r4, r0, #3
 8004a2c:	f024 0403 	bic.w	r4, r4, #3
 8004a30:	42a0      	cmp	r0, r4
 8004a32:	d007      	beq.n	8004a44 <sbrk_aligned+0x38>
 8004a34:	1a21      	subs	r1, r4, r0
 8004a36:	4628      	mov	r0, r5
 8004a38:	f000 f87c 	bl	8004b34 <_sbrk_r>
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	d101      	bne.n	8004a44 <sbrk_aligned+0x38>
 8004a40:	f04f 34ff 	mov.w	r4, #4294967295
 8004a44:	4620      	mov	r0, r4
 8004a46:	bd70      	pop	{r4, r5, r6, pc}
 8004a48:	2000143c 	.word	0x2000143c

08004a4c <_malloc_r>:
 8004a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a50:	1ccd      	adds	r5, r1, #3
 8004a52:	f025 0503 	bic.w	r5, r5, #3
 8004a56:	3508      	adds	r5, #8
 8004a58:	2d0c      	cmp	r5, #12
 8004a5a:	bf38      	it	cc
 8004a5c:	250c      	movcc	r5, #12
 8004a5e:	2d00      	cmp	r5, #0
 8004a60:	4607      	mov	r7, r0
 8004a62:	db01      	blt.n	8004a68 <_malloc_r+0x1c>
 8004a64:	42a9      	cmp	r1, r5
 8004a66:	d905      	bls.n	8004a74 <_malloc_r+0x28>
 8004a68:	230c      	movs	r3, #12
 8004a6a:	2600      	movs	r6, #0
 8004a6c:	603b      	str	r3, [r7, #0]
 8004a6e:	4630      	mov	r0, r6
 8004a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a74:	4e2e      	ldr	r6, [pc, #184]	; (8004b30 <_malloc_r+0xe4>)
 8004a76:	f000 f8b1 	bl	8004bdc <__malloc_lock>
 8004a7a:	6833      	ldr	r3, [r6, #0]
 8004a7c:	461c      	mov	r4, r3
 8004a7e:	bb34      	cbnz	r4, 8004ace <_malloc_r+0x82>
 8004a80:	4629      	mov	r1, r5
 8004a82:	4638      	mov	r0, r7
 8004a84:	f7ff ffc2 	bl	8004a0c <sbrk_aligned>
 8004a88:	1c43      	adds	r3, r0, #1
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	d14d      	bne.n	8004b2a <_malloc_r+0xde>
 8004a8e:	6834      	ldr	r4, [r6, #0]
 8004a90:	4626      	mov	r6, r4
 8004a92:	2e00      	cmp	r6, #0
 8004a94:	d140      	bne.n	8004b18 <_malloc_r+0xcc>
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	4631      	mov	r1, r6
 8004a9a:	4638      	mov	r0, r7
 8004a9c:	eb04 0803 	add.w	r8, r4, r3
 8004aa0:	f000 f848 	bl	8004b34 <_sbrk_r>
 8004aa4:	4580      	cmp	r8, r0
 8004aa6:	d13a      	bne.n	8004b1e <_malloc_r+0xd2>
 8004aa8:	6821      	ldr	r1, [r4, #0]
 8004aaa:	3503      	adds	r5, #3
 8004aac:	1a6d      	subs	r5, r5, r1
 8004aae:	f025 0503 	bic.w	r5, r5, #3
 8004ab2:	3508      	adds	r5, #8
 8004ab4:	2d0c      	cmp	r5, #12
 8004ab6:	bf38      	it	cc
 8004ab8:	250c      	movcc	r5, #12
 8004aba:	4638      	mov	r0, r7
 8004abc:	4629      	mov	r1, r5
 8004abe:	f7ff ffa5 	bl	8004a0c <sbrk_aligned>
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	d02b      	beq.n	8004b1e <_malloc_r+0xd2>
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	442b      	add	r3, r5
 8004aca:	6023      	str	r3, [r4, #0]
 8004acc:	e00e      	b.n	8004aec <_malloc_r+0xa0>
 8004ace:	6822      	ldr	r2, [r4, #0]
 8004ad0:	1b52      	subs	r2, r2, r5
 8004ad2:	d41e      	bmi.n	8004b12 <_malloc_r+0xc6>
 8004ad4:	2a0b      	cmp	r2, #11
 8004ad6:	d916      	bls.n	8004b06 <_malloc_r+0xba>
 8004ad8:	1961      	adds	r1, r4, r5
 8004ada:	42a3      	cmp	r3, r4
 8004adc:	6025      	str	r5, [r4, #0]
 8004ade:	bf18      	it	ne
 8004ae0:	6059      	strne	r1, [r3, #4]
 8004ae2:	6863      	ldr	r3, [r4, #4]
 8004ae4:	bf08      	it	eq
 8004ae6:	6031      	streq	r1, [r6, #0]
 8004ae8:	5162      	str	r2, [r4, r5]
 8004aea:	604b      	str	r3, [r1, #4]
 8004aec:	4638      	mov	r0, r7
 8004aee:	f104 060b 	add.w	r6, r4, #11
 8004af2:	f000 f879 	bl	8004be8 <__malloc_unlock>
 8004af6:	f026 0607 	bic.w	r6, r6, #7
 8004afa:	1d23      	adds	r3, r4, #4
 8004afc:	1af2      	subs	r2, r6, r3
 8004afe:	d0b6      	beq.n	8004a6e <_malloc_r+0x22>
 8004b00:	1b9b      	subs	r3, r3, r6
 8004b02:	50a3      	str	r3, [r4, r2]
 8004b04:	e7b3      	b.n	8004a6e <_malloc_r+0x22>
 8004b06:	6862      	ldr	r2, [r4, #4]
 8004b08:	42a3      	cmp	r3, r4
 8004b0a:	bf0c      	ite	eq
 8004b0c:	6032      	streq	r2, [r6, #0]
 8004b0e:	605a      	strne	r2, [r3, #4]
 8004b10:	e7ec      	b.n	8004aec <_malloc_r+0xa0>
 8004b12:	4623      	mov	r3, r4
 8004b14:	6864      	ldr	r4, [r4, #4]
 8004b16:	e7b2      	b.n	8004a7e <_malloc_r+0x32>
 8004b18:	4634      	mov	r4, r6
 8004b1a:	6876      	ldr	r6, [r6, #4]
 8004b1c:	e7b9      	b.n	8004a92 <_malloc_r+0x46>
 8004b1e:	230c      	movs	r3, #12
 8004b20:	4638      	mov	r0, r7
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	f000 f860 	bl	8004be8 <__malloc_unlock>
 8004b28:	e7a1      	b.n	8004a6e <_malloc_r+0x22>
 8004b2a:	6025      	str	r5, [r4, #0]
 8004b2c:	e7de      	b.n	8004aec <_malloc_r+0xa0>
 8004b2e:	bf00      	nop
 8004b30:	20001438 	.word	0x20001438

08004b34 <_sbrk_r>:
 8004b34:	b538      	push	{r3, r4, r5, lr}
 8004b36:	2300      	movs	r3, #0
 8004b38:	4d05      	ldr	r5, [pc, #20]	; (8004b50 <_sbrk_r+0x1c>)
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	4608      	mov	r0, r1
 8004b3e:	602b      	str	r3, [r5, #0]
 8004b40:	f7fc fd40 	bl	80015c4 <_sbrk>
 8004b44:	1c43      	adds	r3, r0, #1
 8004b46:	d102      	bne.n	8004b4e <_sbrk_r+0x1a>
 8004b48:	682b      	ldr	r3, [r5, #0]
 8004b4a:	b103      	cbz	r3, 8004b4e <_sbrk_r+0x1a>
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	bd38      	pop	{r3, r4, r5, pc}
 8004b50:	20001440 	.word	0x20001440

08004b54 <_raise_r>:
 8004b54:	291f      	cmp	r1, #31
 8004b56:	b538      	push	{r3, r4, r5, lr}
 8004b58:	4604      	mov	r4, r0
 8004b5a:	460d      	mov	r5, r1
 8004b5c:	d904      	bls.n	8004b68 <_raise_r+0x14>
 8004b5e:	2316      	movs	r3, #22
 8004b60:	6003      	str	r3, [r0, #0]
 8004b62:	f04f 30ff 	mov.w	r0, #4294967295
 8004b66:	bd38      	pop	{r3, r4, r5, pc}
 8004b68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004b6a:	b112      	cbz	r2, 8004b72 <_raise_r+0x1e>
 8004b6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004b70:	b94b      	cbnz	r3, 8004b86 <_raise_r+0x32>
 8004b72:	4620      	mov	r0, r4
 8004b74:	f000 f830 	bl	8004bd8 <_getpid_r>
 8004b78:	462a      	mov	r2, r5
 8004b7a:	4601      	mov	r1, r0
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b82:	f000 b817 	b.w	8004bb4 <_kill_r>
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d00a      	beq.n	8004ba0 <_raise_r+0x4c>
 8004b8a:	1c59      	adds	r1, r3, #1
 8004b8c:	d103      	bne.n	8004b96 <_raise_r+0x42>
 8004b8e:	2316      	movs	r3, #22
 8004b90:	6003      	str	r3, [r0, #0]
 8004b92:	2001      	movs	r0, #1
 8004b94:	e7e7      	b.n	8004b66 <_raise_r+0x12>
 8004b96:	2400      	movs	r4, #0
 8004b98:	4628      	mov	r0, r5
 8004b9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004b9e:	4798      	blx	r3
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	e7e0      	b.n	8004b66 <_raise_r+0x12>

08004ba4 <raise>:
 8004ba4:	4b02      	ldr	r3, [pc, #8]	; (8004bb0 <raise+0xc>)
 8004ba6:	4601      	mov	r1, r0
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	f7ff bfd3 	b.w	8004b54 <_raise_r>
 8004bae:	bf00      	nop
 8004bb0:	2000017c 	.word	0x2000017c

08004bb4 <_kill_r>:
 8004bb4:	b538      	push	{r3, r4, r5, lr}
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	4d06      	ldr	r5, [pc, #24]	; (8004bd4 <_kill_r+0x20>)
 8004bba:	4604      	mov	r4, r0
 8004bbc:	4608      	mov	r0, r1
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	602b      	str	r3, [r5, #0]
 8004bc2:	f7fc fcf1 	bl	80015a8 <_kill>
 8004bc6:	1c43      	adds	r3, r0, #1
 8004bc8:	d102      	bne.n	8004bd0 <_kill_r+0x1c>
 8004bca:	682b      	ldr	r3, [r5, #0]
 8004bcc:	b103      	cbz	r3, 8004bd0 <_kill_r+0x1c>
 8004bce:	6023      	str	r3, [r4, #0]
 8004bd0:	bd38      	pop	{r3, r4, r5, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20001440 	.word	0x20001440

08004bd8 <_getpid_r>:
 8004bd8:	f7fc bce4 	b.w	80015a4 <_getpid>

08004bdc <__malloc_lock>:
 8004bdc:	4801      	ldr	r0, [pc, #4]	; (8004be4 <__malloc_lock+0x8>)
 8004bde:	f000 b809 	b.w	8004bf4 <__retarget_lock_acquire_recursive>
 8004be2:	bf00      	nop
 8004be4:	20001444 	.word	0x20001444

08004be8 <__malloc_unlock>:
 8004be8:	4801      	ldr	r0, [pc, #4]	; (8004bf0 <__malloc_unlock+0x8>)
 8004bea:	f000 b804 	b.w	8004bf6 <__retarget_lock_release_recursive>
 8004bee:	bf00      	nop
 8004bf0:	20001444 	.word	0x20001444

08004bf4 <__retarget_lock_acquire_recursive>:
 8004bf4:	4770      	bx	lr

08004bf6 <__retarget_lock_release_recursive>:
 8004bf6:	4770      	bx	lr

08004bf8 <_init>:
 8004bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfa:	bf00      	nop
 8004bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bfe:	bc08      	pop	{r3}
 8004c00:	469e      	mov	lr, r3
 8004c02:	4770      	bx	lr

08004c04 <_fini>:
 8004c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c06:	bf00      	nop
 8004c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0a:	bc08      	pop	{r3}
 8004c0c:	469e      	mov	lr, r3
 8004c0e:	4770      	bx	lr
