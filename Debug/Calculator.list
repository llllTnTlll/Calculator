
Calculator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c248  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ac  0800c358  0800c358  0001c358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca04  0800ca04  00020350  2**0
                  CONTENTS
  4 .ARM          00000000  0800ca04  0800ca04  00020350  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ca04  0800ca04  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ca04  0800ca04  0001ca04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800ca0c  0800ca0c  0001ca0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800ca14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001274  20000350  0800cd64  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015c4  0800cd64  000215c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038f09  00000000  00000000  00020379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f24  00000000  00000000  00059282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e0  00000000  00000000  0005f1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001da0  00000000  00000000  00060788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f556  00000000  00000000  00062528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae24  00000000  00000000  00081a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a302f  00000000  00000000  0009c8a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013f8d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078a4  00000000  00000000  0013f924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00008cf4  00000000  00000000  001471c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c340 	.word	0x0800c340

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	0800c340 	.word	0x0800c340

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_d2lz>:
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	4605      	mov	r5, r0
 8001140:	460c      	mov	r4, r1
 8001142:	2200      	movs	r2, #0
 8001144:	2300      	movs	r3, #0
 8001146:	4628      	mov	r0, r5
 8001148:	4621      	mov	r1, r4
 800114a:	f7ff fc37 	bl	80009bc <__aeabi_dcmplt>
 800114e:	b928      	cbnz	r0, 800115c <__aeabi_d2lz+0x20>
 8001150:	4628      	mov	r0, r5
 8001152:	4621      	mov	r1, r4
 8001154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001158:	f000 b80a 	b.w	8001170 <__aeabi_d2ulz>
 800115c:	4628      	mov	r0, r5
 800115e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001162:	f000 f805 	bl	8001170 <__aeabi_d2ulz>
 8001166:	4240      	negs	r0, r0
 8001168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800116c:	bd38      	pop	{r3, r4, r5, pc}
 800116e:	bf00      	nop

08001170 <__aeabi_d2ulz>:
 8001170:	b5d0      	push	{r4, r6, r7, lr}
 8001172:	2200      	movs	r2, #0
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <__aeabi_d2ulz+0x34>)
 8001176:	4606      	mov	r6, r0
 8001178:	460f      	mov	r7, r1
 800117a:	f7ff f9ad 	bl	80004d8 <__aeabi_dmul>
 800117e:	f7ff fc83 	bl	8000a88 <__aeabi_d2uiz>
 8001182:	4604      	mov	r4, r0
 8001184:	f7ff f92e 	bl	80003e4 <__aeabi_ui2d>
 8001188:	2200      	movs	r2, #0
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <__aeabi_d2ulz+0x38>)
 800118c:	f7ff f9a4 	bl	80004d8 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4630      	mov	r0, r6
 8001196:	4639      	mov	r1, r7
 8001198:	f7fe ffe6 	bl	8000168 <__aeabi_dsub>
 800119c:	f7ff fc74 	bl	8000a88 <__aeabi_d2uiz>
 80011a0:	4621      	mov	r1, r4
 80011a2:	bdd0      	pop	{r4, r6, r7, pc}
 80011a4:	3df00000 	.word	0x3df00000
 80011a8:	41f00000 	.word	0x41f00000

080011ac <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr

080011c2 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011d0:	d205      	bcs.n	80011de <_ZSt16__deque_buf_sizej+0x1c>
 80011d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011dc:	e000      	b.n	80011e0 <_ZSt16__deque_buf_sizej+0x1e>
 80011de:	2301      	movs	r3, #1
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
	...

080011ec <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>:
			     __idx, __base); }

  // NB: strtof vs strtod.
  inline float
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f006 fb23 	bl	8007842 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80011fc:	4602      	mov	r2, r0
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	4904      	ldr	r1, [pc, #16]	; (8001214 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj+0x28>)
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj+0x2c>)
 8001204:	f000 fb7d 	bl	8001902 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 8001208:	4603      	mov	r3, r0
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	0800c358 	.word	0x0800c358
 8001218:	080095fd 	.word	0x080095fd

0800121c <_ZNSt7__cxx119to_stringEf>:
#if _GLIBCXX_USE_C99_STDIO
  // NB: (v)snprintf vs sprintf.

  inline string
  to_string(float __val)
  {
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af02      	add	r7, sp, #8
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
    const int __n = 
 8001226:	233a      	movs	r3, #58	; 0x3a
 8001228:	60fb      	str	r3, [r7, #12]
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
					   "%f", __val);
 800122a:	6838      	ldr	r0, [r7, #0]
 800122c:	f7ff f8fc 	bl	8000428 <__aeabi_f2d>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	e9cd 2300 	strd	r2, r3, [sp]
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <_ZNSt7__cxx119to_stringEf+0x30>)
 800123c:	223a      	movs	r2, #58	; 0x3a
 800123e:	4904      	ldr	r1, [pc, #16]	; (8001250 <_ZNSt7__cxx119to_stringEf+0x34>)
 8001240:	f000 fba4 	bl	800198c <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
  }
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	0800c360 	.word	0x0800c360
 8001250:	080097f5 	.word	0x080097f5

08001254 <_ZN9Calculate11addToSuffixERc>:
 */

#include "calculate.hpp"


void Calculate::addToSuffix(char& c) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
	suffix += c;
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	4610      	mov	r0, r2
 8001268:	f006 fa2c 	bl	80076c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
	if (c != ' ') {
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b20      	cmp	r3, #32
 8001272:	d004      	beq.n	800127e <_ZN9Calculate11addToSuffixERc+0x2a>
		suffix += ' ';
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2120      	movs	r1, #32
 8001278:	4618      	mov	r0, r3
 800127a:	f006 fa23 	bl	80076c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
	}
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <_ZN9Calculate11addToSuffixERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Calculate::addToSuffix(std::string& str) {
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	6039      	str	r1, [r7, #0]
	suffix += str;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6839      	ldr	r1, [r7, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f006 fad0 	bl	800783a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
	if (!str.empty()) {
 800129a:	6838      	ldr	r0, [r7, #0]
 800129c:	f006 f9ea 	bl	8007674 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 80012a0:	4603      	mov	r3, r0
 80012a2:	f083 0301 	eor.w	r3, r3, #1
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d004      	beq.n	80012b6 <_ZN9Calculate11addToSuffixERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x30>
		suffix += ' ';
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2120      	movs	r1, #32
 80012b0:	4618      	mov	r0, r3
 80012b2:	f006 fa07 	bl	80076c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
	}
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <_ZN9Calculate16getNumStackValueEv>:

float Calculate::getNumStackValue() {
 80012be:	b580      	push	{r7, lr}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
	float n = numStack.top();
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3358      	adds	r3, #88	; 0x58
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 fb95 	bl	80019fa <_ZNSt5stackIfSt5dequeIfSaIfEEE3topEv>
 80012d0:	4603      	mov	r3, r0
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	60fb      	str	r3, [r7, #12]
	numStack.pop();
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3358      	adds	r3, #88	; 0x58
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 fb9a 	bl	8001a14 <_ZNSt5stackIfSt5dequeIfSaIfEEE3popEv>
	return n;
 80012e0:	68fb      	ldr	r3, [r7, #12]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <_ZN9Calculate8clrStackEv>:

void Calculate::clrStack() {
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
	while (!optStack.empty())
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3330      	adds	r3, #48	; 0x30
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 fb98 	bl	8001a2c <_ZNKSt5stackIcSt5dequeIcSaIcEEE5emptyEv>
 80012fc:	4603      	mov	r3, r0
 80012fe:	f083 0301 	eor.w	r3, r3, #1
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d005      	beq.n	8001314 <_ZN9Calculate8clrStackEv+0x2a>
		optStack.pop();
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3330      	adds	r3, #48	; 0x30
 800130c:	4618      	mov	r0, r3
 800130e:	f000 fb9a 	bl	8001a46 <_ZNSt5stackIcSt5dequeIcSaIcEEE3popEv>
	while (!optStack.empty())
 8001312:	e7ee      	b.n	80012f2 <_ZN9Calculate8clrStackEv+0x8>
	while (!numStack.empty())
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3358      	adds	r3, #88	; 0x58
 8001318:	4618      	mov	r0, r3
 800131a:	f000 fba0 	bl	8001a5e <_ZNKSt5stackIfSt5dequeIfSaIfEEE5emptyEv>
 800131e:	4603      	mov	r3, r0
 8001320:	f083 0301 	eor.w	r3, r3, #1
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d005      	beq.n	8001336 <_ZN9Calculate8clrStackEv+0x4c>
		numStack.pop();
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3358      	adds	r3, #88	; 0x58
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fb70 	bl	8001a14 <_ZNSt5stackIfSt5dequeIfSaIfEEE3popEv>
	while (!numStack.empty())
 8001334:	e7ee      	b.n	8001314 <_ZN9Calculate8clrStackEv+0x2a>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <_ZN9Calculate8isNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool Calculate::isNumber(const std::string& str) {
 800133e:	b580      	push	{r7, lr}
 8001340:	b086      	sub	sp, #24
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	6039      	str	r1, [r7, #0]
	// 空字符串不是数字
	if (str.empty()) {
 8001348:	6838      	ldr	r0, [r7, #0]
 800134a:	f006 f993 	bl	8007674 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <_ZN9Calculate8isNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a>
		return false;
 8001354:	2300      	movs	r3, #0
 8001356:	e05d      	b.n	8001414 <_ZN9Calculate8isNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd6>
	}

	// 允许字符串以'-'或'+'开始
	size_t start = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
	if (str[0] == '-' || str[0] == '+') {
 800135c:	2100      	movs	r1, #0
 800135e:	6838      	ldr	r0, [r7, #0]
 8001360:	f006 f98d 	bl	800767e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001364:	4603      	mov	r3, r0
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b2d      	cmp	r3, #45	; 0x2d
 800136a:	d007      	beq.n	800137c <_ZN9Calculate8isNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3e>
 800136c:	2100      	movs	r1, #0
 800136e:	6838      	ldr	r0, [r7, #0]
 8001370:	f006 f985 	bl	800767e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001374:	4603      	mov	r3, r0
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b2b      	cmp	r3, #43	; 0x2b
 800137a:	d101      	bne.n	8001380 <_ZN9Calculate8isNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
 800137c:	2301      	movs	r3, #1
 800137e:	e000      	b.n	8001382 <_ZN9Calculate8isNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44>
 8001380:	2300      	movs	r3, #0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <_ZN9Calculate8isNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>
		start = 1;
 8001386:	2301      	movs	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
	}

	bool hasDigit = false; // 用于标记是否已经遇到过数字
 800138a:	2300      	movs	r3, #0
 800138c:	74fb      	strb	r3, [r7, #19]
	bool hasDot = false;   // 用于标记是否已经遇到过小数点
 800138e:	2300      	movs	r3, #0
 8001390:	74bb      	strb	r3, [r7, #18]

	for (size_t i = start; i < str.size(); ++i) {
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	6838      	ldr	r0, [r7, #0]
 8001398:	f006 f96a 	bl	8007670 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800139c:	4602      	mov	r2, r0
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4293      	cmp	r3, r2
 80013a2:	bf34      	ite	cc
 80013a4:	2301      	movcc	r3, #1
 80013a6:	2300      	movcs	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d031      	beq.n	8001412 <_ZN9Calculate8isNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>
		if (std::isdigit(str[i])) {
 80013ae:	68f9      	ldr	r1, [r7, #12]
 80013b0:	6838      	ldr	r0, [r7, #0]
 80013b2:	f006 f964 	bl	800767e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80013b6:	4603      	mov	r3, r0
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	3b30      	subs	r3, #48	; 0x30
 80013bc:	2b09      	cmp	r3, #9
 80013be:	bf94      	ite	ls
 80013c0:	2301      	movls	r3, #1
 80013c2:	2300      	movhi	r3, #0
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	bf14      	ite	ne
 80013ca:	2301      	movne	r3, #1
 80013cc:	2300      	moveq	r3, #0
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d002      	beq.n	80013da <_ZN9Calculate8isNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c>
			hasDigit = true;
 80013d4:	2301      	movs	r3, #1
 80013d6:	74fb      	strb	r3, [r7, #19]
 80013d8:	e017      	b.n	800140a <_ZN9Calculate8isNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcc>
		}
		else if (str[i] == '.' && !hasDot) {
 80013da:	68f9      	ldr	r1, [r7, #12]
 80013dc:	6838      	ldr	r0, [r7, #0]
 80013de:	f006 f94e 	bl	800767e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80013e2:	4603      	mov	r3, r0
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b2e      	cmp	r3, #46	; 0x2e
 80013e8:	d107      	bne.n	80013fa <_ZN9Calculate8isNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbc>
 80013ea:	7cbb      	ldrb	r3, [r7, #18]
 80013ec:	f083 0301 	eor.w	r3, r3, #1
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <_ZN9Calculate8isNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbc>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <_ZN9Calculate8isNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbe>
 80013fa:	2300      	movs	r3, #0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <_ZN9Calculate8isNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc8>
			hasDot = true;
 8001400:	2301      	movs	r3, #1
 8001402:	74bb      	strb	r3, [r7, #18]
 8001404:	e001      	b.n	800140a <_ZN9Calculate8isNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcc>
		}
		else {
			return false; // 遇到不是数字或重复的小数点，返回false
 8001406:	2300      	movs	r3, #0
 8001408:	e004      	b.n	8001414 <_ZN9Calculate8isNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd6>
	for (size_t i = start; i < str.size(); ++i) {
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	3301      	adds	r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	e7c1      	b.n	8001396 <_ZN9Calculate8isNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x58>
		}
	}
	return hasDigit; // 至少包含一个数字才是有效数字
 8001412:	7cfb      	ldrb	r3, [r7, #19]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <_ZNK9Calculate8getLevelERc>:

int Calculate::getLevel(char& opt) const {
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
	switch (opt) {
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	3b28      	subs	r3, #40	; 0x28
 800142c:	2b07      	cmp	r3, #7
 800142e:	d81b      	bhi.n	8001468 <_ZNK9Calculate8getLevelERc+0x4c>
 8001430:	a201      	add	r2, pc, #4	; (adr r2, 8001438 <_ZNK9Calculate8getLevelERc+0x1c>)
 8001432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001436:	bf00      	nop
 8001438:	08001459 	.word	0x08001459
 800143c:	08001465 	.word	0x08001465
 8001440:	08001461 	.word	0x08001461
 8001444:	0800145d 	.word	0x0800145d
 8001448:	08001469 	.word	0x08001469
 800144c:	0800145d 	.word	0x0800145d
 8001450:	08001469 	.word	0x08001469
 8001454:	08001461 	.word	0x08001461
	case '(':
		return 0;
 8001458:	2300      	movs	r3, #0
 800145a:	e007      	b.n	800146c <_ZNK9Calculate8getLevelERc+0x50>
	case '+':
	case '-':
		return 1;
 800145c:	2301      	movs	r3, #1
 800145e:	e005      	b.n	800146c <_ZNK9Calculate8getLevelERc+0x50>
	case '*':
	case '/':
		return 2;
 8001460:	2302      	movs	r3, #2
 8001462:	e003      	b.n	800146c <_ZNK9Calculate8getLevelERc+0x50>
	case ')':
		return 3;
 8001464:	2303      	movs	r3, #3
 8001466:	e001      	b.n	800146c <_ZNK9Calculate8getLevelERc+0x50>
	}
	return -1;
 8001468:	f04f 33ff 	mov.w	r3, #4294967295
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop

08001478 <_ZN9Calculate7doCalcuEv>:

bool Calculate::doCalcu() {
 8001478:	b5b0      	push	{r4, r5, r7, lr}
 800147a:	b09e      	sub	sp, #120	; 0x78
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	2400      	movs	r4, #0
	clrStack();
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ff31 	bl	80012ea <_ZN9Calculate8clrStackEv>

	size_t startPos = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	677b      	str	r3, [r7, #116]	; 0x74
	size_t spacePos = suffix.find(' ', startPos);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001490:	2120      	movs	r1, #32
 8001492:	4618      	mov	r0, r3
 8001494:	f006 f9d7 	bl	8007846 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 8001498:	6738      	str	r0, [r7, #112]	; 0x70
	while (spacePos != std::string::npos) {
 800149a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a0:	f000 80f7 	beq.w	8001692 <_ZN9Calculate7doCalcuEv+0x21a>
		std::string word = suffix.substr(startPos, spacePos - startPos);
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80014a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	f107 0008 	add.w	r0, r7, #8
 80014b0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80014b2:	f006 fa33 	bl	800791c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
		if (isNumber(word)) {
 80014b6:	f107 0308 	add.w	r3, r7, #8
 80014ba:	4619      	mov	r1, r3
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff3e 	bl	800133e <_ZN9Calculate8isNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d011      	beq.n	80014ec <_ZN9Calculate7doCalcuEv+0x74>
			numStack.push(std::stof(word));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f103 0558 	add.w	r5, r3, #88	; 0x58
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fe89 	bl	80011ec <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 80014da:	4603      	mov	r3, r0
 80014dc:	623b      	str	r3, [r7, #32]
 80014de:	f107 0320 	add.w	r3, r7, #32
 80014e2:	4619      	mov	r1, r3
 80014e4:	4628      	mov	r0, r5
 80014e6:	f000 fac7 	bl	8001a78 <_ZNSt5stackIfSt5dequeIfSaIfEEE4pushEOf>
 80014ea:	e0bf      	b.n	800166c <_ZN9Calculate7doCalcuEv+0x1f4>
		}
		else {
			char opt = word[0];
 80014ec:	f107 0308 	add.w	r3, r7, #8
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f006 f8c6 	bl	8007684 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80014f8:	4603      	mov	r3, r0
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			switch (opt) {
 8001500:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001504:	3b2a      	subs	r3, #42	; 0x2a
 8001506:	2b05      	cmp	r3, #5
 8001508:	f200 80b0 	bhi.w	800166c <_ZN9Calculate7doCalcuEv+0x1f4>
 800150c:	a201      	add	r2, pc, #4	; (adr r2, 8001514 <_ZN9Calculate7doCalcuEv+0x9c>)
 800150e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001512:	bf00      	nop
 8001514:	080015cd 	.word	0x080015cd
 8001518:	0800152d 	.word	0x0800152d
 800151c:	0800166d 	.word	0x0800166d
 8001520:	0800157d 	.word	0x0800157d
 8001524:	0800166d 	.word	0x0800166d
 8001528:	0800161d 	.word	0x0800161d
			case '+': {
				if (numStack.size() >= 2) {
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3358      	adds	r3, #88	; 0x58
 8001530:	4618      	mov	r0, r3
 8001532:	f000 fab3 	bl	8001a9c <_ZNKSt5stackIfSt5dequeIfSaIfEEE4sizeEv>
 8001536:	4603      	mov	r3, r0
 8001538:	2b01      	cmp	r3, #1
 800153a:	bf8c      	ite	hi
 800153c:	2301      	movhi	r3, #1
 800153e:	2300      	movls	r3, #0
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d017      	beq.n	8001576 <_ZN9Calculate7doCalcuEv+0xfe>
					float n2 = getNumStackValue();
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff feb9 	bl	80012be <_ZN9Calculate16getNumStackValueEv>
 800154c:	65b8      	str	r0, [r7, #88]	; 0x58
					float n1 = getNumStackValue();
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff feb5 	bl	80012be <_ZN9Calculate16getNumStackValueEv>
 8001554:	6578      	str	r0, [r7, #84]	; 0x54
					numStack.push(n1 + n2);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f103 0558 	add.w	r5, r3, #88	; 0x58
 800155c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800155e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001560:	f7ff fb08 	bl	8000b74 <__addsf3>
 8001564:	4603      	mov	r3, r0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
 8001568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156c:	4619      	mov	r1, r3
 800156e:	4628      	mov	r0, r5
 8001570:	f000 fa82 	bl	8001a78 <_ZNSt5stackIfSt5dequeIfSaIfEEE4pushEOf>
				}
				else {
					return false;
				}
				break;
 8001574:	e07a      	b.n	800166c <_ZN9Calculate7doCalcuEv+0x1f4>
					return false;
 8001576:	2400      	movs	r4, #0
 8001578:	2500      	movs	r5, #0
 800157a:	e082      	b.n	8001682 <_ZN9Calculate7doCalcuEv+0x20a>
			}
			case '-': {
				if (numStack.size() >= 2) {
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3358      	adds	r3, #88	; 0x58
 8001580:	4618      	mov	r0, r3
 8001582:	f000 fa8b 	bl	8001a9c <_ZNKSt5stackIfSt5dequeIfSaIfEEE4sizeEv>
 8001586:	4603      	mov	r3, r0
 8001588:	2b01      	cmp	r3, #1
 800158a:	bf8c      	ite	hi
 800158c:	2301      	movhi	r3, #1
 800158e:	2300      	movls	r3, #0
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d017      	beq.n	80015c6 <_ZN9Calculate7doCalcuEv+0x14e>
					float n2 = getNumStackValue();
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff fe91 	bl	80012be <_ZN9Calculate16getNumStackValueEv>
 800159c:	6638      	str	r0, [r7, #96]	; 0x60
					float n1 = getNumStackValue();
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff fe8d 	bl	80012be <_ZN9Calculate16getNumStackValueEv>
 80015a4:	65f8      	str	r0, [r7, #92]	; 0x5c
					numStack.push(n1 - n2);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f103 0558 	add.w	r5, r3, #88	; 0x58
 80015ac:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80015ae:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80015b0:	f7ff fade 	bl	8000b70 <__aeabi_fsub>
 80015b4:	4603      	mov	r3, r0
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80015b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015bc:	4619      	mov	r1, r3
 80015be:	4628      	mov	r0, r5
 80015c0:	f000 fa5a 	bl	8001a78 <_ZNSt5stackIfSt5dequeIfSaIfEEE4pushEOf>
				}
				else {
					return false;
				}
				break;
 80015c4:	e052      	b.n	800166c <_ZN9Calculate7doCalcuEv+0x1f4>
					return false;
 80015c6:	2400      	movs	r4, #0
 80015c8:	2500      	movs	r5, #0
 80015ca:	e05a      	b.n	8001682 <_ZN9Calculate7doCalcuEv+0x20a>
			}
			case '*': {
				if (numStack.size() >= 2) {
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3358      	adds	r3, #88	; 0x58
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 fa63 	bl	8001a9c <_ZNKSt5stackIfSt5dequeIfSaIfEEE4sizeEv>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b01      	cmp	r3, #1
 80015da:	bf8c      	ite	hi
 80015dc:	2301      	movhi	r3, #1
 80015de:	2300      	movls	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d017      	beq.n	8001616 <_ZN9Calculate7doCalcuEv+0x19e>
					float n2 = getNumStackValue();
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff fe69 	bl	80012be <_ZN9Calculate16getNumStackValueEv>
 80015ec:	6538      	str	r0, [r7, #80]	; 0x50
					float n1 = getNumStackValue();
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fe65 	bl	80012be <_ZN9Calculate16getNumStackValueEv>
 80015f4:	64f8      	str	r0, [r7, #76]	; 0x4c
					numStack.push(n1 * n2);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f103 0558 	add.w	r5, r3, #88	; 0x58
 80015fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80015fe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001600:	f7ff fbc0 	bl	8000d84 <__aeabi_fmul>
 8001604:	4603      	mov	r3, r0
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001608:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800160c:	4619      	mov	r1, r3
 800160e:	4628      	mov	r0, r5
 8001610:	f000 fa32 	bl	8001a78 <_ZNSt5stackIfSt5dequeIfSaIfEEE4pushEOf>
				}
				else {
					return false;
				}
				break;
 8001614:	e02a      	b.n	800166c <_ZN9Calculate7doCalcuEv+0x1f4>
					return false;
 8001616:	2400      	movs	r4, #0
 8001618:	2500      	movs	r5, #0
 800161a:	e032      	b.n	8001682 <_ZN9Calculate7doCalcuEv+0x20a>
			}
			case '/': {
				if (numStack.size() >= 2) {
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3358      	adds	r3, #88	; 0x58
 8001620:	4618      	mov	r0, r3
 8001622:	f000 fa3b 	bl	8001a9c <_ZNKSt5stackIfSt5dequeIfSaIfEEE4sizeEv>
 8001626:	4603      	mov	r3, r0
 8001628:	2b01      	cmp	r3, #1
 800162a:	bf8c      	ite	hi
 800162c:	2301      	movhi	r3, #1
 800162e:	2300      	movls	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d017      	beq.n	8001666 <_ZN9Calculate7doCalcuEv+0x1ee>
					float n2 = getNumStackValue();
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff fe41 	bl	80012be <_ZN9Calculate16getNumStackValueEv>
 800163c:	66b8      	str	r0, [r7, #104]	; 0x68
					float n1 = getNumStackValue();
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff fe3d 	bl	80012be <_ZN9Calculate16getNumStackValueEv>
 8001644:	6678      	str	r0, [r7, #100]	; 0x64
					numStack.push(n1 / n2);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f103 0558 	add.w	r5, r3, #88	; 0x58
 800164c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800164e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001650:	f7ff fc4c 	bl	8000eec <__aeabi_fdiv>
 8001654:	4603      	mov	r3, r0
 8001656:	633b      	str	r3, [r7, #48]	; 0x30
 8001658:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800165c:	4619      	mov	r1, r3
 800165e:	4628      	mov	r0, r5
 8001660:	f000 fa0a 	bl	8001a78 <_ZNSt5stackIfSt5dequeIfSaIfEEE4pushEOf>
				}
				else {
					return false;
				}
				break;
 8001664:	e002      	b.n	800166c <_ZN9Calculate7doCalcuEv+0x1f4>
					return false;
 8001666:	2400      	movs	r4, #0
 8001668:	2500      	movs	r5, #0
 800166a:	e00a      	b.n	8001682 <_ZN9Calculate7doCalcuEv+0x20a>
			}
			}
		}
		startPos = spacePos + 1;
 800166c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800166e:	3301      	adds	r3, #1
 8001670:	677b      	str	r3, [r7, #116]	; 0x74
		spacePos = suffix.find(' ', startPos);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001676:	2120      	movs	r1, #32
 8001678:	4618      	mov	r0, r3
 800167a:	f006 f8e4 	bl	8007846 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 800167e:	6738      	str	r0, [r7, #112]	; 0x70
 8001680:	2501      	movs	r5, #1
 8001682:	f107 0308 	add.w	r3, r7, #8
 8001686:	4618      	mov	r0, r3
 8001688:	f005 ffbc 	bl	8007604 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800168c:	2d01      	cmp	r5, #1
 800168e:	d12e      	bne.n	80016ee <_ZN9Calculate7doCalcuEv+0x276>
	while (spacePos != std::string::npos) {
 8001690:	e703      	b.n	800149a <_ZN9Calculate7doCalcuEv+0x22>
	}
	if (numStack.size() == 1) {
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3358      	adds	r3, #88	; 0x58
 8001696:	4618      	mov	r0, r3
 8001698:	f000 fa00 	bl	8001a9c <_ZNKSt5stackIfSt5dequeIfSaIfEEE4sizeEv>
 800169c:	4603      	mov	r3, r0
 800169e:	2b01      	cmp	r3, #1
 80016a0:	bf0c      	ite	eq
 80016a2:	2301      	moveq	r3, #1
 80016a4:	2300      	movne	r3, #0
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d01f      	beq.n	80016ec <_ZN9Calculate7doCalcuEv+0x274>
		operand = std::to_string(numStack.top());
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f103 0418 	add.w	r4, r3, #24
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3358      	adds	r3, #88	; 0x58
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f99f 	bl	80019fa <_ZNSt5stackIfSt5dequeIfSaIfEEE3topEv>
 80016bc:	4603      	mov	r3, r0
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016c4:	4611      	mov	r1, r2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fda8 	bl	800121c <_ZNSt7__cxx119to_stringEf>
 80016cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016d0:	4619      	mov	r1, r3
 80016d2:	4620      	mov	r0, r4
 80016d4:	f005 ff9c 	bl	8007610 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80016d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016dc:	4618      	mov	r0, r3
 80016de:	f005 ff91 	bl	8007604 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		clrStack();
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff fe01 	bl	80012ea <_ZN9Calculate8clrStackEv>
		return true;
 80016e8:	2401      	movs	r4, #1
 80016ea:	e000      	b.n	80016ee <_ZN9Calculate7doCalcuEv+0x276>
	}
	return false;
 80016ec:	2400      	movs	r4, #0
}
 80016ee:	4623      	mov	r3, r4
 80016f0:	4618      	mov	r0, r3
 80016f2:	3778      	adds	r7, #120	; 0x78
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bdb0      	pop	{r4, r5, r7, pc}

080016f8 <_ZN9Calculate8getInputEc>:

void Calculate::getInput(char opt) {
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	70fb      	strb	r3, [r7, #3]
	//若输入字符是未完成的状态将其写入数字缓存区
	if (std::isdigit(opt) || opt == '.') {
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	3b30      	subs	r3, #48	; 0x30
 8001708:	2b09      	cmp	r3, #9
 800170a:	bf94      	ite	ls
 800170c:	2301      	movls	r3, #1
 800170e:	2300      	movhi	r3, #0
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d102      	bne.n	800171c <_ZN9Calculate8getInputEc+0x24>
 8001716:	78fb      	ldrb	r3, [r7, #3]
 8001718:	2b2e      	cmp	r3, #46	; 0x2e
 800171a:	d108      	bne.n	800172e <_ZN9Calculate8getInputEc+0x36>
		operand += opt;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3318      	adds	r3, #24
 8001720:	78fa      	ldrb	r2, [r7, #3]
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f005 ffcd 	bl	80076c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
 800172a:	bf00      	nop
				optStack.pop();
			}
			optStack.push(opt);
		}
	}
}
 800172c:	e099      	b.n	8001862 <_ZN9Calculate8getInputEc+0x16a>
		addToSuffix(operand);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3318      	adds	r3, #24
 8001732:	4619      	mov	r1, r3
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff fda6 	bl	8001286 <_ZN9Calculate11addToSuffixERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
		operand = "";
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3318      	adds	r3, #24
 800173e:	494b      	ldr	r1, [pc, #300]	; (800186c <_ZN9Calculate8getInputEc+0x174>)
 8001740:	4618      	mov	r0, r3
 8001742:	f006 f850 	bl	80077e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
		if (opt == '=') {
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	2b3d      	cmp	r3, #61	; 0x3d
 800174a:	d11e      	bne.n	800178a <_ZN9Calculate8getInputEc+0x92>
			while (!optStack.empty()) {
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3330      	adds	r3, #48	; 0x30
 8001750:	4618      	mov	r0, r3
 8001752:	f000 f96b 	bl	8001a2c <_ZNKSt5stackIcSt5dequeIcSaIcEEE5emptyEv>
 8001756:	4603      	mov	r3, r0
 8001758:	f083 0301 	eor.w	r3, r3, #1
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00f      	beq.n	8001782 <_ZN9Calculate8getInputEc+0x8a>
				addToSuffix(optStack.top());
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3330      	adds	r3, #48	; 0x30
 8001766:	4618      	mov	r0, r3
 8001768:	f000 f9a5 	bl	8001ab6 <_ZNSt5stackIcSt5dequeIcSaIcEEE3topEv>
 800176c:	4603      	mov	r3, r0
 800176e:	4619      	mov	r1, r3
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff fd6f 	bl	8001254 <_ZN9Calculate11addToSuffixERc>
				optStack.pop();
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3330      	adds	r3, #48	; 0x30
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f963 	bl	8001a46 <_ZNSt5stackIcSt5dequeIcSaIcEEE3popEv>
			while (!optStack.empty()) {
 8001780:	e7e4      	b.n	800174c <_ZN9Calculate8getInputEc+0x54>
			doCalcu();
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff fe78 	bl	8001478 <_ZN9Calculate7doCalcuEv>
}
 8001788:	e06b      	b.n	8001862 <_ZN9Calculate8getInputEc+0x16a>
		else if (opt == '(') {
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	2b28      	cmp	r3, #40	; 0x28
 800178e:	d107      	bne.n	80017a0 <_ZN9Calculate8getInputEc+0xa8>
			optStack.push(opt);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3330      	adds	r3, #48	; 0x30
 8001794:	1cfa      	adds	r2, r7, #3
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f000 f999 	bl	8001ad0 <_ZNSt5stackIcSt5dequeIcSaIcEEE4pushERKc>
}
 800179e:	e060      	b.n	8001862 <_ZN9Calculate8getInputEc+0x16a>
		else if (opt == ')') {
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	2b29      	cmp	r3, #41	; 0x29
 80017a4:	d123      	bne.n	80017ee <_ZN9Calculate8getInputEc+0xf6>
			while (optStack.top() != '(') {
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3330      	adds	r3, #48	; 0x30
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f983 	bl	8001ab6 <_ZNSt5stackIcSt5dequeIcSaIcEEE3topEv>
 80017b0:	4603      	mov	r3, r0
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b28      	cmp	r3, #40	; 0x28
 80017b6:	bf14      	ite	ne
 80017b8:	2301      	movne	r3, #1
 80017ba:	2300      	moveq	r3, #0
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00f      	beq.n	80017e2 <_ZN9Calculate8getInputEc+0xea>
				addToSuffix(optStack.top());
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3330      	adds	r3, #48	; 0x30
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 f975 	bl	8001ab6 <_ZNSt5stackIcSt5dequeIcSaIcEEE3topEv>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4619      	mov	r1, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff fd3f 	bl	8001254 <_ZN9Calculate11addToSuffixERc>
				optStack.pop();
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3330      	adds	r3, #48	; 0x30
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f933 	bl	8001a46 <_ZNSt5stackIcSt5dequeIcSaIcEEE3popEv>
			while (optStack.top() != '(') {
 80017e0:	e7e1      	b.n	80017a6 <_ZN9Calculate8getInputEc+0xae>
			optStack.pop();
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3330      	adds	r3, #48	; 0x30
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 f92d 	bl	8001a46 <_ZNSt5stackIcSt5dequeIcSaIcEEE3popEv>
}
 80017ec:	e039      	b.n	8001862 <_ZN9Calculate8getInputEc+0x16a>
			while (!optStack.empty() && getLevel(opt) <= getLevel(optStack.top())) {
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3330      	adds	r3, #48	; 0x30
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f91a 	bl	8001a2c <_ZNKSt5stackIcSt5dequeIcSaIcEEE5emptyEv>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f083 0301 	eor.w	r3, r3, #1
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	d014      	beq.n	800182e <_ZN9Calculate8getInputEc+0x136>
 8001804:	1cfb      	adds	r3, r7, #3
 8001806:	4619      	mov	r1, r3
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff fe07 	bl	800141c <_ZNK9Calculate8getLevelERc>
 800180e:	4604      	mov	r4, r0
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3330      	adds	r3, #48	; 0x30
 8001814:	4618      	mov	r0, r3
 8001816:	f000 f94e 	bl	8001ab6 <_ZNSt5stackIcSt5dequeIcSaIcEEE3topEv>
 800181a:	4603      	mov	r3, r0
 800181c:	4619      	mov	r1, r3
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fdfc 	bl	800141c <_ZNK9Calculate8getLevelERc>
 8001824:	4603      	mov	r3, r0
 8001826:	429c      	cmp	r4, r3
 8001828:	dc01      	bgt.n	800182e <_ZN9Calculate8getInputEc+0x136>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <_ZN9Calculate8getInputEc+0x138>
 800182e:	2300      	movs	r3, #0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00f      	beq.n	8001854 <_ZN9Calculate8getInputEc+0x15c>
				addToSuffix(optStack.top());
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3330      	adds	r3, #48	; 0x30
 8001838:	4618      	mov	r0, r3
 800183a:	f000 f93c 	bl	8001ab6 <_ZNSt5stackIcSt5dequeIcSaIcEEE3topEv>
 800183e:	4603      	mov	r3, r0
 8001840:	4619      	mov	r1, r3
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff fd06 	bl	8001254 <_ZN9Calculate11addToSuffixERc>
				optStack.pop();
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3330      	adds	r3, #48	; 0x30
 800184c:	4618      	mov	r0, r3
 800184e:	f000 f8fa 	bl	8001a46 <_ZNSt5stackIcSt5dequeIcSaIcEEE3popEv>
			while (!optStack.empty() && getLevel(opt) <= getLevel(optStack.top())) {
 8001852:	e7cc      	b.n	80017ee <_ZN9Calculate8getInputEc+0xf6>
			optStack.push(opt);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3330      	adds	r3, #48	; 0x30
 8001858:	1cfa      	adds	r2, r7, #3
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f000 f937 	bl	8001ad0 <_ZNSt5stackIcSt5dequeIcSaIcEEE4pushERKc>
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	bf00      	nop
 800186c:	0800c364 	.word	0x0800c364

08001870 <_ZNK9Calculate10getOperandB5cxx11Ev>:

std::string Calculate::getOperand() const {
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
	std::string o = operand;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	3318      	adds	r3, #24
 800187e:	4619      	mov	r1, r3
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f005 fff7 	bl	8007874 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	return o;
 8001886:	bf00      	nop
}
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	f006 f866 	bl	8007968 <__errno>
 800189c:	4603      	mov	r3, r0
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	f006 f860 	bl	8007968 <__errno>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	f006 f852 	bl	8007968 <__errno>
 80018c4:	4603      	mov	r3, r0
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	bf0c      	ite	eq
 80018cc:	2301      	moveq	r3, #1
 80018ce:	2300      	movne	r3, #0
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d005      	beq.n	80018e2 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 80018d6:	f006 f847 	bl	8007968 <__errno>
 80018da:	4602      	mov	r2, r0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEfSt17integral_constantIbLb0EE>:
	int _M_errno;
      } const __save_errno;

      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	7039      	strb	r1, [r7, #0]
 80018f6:	2300      	movs	r3, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8001902:	b590      	push	{r4, r7, lr}
 8001904:	b08b      	sub	sp, #44	; 0x2c
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ffbb 	bl	8001890 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
	  }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 800191a:	f107 0218 	add.w	r2, r7, #24
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4611      	mov	r1, r2
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	4798      	blx	r3
 8001926:	6278      	str	r0, [r7, #36]	; 0x24

      if (__endptr == __str)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	429a      	cmp	r2, r3
 800192e:	d102      	bne.n	8001936 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 8001930:	68b8      	ldr	r0, [r7, #8]
 8001932:	f005 fce4 	bl	80072fe <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8001936:	f006 f817 	bl	8007968 <__errno>
 800193a:	4603      	mov	r3, r0
 800193c:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 800193e:	2b22      	cmp	r3, #34	; 0x22
 8001940:	d006      	beq.n	8001950 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 8001942:	4621      	mov	r1, r4
 8001944:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001946:	f7ff ffd1 	bl	80018ec <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEfSt17integral_constantIbLb0EE>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8001954:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8001956:	2b00      	cmp	r3, #0
 8001958:	d002      	beq.n	8001960 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 800195a:	68b8      	ldr	r0, [r7, #8]
 800195c:	f005 fcd5 	bl	800730a <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	623b      	str	r3, [r7, #32]

      if (__idx)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d005      	beq.n	8001976 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x74>
	*__idx = __endptr - __str;
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	461a      	mov	r2, r3
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	601a      	str	r2, [r3, #0]

      return __ret;
 8001976:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff9b 	bl	80018b8 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8001982:	4623      	mov	r3, r4
    }
 8001984:	4618      	mov	r0, r3
 8001986:	372c      	adds	r7, #44	; 0x2c
 8001988:	46bd      	mov	sp, r7
 800198a:	bd90      	pop	{r4, r7, pc}

0800198c <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 800198c:	b408      	push	{r3}
 800198e:	b590      	push	{r4, r7, lr}
 8001990:	b088      	sub	sp, #32
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3307      	adds	r3, #7
 800199e:	08db      	lsrs	r3, r3, #3
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	ebad 0d03 	sub.w	sp, sp, r3
 80019a6:	466b      	mov	r3, sp
 80019a8:	3307      	adds	r3, #7
 80019aa:	08db      	lsrs	r3, r3, #3
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 80019b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019b4:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 80019b6:	68bc      	ldr	r4, [r7, #8]
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	69f8      	ldr	r0, [r7, #28]
 80019c0:	47a0      	blx	r4
 80019c2:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	18d4      	adds	r4, r2, r3
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	4618      	mov	r0, r3
 80019d0:	f005 fc8d 	bl	80072ee <_ZNSaIcEC1Ev>
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4622      	mov	r2, r4
 80019da:	69f9      	ldr	r1, [r7, #28]
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f000 f885 	bl	8001aec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4618      	mov	r0, r3
 80019e8:	f005 fc82 	bl	80072f0 <_ZNSaIcED1Ev>
    }
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80019f6:	b001      	add	sp, #4
 80019f8:	4770      	bx	lr

080019fa <_ZNSt5stackIfSt5dequeIfSaIfEEE3topEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %stack.
       */
      reference
      top()
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return c.back();
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 f88c 	bl	8001b22 <_ZNSt5dequeIfSaIfEE4backEv>
 8001a0a:	4603      	mov	r3, r0
      }
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <_ZNSt5stackIfSt5dequeIfSaIfEEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_back();
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 f898 	bl	8001b54 <_ZNSt5dequeIfSaIfEE8pop_backEv>
      }
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <_ZNKSt5stackIcSt5dequeIcSaIcEEE5emptyEv>:
      empty() const
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f8ae 	bl	8001b98 <_ZNKSt5dequeIcSaIcEE5emptyEv>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <_ZNSt5stackIcSt5dequeIcSaIcEEE3popEv>:
      pop()
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
	c.pop_back();
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 f8b3 	bl	8001bbc <_ZNSt5dequeIcSaIcEE8pop_backEv>
      }
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <_ZNKSt5stackIfSt5dequeIfSaIfEEE5emptyEv>:
      empty() const
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 f8c9 	bl	8001c00 <_ZNKSt5dequeIfSaIfEE5emptyEv>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <_ZNSt5stackIfSt5dequeIfSaIfEEE4pushEOf>:
      push(value_type&& __x)
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 8001a82:	687c      	ldr	r4, [r7, #4]
 8001a84:	6838      	ldr	r0, [r7, #0]
 8001a86:	f000 f8cd 	bl	8001c24 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4620      	mov	r0, r4
 8001a90:	f000 f8d2 	bl	8001c38 <_ZNSt5dequeIfSaIfEE9push_backEOf>
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd90      	pop	{r4, r7, pc}

08001a9c <_ZNKSt5stackIfSt5dequeIfSaIfEEE4sizeEv>:
      size() const
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
      { return c.size(); }
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f8d7 	bl	8001c5a <_ZNKSt5dequeIfSaIfEE4sizeEv>
 8001aac:	4603      	mov	r3, r0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <_ZNSt5stackIcSt5dequeIcSaIcEEE3topEv>:
      top()
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
	return c.back();
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 f8dc 	bl	8001c7e <_ZNSt5dequeIcSaIcEE4backEv>
 8001ac6:	4603      	mov	r3, r0
      }
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <_ZNSt5stackIcSt5dequeIcSaIcEEE4pushERKc>:
      push(const value_type& __x)
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6839      	ldr	r1, [r7, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f8e6 	bl	8001cb0 <_ZNSt5dequeIcSaIcEE9push_backERKc>
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 8001aec:	b590      	push	{r4, r7, lr}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8001afa:	68fc      	ldr	r4, [r7, #12]
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f005 fcc6 	bl	800748e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8001b02:	4603      	mov	r3, r0
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	4619      	mov	r1, r3
 8001b08:	4620      	mov	r0, r4
 8001b0a:	f005 feb1 	bl	8007870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 f8ed 	bl	8001cf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd90      	pop	{r4, r7, pc}

08001b22 <_ZNSt5dequeIfSaIfEE4backEv>:
      /**
       *  Returns a read/write reference to the data at the last element of the
       *  %deque.
       */
      reference
      back() _GLIBCXX_NOEXCEPT
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	iterator __tmp = end();
 8001b2a:	f107 0308 	add.w	r3, r7, #8
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 f8ed 	bl	8001d10 <_ZNSt5dequeIfSaIfEE3endEv>
	--__tmp;
 8001b36:	f107 0308 	add.w	r3, r7, #8
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f912 	bl	8001d64 <_ZNSt15_Deque_iteratorIfRfPfEmmEv>
	return *__tmp;
 8001b40:	f107 0308 	add.w	r3, r7, #8
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 f92c 	bl	8001da2 <_ZNKSt15_Deque_iteratorIfRfPfEdeEv>
 8001b4a:	4603      	mov	r3, r0
      }
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <_ZNSt5dequeIfSaIfEE8pop_backEv>:
       *
       *  Note that no data is returned, and if the last element's data is
       *  needed, it should be retrieved before pop_back() is called.
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_finish._M_cur
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_first)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
	if (this->_M_impl._M_finish._M_cur
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d010      	beq.n	8001b8a <_ZNSt5dequeIfSaIfEE8pop_backEv+0x36>
	  {
	    --this->_M_impl._M_finish._M_cur;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	1f1a      	subs	r2, r3, #4
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	619a      	str	r2, [r3, #24]
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 f91f 	bl	8001db8 <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	4619      	mov	r1, r3
 8001b82:	4610      	mov	r0, r2
 8001b84:	f000 f922 	bl	8001dcc <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
				   this->_M_impl._M_finish._M_cur);
	  }
	else
	  _M_pop_back_aux();
      }
 8001b88:	e002      	b.n	8001b90 <_ZNSt5dequeIfSaIfEE8pop_backEv+0x3c>
	  _M_pop_back_aux();
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f92b 	bl	8001de6 <_ZNSt5dequeIfSaIfEE15_M_pop_back_auxEv>
      }
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <_ZNKSt5dequeIcSaIcEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f103 0218 	add.w	r2, r3, #24
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3308      	adds	r3, #8
 8001baa:	4619      	mov	r1, r3
 8001bac:	4610      	mov	r0, r2
 8001bae:	f000 f943 	bl	8001e38 <_ZSteqRKSt15_Deque_iteratorIcRcPcES4_>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <_ZNSt5dequeIcSaIcEE8pop_backEv>:
      pop_back() _GLIBCXX_NOEXCEPT
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_finish._M_cur
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_first)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69db      	ldr	r3, [r3, #28]
	if (this->_M_impl._M_finish._M_cur
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d010      	beq.n	8001bf2 <_ZNSt5dequeIcSaIcEE8pop_backEv+0x36>
	    --this->_M_impl._M_finish._M_cur;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	1e5a      	subs	r2, r3, #1
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	619a      	str	r2, [r3, #24]
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 f93e 	bl	8001e5e <_ZNSt11_Deque_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8001be2:	4602      	mov	r2, r0
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4619      	mov	r1, r3
 8001bea:	4610      	mov	r0, r2
 8001bec:	f000 f941 	bl	8001e72 <_ZNSt16allocator_traitsISaIcEE7destroyIcEEvRS0_PT_>
      }
 8001bf0:	e002      	b.n	8001bf8 <_ZNSt5dequeIcSaIcEE8pop_backEv+0x3c>
	  _M_pop_back_aux();
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f94a 	bl	8001e8c <_ZNSt5dequeIcSaIcEE15_M_pop_back_auxEv>
      }
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <_ZNKSt5dequeIfSaIfEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f103 0218 	add.w	r2, r3, #24
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3308      	adds	r3, #8
 8001c12:	4619      	mov	r1, r3
 8001c14:	4610      	mov	r0, r2
 8001c16:	f000 f962 	bl	8001ede <_ZSteqRKSt15_Deque_iteratorIfRfPfES4_>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <_ZNSt5dequeIfSaIfEE9push_backEOf>:
      push_back(value_type&& __x)
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8001c42:	6838      	ldr	r0, [r7, #0]
 8001c44:	f7ff ffee 	bl	8001c24 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f959 	bl	8001f04 <_ZNSt5dequeIfSaIfEE12emplace_backIJfEEEvDpOT_>
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <_ZNKSt5dequeIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f103 0218 	add.w	r2, r3, #24
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3308      	adds	r3, #8
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4610      	mov	r0, r2
 8001c70:	f000 f972 	bl	8001f58 <_ZStmiRKSt15_Deque_iteratorIfRfPfES4_>
 8001c74:	4603      	mov	r3, r0
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <_ZNSt5dequeIcSaIcEE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b086      	sub	sp, #24
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
	iterator __tmp = end();
 8001c86:	f107 0308 	add.w	r3, r7, #8
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 f9a5 	bl	8001fdc <_ZNSt5dequeIcSaIcEE3endEv>
	--__tmp;
 8001c92:	f107 0308 	add.w	r3, r7, #8
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f9ca 	bl	8002030 <_ZNSt15_Deque_iteratorIcRcPcEmmEv>
	return *__tmp;
 8001c9c:	f107 0308 	add.w	r3, r7, #8
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 f9e4 	bl	800206e <_ZNKSt15_Deque_iteratorIcRcPcEdeEv>
 8001ca6:	4603      	mov	r3, r0
      }
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_ZNSt5dequeIcSaIcEE9push_backERKc>:
      push_back(const value_type& __x)
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	3b01      	subs	r3, #1
	if (this->_M_impl._M_finish._M_cur
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d00c      	beq.n	8001ce2 <_ZNSt5dequeIcSaIcEE9push_backERKc+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f000 f9d7 	bl	8002084 <_ZNSt16allocator_traitsISaIcEE9constructIcJRKcEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	619a      	str	r2, [r3, #24]
      }
 8001ce0:	e003      	b.n	8001cea <_ZNSt5dequeIcSaIcEE9push_backERKc+0x3a>
	  _M_push_back_aux(__x);
 8001ce2:	6839      	ldr	r1, [r7, #0]
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f9e1 	bl	80020ac <_ZNSt5dequeIcSaIcEE16_M_push_back_auxIJRKcEEEvDpOT_>
      }
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b084      	sub	sp, #16
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	68b9      	ldr	r1, [r7, #8]
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 fa16 	bl	8002134 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8001d08:	bf00      	nop
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <_ZNSt5dequeIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	3318      	adds	r3, #24
 8001d1e:	4619      	mov	r1, r3
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f804 	bl	8001d2e <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	60da      	str	r2, [r3, #12]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <_ZNSt15_Deque_iteratorIfRfPfEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	if (_M_cur == _M_first)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d10a      	bne.n	8001d8e <_ZNSt15_Deque_iteratorIfRfPfEmmEv+0x2a>
	    _M_set_node(_M_node - 1);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	3b04      	subs	r3, #4
 8001d7e:	4619      	mov	r1, r3
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f9e8 	bl	8002156 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
	    _M_cur = _M_last;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	601a      	str	r2, [r3, #0]
	--_M_cur;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	1f1a      	subs	r2, r3, #4
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	601a      	str	r2, [r3, #0]
	return *this;
 8001d98:	687b      	ldr	r3, [r7, #4]
      }
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <_ZNKSt15_Deque_iteratorIfRfPfEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8001dd6:	6839      	ldr	r1, [r7, #0]
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f9d5 	bl	8002188 <_ZN9__gnu_cxx13new_allocatorIfE7destroyIfEEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <_ZNSt5dequeIfSaIfEE15_M_pop_back_auxEv>:
	  }
      }

  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_first.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
    _M_pop_back_aux()
    {
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	4619      	mov	r1, r3
 8001df6:	4610      	mov	r0, r2
 8001df8:	f000 f9d0 	bl	800219c <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f103 0218 	add.w	r2, r3, #24
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	3b04      	subs	r3, #4
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	f000 f9a3 	bl	8002156 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	1f1a      	subs	r2, r3, #4
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	619a      	str	r2, [r3, #24]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ffcb 	bl	8001db8 <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8001e22:	4602      	mov	r2, r0
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	f7ff ffce 	bl	8001dcc <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
			     this->_M_impl._M_finish._M_cur);
    }
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <_ZSteqRKSt15_Deque_iteratorIcRcPcES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	bf0c      	ite	eq
 8001e4e:	2301      	moveq	r3, #1
 8001e50:	2300      	movne	r3, #0
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr

08001e5e <_ZNSt11_Deque_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <_ZNSt16allocator_traitsISaIcEE7destroyIcEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8001e7c:	6839      	ldr	r1, [r7, #0]
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f99f 	bl	80021c2 <_ZN9__gnu_cxx13new_allocatorIcE7destroyIcEEvPT_>
	}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_ZNSt5dequeIcSaIcEE15_M_pop_back_auxEv>:
    void deque<_Tp, _Alloc>::
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	f000 f99a 	bl	80021d6 <_ZNSt11_Deque_baseIcSaIcEE18_M_deallocate_nodeEPc>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f103 0218 	add.w	r2, r3, #24
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	3b04      	subs	r3, #4
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	f000 f9a3 	bl	80021fc <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	1e5a      	subs	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	619a      	str	r2, [r3, #24]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff ffcb 	bl	8001e5e <_ZNSt11_Deque_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	f7ff ffce 	bl	8001e72 <_ZNSt16allocator_traitsISaIcEE7destroyIcEEvRS0_PT_>
    }
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <_ZSteqRKSt15_Deque_iteratorIfRfPfES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	bf0c      	ite	eq
 8001ef4:	2301      	moveq	r3, #1
 8001ef6:	2300      	movne	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <_ZNSt5dequeIfSaIfEE12emplace_backIJfEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8001f04:	b5b0      	push	{r4, r5, r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d011      	beq.n	8001f40 <_ZNSt5dequeIfSaIfEE12emplace_backIJfEEEvDpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl,
 8001f1c:	687c      	ldr	r4, [r7, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699d      	ldr	r5, [r3, #24]
 8001f22:	6838      	ldr	r0, [r7, #0]
 8001f24:	f000 f982 	bl	800222c <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4629      	mov	r1, r5
 8001f2e:	4620      	mov	r0, r4
 8001f30:	f000 f986 	bl	8002240 <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	1d1a      	adds	r2, r3, #4
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	619a      	str	r2, [r3, #24]
      }
 8001f3e:	e007      	b.n	8001f50 <_ZNSt5dequeIfSaIfEE12emplace_backIJfEEEvDpOT_+0x4c>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8001f40:	6838      	ldr	r0, [r7, #0]
 8001f42:	f000 f973 	bl	800222c <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4619      	mov	r1, r3
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f98c 	bl	8002268 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJfEEEvDpOT_>
      }
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bdb0      	pop	{r4, r5, r7, pc}

08001f58 <_ZStmiRKSt15_Deque_iteratorIfRfPfES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8001f62:	f000 f9c5 	bl	80022f0 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 8001f66:	4603      	mov	r3, r0
 8001f68:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	109b      	asrs	r3, r3, #2
 8001f76:	3b01      	subs	r3, #1
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6811      	ldr	r1, [r2, #0]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6852      	ldr	r2, [r2, #4]
 8001f84:	1a8a      	subs	r2, r1, r2
 8001f86:	1092      	asrs	r2, r2, #2
 8001f88:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	6891      	ldr	r1, [r2, #8]
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	1a8a      	subs	r2, r1, r2
 8001f94:	1092      	asrs	r2, r2, #2
 8001f96:	4413      	add	r3, r2
      }
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	68b9      	ldr	r1, [r7, #8]
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 f9a5 	bl	8002300 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001fc8:	2200      	movs	r2, #0
 8001fca:	6839      	ldr	r1, [r7, #0]
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f9a5 	bl	800231c <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <_ZNSt5dequeIcSaIcEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	3318      	adds	r3, #24
 8001fea:	4619      	mov	r1, r3
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f804 	bl	8001ffa <_ZNSt15_Deque_iteratorIcRcPcEC1ERKS2_>
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <_ZNSt15_Deque_iteratorIcRcPcEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	60da      	str	r2, [r3, #12]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4618      	mov	r0, r3
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <_ZNSt15_Deque_iteratorIcRcPcEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
	if (_M_cur == _M_first)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	429a      	cmp	r2, r3
 8002042:	d10a      	bne.n	800205a <_ZNSt15_Deque_iteratorIcRcPcEmmEv+0x2a>
	    _M_set_node(_M_node - 1);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	3b04      	subs	r3, #4
 800204a:	4619      	mov	r1, r3
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f8d5 	bl	80021fc <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>
	    _M_cur = _M_last;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	601a      	str	r2, [r3, #0]
	--_M_cur;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	1e5a      	subs	r2, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	601a      	str	r2, [r3, #0]
	return *this;
 8002064:	687b      	ldr	r3, [r7, #4]
      }
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <_ZNKSt15_Deque_iteratorIcRcPcEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr

08002084 <_ZNSt16allocator_traitsISaIcEE9constructIcJRKcEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f95f 	bl	8002354 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
 8002096:	4603      	mov	r3, r0
 8002098:	461a      	mov	r2, r3
 800209a:	68b9      	ldr	r1, [r7, #8]
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 f963 	bl	8002368 <_ZN9__gnu_cxx13new_allocatorIcE9constructIcJRKcEEEvPT_DpOT0_>
	}
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <_ZNSt5dequeIcSaIcEE16_M_push_back_auxIJRKcEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 80020ac:	b5b0      	push	{r4, r5, r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f96d 	bl	8002396 <_ZNKSt5dequeIcSaIcEE4sizeEv>
 80020bc:	4604      	mov	r4, r0
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f97b 	bl	80023ba <_ZNKSt5dequeIcSaIcEE8max_sizeEv>
 80020c4:	4603      	mov	r3, r0
 80020c6:	429c      	cmp	r4, r3
 80020c8:	bf0c      	ite	eq
 80020ca:	2301      	moveq	r3, #1
 80020cc:	2300      	movne	r3, #0
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <_ZNSt5dequeIcSaIcEE16_M_push_back_auxIJRKcEEEvDpOT_+0x2e>
	  __throw_length_error(
 80020d4:	4816      	ldr	r0, [pc, #88]	; (8002130 <_ZNSt5dequeIcSaIcEE16_M_push_back_auxIJRKcEEEvDpOT_+0x84>)
 80020d6:	f005 f915 	bl	8007304 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 80020da:	2101      	movs	r1, #1
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f97d 	bl	80023dc <_ZNSt5dequeIcSaIcEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	1d1c      	adds	r4, r3, #4
 80020ea:	4610      	mov	r0, r2
 80020ec:	f000 f991 	bl	8002412 <_ZNSt11_Deque_baseIcSaIcEE16_M_allocate_nodeEv>
 80020f0:	4603      	mov	r3, r0
 80020f2:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 80020f4:	687c      	ldr	r4, [r7, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699d      	ldr	r5, [r3, #24]
 80020fa:	6838      	ldr	r0, [r7, #0]
 80020fc:	f000 f92a 	bl	8002354 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
 8002100:	4603      	mov	r3, r0
 8002102:	461a      	mov	r2, r3
 8002104:	4629      	mov	r1, r5
 8002106:	4620      	mov	r0, r4
 8002108:	f7ff ffbc 	bl	8002084 <_ZNSt16allocator_traitsISaIcEE9constructIcJRKcEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f103 0218 	add.w	r2, r3, #24
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	3304      	adds	r3, #4
 8002118:	4619      	mov	r1, r3
 800211a:	4610      	mov	r0, r2
 800211c:	f000 f86e 	bl	80021fc <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69da      	ldr	r2, [r3, #28]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	619a      	str	r2, [r3, #24]
      }
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bdb0      	pop	{r4, r5, r7, pc}
 8002130:	0800c368 	.word	0x0800c368

08002134 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8002134:	b590      	push	{r4, r7, lr}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8002142:	4623      	mov	r3, r4
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	68b9      	ldr	r1, [r7, #8]
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 f975 	bl	8002438 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 800214e:	bf00      	nop
 8002150:	371c      	adds	r7, #28
 8002152:	46bd      	mov	sp, r7
 8002154:	bd90      	pop	{r4, r7, pc}

08002156 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8002156:	b590      	push	{r4, r7, lr}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685c      	ldr	r4, [r3, #4]
 8002172:	f000 f8bd 	bl	80022f0 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 8002176:	4603      	mov	r3, r0
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	18e2      	adds	r2, r4, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	609a      	str	r2, [r3, #8]
      }
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	bd90      	pop	{r4, r7, pc}

08002188 <_ZN9__gnu_cxx13new_allocatorIfE7destroyIfEEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80021a6:	687c      	ldr	r4, [r7, #4]
 80021a8:	2004      	movs	r0, #4
 80021aa:	f7ff f80a 	bl	80011c2 <_ZSt16__deque_buf_sizej>
 80021ae:	4603      	mov	r3, r0
 80021b0:	461a      	mov	r2, r3
 80021b2:	6839      	ldr	r1, [r7, #0]
 80021b4:	4620      	mov	r0, r4
 80021b6:	f000 f987 	bl	80024c8 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd90      	pop	{r4, r7, pc}

080021c2 <_ZN9__gnu_cxx13new_allocatorIcE7destroyIcEEvPT_>:
	destroy(_Up* __p)
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr

080021d6 <_ZNSt11_Deque_baseIcSaIcEE18_M_deallocate_nodeEPc>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80021d6:	b590      	push	{r4, r7, lr}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80021e0:	687c      	ldr	r4, [r7, #4]
 80021e2:	2001      	movs	r0, #1
 80021e4:	f7fe ffed 	bl	80011c2 <_ZSt16__deque_buf_sizej>
 80021e8:	4603      	mov	r3, r0
 80021ea:	461a      	mov	r2, r3
 80021ec:	6839      	ldr	r1, [r7, #0]
 80021ee:	4620      	mov	r0, r4
 80021f0:	f7ff fed6 	bl	8001fa0 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>
      }
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd90      	pop	{r4, r7, pc}

080021fc <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685c      	ldr	r4, [r3, #4]
 8002218:	f000 f965 	bl	80024e6 <_ZNSt15_Deque_iteratorIcRcPcE14_S_buffer_sizeEv>
 800221c:	4603      	mov	r3, r0
 800221e:	18e2      	adds	r2, r4, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	609a      	str	r2, [r3, #8]
      }
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	bd90      	pop	{r4, r7, pc}

0800222c <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ffed 	bl	800222c <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8002252:	4603      	mov	r3, r0
 8002254:	461a      	mov	r2, r3
 8002256:	68b9      	ldr	r1, [r7, #8]
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 f94c 	bl	80024f6 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJfEEEvPT_DpOT0_>
	}
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJfEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8002268:	b5b0      	push	{r4, r5, r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff fcf1 	bl	8001c5a <_ZNKSt5dequeIfSaIfEE4sizeEv>
 8002278:	4604      	mov	r4, r0
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f951 	bl	8002522 <_ZNKSt5dequeIfSaIfEE8max_sizeEv>
 8002280:	4603      	mov	r3, r0
 8002282:	429c      	cmp	r4, r3
 8002284:	bf0c      	ite	eq
 8002286:	2301      	moveq	r3, #1
 8002288:	2300      	movne	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d002      	beq.n	8002296 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJfEEEvDpOT_+0x2e>
	  __throw_length_error(
 8002290:	4816      	ldr	r0, [pc, #88]	; (80022ec <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJfEEEvDpOT_+0x84>)
 8002292:	f005 f837 	bl	8007304 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8002296:	2101      	movs	r1, #1
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f953 	bl	8002544 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	1d1c      	adds	r4, r3, #4
 80022a6:	4610      	mov	r0, r2
 80022a8:	f000 f967 	bl	800257a <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 80022ac:	4603      	mov	r3, r0
 80022ae:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 80022b0:	687c      	ldr	r4, [r7, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699d      	ldr	r5, [r3, #24]
 80022b6:	6838      	ldr	r0, [r7, #0]
 80022b8:	f7ff ffb8 	bl	800222c <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 80022bc:	4603      	mov	r3, r0
 80022be:	461a      	mov	r2, r3
 80022c0:	4629      	mov	r1, r5
 80022c2:	4620      	mov	r0, r4
 80022c4:	f7ff ffbc 	bl	8002240 <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f103 0218 	add.w	r2, r3, #24
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	3304      	adds	r3, #4
 80022d4:	4619      	mov	r1, r3
 80022d6:	4610      	mov	r0, r2
 80022d8:	f7ff ff3d 	bl	8002156 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69da      	ldr	r2, [r3, #28]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	619a      	str	r2, [r3, #24]
      }
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bdb0      	pop	{r4, r5, r7, pc}
 80022ec:	0800c368 	.word	0x0800c368

080022f0 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80022f4:	2004      	movs	r0, #4
 80022f6:	f7fe ff64 	bl	80011c2 <_ZSt16__deque_buf_sizej>
 80022fa:	4603      	mov	r3, r0
 80022fc:	4618      	mov	r0, r3
 80022fe:	bd80      	pop	{r7, pc}

08002300 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>:
      deallocate(_Tp* __p, size_type __t)
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	68b8      	ldr	r0, [r7, #8]
 8002310:	f004 ffda 	bl	80072c8 <_ZdlPvj>
      }
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 f938 	bl	800259e <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>
 800232e:	4602      	mov	r2, r0
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	4293      	cmp	r3, r2
 8002334:	bf8c      	ite	hi
 8002336:	2301      	movhi	r3, #1
 8002338:	2300      	movls	r3, #0
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002340:	f004 ffd7 	bl	80072f2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002344:	68b8      	ldr	r0, [r7, #8]
 8002346:	f004 ffc1 	bl	80072cc <_Znwj>
 800234a:	4603      	mov	r3, r0
      }
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <_ZN9__gnu_cxx13new_allocatorIcE9constructIcJRKcEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ffed 	bl	8002354 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
 800237a:	4603      	mov	r3, r0
 800237c:	781c      	ldrb	r4, [r3, #0]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	4619      	mov	r1, r3
 8002382:	2001      	movs	r0, #1
 8002384:	f7fe ff12 	bl	80011ac <_ZnwjPv>
 8002388:	4603      	mov	r3, r0
 800238a:	4622      	mov	r2, r4
 800238c:	701a      	strb	r2, [r3, #0]
 800238e:	bf00      	nop
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bd90      	pop	{r4, r7, pc}

08002396 <_ZNKSt5dequeIcSaIcEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f103 0218 	add.w	r2, r3, #24
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3308      	adds	r3, #8
 80023a8:	4619      	mov	r1, r3
 80023aa:	4610      	mov	r0, r2
 80023ac:	f000 f902 	bl	80025b4 <_ZStmiRKSt15_Deque_iteratorIcRcPcES4_>
 80023b0:	4603      	mov	r3, r0
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <_ZNKSt5dequeIcSaIcEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 f931 	bl	800262c <_ZNKSt11_Deque_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 80023ca:	4603      	mov	r3, r0
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 f913 	bl	80025f8 <_ZNSt5dequeIcSaIcEE11_S_max_sizeERKS0_>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_ZNSt5dequeIcSaIcEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	6809      	ldr	r1, [r1, #0]
 80023f6:	1a41      	subs	r1, r0, r1
 80023f8:	1089      	asrs	r1, r1, #2
 80023fa:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d904      	bls.n	800240a <_ZNSt5dequeIcSaIcEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8002400:	2200      	movs	r2, #0
 8002402:	6839      	ldr	r1, [r7, #0]
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f91b 	bl	8002640 <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb>
      }
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <_ZNSt11_Deque_baseIcSaIcEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8002412:	b590      	push	{r4, r7, lr}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 800241a:	687c      	ldr	r4, [r7, #4]
 800241c:	2001      	movs	r0, #1
 800241e:	f7fe fed0 	bl	80011c2 <_ZSt16__deque_buf_sizej>
 8002422:	4603      	mov	r3, r0
 8002424:	4619      	mov	r1, r3
 8002426:	4620      	mov	r0, r4
 8002428:	f7ff fdc9 	bl	8001fbe <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>
 800242c:	4603      	mov	r3, r0
      }
 800242e:	4618      	mov	r0, r3
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bd90      	pop	{r4, r7, pc}
	...

08002438 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
 8002444:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8002446:	68b8      	ldr	r0, [r7, #8]
 8002448:	f000 f994 	bl	8002774 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	429a      	cmp	r2, r3
 8002458:	d001      	beq.n	800245e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 800245e:	2300      	movs	r3, #0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d002      	beq.n	800246a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8002464:	4817      	ldr	r0, [pc, #92]	; (80024c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8002466:	f004 ff47 	bl	80072f8 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	68b8      	ldr	r0, [r7, #8]
 800246e:	f000 f990 	bl	8002792 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8002472:	4603      	mov	r3, r0
 8002474:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2b0f      	cmp	r3, #15
 800247a:	d910      	bls.n	800249e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 800247c:	f107 0314 	add.w	r3, r7, #20
 8002480:	2200      	movs	r2, #0
 8002482:	4619      	mov	r1, r3
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f005 f80b 	bl	80074a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800248a:	4603      	mov	r3, r0
 800248c:	4619      	mov	r1, r3
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f004 fff9 	bl	8007486 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	4619      	mov	r1, r3
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f004 fffa 	bl	8007492 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f004 fff3 	bl	800748a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80024a4:	4603      	mov	r3, r0
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f005 f85e 	bl	800756c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	4619      	mov	r1, r3
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f004 ffee 	bl	8007496 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 80024ba:	bf00      	nop
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	0800c398 	.word	0x0800c398

080024c8 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	68b9      	ldr	r1, [r7, #8]
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 f96e 	bl	80027ba <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <_ZNSt15_Deque_iteratorIcRcPcE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80024e6:	b580      	push	{r7, lr}
 80024e8:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80024ea:	2001      	movs	r0, #1
 80024ec:	f7fe fe69 	bl	80011c2 <_ZSt16__deque_buf_sizej>
 80024f0:	4603      	mov	r3, r0
 80024f2:	4618      	mov	r0, r3
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJfEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80024f6:	b590      	push	{r4, r7, lr}
 80024f8:	b085      	sub	sp, #20
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff fe92 	bl	800222c <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8002508:	4603      	mov	r3, r0
 800250a:	681c      	ldr	r4, [r3, #0]
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	4619      	mov	r1, r3
 8002510:	2004      	movs	r0, #4
 8002512:	f7fe fe4b 	bl	80011ac <_ZnwjPv>
 8002516:	4603      	mov	r3, r0
 8002518:	601c      	str	r4, [r3, #0]
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	bd90      	pop	{r4, r7, pc}

08002522 <_ZNKSt5dequeIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4618      	mov	r0, r3
 800252e:	f000 f96e 	bl	800280e <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8002532:	4603      	mov	r3, r0
 8002534:	4618      	mov	r0, r3
 8002536:	f000 f950 	bl	80027da <_ZNSt5dequeIfSaIfEE11_S_max_sizeERKS0_>
 800253a:	4603      	mov	r3, r0
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	6809      	ldr	r1, [r1, #0]
 800255e:	1a41      	subs	r1, r0, r1
 8002560:	1089      	asrs	r1, r1, #2
 8002562:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8002564:	429a      	cmp	r2, r3
 8002566:	d904      	bls.n	8002572 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8002568:	2200      	movs	r2, #0
 800256a:	6839      	ldr	r1, [r7, #0]
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f958 	bl	8002822 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb>
      }
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 800257a:	b590      	push	{r4, r7, lr}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8002582:	687c      	ldr	r4, [r7, #4]
 8002584:	2004      	movs	r0, #4
 8002586:	f7fe fe1c 	bl	80011c2 <_ZSt16__deque_buf_sizej>
 800258a:	4603      	mov	r3, r0
 800258c:	4619      	mov	r1, r3
 800258e:	4620      	mov	r0, r4
 8002590:	f000 f9e1 	bl	8002956 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8002594:	4603      	mov	r3, r0
      }
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	bd90      	pop	{r4, r7, pc}

0800259e <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80025a6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80025aa:	4618      	mov	r0, r3
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <_ZStmiRKSt15_Deque_iteratorIcRcPcES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 80025be:	f7ff ff92 	bl	80024e6 <_ZNSt15_Deque_iteratorIcRcPcE14_S_buffer_sizeEv>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	109b      	asrs	r3, r3, #2
 80025d2:	3b01      	subs	r3, #1
 80025d4:	fb03 f201 	mul.w	r2, r3, r1
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6819      	ldr	r1, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	1acb      	subs	r3, r1, r3
 80025e2:	441a      	add	r2, r3
	  + (__y._M_last - __y._M_cur);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	6899      	ldr	r1, [r3, #8]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	1acb      	subs	r3, r1, r3
 80025ee:	4413      	add	r3, r2
      }
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <_ZNSt5dequeIcSaIcEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8002600:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002604:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f9b4 	bl	8002974 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
 800260c:	4603      	mov	r3, r0
 800260e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002610:	f107 0208 	add.w	r2, r7, #8
 8002614:	f107 030c 	add.w	r3, r7, #12
 8002618:	4611      	mov	r1, r2
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f9b6 	bl	800298c <_ZSt3minIjERKT_S2_S2_>
 8002620:	4603      	mov	r3, r0
 8002622:	681b      	ldr	r3, [r3, #0]
      }
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <_ZNKSt11_Deque_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8002640:	b590      	push	{r4, r7, lr}
 8002642:	b08b      	sub	sp, #44	; 0x2c
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	4613      	mov	r3, r2
 800264c:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	109b      	asrs	r3, r3, #2
 800265a:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 800265c:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	6a3a      	ldr	r2, [r7, #32]
 8002662:	4413      	add	r3, r2
 8002664:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	429a      	cmp	r2, r3
 8002670:	d92d      	bls.n	80026ce <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	1acb      	subs	r3, r1, r3
 800267e:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002680:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d002      	beq.n	800268e <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb+0x4e>
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	e000      	b.n	8002690 <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb+0x50>
 800268e:	2300      	movs	r3, #0
 8002690:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002692:	4413      	add	r3, r2
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269c:	429a      	cmp	r2, r3
 800269e:	d209      	bcs.n	80026b4 <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 80026a8:	3304      	adds	r3, #4
 80026aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ac:	4619      	mov	r1, r3
 80026ae:	f000 f980 	bl	80029b2 <_ZSt4copyIPPcS1_ET0_T_S3_S2_>
 80026b2:	e048      	b.n	8002746 <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80026bc:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80026c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c4:	4413      	add	r3, r2
 80026c6:	461a      	mov	r2, r3
 80026c8:	f000 f98b 	bl	80029e2 <_ZSt13copy_backwardIPPcS1_ET0_T_S3_S2_>
 80026cc:	e03b      	b.n	8002746 <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	3304      	adds	r3, #4
 80026d6:	f107 0208 	add.w	r2, r7, #8
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 f998 	bl	8002a12 <_ZSt3maxIjERKT_S2_S2_>
 80026e2:	4603      	mov	r3, r0
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80026e8:	3302      	adds	r3, #2
 80026ea:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	69b9      	ldr	r1, [r7, #24]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 f9a1 	bl	8002a38 <_ZNSt11_Deque_baseIcSaIcEE15_M_allocate_mapEj>
 80026f6:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	085b      	lsrs	r3, r3, #1
 8002700:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb+0xce>
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	e000      	b.n	8002710 <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb+0xd0>
 800270e:	2300      	movs	r3, #0
 8002710:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4413      	add	r3, r2
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8002720:	3304      	adds	r3, #4
 8002722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002724:	4619      	mov	r1, r3
 8002726:	f000 f944 	bl	80029b2 <_ZSt4copyIPPcS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6819      	ldr	r1, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	461a      	mov	r2, r3
 8002736:	f000 f99c 	bl	8002a72 <_ZNSt11_Deque_baseIcSaIcEE17_M_deallocate_mapEPPcj>

	  this->_M_impl._M_map = __new_map;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	3308      	adds	r3, #8
 800274a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fd55 	bl	80021fc <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f103 0018 	add.w	r0, r3, #24
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800275e:	3b01      	subs	r3, #1
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002764:	4413      	add	r3, r2
 8002766:	4619      	mov	r1, r3
 8002768:	f7ff fd48 	bl	80021fc <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>
    }
 800276c:	bf00      	nop
 800276e:	372c      	adds	r7, #44	; 0x2c
 8002770:	46bd      	mov	sp, r7
 8002772:	bd90      	pop	{r4, r7, pc}

08002774 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	bf0c      	ite	eq
 8002782:	2301      	moveq	r3, #1
 8002784:	2300      	movne	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8002792:	b5b0      	push	{r4, r5, r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800279c:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800279e:	1d3b      	adds	r3, r7, #4
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 f982 	bl	8002aaa <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 80027a6:	462a      	mov	r2, r5
 80027a8:	6839      	ldr	r1, [r7, #0]
 80027aa:	4620      	mov	r0, r4
 80027ac:	f000 f987 	bl	8002abe <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 80027b0:	4603      	mov	r3, r0
    }
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bdb0      	pop	{r4, r5, r7, pc}

080027ba <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
      deallocate(_Tp* __p, size_type __t)
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4619      	mov	r1, r3
 80027cc:	68b8      	ldr	r0, [r7, #8]
 80027ce:	f004 fd7b 	bl	80072c8 <_ZdlPvj>
      }
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <_ZNSt5dequeIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80027da:	b580      	push	{r7, lr}
 80027dc:	b084      	sub	sp, #16
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 80027e2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80027e6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f976 	bl	8002ada <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 80027ee:	4603      	mov	r3, r0
 80027f0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80027f2:	f107 0208 	add.w	r2, r7, #8
 80027f6:	f107 030c 	add.w	r3, r7, #12
 80027fa:	4611      	mov	r1, r2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 f8c5 	bl	800298c <_ZSt3minIjERKT_S2_S2_>
 8002802:	4603      	mov	r3, r0
 8002804:	681b      	ldr	r3, [r3, #0]
      }
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr

08002822 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8002822:	b590      	push	{r4, r7, lr}
 8002824:	b08b      	sub	sp, #44	; 0x2c
 8002826:	af00      	add	r7, sp, #0
 8002828:	60f8      	str	r0, [r7, #12]
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	4613      	mov	r3, r2
 800282e:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	109b      	asrs	r3, r3, #2
 800283c:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 800283e:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	6a3a      	ldr	r2, [r7, #32]
 8002844:	4413      	add	r3, r2
 8002846:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	429a      	cmp	r2, r3
 8002852:	d92d      	bls.n	80028b0 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	1acb      	subs	r3, r1, r3
 8002860:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002862:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x4e>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	e000      	b.n	8002872 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x50>
 8002870:	2300      	movs	r3, #0
 8002872:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002874:	4413      	add	r3, r2
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287e:	429a      	cmp	r2, r3
 8002880:	d209      	bcs.n	8002896 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 800288a:	3304      	adds	r3, #4
 800288c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800288e:	4619      	mov	r1, r3
 8002890:	f000 f92f 	bl	8002af2 <_ZSt4copyIPPfS1_ET0_T_S3_S2_>
 8002894:	e048      	b.n	8002928 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800289e:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80028a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a6:	4413      	add	r3, r2
 80028a8:	461a      	mov	r2, r3
 80028aa:	f000 f93a 	bl	8002b22 <_ZSt13copy_backwardIPPfS1_ET0_T_S3_S2_>
 80028ae:	e03b      	b.n	8002928 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	3304      	adds	r3, #4
 80028b8:	f107 0208 	add.w	r2, r7, #8
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 f8a7 	bl	8002a12 <_ZSt3maxIjERKT_S2_S2_>
 80028c4:	4603      	mov	r3, r0
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80028ca:	3302      	adds	r3, #2
 80028cc:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	69b9      	ldr	r1, [r7, #24]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 f93d 	bl	8002b52 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 80028d8:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	085b      	lsrs	r3, r3, #1
 80028e2:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0xce>
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	e000      	b.n	80028f2 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0xd0>
 80028f0:	2300      	movs	r3, #0
 80028f2:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	4413      	add	r3, r2
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8002902:	3304      	adds	r3, #4
 8002904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002906:	4619      	mov	r1, r3
 8002908:	f000 f8f3 	bl	8002af2 <_ZSt4copyIPPfS1_ET0_T_S3_S2_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6819      	ldr	r1, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	461a      	mov	r2, r3
 8002918:	f000 f938 	bl	8002b8c <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>
	  this->_M_impl._M_map = __new_map;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	3308      	adds	r3, #8
 800292c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fc11 	bl	8002156 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f103 0018 	add.w	r0, r3, #24
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002940:	3b01      	subs	r3, #1
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002946:	4413      	add	r3, r2
 8002948:	4619      	mov	r1, r3
 800294a:	f7ff fc04 	bl	8002156 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
    }
 800294e:	bf00      	nop
 8002950:	372c      	adds	r7, #44	; 0x2c
 8002952:	46bd      	mov	sp, r7
 8002954:	bd90      	pop	{r4, r7, pc}

08002956 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002960:	2200      	movs	r2, #0
 8002962:	6839      	ldr	r1, [r7, #0]
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f92d 	bl	8002bc4 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 800296a:	4603      	mov	r3, r0
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus <= 201703L
	return __a.max_size();
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f93f 	bl	8002c00 <_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv>
 8002982:	4603      	mov	r3, r0
#else
	return size_t(-1) / sizeof(value_type);
#endif
      }
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d201      	bcs.n	80029a6 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	e000      	b.n	80029a8 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80029a6:	687b      	ldr	r3, [r7, #4]
    }
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <_ZSt4copyIPPcS1_ET0_T_S3_S2_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80029b2:	b590      	push	{r4, r7, lr}
 80029b4:	b085      	sub	sp, #20
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 f92a 	bl	8002c18 <_ZSt12__miter_baseIPPcET_S2_>
 80029c4:	4604      	mov	r4, r0
 80029c6:	68b8      	ldr	r0, [r7, #8]
 80029c8:	f000 f926 	bl	8002c18 <_ZSt12__miter_baseIPPcET_S2_>
 80029cc:	4603      	mov	r3, r0
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	4619      	mov	r1, r3
 80029d2:	4620      	mov	r0, r4
 80029d4:	f000 f92a 	bl	8002c2c <_ZSt13__copy_move_aILb0EPPcS1_ET1_T0_S3_S2_>
 80029d8:	4603      	mov	r3, r0
    }
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd90      	pop	{r4, r7, pc}

080029e2 <_ZSt13copy_backwardIPPcS1_ET0_T_S3_S2_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80029e2:	b590      	push	{r4, r7, lr}
 80029e4:	b085      	sub	sp, #20
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 f912 	bl	8002c18 <_ZSt12__miter_baseIPPcET_S2_>
 80029f4:	4604      	mov	r4, r0
 80029f6:	68b8      	ldr	r0, [r7, #8]
 80029f8:	f000 f90e 	bl	8002c18 <_ZSt12__miter_baseIPPcET_S2_>
 80029fc:	4603      	mov	r3, r0
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	4619      	mov	r1, r3
 8002a02:	4620      	mov	r0, r4
 8002a04:	f000 f935 	bl	8002c72 <_ZSt22__copy_move_backward_aILb0EPPcS1_ET1_T0_S3_S2_>
 8002a08:	4603      	mov	r3, r0
    }
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd90      	pop	{r4, r7, pc}

08002a12 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d201      	bcs.n	8002a2c <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	e000      	b.n	8002a2e <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8002a2c:	687b      	ldr	r3, [r7, #4]
    }
 8002a2e:	4618      	mov	r0, r3
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <_ZNSt11_Deque_baseIcSaIcEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8002a38:	b590      	push	{r4, r7, lr}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002a42:	f107 030c 	add.w	r3, r7, #12
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 f935 	bl	8002cb8 <_ZNKSt11_Deque_baseIcSaIcEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8002a4e:	f107 030c 	add.w	r3, r7, #12
 8002a52:	6839      	ldr	r1, [r7, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 f94c 	bl	8002cf2 <_ZNSt16allocator_traitsISaIPcEE8allocateERS1_j>
 8002a5a:	4604      	mov	r4, r0
 8002a5c:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002a5e:	f107 030c 	add.w	r3, r7, #12
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 f939 	bl	8002cda <_ZNSaIPcED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8002a68:	4623      	mov	r3, r4
      }
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd90      	pop	{r4, r7, pc}

08002a72 <_ZNSt11_Deque_baseIcSaIcEE17_M_deallocate_mapEPPcj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b086      	sub	sp, #24
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002a7e:	f107 0314 	add.w	r3, r7, #20
 8002a82:	68f9      	ldr	r1, [r7, #12]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f000 f917 	bl	8002cb8 <_ZNKSt11_Deque_baseIcSaIcEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8002a8a:	f107 0314 	add.w	r3, r7, #20
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 f93c 	bl	8002d10 <_ZNSt16allocator_traitsISaIPcEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 f91c 	bl	8002cda <_ZNSaIPcED1Ev>
      }
 8002aa2:	bf00      	nop
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8002ab2:	bf00      	nop
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr

08002abe <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8002abe:	b480      	push	{r7}
 8002ac0:	b085      	sub	sp, #20
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1ad3      	subs	r3, r2, r3
    }
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr

08002ada <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f923 	bl	8002d2e <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8002ae8:	4603      	mov	r3, r0
      }
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <_ZSt4copyIPPfS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 8002af2:	b590      	push	{r4, r7, lr}
 8002af4:	b085      	sub	sp, #20
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f921 	bl	8002d46 <_ZSt12__miter_baseIPPfET_S2_>
 8002b04:	4604      	mov	r4, r0
 8002b06:	68b8      	ldr	r0, [r7, #8]
 8002b08:	f000 f91d 	bl	8002d46 <_ZSt12__miter_baseIPPfET_S2_>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	4619      	mov	r1, r3
 8002b12:	4620      	mov	r0, r4
 8002b14:	f000 f921 	bl	8002d5a <_ZSt13__copy_move_aILb0EPPfS1_ET1_T0_S3_S2_>
 8002b18:	4603      	mov	r3, r0
    }
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd90      	pop	{r4, r7, pc}

08002b22 <_ZSt13copy_backwardIPPfS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8002b22:	b590      	push	{r4, r7, lr}
 8002b24:	b085      	sub	sp, #20
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f909 	bl	8002d46 <_ZSt12__miter_baseIPPfET_S2_>
 8002b34:	4604      	mov	r4, r0
 8002b36:	68b8      	ldr	r0, [r7, #8]
 8002b38:	f000 f905 	bl	8002d46 <_ZSt12__miter_baseIPPfET_S2_>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	4619      	mov	r1, r3
 8002b42:	4620      	mov	r0, r4
 8002b44:	f000 f92c 	bl	8002da0 <_ZSt22__copy_move_backward_aILb0EPPfS1_ET1_T0_S3_S2_>
 8002b48:	4603      	mov	r3, r0
    }
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd90      	pop	{r4, r7, pc}

08002b52 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8002b52:	b590      	push	{r4, r7, lr}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002b5c:	f107 030c 	add.w	r3, r7, #12
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 f93f 	bl	8002de6 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8002b68:	f107 030c 	add.w	r3, r7, #12
 8002b6c:	6839      	ldr	r1, [r7, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 f956 	bl	8002e20 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>
 8002b74:	4604      	mov	r4, r0
 8002b76:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002b78:	f107 030c 	add.w	r3, r7, #12
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 f943 	bl	8002e08 <_ZNSaIPfED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8002b82:	4623      	mov	r3, r4
      }
 8002b84:	4618      	mov	r0, r3
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd90      	pop	{r4, r7, pc}

08002b8c <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	68f9      	ldr	r1, [r7, #12]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 f921 	bl	8002de6 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	68b9      	ldr	r1, [r7, #8]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 f946 	bl	8002e3e <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002bb2:	f107 0314 	add.w	r3, r7, #20
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 f926 	bl	8002e08 <_ZNSaIPfED1Ev>
      }
 8002bbc:	bf00      	nop
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f943 	bl	8002e5c <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	bf8c      	ite	hi
 8002bde:	2301      	movhi	r3, #1
 8002be0:	2300      	movls	r3, #0
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002be8:	f004 fb83 	bl	80072f2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f004 fb6b 	bl	80072cc <_Znwj>
 8002bf6:	4603      	mov	r3, r0
      }
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff fcc8 	bl	800259e <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <_ZSt12__miter_baseIPPcET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr

08002c2c <_ZSt13__copy_move_aILb0EPPcS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002c2c:	b5b0      	push	{r4, r5, r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 f91a 	bl	8002e72 <_ZSt12__niter_baseIPPcET_S2_>
 8002c3e:	4604      	mov	r4, r0
 8002c40:	68b8      	ldr	r0, [r7, #8]
 8002c42:	f000 f916 	bl	8002e72 <_ZSt12__niter_baseIPPcET_S2_>
 8002c46:	4605      	mov	r5, r0
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 f911 	bl	8002e72 <_ZSt12__niter_baseIPPcET_S2_>
 8002c50:	4603      	mov	r3, r0
 8002c52:	461a      	mov	r2, r3
 8002c54:	4629      	mov	r1, r5
 8002c56:	4620      	mov	r0, r4
 8002c58:	f000 f915 	bl	8002e86 <_ZSt14__copy_move_a1ILb0EPPcS1_ET1_T0_S3_S2_>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 f91f 	bl	8002ea6 <_ZSt12__niter_wrapIPPcET_RKS2_S2_>
 8002c68:	4603      	mov	r3, r0
    }
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bdb0      	pop	{r4, r5, r7, pc}

08002c72 <_ZSt22__copy_move_backward_aILb0EPPcS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8002c72:	b5b0      	push	{r4, r5, r7, lr}
 8002c74:	b084      	sub	sp, #16
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	60f8      	str	r0, [r7, #12]
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 f8f7 	bl	8002e72 <_ZSt12__niter_baseIPPcET_S2_>
 8002c84:	4604      	mov	r4, r0
 8002c86:	68b8      	ldr	r0, [r7, #8]
 8002c88:	f000 f8f3 	bl	8002e72 <_ZSt12__niter_baseIPPcET_S2_>
 8002c8c:	4605      	mov	r5, r0
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 f8ee 	bl	8002e72 <_ZSt12__niter_baseIPPcET_S2_>
 8002c96:	4603      	mov	r3, r0
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	f000 f90d 	bl	8002ebc <_ZSt23__copy_move_backward_a1ILb0EPPcS1_ET1_T0_S3_S2_>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	1d3b      	adds	r3, r7, #4
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 f8fc 	bl	8002ea6 <_ZSt12__niter_wrapIPPcET_RKS2_S2_>
 8002cae:	4603      	mov	r3, r0
    }
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bdb0      	pop	{r4, r5, r7, pc}

08002cb8 <_ZNKSt11_Deque_baseIcSaIcEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8002cc2:	6838      	ldr	r0, [r7, #0]
 8002cc4:	f7ff fcb2 	bl	800262c <_ZNKSt11_Deque_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f905 	bl	8002edc <_ZNSaIPcEC1IcEERKSaIT_E>
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <_ZNSaIPcED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f907 	bl	8002ef6 <_ZN9__gnu_cxx13new_allocatorIPcED1Ev>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <_ZNSt16allocator_traitsISaIPcEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	6839      	ldr	r1, [r7, #0]
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f902 	bl	8002f0a <_ZN9__gnu_cxx13new_allocatorIPcE8allocateEjPKv>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <_ZNSt16allocator_traitsISaIPcEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	68b9      	ldr	r1, [r7, #8]
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f910 	bl	8002f46 <_ZN9__gnu_cxx13new_allocatorIPcE10deallocateEPS1_j>
 8002d26:	bf00      	nop
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f890 	bl	8002e5c <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <_ZSt12__miter_baseIPPfET_S2_>:
    __miter_base(_Iterator __it)
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr

08002d5a <_ZSt13__copy_move_aILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002d5a:	b5b0      	push	{r4, r5, r7, lr}
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f8fd 	bl	8002f66 <_ZSt12__niter_baseIPPfET_S2_>
 8002d6c:	4604      	mov	r4, r0
 8002d6e:	68b8      	ldr	r0, [r7, #8]
 8002d70:	f000 f8f9 	bl	8002f66 <_ZSt12__niter_baseIPPfET_S2_>
 8002d74:	4605      	mov	r5, r0
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 f8f4 	bl	8002f66 <_ZSt12__niter_baseIPPfET_S2_>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	461a      	mov	r2, r3
 8002d82:	4629      	mov	r1, r5
 8002d84:	4620      	mov	r0, r4
 8002d86:	f000 f8f8 	bl	8002f7a <_ZSt14__copy_move_a1ILb0EPPfS1_ET1_T0_S3_S2_>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	1d3b      	adds	r3, r7, #4
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 f902 	bl	8002f9a <_ZSt12__niter_wrapIPPfET_RKS2_S2_>
 8002d96:	4603      	mov	r3, r0
    }
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bdb0      	pop	{r4, r5, r7, pc}

08002da0 <_ZSt22__copy_move_backward_aILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8002da0:	b5b0      	push	{r4, r5, r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 f8da 	bl	8002f66 <_ZSt12__niter_baseIPPfET_S2_>
 8002db2:	4604      	mov	r4, r0
 8002db4:	68b8      	ldr	r0, [r7, #8]
 8002db6:	f000 f8d6 	bl	8002f66 <_ZSt12__niter_baseIPPfET_S2_>
 8002dba:	4605      	mov	r5, r0
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 f8d1 	bl	8002f66 <_ZSt12__niter_baseIPPfET_S2_>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	4629      	mov	r1, r5
 8002dca:	4620      	mov	r0, r4
 8002dcc:	f000 f8f0 	bl	8002fb0 <_ZSt23__copy_move_backward_a1ILb0EPPfS1_ET1_T0_S3_S2_>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	1d3b      	adds	r3, r7, #4
 8002dd4:	4611      	mov	r1, r2
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f8df 	bl	8002f9a <_ZSt12__niter_wrapIPPfET_RKS2_S2_>
 8002ddc:	4603      	mov	r3, r0
    }
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bdb0      	pop	{r4, r5, r7, pc}

08002de6 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8002df0:	6838      	ldr	r0, [r7, #0]
 8002df2:	f7ff fd0c 	bl	800280e <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8002df6:	4603      	mov	r3, r0
 8002df8:	4619      	mov	r1, r3
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f8e8 	bl	8002fd0 <_ZNSaIPfEC1IfEERKSaIT_E>
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <_ZNSaIPfED1Ev>:
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f8ea 	bl	8002fea <_ZN9__gnu_cxx13new_allocatorIPfED1Ev>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	6839      	ldr	r1, [r7, #0]
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f8e5 	bl	8002ffe <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>
 8002e34:	4603      	mov	r3, r0
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f8f3 	bl	800303a <_ZN9__gnu_cxx13new_allocatorIPfE10deallocateEPS1_j>
 8002e54:	bf00      	nop
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002e64:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8002e68:	4618      	mov	r0, r3
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr

08002e72 <_ZSt12__niter_baseIPPcET_S2_>:
    __niter_base(_Iterator __it)
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr

08002e86 <_ZSt14__copy_move_a1ILb0EPPcS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f8df 	bl	800305a <_ZSt14__copy_move_a2ILb0EPPcS1_ET1_T0_S3_S2_>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <_ZSt12__niter_wrapIPPcET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6039      	str	r1, [r7, #0]
    { return __res; }
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <_ZSt23__copy_move_backward_a1ILb0EPPcS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	68b9      	ldr	r1, [r7, #8]
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f8d4 	bl	800307a <_ZSt23__copy_move_backward_a2ILb0EPPcS1_ET1_T0_S3_S2_>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <_ZNSaIPcEC1IcEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f8d7 	bl	800309a <_ZN9__gnu_cxx13new_allocatorIPcEC1Ev>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <_ZN9__gnu_cxx13new_allocatorIPcED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4618      	mov	r0, r3
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr

08002f0a <_ZN9__gnu_cxx13new_allocatorIPcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b084      	sub	sp, #16
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f8c9 	bl	80030ae <_ZNK9__gnu_cxx13new_allocatorIPcE11_M_max_sizeEv>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	4293      	cmp	r3, r2
 8002f22:	bf8c      	ite	hi
 8002f24:	2301      	movhi	r3, #1
 8002f26:	2300      	movls	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <_ZN9__gnu_cxx13new_allocatorIPcE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002f2e:	f004 f9e0 	bl	80072f2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f004 f9c8 	bl	80072cc <_Znwj>
 8002f3c:	4603      	mov	r3, r0
      }
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <_ZN9__gnu_cxx13new_allocatorIPcE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	60f8      	str	r0, [r7, #12]
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4619      	mov	r1, r3
 8002f58:	68b8      	ldr	r0, [r7, #8]
 8002f5a:	f004 f9b5 	bl	80072c8 <_ZdlPvj>
      }
 8002f5e:	bf00      	nop
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <_ZSt12__niter_baseIPPfET_S2_>:
    __niter_base(_Iterator __it)
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4618      	mov	r0, r3
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr

08002f7a <_ZSt14__copy_move_a1ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68b9      	ldr	r1, [r7, #8]
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f89a 	bl	80030c4 <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_>
 8002f90:	4603      	mov	r3, r0
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <_ZSt12__niter_wrapIPPfET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6039      	str	r1, [r7, #0]
    { return __res; }
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr

08002fb0 <_ZSt23__copy_move_backward_a1ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	68b9      	ldr	r1, [r7, #8]
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 f88f 	bl	80030e4 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <_ZNSaIPfEC1IfEERKSaIT_E>:
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f892 	bl	8003104 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <_ZN9__gnu_cxx13new_allocatorIPfED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f884 	bl	8003118 <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>
 8003010:	4602      	mov	r2, r0
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	4293      	cmp	r3, r2
 8003016:	bf8c      	ite	hi
 8003018:	2301      	movhi	r3, #1
 800301a:	2300      	movls	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003022:	f004 f966 	bl	80072f2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4618      	mov	r0, r3
 800302c:	f004 f94e 	bl	80072cc <_Znwj>
 8003030:	4603      	mov	r3, r0
      }
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <_ZN9__gnu_cxx13new_allocatorIPfE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 800303a:	b580      	push	{r7, lr}
 800303c:	b084      	sub	sp, #16
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4619      	mov	r1, r3
 800304c:	68b8      	ldr	r0, [r7, #8]
 800304e:	f004 f93b 	bl	80072c8 <_ZdlPvj>
      }
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <_ZSt14__copy_move_a2ILb0EPPcS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68b9      	ldr	r1, [r7, #8]
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f85f 	bl	800312e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPcEEPT_PKS4_S7_S5_>
 8003070:	4603      	mov	r3, r0
    }
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <_ZSt23__copy_move_backward_a2ILb0EPPcS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800307a:	b580      	push	{r7, lr}
 800307c:	b084      	sub	sp, #16
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	68b9      	ldr	r1, [r7, #8]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f86c 	bl	8003168 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPcEEPT_PKS4_S7_S5_>
 8003090:	4603      	mov	r3, r0
    }
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <_ZN9__gnu_cxx13new_allocatorIPcEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr

080030ae <_ZNK9__gnu_cxx13new_allocatorIPcE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80030b6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80030ba:	4618      	mov	r0, r3
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr

080030c4 <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f869 	bl	80031ac <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_>
 80030da:	4603      	mov	r3, r0
    }
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	68b9      	ldr	r1, [r7, #8]
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f876 	bl	80031e6 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_>
 80030fa:	4603      	mov	r3, r0
    }
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4618      	mov	r0, r3
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr

08003118 <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003120:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8003124:	4618      	mov	r0, r3
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr

0800312e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPcEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800312e:	b580      	push	{r7, lr}
 8003130:	b086      	sub	sp, #24
 8003132:	af00      	add	r7, sp, #0
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	109b      	asrs	r3, r3, #2
 8003142:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d006      	beq.n	8003158 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPcEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	461a      	mov	r2, r3
 8003150:	68f9      	ldr	r1, [r7, #12]
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f004 fc5e 	bl	8007a14 <memmove>
	  return __result + _Num;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	4413      	add	r3, r2
	}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPcEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	109b      	asrs	r3, r3, #2
 800317c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPcEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	425b      	negs	r3, r3
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	18d0      	adds	r0, r2, r3
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	461a      	mov	r2, r3
 8003194:	68f9      	ldr	r1, [r7, #12]
 8003196:	f004 fc3d 	bl	8007a14 <memmove>
	  return __result - _Num;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	425b      	negs	r3, r3
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	4413      	add	r3, r2
	}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	109b      	asrs	r3, r3, #2
 80031c0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d006      	beq.n	80031d6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	461a      	mov	r2, r3
 80031ce:	68f9      	ldr	r1, [r7, #12]
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f004 fc1f 	bl	8007a14 <memmove>
	  return __result + _Num;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	4413      	add	r3, r2
	}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b086      	sub	sp, #24
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	109b      	asrs	r3, r3, #2
 80031fa:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	425b      	negs	r3, r3
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	18d0      	adds	r0, r2, r3
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	461a      	mov	r2, r3
 8003212:	68f9      	ldr	r1, [r7, #12]
 8003214:	f004 fbfe 	bl	8007a14 <memmove>
	  return __result - _Num;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	425b      	negs	r3, r3
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	4413      	add	r3, r2
	}
 8003222:	4618      	mov	r0, r3
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <delayUSecs>:

#ifdef __cplusplus
extern "C" {
#endif

void delayUSecs(uint32_t us){
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
	SysTick->CTRL = 0;
 8003234:	4b12      	ldr	r3, [pc, #72]	; (8003280 <delayUSecs+0x54>)
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = SYSTEMCLOCKS_PER_SEC / 1000000 * us - 1;
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4a0e      	ldr	r2, [pc, #56]	; (8003280 <delayUSecs+0x54>)
 8003246:	3b01      	subs	r3, #1
 8003248:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 800324a:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <delayUSecs+0x54>)
 800324c:	2200      	movs	r2, #0
 800324e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8003250:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <delayUSecs+0x54>)
 8003252:	2205      	movs	r2, #5
 8003254:	601a      	str	r2, [r3, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <delayUSecs+0x54>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800325e:	2b00      	cmp	r3, #0
 8003260:	bf0c      	ite	eq
 8003262:	2301      	moveq	r3, #1
 8003264:	2300      	movne	r3, #0
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d000      	beq.n	800326e <delayUSecs+0x42>
 800326c:	e7f3      	b.n	8003256 <delayUSecs+0x2a>
	SysTick->CTRL = 0;
 800326e:	4b04      	ldr	r3, [pc, #16]	; (8003280 <delayUSecs+0x54>)
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	bc80      	pop	{r7}
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	e000e010 	.word	0xe000e010

08003284 <keepUSBVisable>:
	SysTick->CTRL = 5;
	while((SysTick->CTRL & 0x00010000) == 0);
	SysTick->CTRL = 0;
}

void keepUSBVisable(){
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328a:	f107 0308 	add.w	r3, r7, #8
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	605a      	str	r2, [r3, #4]
 8003294:	609a      	str	r2, [r3, #8]
 8003296:	60da      	str	r2, [r3, #12]
	/* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003298:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <keepUSBVisable+0x84>)
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	4a1a      	ldr	r2, [pc, #104]	; (8003308 <keepUSBVisable+0x84>)
 800329e:	f043 0304 	orr.w	r3, r3, #4
 80032a2:	6193      	str	r3, [r2, #24]
 80032a4:	4b18      	ldr	r3, [pc, #96]	; (8003308 <keepUSBVisable+0x84>)
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	607b      	str	r3, [r7, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80032b0:	2200      	movs	r2, #0
 80032b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032b6:	4815      	ldr	r0, [pc, #84]	; (800330c <keepUSBVisable+0x88>)
 80032b8:	f001 f914 	bl	80044e4 <HAL_GPIO_WritePin>
	/*Configure GPIO pin : PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80032bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032c0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032c2:	2301      	movs	r3, #1
 80032c4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032c6:	2302      	movs	r3, #2
 80032c8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ca:	2302      	movs	r3, #2
 80032cc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ce:	f107 0308 	add.w	r3, r7, #8
 80032d2:	4619      	mov	r1, r3
 80032d4:	480d      	ldr	r0, [pc, #52]	; (800330c <keepUSBVisable+0x88>)
 80032d6:	f001 f82b 	bl	8004330 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80032da:	2200      	movs	r2, #0
 80032dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032e0:	480a      	ldr	r0, [pc, #40]	; (800330c <keepUSBVisable+0x88>)
 80032e2:	f001 f8ff 	bl	80044e4 <HAL_GPIO_WritePin>
	HAL_Delay(65);
 80032e6:	2041      	movs	r0, #65	; 0x41
 80032e8:	f000 ffaa 	bl	8004240 <HAL_Delay>
	//先把PA12拉低再拉高，利用D+模拟USB的拔插动作
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80032ec:	2201      	movs	r2, #1
 80032ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032f2:	4806      	ldr	r0, [pc, #24]	; (800330c <keepUSBVisable+0x88>)
 80032f4:	f001 f8f6 	bl	80044e4 <HAL_GPIO_WritePin>
	HAL_Delay(65);
 80032f8:	2041      	movs	r0, #65	; 0x41
 80032fa:	f000 ffa1 	bl	8004240 <HAL_Delay>
}
 80032fe:	bf00      	nop
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000
 800330c:	40010800 	.word	0x40010800

08003310 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f82f 	bl	800337c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4618      	mov	r0, r3
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4618      	mov	r0, r3
 8003334:	f000 f812 	bl	800335c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff ffeb 	bl	8003328 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4618      	mov	r0, r3
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f833 	bl	80033d0 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4618      	mov	r0, r3
 800336e:	f000 f83b 	bl	80033e8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataC1Ev>
	{ }
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f842 	bl	800340e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4618      	mov	r0, r3
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	10db      	asrs	r3, r3, #3
 80033ac:	4a07      	ldr	r2, [pc, #28]	; (80033cc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x38>)
 80033ae:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 80033b2:	461a      	mov	r2, r3
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f834 	bl	8003422 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      }
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ffa7 	bl	8003310 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4618      	mov	r0, r3
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	aaaaaaab 	.word	0xaaaaaaab

080033d0 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f835 	bl	8003448 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	605a      	str	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	609a      	str	r2, [r3, #8]
	{ }
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4618      	mov	r0, r3
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr

0800340e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4618      	mov	r0, r3
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr

08003422 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 8003422:	b580      	push	{r7, lr}
 8003424:	b084      	sub	sp, #16
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
	if (__p)
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	4618      	mov	r0, r3
 800343c:	f000 f80e 	bl	800345c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 8003440:	bf00      	nop
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4618      	mov	r0, r3
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr

0800345c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	68b9      	ldr	r1, [r7, #8]
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f81c 	bl	80034aa <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 8003472:	bf00      	nop
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	bc80      	pop	{r7}
 800348c:	4770      	bx	lr

0800348e <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800348e:	b580      	push	{r7, lr}
 8003490:	b084      	sub	sp, #16
 8003492:	af00      	add	r7, sp, #0
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800349a:	68b9      	ldr	r1, [r7, #8]
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f817 	bl	80034d0 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __t)
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b084      	sub	sp, #16
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	4413      	add	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4619      	mov	r1, r3
 80034c2:	68b8      	ldr	r0, [r7, #8]
 80034c4:	f003 ff00 	bl	80072c8 <_ZdlPvj>
      }
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80034da:	6839      	ldr	r1, [r7, #0]
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f804 	bl	80034ea <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d00a      	beq.n	8003512 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f80c 	bl	800351a <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8003502:	4603      	mov	r3, r0
 8003504:	4618      	mov	r0, r3
 8003506:	f000 f812 	bl	800352e <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3318      	adds	r3, #24
 800350e:	607b      	str	r3, [r7, #4]
 8003510:	e7f0      	b.n	80034f4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr

0800352e <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f004 f864 	bl	8007604 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 800353c:	bf00      	nop
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <_Z41__static_initialization_and_destruction_0ii>:

void Log::DisplayMsg(){
	for (auto it = msgBuffer.begin(); it != msgBuffer.end(); ++it) {
		sendStringViaCDC(*it);
	}
}
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d107      	bne.n	8003564 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800355a:	4293      	cmp	r3, r2
 800355c:	d102      	bne.n	8003564 <_Z41__static_initialization_and_destruction_0ii+0x20>
std::vector<std::string> Log::msgBuffer;
 800355e:	4809      	ldr	r0, [pc, #36]	; (8003584 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003560:	f7ff feef 	bl	8003342 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d107      	bne.n	800357a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003570:	4293      	cmp	r3, r2
 8003572:	d102      	bne.n	800357a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003574:	4803      	ldr	r0, [pc, #12]	; (8003584 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003576:	f000 f807 	bl	8003588 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	2000036c 	.word	0x2000036c

08003588 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8003588:	b5b0      	push	{r4, r5, r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681c      	ldr	r4, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff ff6d 	bl	800347a <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 80035a0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80035a2:	461a      	mov	r2, r3
 80035a4:	4629      	mov	r1, r5
 80035a6:	4620      	mov	r0, r4
 80035a8:	f7ff ff71 	bl	800348e <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fef0 	bl	8003394 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bdb0      	pop	{r4, r5, r7, pc}

080035be <_GLOBAL__sub_I_delayUSecs>:
 80035be:	b580      	push	{r7, lr}
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80035c6:	2001      	movs	r0, #1
 80035c8:	f7ff ffbc 	bl	8003544 <_Z41__static_initialization_and_destruction_0ii>
 80035cc:	bd80      	pop	{r7, pc}

080035ce <_GLOBAL__sub_D_delayUSecs>:
 80035ce:	b580      	push	{r7, lr}
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80035d6:	2000      	movs	r0, #0
 80035d8:	f7ff ffb4 	bl	8003544 <_Z41__static_initialization_and_destruction_0ii>
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80035e0:	b510      	push	{r4, lr}
 80035e2:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e4:	2210      	movs	r2, #16
 80035e6:	2100      	movs	r1, #0
 80035e8:	a802      	add	r0, sp, #8
 80035ea:	f004 fa2d 	bl	8007a48 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035ee:	4b13      	ldr	r3, [pc, #76]	; (800363c <MX_GPIO_Init+0x5c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80035f0:	4c13      	ldr	r4, [pc, #76]	; (8003640 <MX_GPIO_Init+0x60>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035f2:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80035f4:	4620      	mov	r0, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035f6:	f042 0220 	orr.w	r2, r2, #32
 80035fa:	619a      	str	r2, [r3, #24]
 80035fc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80035fe:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003600:	f002 0220 	and.w	r2, r2, #32
 8003604:	9200      	str	r2, [sp, #0]
 8003606:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	f042 0204 	orr.w	r2, r2, #4
 800360e:	619a      	str	r2, [r3, #24]
 8003610:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8003612:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	9301      	str	r3, [sp, #4]
 800361a:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800361c:	f000 ff62 	bl	80044e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003620:	2240      	movs	r2, #64	; 0x40
 8003622:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003624:	2100      	movs	r1, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003626:	e9cd 2302 	strd	r2, r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362a:	2302      	movs	r3, #2
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800362c:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362e:	e9cd 1304 	strd	r1, r3, [sp, #16]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8003632:	a902      	add	r1, sp, #8
 8003634:	f000 fe7c 	bl	8004330 <HAL_GPIO_Init>

}
 8003638:	b006      	add	sp, #24
 800363a:	bd10      	pop	{r4, pc}
 800363c:	40021000 	.word	0x40021000
 8003640:	40010800 	.word	0x40010800

08003644 <_ZN9CalculateC1Ev>:

#include <stack>
#include <string>
#include <cstdio>

class Calculate {
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4618      	mov	r0, r3
 8003650:	f003 ffd1 	bl	80075f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3318      	adds	r3, #24
 8003658:	4618      	mov	r0, r3
 800365a:	f003 ffcc 	bl	80075f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3330      	adds	r3, #48	; 0x30
 8003662:	4618      	mov	r0, r3
 8003664:	f000 f91e 	bl	80038a4 <_ZNSt5stackIcSt5dequeIcSaIcEEEC1IS2_vEEv>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3358      	adds	r3, #88	; 0x58
 800366c:	4618      	mov	r0, r3
 800366e:	f000 f93a 	bl	80038e6 <_ZNSt5stackIfSt5dequeIfSaIfEEEC1IS2_vEEv>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4618      	mov	r0, r3
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b0ae      	sub	sp, #184	; 0xb8
 8003680:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003682:	f000 fdb9 	bl	80041f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003686:	f000 f891 	bl	80037ac <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800368a:	f7ff ffa9 	bl	80035e0 <MX_GPIO_Init>
  keepUSBVisable();
 800368e:	f7ff fdf9 	bl	8003284 <keepUSBVisable>
  MX_USB_DEVICE_Init();
 8003692:	f003 fc3f 	bl	8006f14 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8003696:	f000 fc8f 	bl	8003fb8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MAX7219 Max7219;
  Calculate Calcu;
 800369a:	f107 031c 	add.w	r3, r7, #28
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff ffd0 	bl	8003644 <_ZN9CalculateC1Ev>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Max7219.max7219Init();
 80036a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fb0d 	bl	8003cc8 <_ZN7MAX721911max7219InitEv>
  //2*(3+5)+7/1-4
  Calcu.getInput('2');
 80036ae:	f107 031c 	add.w	r3, r7, #28
 80036b2:	2132      	movs	r1, #50	; 0x32
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7fe f81f 	bl	80016f8 <_ZN9Calculate8getInputEc>
  Calcu.getInput('*');
 80036ba:	f107 031c 	add.w	r3, r7, #28
 80036be:	212a      	movs	r1, #42	; 0x2a
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fe f819 	bl	80016f8 <_ZN9Calculate8getInputEc>
  Calcu.getInput('(');
 80036c6:	f107 031c 	add.w	r3, r7, #28
 80036ca:	2128      	movs	r1, #40	; 0x28
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fe f813 	bl	80016f8 <_ZN9Calculate8getInputEc>
  Calcu.getInput('3');
 80036d2:	f107 031c 	add.w	r3, r7, #28
 80036d6:	2133      	movs	r1, #51	; 0x33
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fe f80d 	bl	80016f8 <_ZN9Calculate8getInputEc>
  Calcu.getInput('+');
 80036de:	f107 031c 	add.w	r3, r7, #28
 80036e2:	212b      	movs	r1, #43	; 0x2b
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fe f807 	bl	80016f8 <_ZN9Calculate8getInputEc>
  Calcu.getInput('5');
 80036ea:	f107 031c 	add.w	r3, r7, #28
 80036ee:	2135      	movs	r1, #53	; 0x35
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fe f801 	bl	80016f8 <_ZN9Calculate8getInputEc>
  Calcu.getInput(')');
 80036f6:	f107 031c 	add.w	r3, r7, #28
 80036fa:	2129      	movs	r1, #41	; 0x29
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fd fffb 	bl	80016f8 <_ZN9Calculate8getInputEc>
  Calcu.getInput('+');
 8003702:	f107 031c 	add.w	r3, r7, #28
 8003706:	212b      	movs	r1, #43	; 0x2b
 8003708:	4618      	mov	r0, r3
 800370a:	f7fd fff5 	bl	80016f8 <_ZN9Calculate8getInputEc>
  Calcu.getInput('7');
 800370e:	f107 031c 	add.w	r3, r7, #28
 8003712:	2137      	movs	r1, #55	; 0x37
 8003714:	4618      	mov	r0, r3
 8003716:	f7fd ffef 	bl	80016f8 <_ZN9Calculate8getInputEc>
  Calcu.getInput('/');
 800371a:	f107 031c 	add.w	r3, r7, #28
 800371e:	212f      	movs	r1, #47	; 0x2f
 8003720:	4618      	mov	r0, r3
 8003722:	f7fd ffe9 	bl	80016f8 <_ZN9Calculate8getInputEc>
  Calcu.getInput('1');
 8003726:	f107 031c 	add.w	r3, r7, #28
 800372a:	2131      	movs	r1, #49	; 0x31
 800372c:	4618      	mov	r0, r3
 800372e:	f7fd ffe3 	bl	80016f8 <_ZN9Calculate8getInputEc>
  Calcu.getInput('-');
 8003732:	f107 031c 	add.w	r3, r7, #28
 8003736:	212d      	movs	r1, #45	; 0x2d
 8003738:	4618      	mov	r0, r3
 800373a:	f7fd ffdd 	bl	80016f8 <_ZN9Calculate8getInputEc>
  Calcu.getInput('9');
 800373e:	f107 031c 	add.w	r3, r7, #28
 8003742:	2139      	movs	r1, #57	; 0x39
 8003744:	4618      	mov	r0, r3
 8003746:	f7fd ffd7 	bl	80016f8 <_ZN9Calculate8getInputEc>
  Calcu.getInput('.');
 800374a:	f107 031c 	add.w	r3, r7, #28
 800374e:	212e      	movs	r1, #46	; 0x2e
 8003750:	4618      	mov	r0, r3
 8003752:	f7fd ffd1 	bl	80016f8 <_ZN9Calculate8getInputEc>
  Calcu.getInput('7');
 8003756:	f107 031c 	add.w	r3, r7, #28
 800375a:	2137      	movs	r1, #55	; 0x37
 800375c:	4618      	mov	r0, r3
 800375e:	f7fd ffcb 	bl	80016f8 <_ZN9Calculate8getInputEc>
  Calcu.getInput('=');
 8003762:	f107 031c 	add.w	r3, r7, #28
 8003766:	213d      	movs	r1, #61	; 0x3d
 8003768:	4618      	mov	r0, r3
 800376a:	f7fd ffc5 	bl	80016f8 <_ZN9Calculate8getInputEc>

  std::string o = Calcu.getOperand();
 800376e:	1d3b      	adds	r3, r7, #4
 8003770:	f107 021c 	add.w	r2, r7, #28
 8003774:	4611      	mov	r1, r2
 8003776:	4618      	mov	r0, r3
 8003778:	f7fe f87a 	bl	8001870 <_ZNK9Calculate10getOperandB5cxx11Ev>
  while (1)
  {
	  Max7219.refreshScreen(o);
 800377c:	1d3a      	adds	r2, r7, #4
 800377e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003782:	4611      	mov	r1, r2
 8003784:	4618      	mov	r0, r3
 8003786:	f004 f875 	bl	8007874 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800378a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800378e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003792:	4611      	mov	r1, r2
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fafa 	bl	8003d8e <_ZN7MAX721913refreshScreenENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800379a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800379e:	4618      	mov	r0, r3
 80037a0:	f003 ff30 	bl	8007604 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	  HAL_Delay(100);
 80037a4:	2064      	movs	r0, #100	; 0x64
 80037a6:	f000 fd4b 	bl	8004240 <HAL_Delay>
	  Max7219.refreshScreen(o);
 80037aa:	e7e7      	b.n	800377c <main+0x100>

080037ac <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b094      	sub	sp, #80	; 0x50
 80037b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037b6:	2228      	movs	r2, #40	; 0x28
 80037b8:	2100      	movs	r1, #0
 80037ba:	4618      	mov	r0, r3
 80037bc:	f004 f944 	bl	8007a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037c0:	f107 0314 	add.w	r3, r7, #20
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037d0:	1d3b      	adds	r3, r7, #4
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	605a      	str	r2, [r3, #4]
 80037d8:	609a      	str	r2, [r3, #8]
 80037da:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037dc:	2301      	movs	r3, #1
 80037de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80037e6:	2300      	movs	r3, #0
 80037e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037ea:	2301      	movs	r3, #1
 80037ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037ee:	2302      	movs	r3, #2
 80037f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80037f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80037fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003802:	4618      	mov	r0, r3
 8003804:	f001 fd04 	bl	8005210 <HAL_RCC_OscConfig>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	bf14      	ite	ne
 800380e:	2301      	movne	r3, #1
 8003810:	2300      	moveq	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8003818:	f000 f832 	bl	8003880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800381c:	230f      	movs	r3, #15
 800381e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003820:	2302      	movs	r3, #2
 8003822:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003824:	2300      	movs	r3, #0
 8003826:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800382c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800382e:	2300      	movs	r3, #0
 8003830:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003832:	f107 0314 	add.w	r3, r7, #20
 8003836:	2101      	movs	r1, #1
 8003838:	4618      	mov	r0, r3
 800383a:	f001 feab 	bl	8005594 <HAL_RCC_ClockConfig>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	bf14      	ite	ne
 8003844:	2301      	movne	r3, #1
 8003846:	2300      	moveq	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800384e:	f000 f817 	bl	8003880 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003852:	2310      	movs	r3, #16
 8003854:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8003856:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800385a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800385c:	1d3b      	adds	r3, r7, #4
 800385e:	4618      	mov	r0, r3
 8003860:	f001 ff34 	bl	80056cc <HAL_RCCEx_PeriphCLKConfig>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	bf14      	ite	ne
 800386a:	2301      	movne	r3, #1
 800386c:	2300      	moveq	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 8003874:	f000 f804 	bl	8003880 <Error_Handler>
  }
}
 8003878:	bf00      	nop
 800387a:	3750      	adds	r7, #80	; 0x50
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003884:	b672      	cpsid	i
}
 8003886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003888:	e7fe      	b.n	8003888 <Error_Handler+0x8>

0800388a <_ZNSt5dequeIcSaIcEEC1Ev>:
      deque() = default;
 800388a:	b580      	push	{r7, lr}
 800388c:	b082      	sub	sp, #8
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4618      	mov	r0, r3
 8003896:	f000 f83a 	bl	800390e <_ZNSt11_Deque_baseIcSaIcEEC1Ev>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <_ZNSt5stackIcSt5dequeIcSaIcEEEC1IS2_vEEv>:
	stack()
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
	: c() { }
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4618      	mov	r0, r3
 80038b0:	2328      	movs	r3, #40	; 0x28
 80038b2:	461a      	mov	r2, r3
 80038b4:	2100      	movs	r1, #0
 80038b6:	f004 f8c7 	bl	8007a48 <memset>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff ffe4 	bl	800388a <_ZNSt5dequeIcSaIcEEC1Ev>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <_ZNSt5dequeIfSaIfEEC1Ev>:
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 f82a 	bl	8003930 <_ZNSt11_Deque_baseIfSaIfEEC1Ev>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <_ZNSt5stackIfSt5dequeIfSaIfEEEC1IS2_vEEv>:
	stack()
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
	: c() { }
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4618      	mov	r0, r3
 80038f2:	2328      	movs	r3, #40	; 0x28
 80038f4:	461a      	mov	r2, r3
 80038f6:	2100      	movs	r1, #0
 80038f8:	f004 f8a6 	bl	8007a48 <memset>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff ffe4 	bl	80038cc <_ZNSt5dequeIfSaIfEEC1Ev>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <_ZNSt11_Deque_baseIcSaIcEEC1Ev>:
      _Deque_base()
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4618      	mov	r0, r3
 800391a:	f000 f81a 	bl	8003952 <_ZNSt11_Deque_baseIcSaIcEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 800391e:	2100      	movs	r1, #0
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f826 	bl	8003972 <_ZNSt11_Deque_baseIcSaIcEE17_M_initialize_mapEj>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <_ZNSt11_Deque_baseIfSaIfEEC1Ev>:
      _Deque_base()
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4618      	mov	r0, r3
 800393c:	f000 f87b 	bl	8003a36 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8003940:	2100      	movs	r1, #0
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f887 	bl	8003a56 <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <_ZNSt11_Deque_baseIcSaIcEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f003 fcc7 	bl	80072ee <_ZNSaIcEC1Ev>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4618      	mov	r0, r3
 8003964:	f000 f8da 	bl	8003b1c <_ZNSt11_Deque_baseIcSaIcEE16_Deque_impl_dataC1Ev>
	{ }
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <_ZNSt11_Deque_baseIcSaIcEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8003972:	b590      	push	{r4, r7, lr}
 8003974:	b089      	sub	sp, #36	; 0x24
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 800397c:	2001      	movs	r0, #1
 800397e:	f7fd fc20 	bl	80011c2 <_ZSt16__deque_buf_sizej>
 8003982:	4602      	mov	r2, r0
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	fbb3 f3f2 	udiv	r3, r3, r2
 800398a:	3301      	adds	r3, #1
 800398c:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800398e:	2308      	movs	r3, #8
 8003990:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	3302      	adds	r3, #2
 8003996:	613b      	str	r3, [r7, #16]
 8003998:	f107 0210 	add.w	r2, r7, #16
 800399c:	f107 030c 	add.w	r3, r7, #12
 80039a0:	4611      	mov	r1, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff f835 	bl	8002a12 <_ZSt3maxIjERKT_S2_S2_>
 80039a8:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	4619      	mov	r1, r3
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff f83e 	bl	8002a38 <_ZNSt11_Deque_baseIcSaIcEE15_M_allocate_mapEj>
 80039bc:	4602      	mov	r2, r0
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6859      	ldr	r1, [r3, #4]
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	1acb      	subs	r3, r1, r3
 80039ce:	085b      	lsrs	r3, r3, #1
 80039d0:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 80039d2:	4413      	add	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4413      	add	r3, r2
 80039de:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	69b9      	ldr	r1, [r7, #24]
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f8b2 	bl	8003b4e <_ZNSt11_Deque_baseIcSaIcEE15_M_create_nodesEPPcS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3308      	adds	r3, #8
 80039ee:	69b9      	ldr	r1, [r7, #24]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fe fc03 	bl	80021fc <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f103 0218 	add.w	r2, r3, #24
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	3b04      	subs	r3, #4
 8003a00:	4619      	mov	r1, r3
 8003a02:	4610      	mov	r0, r2
 8003a04:	f7fe fbfa 	bl	80021fc <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8003a14:	2001      	movs	r0, #1
 8003a16:	f7fd fbd4 	bl	80011c2 <_ZSt16__deque_buf_sizej>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a22:	fb01 f202 	mul.w	r2, r1, r2
 8003a26:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8003a28:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	619a      	str	r2, [r3, #24]
    }
 8003a2e:	bf00      	nop
 8003a30:	3724      	adds	r7, #36	; 0x24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd90      	pop	{r4, r7, pc}

08003a36 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f89f 	bl	8003b82 <_ZNSaIfEC1Ev>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 f8a7 	bl	8003b9a <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>
	{ }
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8003a56:	b590      	push	{r4, r7, lr}
 8003a58:	b089      	sub	sp, #36	; 0x24
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8003a60:	2004      	movs	r0, #4
 8003a62:	f7fd fbae 	bl	80011c2 <_ZSt16__deque_buf_sizej>
 8003a66:	4602      	mov	r2, r0
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a6e:	3301      	adds	r3, #1
 8003a70:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003a72:	2308      	movs	r3, #8
 8003a74:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	3302      	adds	r3, #2
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	f107 0210 	add.w	r2, r7, #16
 8003a80:	f107 030c 	add.w	r3, r7, #12
 8003a84:	4611      	mov	r1, r2
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fe ffc3 	bl	8002a12 <_ZSt3maxIjERKT_S2_S2_>
 8003a8c:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	4619      	mov	r1, r3
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff f859 	bl	8002b52 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6859      	ldr	r1, [r3, #4]
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	1acb      	subs	r3, r1, r3
 8003ab2:	085b      	lsrs	r3, r3, #1
 8003ab4:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003ab6:	4413      	add	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	69b9      	ldr	r1, [r7, #24]
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f87f 	bl	8003bcc <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3308      	adds	r3, #8
 8003ad2:	69b9      	ldr	r1, [r7, #24]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fe fb3e 	bl	8002156 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f103 0218 	add.w	r2, r3, #24
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	3b04      	subs	r3, #4
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	f7fe fb35 	bl	8002156 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8003af8:	2004      	movs	r0, #4
 8003afa:	f7fd fb62 	bl	80011c2 <_ZSt16__deque_buf_sizej>
 8003afe:	4602      	mov	r2, r0
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b06:	fb01 f202 	mul.w	r2, r1, r2
 8003b0a:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	619a      	str	r2, [r3, #24]
    }
 8003b14:	bf00      	nop
 8003b16:	3724      	adds	r7, #36	; 0x24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd90      	pop	{r4, r7, pc}

08003b1c <_ZNSt11_Deque_baseIcSaIcEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	605a      	str	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3308      	adds	r3, #8
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 f863 	bl	8003c00 <_ZNSt15_Deque_iteratorIcRcPcEC1Ev>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	3318      	adds	r3, #24
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 f85e 	bl	8003c00 <_ZNSt15_Deque_iteratorIcRcPcEC1Ev>
	{ }
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <_ZNSt11_Deque_baseIcSaIcEE15_M_create_nodesEPPcS3_>:
    _Deque_base<_Tp, _Alloc>::
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b086      	sub	sp, #24
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d209      	bcs.n	8003b7a <_ZNSt11_Deque_baseIcSaIcEE15_M_create_nodesEPPcS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f7fe fc53 	bl	8002412 <_ZNSt11_Deque_baseIcSaIcEE16_M_allocate_nodeEv>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	3304      	adds	r3, #4
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	e7f1      	b.n	8003b5e <_ZNSt11_Deque_baseIcSaIcEE15_M_create_nodesEPPcS3_+0x10>
    }
 8003b7a:	bf00      	nop
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <_ZNSaIfEC1Ev>:
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f84e 	bl	8003c2c <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b082      	sub	sp, #8
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	605a      	str	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3308      	adds	r3, #8
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 f844 	bl	8003c40 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3318      	adds	r3, #24
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 f83f 	bl	8003c40 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
	{ }
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>:
    _Deque_base<_Tp, _Alloc>::
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d209      	bcs.n	8003bf8 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f7fe fcc8 	bl	800257a <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 8003bea:	4602      	mov	r2, r0
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	e7f1      	b.n	8003bdc <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x10>
    }
 8003bf8:	bf00      	nop
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <_ZNSt15_Deque_iteratorIcRcPcEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	605a      	str	r2, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	609a      	str	r2, [r3, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	60da      	str	r2, [r3, #12]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4618      	mov	r0, r3
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr

08003c40 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	605a      	str	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	609a      	str	r2, [r3, #8]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	60da      	str	r2, [r3, #12]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4618      	mov	r0, r3
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr

08003c6c <_ZN7MAX721911max7219SendEhh>:
 *  Created on: Nov 16, 2023
 *      Author: zhiyuan
 */
# include "max7219.hpp"

void MAX7219::max7219Send(uint8_t address,uint8_t data){
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	460b      	mov	r3, r1
 8003c76:	70fb      	strb	r3, [r7, #3]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	70bb      	strb	r3, [r7, #2]

	uint16_t Transmit_buf = (0x00ff&data)|(0xff00&(address<<8));
 8003c7c:	78bb      	ldrb	r3, [r7, #2]
 8003c7e:	b21a      	sxth	r2, r3
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	021b      	lsls	r3, r3, #8
 8003c84:	b21b      	sxth	r3, r3
 8003c86:	4313      	orrs	r3, r2
 8003c88:	b21b      	sxth	r3, r3
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2140      	movs	r1, #64	; 0x40
 8003c92:	480b      	ldr	r0, [pc, #44]	; (8003cc0 <_ZN7MAX721911max7219SendEhh+0x54>)
 8003c94:	f000 fc26 	bl	80044e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&MAX7219_SPI,(uint8_t*)&Transmit_buf,1,TRANSMIT_OVERTIME);
 8003c98:	f107 010e 	add.w	r1, r7, #14
 8003c9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	4808      	ldr	r0, [pc, #32]	; (8003cc4 <_ZN7MAX721911max7219SendEhh+0x58>)
 8003ca4:	f001 fe48 	bl	8005938 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8003ca8:	2201      	movs	r2, #1
 8003caa:	2140      	movs	r1, #64	; 0x40
 8003cac:	4804      	ldr	r0, [pc, #16]	; (8003cc0 <_ZN7MAX721911max7219SendEhh+0x54>)
 8003cae:	f000 fc19 	bl	80044e4 <HAL_GPIO_WritePin>
	delayUSecs(100);
 8003cb2:	2064      	movs	r0, #100	; 0x64
 8003cb4:	f7ff faba 	bl	800322c <delayUSecs>
}
 8003cb8:	bf00      	nop
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40010800 	.word	0x40010800
 8003cc4:	20000378 	.word	0x20000378

08003cc8 <_ZN7MAX721911max7219InitEv>:

void MAX7219::max7219Init(){
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
	//进入正常工作模式
	setWorkMode(true);
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f80c 	bl	8003cf0 <_ZN7MAX721911setWorkModeEb>
	//七位全扫描模式
	setScanMode(0x07);
 8003cd8:	2107      	movs	r1, #7
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f830 	bl	8003d40 <_ZN7MAX721911setScanModeEh>
	//打开译码模式
	setDecodeMode(DECODE_D0_D7);
 8003ce0:	21ff      	movs	r1, #255	; 0xff
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f81c 	bl	8003d20 <_ZN7MAX721913setDecodeModeEh>
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <_ZN7MAX721911setWorkModeEb>:
		max7219Send(DISPLAY_TEST, 0x01);
	else
		max7219Send(DISPLAY_TEST, 0x00);
}

void MAX7219::setWorkMode(bool status){
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	70fb      	strb	r3, [r7, #3]
	if(status)
 8003cfc:	78fb      	ldrb	r3, [r7, #3]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d005      	beq.n	8003d0e <_ZN7MAX721911setWorkModeEb+0x1e>
		max7219Send(SHUT_DOWN, 1);
 8003d02:	2201      	movs	r2, #1
 8003d04:	210c      	movs	r1, #12
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7ff ffb0 	bl	8003c6c <_ZN7MAX721911max7219SendEhh>
	else
		max7219Send(SHUT_DOWN, 0);
}
 8003d0c:	e004      	b.n	8003d18 <_ZN7MAX721911setWorkModeEb+0x28>
		max7219Send(SHUT_DOWN, 0);
 8003d0e:	2200      	movs	r2, #0
 8003d10:	210c      	movs	r1, #12
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff ffaa 	bl	8003c6c <_ZN7MAX721911max7219SendEhh>
}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <_ZN7MAX721913setDecodeModeEh>:

void MAX7219::setDecodeMode(uint8_t mode){
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	70fb      	strb	r3, [r7, #3]
	max7219Send(DECODE_MODE, mode);
 8003d2c:	78fb      	ldrb	r3, [r7, #3]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	2109      	movs	r1, #9
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff ff9a 	bl	8003c6c <_ZN7MAX721911max7219SendEhh>
}
 8003d38:	bf00      	nop
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <_ZN7MAX721911setScanModeEh>:

void MAX7219::setScanMode(uint8_t mode){
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	70fb      	strb	r3, [r7, #3]
	max7219Send(SCAN_LIMIT, mode);
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	210b      	movs	r1, #11
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff ff8a 	bl	8003c6c <_ZN7MAX721911max7219SendEhh>
}
 8003d58:	bf00      	nop
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <_ZN7MAX72199clrScreenEv>:

void MAX7219::clrScreen(){
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	for(uint8_t reg = 0x01; reg <= 8; reg++){
 8003d68:	2301      	movs	r3, #1
 8003d6a:	73fb      	strb	r3, [r7, #15]
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d809      	bhi.n	8003d86 <_ZN7MAX72199clrScreenEv+0x26>
		max7219Send(reg, 0x0f);
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	220f      	movs	r2, #15
 8003d76:	4619      	mov	r1, r3
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff ff77 	bl	8003c6c <_ZN7MAX721911max7219SendEhh>
	for(uint8_t reg = 0x01; reg <= 8; reg++){
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
 8003d80:	3301      	adds	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
 8003d84:	e7f2      	b.n	8003d6c <_ZN7MAX72199clrScreenEv+0xc>
	}
}
 8003d86:	bf00      	nop
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <_ZN7MAX721913refreshScreenENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void MAX7219::refreshScreen(std::string s){
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b086      	sub	sp, #24
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]
	bool dpFlag = false;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	75fb      	strb	r3, [r7, #23]
	uint8_t reg = 0x01;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	75bb      	strb	r3, [r7, #22]
	uint8_t digitCount = 0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	757b      	strb	r3, [r7, #21]

	clrScreen();
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff ffdb 	bl	8003d60 <_ZN7MAX72199clrScreenEv>
	for (auto it = s.rbegin(); it != s.rend(); ++it) {
 8003daa:	f107 030c 	add.w	r3, r7, #12
 8003dae:	6839      	ldr	r1, [r7, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f003 fc55 	bl	8007660 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv>
 8003db6:	f107 0310 	add.w	r3, r7, #16
 8003dba:	6839      	ldr	r1, [r7, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f003 fc54 	bl	800766a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4rendEv>
 8003dc2:	f107 0210 	add.w	r2, r7, #16
 8003dc6:	f107 030c 	add.w	r3, r7, #12
 8003dca:	4611      	mov	r1, r2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 f85c 	bl	8003e8a <_ZStneIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEbRKSt16reverse_iteratorIT_ESE_>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d054      	beq.n	8003e82 <_ZN7MAX721913refreshScreenENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf4>
		if (std::isdigit(*it)) {
 8003dd8:	f107 030c 	add.w	r3, r7, #12
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 f872 	bl	8003ec6 <_ZNKSt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEdeEv>
 8003de2:	4603      	mov	r3, r0
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	3b30      	subs	r3, #48	; 0x30
 8003de8:	2b09      	cmp	r3, #9
 8003dea:	bf94      	ite	ls
 8003dec:	2301      	movls	r3, #1
 8003dee:	2300      	movhi	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	bf14      	ite	ne
 8003df6:	2301      	movne	r3, #1
 8003df8:	2300      	moveq	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d02a      	beq.n	8003e56 <_ZN7MAX721913refreshScreenENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc8>
	        if (digitCount < 8) {
 8003e00:	7d7b      	ldrb	r3, [r7, #21]
 8003e02:	2b07      	cmp	r3, #7
 8003e04:	d837      	bhi.n	8003e76 <_ZN7MAX721913refreshScreenENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe8>
	            if (dpFlag) {
 8003e06:	7dfb      	ldrb	r3, [r7, #23]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d011      	beq.n	8003e30 <_ZN7MAX721913refreshScreenENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa2>
	                max7219Send(reg, *it | 0b10000000);
 8003e0c:	f107 030c 	add.w	r3, r7, #12
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 f858 	bl	8003ec6 <_ZNKSt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEdeEv>
 8003e16:	4603      	mov	r3, r0
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	7dbb      	ldrb	r3, [r7, #22]
 8003e22:	4619      	mov	r1, r3
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7ff ff21 	bl	8003c6c <_ZN7MAX721911max7219SendEhh>
	                dpFlag = false;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	75fb      	strb	r3, [r7, #23]
 8003e2e:	e00b      	b.n	8003e48 <_ZN7MAX721913refreshScreenENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xba>
	            } else {
	                max7219Send(reg, *it);
 8003e30:	f107 030c 	add.w	r3, r7, #12
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 f846 	bl	8003ec6 <_ZNKSt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEdeEv>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	781a      	ldrb	r2, [r3, #0]
 8003e3e:	7dbb      	ldrb	r3, [r7, #22]
 8003e40:	4619      	mov	r1, r3
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff ff12 	bl	8003c6c <_ZN7MAX721911max7219SendEhh>
	            }
	            reg++;
 8003e48:	7dbb      	ldrb	r3, [r7, #22]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	75bb      	strb	r3, [r7, #22]
	            digitCount++;
 8003e4e:	7d7b      	ldrb	r3, [r7, #21]
 8003e50:	3301      	adds	r3, #1
 8003e52:	757b      	strb	r3, [r7, #21]
 8003e54:	e00f      	b.n	8003e76 <_ZN7MAX721913refreshScreenENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe8>
	        }
	    } else if (*it == '.') {
 8003e56:	f107 030c 	add.w	r3, r7, #12
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 f833 	bl	8003ec6 <_ZNKSt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEdeEv>
 8003e60:	4603      	mov	r3, r0
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b2e      	cmp	r3, #46	; 0x2e
 8003e66:	bf0c      	ite	eq
 8003e68:	2301      	moveq	r3, #1
 8003e6a:	2300      	movne	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <_ZN7MAX721913refreshScreenENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe8>
	    	dpFlag = true;
 8003e72:	2301      	movs	r3, #1
 8003e74:	75fb      	strb	r3, [r7, #23]
	for (auto it = s.rbegin(); it != s.rend(); ++it) {
 8003e76:	f107 030c 	add.w	r3, r7, #12
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 f816 	bl	8003eac <_ZNSt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEppEv>
 8003e80:	e799      	b.n	8003db6 <_ZN7MAX721913refreshScreenENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x28>
	    }
	}
}
 8003e82:	bf00      	nop
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <_ZStneIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEbRKSt16reverse_iteratorIT_ESE_>:
	      const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline _GLIBCXX17_CONSTEXPR bool
    operator!=(const reverse_iterator<_Iterator>& __x,
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b082      	sub	sp, #8
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	6039      	str	r1, [r7, #0]
	       const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }
 8003e94:	6839      	ldr	r1, [r7, #0]
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f82a 	bl	8003ef0 <_ZSteqIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEbRKSt16reverse_iteratorIT_ESE_>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	f083 0301 	eor.w	r3, r3, #1
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <_ZNSt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEppEv>:
      operator++()
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
	--current;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 f836 	bl	8003f28 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEmmEv>
	return *this;
 8003ebc:	687b      	ldr	r3, [r7, #4]
      }
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <_ZNKSt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEdeEv>:
      operator*() const
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
	_Iterator __tmp = current;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	60fb      	str	r3, [r7, #12]
	return *--__tmp;
 8003ed4:	f107 030c 	add.w	r3, r7, #12
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 f825 	bl	8003f28 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEmmEv>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 f830 	bl	8003f46 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 8003ee6:	4603      	mov	r3, r0
      }
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <_ZSteqIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEbRKSt16reverse_iteratorIT_ESE_>:
    operator==(const reverse_iterator<_Iterator>& __x,
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f82e 	bl	8003f5c <_ZNKSt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4baseEv>
 8003f00:	4603      	mov	r3, r0
 8003f02:	60bb      	str	r3, [r7, #8]
 8003f04:	6838      	ldr	r0, [r7, #0]
 8003f06:	f000 f829 	bl	8003f5c <_ZNKSt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4baseEv>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	f107 020c 	add.w	r2, r7, #12
 8003f12:	f107 0308 	add.w	r3, r7, #8
 8003f16:	4611      	mov	r1, r2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 f82a 	bl	8003f72 <_ZN9__gnu_cxxeqIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEmmEv>:
      { return __normal_iterator(_M_current++); }

      // Bidirectional iterator requirements
      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator--() _GLIBCXX_NOEXCEPT
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
      {
	--_M_current;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	1e5a      	subs	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	601a      	str	r2, [r3, #0]
	return *this;
 8003f3a:	687b      	ldr	r3, [r7, #4]
      }
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr

08003f46 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr

08003f5c <_ZNKSt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4baseEv>:
      base() const
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
      { return current; }
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr

08003f72 <_ZN9__gnu_cxxeqIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003f72:	b590      	push	{r4, r7, lr}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() == __rhs.base(); }
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f810 	bl	8003fa2 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8003f82:	4603      	mov	r3, r0
 8003f84:	681c      	ldr	r4, [r3, #0]
 8003f86:	6838      	ldr	r0, [r7, #0]
 8003f88:	f000 f80b 	bl	8003fa2 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	429c      	cmp	r4, r3
 8003f92:	bf0c      	ite	eq
 8003f94:	2301      	moveq	r3, #1
 8003f96:	2300      	movne	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd90      	pop	{r4, r7, pc}

08003fa2 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr
	...

08003fb8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003fb8:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003fba:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 8003fbe:	480e      	ldr	r0, [pc, #56]	; (8003ff8 <MX_SPI1_Init+0x40>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003fc0:	4a0e      	ldr	r2, [pc, #56]	; (8003ffc <MX_SPI1_Init+0x44>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003fc2:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003fc6:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003fd0:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003fd4:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003fd8:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003fdc:	2210      	movs	r2, #16
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fde:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003fe0:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003fe2:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8003fe6:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003fe8:	f001 fc4e 	bl	8005888 <HAL_SPI_Init>
 8003fec:	b118      	cbz	r0, 8003ff6 <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003fee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003ff2:	f7ff bc45 	b.w	8003880 <Error_Handler>
}
 8003ff6:	bd08      	pop	{r3, pc}
 8003ff8:	20000378 	.word	0x20000378
 8003ffc:	40013000 	.word	0x40013000

08004000 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004000:	b510      	push	{r4, lr}
 8004002:	4604      	mov	r4, r0
 8004004:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004006:	2210      	movs	r2, #16
 8004008:	2100      	movs	r1, #0
 800400a:	a802      	add	r0, sp, #8
 800400c:	f003 fd1c 	bl	8007a48 <memset>
  if(spiHandle->Instance==SPI1)
 8004010:	6822      	ldr	r2, [r4, #0]
 8004012:	4b11      	ldr	r3, [pc, #68]	; (8004058 <HAL_SPI_MspInit+0x58>)
 8004014:	429a      	cmp	r2, r3
 8004016:	d11d      	bne.n	8004054 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004018:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800401c:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800401e:	480f      	ldr	r0, [pc, #60]	; (800405c <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004020:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004024:	619a      	str	r2, [r3, #24]
 8004026:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004028:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 800402a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800402e:	9200      	str	r2, [sp, #0]
 8004030:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004032:	699a      	ldr	r2, [r3, #24]
 8004034:	f042 0204 	orr.w	r2, r2, #4
 8004038:	619a      	str	r2, [r3, #24]
 800403a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800403c:	22a0      	movs	r2, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	9301      	str	r3, [sp, #4]
 8004044:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004046:	2302      	movs	r3, #2
 8004048:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800404c:	2303      	movs	r3, #3
 800404e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004050:	f000 f96e 	bl	8004330 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004054:	b006      	add	sp, #24
 8004056:	bd10      	pop	{r4, pc}
 8004058:	40013000 	.word	0x40013000
 800405c:	40010800 	.word	0x40010800

08004060 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004060:	4b0a      	ldr	r3, [pc, #40]	; (800408c <HAL_MspInit+0x2c>)
{
 8004062:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004064:	699a      	ldr	r2, [r3, #24]
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	619a      	str	r2, [r3, #24]
 800406c:	699a      	ldr	r2, [r3, #24]
 800406e:	f002 0201 	and.w	r2, r2, #1
 8004072:	9200      	str	r2, [sp, #0]
 8004074:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004076:	69da      	ldr	r2, [r3, #28]
 8004078:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800407c:	61da      	str	r2, [r3, #28]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004088:	b002      	add	sp, #8
 800408a:	4770      	bx	lr
 800408c:	40021000 	.word	0x40021000

08004090 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004090:	e7fe      	b.n	8004090 <NMI_Handler>

08004092 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004092:	e7fe      	b.n	8004092 <HardFault_Handler>

08004094 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004094:	e7fe      	b.n	8004094 <MemManage_Handler>

08004096 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004096:	e7fe      	b.n	8004096 <BusFault_Handler>

08004098 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004098:	e7fe      	b.n	8004098 <UsageFault_Handler>

0800409a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800409a:	4770      	bx	lr

0800409c <DebugMon_Handler>:
 800409c:	4770      	bx	lr

0800409e <PendSV_Handler>:
 800409e:	4770      	bx	lr

080040a0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040a0:	f000 b8bc 	b.w	800421c <HAL_IncTick>

080040a4 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80040a4:	4801      	ldr	r0, [pc, #4]	; (80040ac <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80040a6:	f000 bac7 	b.w	8004638 <HAL_PCD_IRQHandler>
 80040aa:	bf00      	nop
 80040ac:	200010a0 	.word	0x200010a0

080040b0 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80040b0:	2001      	movs	r0, #1
 80040b2:	4770      	bx	lr

080040b4 <_kill>:

int _kill(int pid, int sig)
{
 80040b4:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80040b6:	f003 fc57 	bl	8007968 <__errno>
 80040ba:	2316      	movs	r3, #22
 80040bc:	6003      	str	r3, [r0, #0]
  return -1;
}
 80040be:	f04f 30ff 	mov.w	r0, #4294967295
 80040c2:	bd08      	pop	{r3, pc}

080040c4 <_exit>:

void _exit (int status)
{
 80040c4:	b508      	push	{r3, lr}
  errno = EINVAL;
 80040c6:	f003 fc4f 	bl	8007968 <__errno>
 80040ca:	2316      	movs	r3, #22
 80040cc:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80040ce:	e7fe      	b.n	80040ce <_exit+0xa>

080040d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040d0:	b570      	push	{r4, r5, r6, lr}
 80040d2:	460d      	mov	r5, r1
 80040d4:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040d6:	460e      	mov	r6, r1
 80040d8:	1b73      	subs	r3, r6, r5
 80040da:	429c      	cmp	r4, r3
 80040dc:	dc01      	bgt.n	80040e2 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80040de:	4620      	mov	r0, r4
 80040e0:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80040e2:	f3af 8000 	nop.w
 80040e6:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ea:	e7f5      	b.n	80040d8 <_read+0x8>

080040ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040ec:	b570      	push	{r4, r5, r6, lr}
 80040ee:	460d      	mov	r5, r1
 80040f0:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040f2:	460e      	mov	r6, r1
 80040f4:	1b73      	subs	r3, r6, r5
 80040f6:	429c      	cmp	r4, r3
 80040f8:	dc01      	bgt.n	80040fe <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 80040fa:	4620      	mov	r0, r4
 80040fc:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 80040fe:	f816 0b01 	ldrb.w	r0, [r6], #1
 8004102:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004106:	e7f5      	b.n	80040f4 <_write+0x8>

08004108 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8004108:	f04f 30ff 	mov.w	r0, #4294967295
 800410c:	4770      	bx	lr

0800410e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800410e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 8004112:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8004114:	604b      	str	r3, [r1, #4]
}
 8004116:	4770      	bx	lr

08004118 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8004118:	2001      	movs	r0, #1
 800411a:	4770      	bx	lr

0800411c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800411c:	2000      	movs	r0, #0
 800411e:	4770      	bx	lr

08004120 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004120:	4a0b      	ldr	r2, [pc, #44]	; (8004150 <_sbrk+0x30>)
{
 8004122:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8004124:	6811      	ldr	r1, [r2, #0]
{
 8004126:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8004128:	b909      	cbnz	r1, 800412e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800412a:	490a      	ldr	r1, [pc, #40]	; (8004154 <_sbrk+0x34>)
 800412c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800412e:	6810      	ldr	r0, [r2, #0]
 8004130:	4909      	ldr	r1, [pc, #36]	; (8004158 <_sbrk+0x38>)
 8004132:	4c0a      	ldr	r4, [pc, #40]	; (800415c <_sbrk+0x3c>)
 8004134:	4403      	add	r3, r0
 8004136:	1b09      	subs	r1, r1, r4
 8004138:	428b      	cmp	r3, r1
 800413a:	d906      	bls.n	800414a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800413c:	f003 fc14 	bl	8007968 <__errno>
 8004140:	230c      	movs	r3, #12
 8004142:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004144:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8004148:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800414a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800414c:	e7fc      	b.n	8004148 <_sbrk+0x28>
 800414e:	bf00      	nop
 8004150:	200003d0 	.word	0x200003d0
 8004154:	200015c8 	.word	0x200015c8
 8004158:	20005000 	.word	0x20005000
 800415c:	00000400 	.word	0x00000400

08004160 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004160:	4770      	bx	lr
	...

08004164 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004164:	f7ff fffc 	bl	8004160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004168:	480b      	ldr	r0, [pc, #44]	; (8004198 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800416a:	490c      	ldr	r1, [pc, #48]	; (800419c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800416c:	4a0c      	ldr	r2, [pc, #48]	; (80041a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800416e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004170:	e002      	b.n	8004178 <LoopCopyDataInit>

08004172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004176:	3304      	adds	r3, #4

08004178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800417a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800417c:	d3f9      	bcc.n	8004172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800417e:	4a09      	ldr	r2, [pc, #36]	; (80041a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004180:	4c09      	ldr	r4, [pc, #36]	; (80041a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004184:	e001      	b.n	800418a <LoopFillZerobss>

08004186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004188:	3204      	adds	r2, #4

0800418a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800418a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800418c:	d3fb      	bcc.n	8004186 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800418e:	f003 fbf1 	bl	8007974 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004192:	f7ff fa73 	bl	800367c <main>
  bx lr
 8004196:	4770      	bx	lr
  ldr r0, =_sdata
 8004198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800419c:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 80041a0:	0800ca14 	.word	0x0800ca14
  ldr r2, =_sbss
 80041a4:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 80041a8:	200015c4 	.word	0x200015c4

080041ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80041ac:	e7fe      	b.n	80041ac <ADC1_2_IRQHandler>
	...

080041b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041b0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041b2:	4b0e      	ldr	r3, [pc, #56]	; (80041ec <HAL_InitTick+0x3c>)
{
 80041b4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041b6:	7818      	ldrb	r0, [r3, #0]
 80041b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041bc:	fbb3 f3f0 	udiv	r3, r3, r0
 80041c0:	4a0b      	ldr	r2, [pc, #44]	; (80041f0 <HAL_InitTick+0x40>)
 80041c2:	6810      	ldr	r0, [r2, #0]
 80041c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80041c8:	f000 f89e 	bl	8004308 <HAL_SYSTICK_Config>
 80041cc:	4604      	mov	r4, r0
 80041ce:	b958      	cbnz	r0, 80041e8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041d0:	2d0f      	cmp	r5, #15
 80041d2:	d809      	bhi.n	80041e8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041d4:	4602      	mov	r2, r0
 80041d6:	4629      	mov	r1, r5
 80041d8:	f04f 30ff 	mov.w	r0, #4294967295
 80041dc:	f000 f854 	bl	8004288 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041e0:	4620      	mov	r0, r4
 80041e2:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <HAL_InitTick+0x44>)
 80041e4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80041e6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80041e8:	2001      	movs	r0, #1
 80041ea:	e7fc      	b.n	80041e6 <HAL_InitTick+0x36>
 80041ec:	20000004 	.word	0x20000004
 80041f0:	20000000 	.word	0x20000000
 80041f4:	20000008 	.word	0x20000008

080041f8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041f8:	4a07      	ldr	r2, [pc, #28]	; (8004218 <HAL_Init+0x20>)
{
 80041fa:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041fc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041fe:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004200:	f043 0310 	orr.w	r3, r3, #16
 8004204:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004206:	f000 f82d 	bl	8004264 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800420a:	200f      	movs	r0, #15
 800420c:	f7ff ffd0 	bl	80041b0 <HAL_InitTick>
  HAL_MspInit();
 8004210:	f7ff ff26 	bl	8004060 <HAL_MspInit>
}
 8004214:	2000      	movs	r0, #0
 8004216:	bd08      	pop	{r3, pc}
 8004218:	40022000 	.word	0x40022000

0800421c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800421c:	4a03      	ldr	r2, [pc, #12]	; (800422c <HAL_IncTick+0x10>)
 800421e:	4b04      	ldr	r3, [pc, #16]	; (8004230 <HAL_IncTick+0x14>)
 8004220:	6811      	ldr	r1, [r2, #0]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	440b      	add	r3, r1
 8004226:	6013      	str	r3, [r2, #0]
}
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	200003d4 	.word	0x200003d4
 8004230:	20000004 	.word	0x20000004

08004234 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004234:	4b01      	ldr	r3, [pc, #4]	; (800423c <HAL_GetTick+0x8>)
 8004236:	6818      	ldr	r0, [r3, #0]
}
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	200003d4 	.word	0x200003d4

08004240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004240:	b538      	push	{r3, r4, r5, lr}
 8004242:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004244:	f7ff fff6 	bl	8004234 <HAL_GetTick>
 8004248:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800424a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800424c:	bf1e      	ittt	ne
 800424e:	4b04      	ldrne	r3, [pc, #16]	; (8004260 <HAL_Delay+0x20>)
 8004250:	781b      	ldrbne	r3, [r3, #0]
 8004252:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004254:	f7ff ffee 	bl	8004234 <HAL_GetTick>
 8004258:	1b43      	subs	r3, r0, r5
 800425a:	42a3      	cmp	r3, r4
 800425c:	d3fa      	bcc.n	8004254 <HAL_Delay+0x14>
  {
  }
}
 800425e:	bd38      	pop	{r3, r4, r5, pc}
 8004260:	20000004 	.word	0x20000004

08004264 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004264:	4907      	ldr	r1, [pc, #28]	; (8004284 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004266:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004268:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800426a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800426e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004272:	0412      	lsls	r2, r2, #16
 8004274:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800427c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004280:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004282:	4770      	bx	lr
 8004284:	e000ed00 	.word	0xe000ed00

08004288 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004288:	4b16      	ldr	r3, [pc, #88]	; (80042e4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800428a:	b530      	push	{r4, r5, lr}
 800428c:	68dc      	ldr	r4, [r3, #12]
 800428e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004292:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004296:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004298:	2b04      	cmp	r3, #4
 800429a:	bf28      	it	cs
 800429c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800429e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042a0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042a4:	bf98      	it	ls
 80042a6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042a8:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042ac:	bf88      	it	hi
 80042ae:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b0:	ea21 0303 	bic.w	r3, r1, r3
 80042b4:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042b6:	fa05 f404 	lsl.w	r4, r5, r4
 80042ba:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80042be:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042c0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042c4:	bfac      	ite	ge
 80042c6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ca:	4a07      	ldrlt	r2, [pc, #28]	; (80042e8 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042cc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	bfab      	itete	ge
 80042d4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042dc:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e0:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80042e2:	bd30      	pop	{r4, r5, pc}
 80042e4:	e000ed00 	.word	0xe000ed00
 80042e8:	e000ed14 	.word	0xe000ed14

080042ec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80042ec:	2800      	cmp	r0, #0
 80042ee:	db08      	blt.n	8004302 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042f0:	2301      	movs	r3, #1
 80042f2:	0942      	lsrs	r2, r0, #5
 80042f4:	f000 001f 	and.w	r0, r0, #31
 80042f8:	fa03 f000 	lsl.w	r0, r3, r0
 80042fc:	4b01      	ldr	r3, [pc, #4]	; (8004304 <HAL_NVIC_EnableIRQ+0x18>)
 80042fe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004302:	4770      	bx	lr
 8004304:	e000e100 	.word	0xe000e100

08004308 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004308:	3801      	subs	r0, #1
 800430a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800430e:	d20b      	bcs.n	8004328 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004310:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004314:	21f0      	movs	r1, #240	; 0xf0
 8004316:	4a05      	ldr	r2, [pc, #20]	; (800432c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004318:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800431a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800431e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004320:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004322:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004324:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004326:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004328:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800432a:	4770      	bx	lr
 800432c:	e000ed00 	.word	0xe000ed00

08004330 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004334:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8004336:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004338:	4f64      	ldr	r7, [pc, #400]	; (80044cc <HAL_GPIO_Init+0x19c>)
 800433a:	4b65      	ldr	r3, [pc, #404]	; (80044d0 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 800433c:	f8df c194 	ldr.w	ip, [pc, #404]	; 80044d4 <HAL_GPIO_Init+0x1a4>
 8004340:	f8df e194 	ldr.w	lr, [pc, #404]	; 80044d8 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004344:	680d      	ldr	r5, [r1, #0]
 8004346:	fa35 f406 	lsrs.w	r4, r5, r6
 800434a:	d102      	bne.n	8004352 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 800434c:	b003      	add	sp, #12
 800434e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8004352:	f04f 0801 	mov.w	r8, #1
 8004356:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800435a:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 800435e:	ea38 0505 	bics.w	r5, r8, r5
 8004362:	d17b      	bne.n	800445c <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8004364:	684d      	ldr	r5, [r1, #4]
 8004366:	2d03      	cmp	r5, #3
 8004368:	d807      	bhi.n	800437a <HAL_GPIO_Init+0x4a>
 800436a:	3d01      	subs	r5, #1
 800436c:	2d02      	cmp	r5, #2
 800436e:	f200 8088 	bhi.w	8004482 <HAL_GPIO_Init+0x152>
 8004372:	e8df f005 	tbb	[pc, r5]
 8004376:	9b96      	.short	0x9b96
 8004378:	a1          	.byte	0xa1
 8004379:	00          	.byte	0x00
 800437a:	2d12      	cmp	r5, #18
 800437c:	f000 8099 	beq.w	80044b2 <HAL_GPIO_Init+0x182>
 8004380:	d86e      	bhi.n	8004460 <HAL_GPIO_Init+0x130>
 8004382:	2d11      	cmp	r5, #17
 8004384:	f000 808f 	beq.w	80044a6 <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004388:	2cff      	cmp	r4, #255	; 0xff
 800438a:	bf98      	it	ls
 800438c:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800438e:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004392:	bf88      	it	hi
 8004394:	f100 0a04 	addhi.w	sl, r0, #4
 8004398:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800439c:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80043a0:	bf88      	it	hi
 80043a2:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80043a4:	fa09 fb05 	lsl.w	fp, r9, r5
 80043a8:	ea28 080b 	bic.w	r8, r8, fp
 80043ac:	fa02 f505 	lsl.w	r5, r2, r5
 80043b0:	ea48 0505 	orr.w	r5, r8, r5
 80043b4:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043b8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80043bc:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80043c0:	d04c      	beq.n	800445c <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80043c2:	69bd      	ldr	r5, [r7, #24]
 80043c4:	f026 0803 	bic.w	r8, r6, #3
 80043c8:	f045 0501 	orr.w	r5, r5, #1
 80043cc:	61bd      	str	r5, [r7, #24]
 80043ce:	69bd      	ldr	r5, [r7, #24]
 80043d0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80043d4:	f005 0501 	and.w	r5, r5, #1
 80043d8:	9501      	str	r5, [sp, #4]
 80043da:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80043de:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80043e2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80043e4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80043e8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80043ec:	fa09 f90b 	lsl.w	r9, r9, fp
 80043f0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80043f4:	4d39      	ldr	r5, [pc, #228]	; (80044dc <HAL_GPIO_Init+0x1ac>)
 80043f6:	42a8      	cmp	r0, r5
 80043f8:	d062      	beq.n	80044c0 <HAL_GPIO_Init+0x190>
 80043fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80043fe:	42a8      	cmp	r0, r5
 8004400:	d060      	beq.n	80044c4 <HAL_GPIO_Init+0x194>
 8004402:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004406:	42a8      	cmp	r0, r5
 8004408:	d05e      	beq.n	80044c8 <HAL_GPIO_Init+0x198>
 800440a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800440e:	42a8      	cmp	r0, r5
 8004410:	bf0c      	ite	eq
 8004412:	2503      	moveq	r5, #3
 8004414:	2504      	movne	r5, #4
 8004416:	fa05 f50b 	lsl.w	r5, r5, fp
 800441a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800441e:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8004422:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004424:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8004428:	bf14      	ite	ne
 800442a:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800442c:	43a5      	biceq	r5, r4
 800442e:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8004430:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004432:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8004436:	bf14      	ite	ne
 8004438:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800443a:	43a5      	biceq	r5, r4
 800443c:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 800443e:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004440:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8004444:	bf14      	ite	ne
 8004446:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004448:	43a5      	biceq	r5, r4
 800444a:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 800444c:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800444e:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8004452:	bf14      	ite	ne
 8004454:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004456:	ea25 0404 	biceq.w	r4, r5, r4
 800445a:	601c      	str	r4, [r3, #0]
	position++;
 800445c:	3601      	adds	r6, #1
 800445e:	e771      	b.n	8004344 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8004460:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80044e0 <HAL_GPIO_Init+0x1b0>
 8004464:	454d      	cmp	r5, r9
 8004466:	d00c      	beq.n	8004482 <HAL_GPIO_Init+0x152>
 8004468:	d817      	bhi.n	800449a <HAL_GPIO_Init+0x16a>
 800446a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800446e:	454d      	cmp	r5, r9
 8004470:	d007      	beq.n	8004482 <HAL_GPIO_Init+0x152>
 8004472:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8004476:	454d      	cmp	r5, r9
 8004478:	d003      	beq.n	8004482 <HAL_GPIO_Init+0x152>
 800447a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800447e:	454d      	cmp	r5, r9
 8004480:	d182      	bne.n	8004388 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004482:	688a      	ldr	r2, [r1, #8]
 8004484:	b1d2      	cbz	r2, 80044bc <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004486:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8004488:	bf08      	it	eq
 800448a:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800448e:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8004492:	bf18      	it	ne
 8004494:	f8c0 8014 	strne.w	r8, [r0, #20]
 8004498:	e776      	b.n	8004388 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 800449a:	4565      	cmp	r5, ip
 800449c:	d0f1      	beq.n	8004482 <HAL_GPIO_Init+0x152>
 800449e:	4575      	cmp	r5, lr
 80044a0:	e7ee      	b.n	8004480 <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80044a2:	68ca      	ldr	r2, [r1, #12]
          break;
 80044a4:	e770      	b.n	8004388 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80044a6:	68ca      	ldr	r2, [r1, #12]
 80044a8:	3204      	adds	r2, #4
          break;
 80044aa:	e76d      	b.n	8004388 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80044ac:	68ca      	ldr	r2, [r1, #12]
 80044ae:	3208      	adds	r2, #8
          break;
 80044b0:	e76a      	b.n	8004388 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80044b2:	68ca      	ldr	r2, [r1, #12]
 80044b4:	320c      	adds	r2, #12
          break;
 80044b6:	e767      	b.n	8004388 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80044b8:	2200      	movs	r2, #0
 80044ba:	e765      	b.n	8004388 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80044bc:	2204      	movs	r2, #4
 80044be:	e763      	b.n	8004388 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80044c0:	2500      	movs	r5, #0
 80044c2:	e7a8      	b.n	8004416 <HAL_GPIO_Init+0xe6>
 80044c4:	2501      	movs	r5, #1
 80044c6:	e7a6      	b.n	8004416 <HAL_GPIO_Init+0xe6>
 80044c8:	2502      	movs	r5, #2
 80044ca:	e7a4      	b.n	8004416 <HAL_GPIO_Init+0xe6>
 80044cc:	40021000 	.word	0x40021000
 80044d0:	40010400 	.word	0x40010400
 80044d4:	10310000 	.word	0x10310000
 80044d8:	10320000 	.word	0x10320000
 80044dc:	40010800 	.word	0x40010800
 80044e0:	10220000 	.word	0x10220000

080044e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044e4:	b10a      	cbz	r2, 80044ea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044e6:	6101      	str	r1, [r0, #16]
  }
}
 80044e8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044ea:	0409      	lsls	r1, r1, #16
 80044ec:	e7fb      	b.n	80044e6 <HAL_GPIO_WritePin+0x2>

080044ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044ee:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044f0:	4604      	mov	r4, r0
{
 80044f2:	b087      	sub	sp, #28
  if (hpcd == NULL)
 80044f4:	b310      	cbz	r0, 800453c <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044f6:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80044fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80044fe:	b91b      	cbnz	r3, 8004508 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004500:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004504:	f002 fdd4 	bl	80070b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004508:	2303      	movs	r3, #3
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800450a:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800450c:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 800450e:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8004512:	f855 0b10 	ldr.w	r0, [r5], #16
 8004516:	f001 fad3 	bl	8005ac0 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800451a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800451c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800451e:	682b      	ldr	r3, [r5, #0]
 8004520:	1d27      	adds	r7, r4, #4
 8004522:	6033      	str	r3, [r6, #0]
 8004524:	4626      	mov	r6, r4
 8004526:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800452a:	f856 0b10 	ldr.w	r0, [r6], #16
 800452e:	f001 fab7 	bl	8005aa0 <USB_CoreInit>
 8004532:	4605      	mov	r5, r0
 8004534:	b120      	cbz	r0, 8004540 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004536:	2302      	movs	r3, #2
 8004538:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 800453c:	2501      	movs	r5, #1
 800453e:	e04b      	b.n	80045d8 <HAL_PCD_Init+0xea>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004540:	4601      	mov	r1, r0
 8004542:	6820      	ldr	r0, [r4, #0]
 8004544:	f001 fac6 	bl	8005ad4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004548:	4629      	mov	r1, r5
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800454a:	f04f 0e01 	mov.w	lr, #1
 800454e:	2528      	movs	r5, #40	; 0x28
    hpcd->IN_ep[i].num = i;
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004550:	460a      	mov	r2, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004552:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8004556:	b2c8      	uxtb	r0, r1
 8004558:	4584      	cmp	ip, r0
 800455a:	f101 0101 	add.w	r1, r1, #1
 800455e:	d81b      	bhi.n	8004598 <HAL_PCD_Init+0xaa>
 8004560:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004562:	2528      	movs	r5, #40	; 0x28
 8004564:	4619      	mov	r1, r3
 8004566:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004568:	4584      	cmp	ip, r0
 800456a:	f103 0301 	add.w	r3, r3, #1
 800456e:	d81f      	bhi.n	80045b0 <HAL_PCD_Init+0xc2>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004570:	46ec      	mov	ip, sp
 8004572:	4635      	mov	r5, r6
 8004574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004576:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800457a:	682b      	ldr	r3, [r5, #0]
 800457c:	f8cc 3000 	str.w	r3, [ip]
 8004580:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8004584:	6820      	ldr	r0, [r4, #0]
 8004586:	f001 faa7 	bl	8005ad8 <USB_DevInit>
 800458a:	2301      	movs	r3, #1
 800458c:	4605      	mov	r5, r0
 800458e:	b1e0      	cbz	r0, 80045ca <HAL_PCD_Init+0xdc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004590:	2202      	movs	r2, #2
 8004592:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8004596:	e7d1      	b.n	800453c <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 8004598:	fb05 4300 	mla	r3, r5, r0, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 800459c:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 80045a0:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 80045a4:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80045a8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 80045ac:	641a      	str	r2, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ae:	e7d2      	b.n	8004556 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 80045b0:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045b4:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 80045b8:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 80045bc:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045c0:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045c4:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045c8:	e7cd      	b.n	8004566 <HAL_PCD_Init+0x78>
  }

  hpcd->USB_Address = 0U;
 80045ca:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);
 80045ce:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80045d0:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80045d4:	f001 fd38 	bl	8006048 <USB_DevDisconnect>

  return HAL_OK;
}
 80045d8:	4628      	mov	r0, r5
 80045da:	b007      	add	sp, #28
 80045dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80045de:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80045e0:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 80045e4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d010      	beq.n	800460c <HAL_PCD_Start+0x2e>
 80045ea:	2501      	movs	r5, #1
 80045ec:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80045f0:	6800      	ldr	r0, [r0, #0]
 80045f2:	f001 fa5c 	bl	8005aae <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80045f6:	4629      	mov	r1, r5
 80045f8:	4620      	mov	r0, r4
 80045fa:	f002 fe64 	bl	80072c6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80045fe:	6820      	ldr	r0, [r4, #0]
 8004600:	f001 fd20 	bl	8006044 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004604:	2000      	movs	r0, #0
 8004606:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 800460a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800460c:	2002      	movs	r0, #2
 800460e:	e7fc      	b.n	800460a <HAL_PCD_Start+0x2c>

08004610 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004610:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8004612:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 8004616:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004618:	2a01      	cmp	r2, #1
 800461a:	d00b      	beq.n	8004634 <HAL_PCD_SetAddress+0x24>
 800461c:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 800461e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8004622:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004626:	6800      	ldr	r0, [r0, #0]
 8004628:	f001 fd06 	bl	8006038 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800462c:	2000      	movs	r0, #0
 800462e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8004632:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8004634:	2002      	movs	r0, #2
 8004636:	e7fc      	b.n	8004632 <HAL_PCD_SetAddress+0x22>

08004638 <HAL_PCD_IRQHandler>:
{
 8004638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800463c:	4604      	mov	r4, r0
 800463e:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004640:	6800      	ldr	r0, [r0, #0]
 8004642:	f001 fd03 	bl	800604c <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004646:	f410 4500 	ands.w	r5, r0, #32768	; 0x8000
 800464a:	f000 8428 	beq.w	8004e9e <HAL_PCD_IRQHandler+0x866>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800464e:	f8df 9320 	ldr.w	r9, [pc, #800]	; 8004970 <HAL_PCD_IRQHandler+0x338>
 8004652:	f8df 8320 	ldr.w	r8, [pc, #800]	; 8004974 <HAL_PCD_IRQHandler+0x33c>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004656:	6820      	ldr	r0, [r4, #0]
 8004658:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800465c:	041f      	lsls	r7, r3, #16
 800465e:	d402      	bmi.n	8004666 <HAL_PCD_IRQHandler+0x2e>
}
 8004660:	b005      	add	sp, #20
 8004662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8004666:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 800466a:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 800466c:	f016 060f 	ands.w	r6, r6, #15
 8004670:	f040 80c6 	bne.w	8004800 <HAL_PCD_IRQHandler+0x1c8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004674:	f011 0110 	ands.w	r1, r1, #16
 8004678:	d12b      	bne.n	80046d2 <HAL_PCD_IRQHandler+0x9a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800467a:	8803      	ldrh	r3, [r0, #0]
 800467c:	b29b      	uxth	r3, r3
 800467e:	ea03 0309 	and.w	r3, r3, r9
 8004682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004686:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004688:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800468c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8004690:	b29b      	uxth	r3, r3
 8004692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004696:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800469a:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 800469e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80046a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046a4:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80046a6:	4413      	add	r3, r2
 80046a8:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80046aa:	4620      	mov	r0, r4
 80046ac:	f002 fd2f 	bl	800710e <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80046b0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0ce      	beq.n	8004656 <HAL_PCD_IRQHandler+0x1e>
 80046b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80046ba:	2a00      	cmp	r2, #0
 80046bc:	d1cb      	bne.n	8004656 <HAL_PCD_IRQHandler+0x1e>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80046be:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80046c2:	6821      	ldr	r1, [r4, #0]
 80046c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c8:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80046cc:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 80046d0:	e7c1      	b.n	8004656 <HAL_PCD_IRQHandler+0x1e>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80046d2:	8805      	ldrh	r5, [r0, #0]
 80046d4:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80046d6:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 80046da:	d021      	beq.n	8004720 <HAL_PCD_IRQHandler+0xe8>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80046dc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80046e0:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046ea:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80046ee:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80046f2:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 80046f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80046fa:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80046fe:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8004702:	f001 fef1 	bl	80064e8 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004706:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8004708:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800470a:	8813      	ldrh	r3, [r2, #0]
 800470c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004710:	051b      	lsls	r3, r3, #20
 8004712:	0d1b      	lsrs	r3, r3, #20
 8004714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004718:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800471a:	f002 fce9 	bl	80070f0 <HAL_PCD_SetupStageCallback>
 800471e:	e79a      	b.n	8004656 <HAL_PCD_IRQHandler+0x1e>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004720:	0419      	lsls	r1, r3, #16
 8004722:	d598      	bpl.n	8004656 <HAL_PCD_IRQHandler+0x1e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004724:	8803      	ldrh	r3, [r0, #0]
 8004726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472a:	051b      	lsls	r3, r3, #20
 800472c:	0d1b      	lsrs	r3, r3, #20
 800472e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004732:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004734:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004738:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 800473c:	b29b      	uxth	r3, r3
 800473e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004742:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004746:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 800474a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800474e:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004752:	b18b      	cbz	r3, 8004778 <HAL_PCD_IRQHandler+0x140>
 8004754:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8004758:	b171      	cbz	r1, 8004778 <HAL_PCD_IRQHandler+0x140>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800475a:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 800475e:	f001 fec3 	bl	80064e8 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8004762:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004766:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800476a:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 800476c:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800476e:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8004770:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004774:	f002 fcc2 	bl	80070fc <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004778:	6821      	ldr	r1, [r4, #0]
 800477a:	880a      	ldrh	r2, [r1, #0]
 800477c:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800477e:	0512      	lsls	r2, r2, #20
 8004780:	f53f af69 	bmi.w	8004656 <HAL_PCD_IRQHandler+0x1e>
 8004784:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004788:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800478c:	f43f af63 	beq.w	8004656 <HAL_PCD_IRQHandler+0x1e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004790:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8004794:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8004798:	b29b      	uxth	r3, r3
 800479a:	5ac2      	ldrh	r2, [r0, r3]
 800479c:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 80047a0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80047a4:	2d3e      	cmp	r5, #62	; 0x3e
 80047a6:	52c2      	strh	r2, [r0, r3]
 80047a8:	d90c      	bls.n	80047c4 <HAL_PCD_IRQHandler+0x18c>
 80047aa:	5ac2      	ldrh	r2, [r0, r3]
 80047ac:	096e      	lsrs	r6, r5, #5
 80047ae:	06ef      	lsls	r7, r5, #27
 80047b0:	bf08      	it	eq
 80047b2:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80047b6:	b292      	uxth	r2, r2
 80047b8:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80047bc:	ea42 0208 	orr.w	r2, r2, r8
 80047c0:	b292      	uxth	r2, r2
 80047c2:	e004      	b.n	80047ce <HAL_PCD_IRQHandler+0x196>
 80047c4:	b99d      	cbnz	r5, 80047ee <HAL_PCD_IRQHandler+0x1b6>
 80047c6:	5ac2      	ldrh	r2, [r0, r3]
 80047c8:	b292      	uxth	r2, r2
 80047ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047ce:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80047d0:	880b      	ldrh	r3, [r1, #0]
 80047d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047da:	041b      	lsls	r3, r3, #16
 80047dc:	0c1b      	lsrs	r3, r3, #16
 80047de:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80047e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ea:	800b      	strh	r3, [r1, #0]
 80047ec:	e733      	b.n	8004656 <HAL_PCD_IRQHandler+0x1e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80047ee:	5ac2      	ldrh	r2, [r0, r3]
 80047f0:	086e      	lsrs	r6, r5, #1
 80047f2:	07ed      	lsls	r5, r5, #31
 80047f4:	bf48      	it	mi
 80047f6:	3601      	addmi	r6, #1
 80047f8:	b292      	uxth	r2, r2
 80047fa:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80047fe:	e7df      	b.n	80047c0 <HAL_PCD_IRQHandler+0x188>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004800:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004804:	041a      	lsls	r2, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004806:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004808:	f140 80f4 	bpl.w	80049f4 <HAL_PCD_IRQHandler+0x3bc>
        if (ep->doublebuffer == 0U)
 800480c:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800480e:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8004812:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800481a:	051b      	lsls	r3, r3, #20
 800481c:	0d1b      	lsrs	r3, r3, #20
 800481e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004822:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8004826:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 800482a:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 800482e:	b9b3      	cbnz	r3, 800485e <HAL_PCD_IRQHandler+0x226>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004830:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004834:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8004838:	b29b      	uxth	r3, r3
 800483a:	3306      	adds	r3, #6
 800483c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004840:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8004844:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8004848:	2d00      	cmp	r5, #0
 800484a:	f000 80b7 	beq.w	80049bc <HAL_PCD_IRQHandler+0x384>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800484e:	462b      	mov	r3, r5
 8004850:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004854:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8004858:	f001 fe46 	bl	80064e8 <USB_ReadPMA>
 800485c:	e0ae      	b.n	80049bc <HAL_PCD_IRQHandler+0x384>
          if (ep->type == EP_TYPE_BULK)
 800485e:	f891 216b 	ldrb.w	r2, [r1, #363]	; 0x16b
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004862:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
          if (ep->type == EP_TYPE_BULK)
 8004866:	2a02      	cmp	r2, #2
 8004868:	f040 8086 	bne.w	8004978 <HAL_PCD_IRQHandler+0x340>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800486c:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004870:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000

    if (ep->xfer_len >= count)
 8004874:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004878:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800487c:	b2ad      	uxth	r5, r5
 800487e:	f007 0e40 	and.w	lr, r7, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004882:	d03b      	beq.n	80048fc <HAL_PCD_IRQHandler+0x2c4>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004884:	44ab      	add	fp, r5
 8004886:	f10b 0b02 	add.w	fp, fp, #2
 800488a:	f83c 501b 	ldrh.w	r5, [ip, fp, lsl #1]
 800488e:	f3c5 0509 	ubfx	r5, r5, #0, #10
    if (ep->xfer_len >= count)
 8004892:	4295      	cmp	r5, r2
 8004894:	d913      	bls.n	80048be <HAL_PCD_IRQHandler+0x286>
 8004896:	2200      	movs	r2, #0
 8004898:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800489c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80048a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80048a8:	0412      	lsls	r2, r2, #16
 80048aa:	0c12      	lsrs	r2, r2, #16
 80048ac:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 80048b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048b8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 80048bc:	e004      	b.n	80048c8 <HAL_PCD_IRQHandler+0x290>
      ep->xfer_len -= count;
 80048be:	1b52      	subs	r2, r2, r5
 80048c0:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80048c4:	2a00      	cmp	r2, #0
 80048c6:	d0e9      	beq.n	800489c <HAL_PCD_IRQHandler+0x264>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80048c8:	f1be 0f00 	cmp.w	lr, #0
 80048cc:	d00d      	beq.n	80048ea <HAL_PCD_IRQHandler+0x2b2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80048ce:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80048d2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80048d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80048da:	0412      	lsls	r2, r2, #16
 80048dc:	0c12      	lsrs	r2, r2, #16
 80048de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048e2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80048e6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 80048ea:	2d00      	cmp	r5, #0
 80048ec:	d066      	beq.n	80049bc <HAL_PCD_IRQHandler+0x384>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80048ee:	2128      	movs	r1, #40	; 0x28
 80048f0:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80048f4:	462b      	mov	r3, r5
 80048f6:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80048fa:	e7ab      	b.n	8004854 <HAL_PCD_IRQHandler+0x21c>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80048fc:	445d      	add	r5, fp
 80048fe:	3506      	adds	r5, #6
 8004900:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 8004904:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8004908:	4295      	cmp	r5, r2
 800490a:	d912      	bls.n	8004932 <HAL_PCD_IRQHandler+0x2fa>
 800490c:	f8c1 a180 	str.w	sl, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004910:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004914:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004918:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800491c:	0412      	lsls	r2, r2, #16
 800491e:	0c12      	lsrs	r2, r2, #16
 8004920:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8004924:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004928:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800492c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8004930:	e004      	b.n	800493c <HAL_PCD_IRQHandler+0x304>
      ep->xfer_len -= count;
 8004932:	1b52      	subs	r2, r2, r5
 8004934:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8004938:	2a00      	cmp	r2, #0
 800493a:	d0e9      	beq.n	8004910 <HAL_PCD_IRQHandler+0x2d8>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800493c:	f1be 0f00 	cmp.w	lr, #0
 8004940:	d10d      	bne.n	800495e <HAL_PCD_IRQHandler+0x326>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004942:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004946:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800494a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800494e:	0412      	lsls	r2, r2, #16
 8004950:	0c12      	lsrs	r2, r2, #16
 8004952:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004956:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800495a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 800495e:	b36d      	cbz	r5, 80049bc <HAL_PCD_IRQHandler+0x384>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004960:	2128      	movs	r1, #40	; 0x28
 8004962:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004966:	462b      	mov	r3, r5
 8004968:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 800496c:	e772      	b.n	8004854 <HAL_PCD_IRQHandler+0x21c>
 800496e:	bf00      	nop
 8004970:	ffff8f0f 	.word	0xffff8f0f
 8004974:	ffff8000 	.word	0xffff8000
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004978:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800497c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004980:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004984:	0412      	lsls	r2, r2, #16
 8004986:	0c12      	lsrs	r2, r2, #16
 8004988:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800498c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004990:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004994:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 8004998:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800499c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80049a0:	ea4f 02c3 	mov.w	r2, r3, lsl #3
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049a4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80049a8:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80049aa:	d056      	beq.n	8004a5a <HAL_PCD_IRQHandler+0x422>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049ac:	3302      	adds	r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 80049b4:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 80049b8:	2d00      	cmp	r5, #0
 80049ba:	d19b      	bne.n	80048f4 <HAL_PCD_IRQHandler+0x2bc>
        ep->xfer_count += count;
 80049bc:	2128      	movs	r1, #40	; 0x28
 80049be:	4371      	muls	r1, r6
 80049c0:	1863      	adds	r3, r4, r1
 80049c2:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 80049c6:	442a      	add	r2, r5
 80049c8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 80049cc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80049d0:	442a      	add	r2, r5
 80049d2:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80049d6:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80049da:	b11a      	cbz	r2, 80049e4 <HAL_PCD_IRQHandler+0x3ac>
 80049dc:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80049e0:	429d      	cmp	r5, r3
 80049e2:	d243      	bcs.n	8004a6c <HAL_PCD_IRQHandler+0x434>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80049e4:	2328      	movs	r3, #40	; 0x28
 80049e6:	fb03 4306 	mla	r3, r3, r6, r4
 80049ea:	4620      	mov	r0, r4
 80049ec:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 80049f0:	f002 fb84 	bl	80070fc <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80049f4:	063b      	lsls	r3, r7, #24
 80049f6:	f57f ae2e 	bpl.w	8004656 <HAL_PCD_IRQHandler+0x1e>
 80049fa:	f04f 0c28 	mov.w	ip, #40	; 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80049fe:	6820      	ldr	r0, [r4, #0]
 8004a00:	fb0c 4506 	mla	r5, ip, r6, r4
 8004a04:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	ea03 0309 	and.w	r3, r3, r9
 8004a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a12:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8004a16:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d150      	bne.n	8004ac0 <HAL_PCD_IRQHandler+0x488>
          ep->xfer_len = 0U;
 8004a1e:	2100      	movs	r1, #0
          if (ep->doublebuffer != 0U)
 8004a20:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
          ep->xfer_len = 0U;
 8004a24:	6429      	str	r1, [r5, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8004a26:	b393      	cbz	r3, 8004a8e <HAL_PCD_IRQHandler+0x456>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004a28:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8004a2c:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8004a30:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004a34:	d031      	beq.n	8004a9a <HAL_PCD_IRQHandler+0x462>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a36:	bb02      	cbnz	r2, 8004a7a <HAL_PCD_IRQHandler+0x442>
 8004a38:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004a3c:	011b      	lsls	r3, r3, #4
 8004a3e:	b292      	uxth	r2, r2
 8004a40:	f200 4004 	addw	r0, r0, #1028	; 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a44:	4410      	add	r0, r2
 8004a46:	5a1a      	ldrh	r2, [r3, r0]
 8004a48:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004a4c:	521a      	strh	r2, [r3, r0]
 8004a4e:	5a1a      	ldrh	r2, [r3, r0]
 8004a50:	b292      	uxth	r2, r2
 8004a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a56:	521a      	strh	r2, [r3, r0]
 8004a58:	e019      	b.n	8004a8e <HAL_PCD_IRQHandler+0x456>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a5a:	3306      	adds	r3, #6
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8004a62:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8004a66:	2d00      	cmp	r5, #0
 8004a68:	d0a8      	beq.n	80049bc <HAL_PCD_IRQHandler+0x384>
 8004a6a:	e77c      	b.n	8004966 <HAL_PCD_IRQHandler+0x32e>
        ep = &hpcd->OUT_ep[epindex];
 8004a6c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a70:	6820      	ldr	r0, [r4, #0]
 8004a72:	4421      	add	r1, r4
 8004a74:	f001 fb00 	bl	8006078 <USB_EPStartXfer>
 8004a78:	e7bc      	b.n	80049f4 <HAL_PCD_IRQHandler+0x3bc>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a7a:	2a01      	cmp	r2, #1
 8004a7c:	d107      	bne.n	8004a8e <HAL_PCD_IRQHandler+0x456>
 8004a7e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004a82:	f200 4004 	addw	r0, r0, #1028	; 0x404
 8004a86:	b292      	uxth	r2, r2
 8004a88:	011b      	lsls	r3, r3, #4
 8004a8a:	4410      	add	r0, r2
 8004a8c:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a8e:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a92:	4620      	mov	r0, r4
 8004a94:	f002 fb3b 	bl	800710e <HAL_PCD_DataInStageCallback>
 8004a98:	e5dd      	b.n	8004656 <HAL_PCD_IRQHandler+0x1e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a9a:	b932      	cbnz	r2, 8004aaa <HAL_PCD_IRQHandler+0x472>
 8004a9c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004aa0:	011b      	lsls	r3, r3, #4
 8004aa2:	b292      	uxth	r2, r2
 8004aa4:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8004aa8:	e7cc      	b.n	8004a44 <HAL_PCD_IRQHandler+0x40c>
 8004aaa:	2a01      	cmp	r2, #1
 8004aac:	d1ef      	bne.n	8004a8e <HAL_PCD_IRQHandler+0x456>
 8004aae:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004ab2:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8004ab6:	b292      	uxth	r2, r2
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	4410      	add	r0, r2
 8004abc:	521f      	strh	r7, [r3, r0]
 8004abe:	e7e6      	b.n	8004a8e <HAL_PCD_IRQHandler+0x456>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004ac0:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004ac4:	f417 7280 	ands.w	r2, r7, #256	; 0x100
            if (ep->xfer_len > TxPctSize)
 8004ac8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004aca:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8004ace:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004ad2:	d11c      	bne.n	8004b0e <HAL_PCD_IRQHandler+0x4d6>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004ad4:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8004ad8:	b2bf      	uxth	r7, r7
 8004ada:	44ba      	add	sl, r7
 8004adc:	f10a 0a02 	add.w	sl, sl, #2
 8004ae0:	f83e 701a 	ldrh.w	r7, [lr, sl, lsl #1]
            if (ep->xfer_len > TxPctSize)
 8004ae4:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004ae8:	429f      	cmp	r7, r3
 8004aea:	d301      	bcc.n	8004af0 <HAL_PCD_IRQHandler+0x4b8>
 8004aec:	642a      	str	r2, [r5, #64]	; 0x40
 8004aee:	e7d0      	b.n	8004a92 <HAL_PCD_IRQHandler+0x45a>
              ep->xfer_len -= TxPctSize;
 8004af0:	1bdb      	subs	r3, r3, r7
 8004af2:	642b      	str	r3, [r5, #64]	; 0x40
              ep->xfer_buff += TxPctSize;
 8004af4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 8004af6:	fb06 cc0c 	mla	ip, r6, ip, ip
              ep->xfer_buff += TxPctSize;
 8004afa:	443b      	add	r3, r7
 8004afc:	63eb      	str	r3, [r5, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8004afe:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b00:	eb04 010c 	add.w	r1, r4, ip
              ep->xfer_count += TxPctSize;
 8004b04:	443b      	add	r3, r7
 8004b06:	646b      	str	r3, [r5, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b08:	f001 fab6 	bl	8006078 <USB_EPStartXfer>
 8004b0c:	e5a3      	b.n	8004656 <HAL_PCD_IRQHandler+0x1e>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b0e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b12:	f017 0c40 	ands.w	ip, r7, #64	; 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b16:	b292      	uxth	r2, r2
 8004b18:	4452      	add	r2, sl
 8004b1a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b1e:	f000 80dc 	beq.w	8004cda <HAL_PCD_IRQHandler+0x6a2>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b22:	3202      	adds	r2, #2
 8004b24:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8004b28:	f04f 0c28 	mov.w	ip, #40	; 0x28

    if (ep->xfer_len > TxPctSize)
 8004b2c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004b30:	429a      	cmp	r2, r3
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 8004b32:	bf28      	it	cs
 8004b34:	2300      	movcs	r3, #0
 8004b36:	fb0c 4c06 	mla	ip, ip, r6, r4
      ep->xfer_len -= TxPctSize;
 8004b3a:	bf38      	it	cc
 8004b3c:	1a9b      	subcc	r3, r3, r2
 8004b3e:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004b42:	b2bf      	uxth	r7, r7
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d14d      	bne.n	8004be4 <HAL_PCD_IRQHandler+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b48:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8004b4c:	2a00      	cmp	r2, #0
 8004b4e:	d136      	bne.n	8004bbe <HAL_PCD_IRQHandler+0x586>
 8004b50:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8004b54:	010b      	lsls	r3, r1, #4
 8004b56:	b2b2      	uxth	r2, r6
 8004b58:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8004b5c:	4416      	add	r6, r2
 8004b5e:	5af2      	ldrh	r2, [r6, r3]
 8004b60:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004b64:	52f2      	strh	r2, [r6, r3]
 8004b66:	5af2      	ldrh	r2, [r6, r3]
 8004b68:	b292      	uxth	r2, r2
 8004b6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b6e:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b70:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004b74:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8004b78:	b292      	uxth	r2, r2
 8004b7a:	4410      	add	r0, r2
 8004b7c:	5ac2      	ldrh	r2, [r0, r3]
 8004b7e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004b82:	52c2      	strh	r2, [r0, r3]
 8004b84:	5ac2      	ldrh	r2, [r0, r3]
 8004b86:	b292      	uxth	r2, r2
 8004b88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b8c:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b8e:	4620      	mov	r0, r4
 8004b90:	f002 fabd 	bl	800710e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004b94:	2f00      	cmp	r7, #0
 8004b96:	f000 80dc 	beq.w	8004d52 <HAL_PCD_IRQHandler+0x71a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004b9a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8004b9e:	6822      	ldr	r2, [r4, #0]
 8004ba0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bac:	041b      	lsls	r3, r3, #16
 8004bae:	0c1b      	lsrs	r3, r3, #16
 8004bb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8004bbc:	e0c9      	b.n	8004d52 <HAL_PCD_IRQHandler+0x71a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bbe:	2a01      	cmp	r2, #1
 8004bc0:	d1e5      	bne.n	8004b8e <HAL_PCD_IRQHandler+0x556>
 8004bc2:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8004bc6:	010a      	lsls	r2, r1, #4
 8004bc8:	fa1f fc86 	uxth.w	ip, r6
 8004bcc:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8004bd0:	4466      	add	r6, ip
 8004bd2:	52b3      	strh	r3, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bd4:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8004bd8:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8004bdc:	b2b6      	uxth	r6, r6
 8004bde:	4430      	add	r0, r6
 8004be0:	5283      	strh	r3, [r0, r2]
 8004be2:	e7d4      	b.n	8004b8e <HAL_PCD_IRQHandler+0x556>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004be4:	b16f      	cbz	r7, 8004c02 <HAL_PCD_IRQHandler+0x5ca>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004be6:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf2:	041b      	lsls	r3, r3, #16
 8004bf4:	0c1b      	lsrs	r3, r3, #16
 8004bf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfe:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8004c02:	2728      	movs	r7, #40	; 0x28
 8004c04:	fb07 4706 	mla	r7, r7, r6, r4
 8004c08:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	f040 80a0 	bne.w	8004d52 <HAL_PCD_IRQHandler+0x71a>
        ep->xfer_buff += TxPctSize;
 8004c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8004c14:	f8d7 e048 	ldr.w	lr, [r7, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 8004c18:	eb03 0c02 	add.w	ip, r3, r2
        ep->xfer_count += TxPctSize;
 8004c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8004c1e:	f8c7 c03c 	str.w	ip, [r7, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 8004c22:	4413      	add	r3, r2
 8004c24:	647b      	str	r3, [r7, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8004c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c28:	459e      	cmp	lr, r3
 8004c2a:	d32c      	bcc.n	8004c86 <HAL_PCD_IRQHandler+0x64e>
          ep->xfer_len_db -= len;
 8004c2c:	ebae 0203 	sub.w	r2, lr, r3
 8004c30:	64ba      	str	r2, [r7, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004c32:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8004c36:	fa1f fe83 	uxth.w	lr, r3
 8004c3a:	2a00      	cmp	r2, #0
 8004c3c:	d141      	bne.n	8004cc2 <HAL_PCD_IRQHandler+0x68a>
 8004c3e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004c42:	f200 4704 	addw	r7, r0, #1028	; 0x404
 8004c46:	b292      	uxth	r2, r2
 8004c48:	443a      	add	r2, r7
 8004c4a:	0109      	lsls	r1, r1, #4
 8004c4c:	5a57      	ldrh	r7, [r2, r1]
 8004c4e:	2b3e      	cmp	r3, #62	; 0x3e
 8004c50:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004c54:	5257      	strh	r7, [r2, r1]
 8004c56:	d923      	bls.n	8004ca0 <HAL_PCD_IRQHandler+0x668>
 8004c58:	06df      	lsls	r7, r3, #27
 8004c5a:	5a57      	ldrh	r7, [r2, r1]
 8004c5c:	ea4f 1a53 	mov.w	sl, r3, lsr #5
 8004c60:	bf08      	it	eq
 8004c62:	f10a 3aff 	addeq.w	sl, sl, #4294967295
 8004c66:	b2bf      	uxth	r7, r7
 8004c68:	ea47 278a 	orr.w	r7, r7, sl, lsl #10
 8004c6c:	ea47 0708 	orr.w	r7, r7, r8
 8004c70:	b2bf      	uxth	r7, r7
 8004c72:	5257      	strh	r7, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004c74:	2128      	movs	r1, #40	; 0x28
 8004c76:	4673      	mov	r3, lr
 8004c78:	fb01 4606 	mla	r6, r1, r6, r4
 8004c7c:	4661      	mov	r1, ip
 8004c7e:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004c80:	f001 f9ea 	bl	8006058 <USB_WritePMA>
 8004c84:	e065      	b.n	8004d52 <HAL_PCD_IRQHandler+0x71a>
        else if (ep->xfer_len_db == 0U)
 8004c86:	f1be 0f00 	cmp.w	lr, #0
 8004c8a:	d103      	bne.n	8004c94 <HAL_PCD_IRQHandler+0x65c>
    if (ep->xfer_len > TxPctSize)
 8004c8c:	4613      	mov	r3, r2
          ep->xfer_fill_db = 0U;
 8004c8e:	f887 e04c 	strb.w	lr, [r7, #76]	; 0x4c
 8004c92:	e7ce      	b.n	8004c32 <HAL_PCD_IRQHandler+0x5fa>
          ep->xfer_fill_db = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8004c9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c9c:	4673      	mov	r3, lr
 8004c9e:	e7c8      	b.n	8004c32 <HAL_PCD_IRQHandler+0x5fa>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004ca0:	b92b      	cbnz	r3, 8004cae <HAL_PCD_IRQHandler+0x676>
 8004ca2:	5a53      	ldrh	r3, [r2, r1]
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004caa:	5253      	strh	r3, [r2, r1]
 8004cac:	e7e2      	b.n	8004c74 <HAL_PCD_IRQHandler+0x63c>
 8004cae:	085f      	lsrs	r7, r3, #1
 8004cb0:	07db      	lsls	r3, r3, #31
 8004cb2:	5a53      	ldrh	r3, [r2, r1]
 8004cb4:	bf48      	it	mi
 8004cb6:	3701      	addmi	r7, #1
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	e7f3      	b.n	8004caa <HAL_PCD_IRQHandler+0x672>
 8004cc2:	2a01      	cmp	r2, #1
 8004cc4:	d1d6      	bne.n	8004c74 <HAL_PCD_IRQHandler+0x63c>
 8004cc6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004cca:	0109      	lsls	r1, r1, #4
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	f200 4304 	addw	r3, r0, #1028	; 0x404
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f823 e001 	strh.w	lr, [r3, r1]
 8004cd8:	e7cc      	b.n	8004c74 <HAL_PCD_IRQHandler+0x63c>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004cda:	3206      	adds	r2, #6
 8004cdc:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8004ce0:	b2bf      	uxth	r7, r7
    if (ep->xfer_len >= TxPctSize)
 8004ce2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004ce6:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8004ce8:	bf88      	it	hi
 8004cea:	4663      	movhi	r3, ip
 8004cec:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8004cf0:	fb0c 4c06 	mla	ip, ip, r6, r4
      ep->xfer_len -= TxPctSize;
 8004cf4:	bf98      	it	ls
 8004cf6:	1a9b      	subls	r3, r3, r2
 8004cf8:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d14e      	bne.n	8004d9e <HAL_PCD_IRQHandler+0x766>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d00:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8004d04:	2a00      	cmp	r2, #0
 8004d06:	d137      	bne.n	8004d78 <HAL_PCD_IRQHandler+0x740>
 8004d08:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8004d0c:	010b      	lsls	r3, r1, #4
 8004d0e:	b2b2      	uxth	r2, r6
 8004d10:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8004d14:	4416      	add	r6, r2
 8004d16:	5af2      	ldrh	r2, [r6, r3]
 8004d18:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004d1c:	52f2      	strh	r2, [r6, r3]
 8004d1e:	5af2      	ldrh	r2, [r6, r3]
 8004d20:	b292      	uxth	r2, r2
 8004d22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d26:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d28:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004d2c:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8004d30:	b292      	uxth	r2, r2
 8004d32:	4410      	add	r0, r2
 8004d34:	5ac2      	ldrh	r2, [r0, r3]
 8004d36:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004d3a:	52c2      	strh	r2, [r0, r3]
 8004d3c:	5ac2      	ldrh	r2, [r0, r3]
 8004d3e:	b292      	uxth	r2, r2
 8004d40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d44:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d46:	4620      	mov	r0, r4
 8004d48:	f002 f9e1 	bl	800710e <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004d4c:	2f00      	cmp	r7, #0
 8004d4e:	f43f af24 	beq.w	8004b9a <HAL_PCD_IRQHandler+0x562>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004d52:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8004d56:	6822      	ldr	r2, [r4, #0]
 8004d58:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d66:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8004d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d72:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8004d76:	e46e      	b.n	8004656 <HAL_PCD_IRQHandler+0x1e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d78:	2a01      	cmp	r2, #1
 8004d7a:	d1e4      	bne.n	8004d46 <HAL_PCD_IRQHandler+0x70e>
 8004d7c:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8004d80:	010a      	lsls	r2, r1, #4
 8004d82:	fa1f fc86 	uxth.w	ip, r6
 8004d86:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8004d8a:	4466      	add	r6, ip
 8004d8c:	52b3      	strh	r3, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d8e:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8004d92:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8004d96:	b2b6      	uxth	r6, r6
 8004d98:	4430      	add	r0, r6
 8004d9a:	5283      	strh	r3, [r0, r2]
 8004d9c:	e7d3      	b.n	8004d46 <HAL_PCD_IRQHandler+0x70e>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004d9e:	b96f      	cbnz	r7, 8004dbc <HAL_PCD_IRQHandler+0x784>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004da0:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004da4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dac:	041b      	lsls	r3, r3, #16
 8004dae:	0c1b      	lsrs	r3, r3, #16
 8004db0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db8:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8004dbc:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8004dc0:	fb0c 4c06 	mla	ip, ip, r6, r4
 8004dc4:	f89c 304c 	ldrb.w	r3, [ip, #76]	; 0x4c
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d1c2      	bne.n	8004d52 <HAL_PCD_IRQHandler+0x71a>
        ep->xfer_count += TxPctSize;
 8004dcc:	f8dc 3044 	ldr.w	r3, [ip, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8004dd0:	f8dc 703c 	ldr.w	r7, [ip, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 8004dd4:	4413      	add	r3, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 8004dd6:	f8dc e048 	ldr.w	lr, [ip, #72]	; 0x48
        ep->xfer_count += TxPctSize;
 8004dda:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8004dde:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
        ep->xfer_buff += TxPctSize;
 8004de2:	4417      	add	r7, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 8004de4:	459e      	cmp	lr, r3
        ep->xfer_buff += TxPctSize;
 8004de6:	f8cc 703c 	str.w	r7, [ip, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8004dea:	d326      	bcc.n	8004e3a <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db -= len;
 8004dec:	ebae 0203 	sub.w	r2, lr, r3
 8004df0:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004df4:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8004df8:	fa1f fc83 	uxth.w	ip, r3
 8004dfc:	2a00      	cmp	r2, #0
 8004dfe:	d142      	bne.n	8004e86 <HAL_PCD_IRQHandler+0x84e>
 8004e00:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004e04:	f200 4e0c 	addw	lr, r0, #1036	; 0x40c
 8004e08:	b292      	uxth	r2, r2
 8004e0a:	4472      	add	r2, lr
 8004e0c:	0109      	lsls	r1, r1, #4
 8004e0e:	f832 e001 	ldrh.w	lr, [r2, r1]
 8004e12:	2b3e      	cmp	r3, #62	; 0x3e
 8004e14:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004e18:	f822 e001 	strh.w	lr, [r2, r1]
 8004e1c:	d91b      	bls.n	8004e56 <HAL_PCD_IRQHandler+0x81e>
 8004e1e:	ea4f 1e53 	mov.w	lr, r3, lsr #5
 8004e22:	06db      	lsls	r3, r3, #27
 8004e24:	5a53      	ldrh	r3, [r2, r1]
 8004e26:	bf08      	it	eq
 8004e28:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
 8004e32:	ea43 0308 	orr.w	r3, r3, r8
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	e012      	b.n	8004e60 <HAL_PCD_IRQHandler+0x828>
        else if (ep->xfer_len_db == 0U)
 8004e3a:	f1be 0f00 	cmp.w	lr, #0
 8004e3e:	d103      	bne.n	8004e48 <HAL_PCD_IRQHandler+0x810>
    if (ep->xfer_len >= TxPctSize)
 8004e40:	4613      	mov	r3, r2
          ep->xfer_fill_db = 0U;
 8004e42:	f88c e04c 	strb.w	lr, [ip, #76]	; 0x4c
 8004e46:	e7d5      	b.n	8004df4 <HAL_PCD_IRQHandler+0x7bc>
          ep->xfer_len_db = 0U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8004e4e:	f88c 304c 	strb.w	r3, [ip, #76]	; 0x4c
 8004e52:	4673      	mov	r3, lr
 8004e54:	e7ce      	b.n	8004df4 <HAL_PCD_IRQHandler+0x7bc>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004e56:	b95b      	cbnz	r3, 8004e70 <HAL_PCD_IRQHandler+0x838>
 8004e58:	5a53      	ldrh	r3, [r2, r1]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e60:	5253      	strh	r3, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004e62:	2128      	movs	r1, #40	; 0x28
 8004e64:	fb01 4606 	mla	r6, r1, r6, r4
 8004e68:	4663      	mov	r3, ip
 8004e6a:	4639      	mov	r1, r7
 8004e6c:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 8004e6e:	e707      	b.n	8004c80 <HAL_PCD_IRQHandler+0x648>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004e70:	ea4f 0e53 	mov.w	lr, r3, lsr #1
 8004e74:	07db      	lsls	r3, r3, #31
 8004e76:	5a53      	ldrh	r3, [r2, r1]
 8004e78:	bf48      	it	mi
 8004e7a:	f10e 0e01 	addmi.w	lr, lr, #1
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
 8004e84:	e7d7      	b.n	8004e36 <HAL_PCD_IRQHandler+0x7fe>
 8004e86:	2a01      	cmp	r2, #1
 8004e88:	d1eb      	bne.n	8004e62 <HAL_PCD_IRQHandler+0x82a>
 8004e8a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	f200 430c 	addw	r3, r0, #1036	; 0x40c
 8004e94:	4413      	add	r3, r2
 8004e96:	010a      	lsls	r2, r1, #4
 8004e98:	f823 c002 	strh.w	ip, [r3, r2]
 8004e9c:	e7e1      	b.n	8004e62 <HAL_PCD_IRQHandler+0x82a>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004e9e:	0546      	lsls	r6, r0, #21
 8004ea0:	d512      	bpl.n	8004ec8 <HAL_PCD_IRQHandler+0x890>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004ea2:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8004ea4:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004ea6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004eaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eae:	041b      	lsls	r3, r3, #16
 8004eb0:	0c1b      	lsrs	r3, r3, #16
 8004eb2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8004eb6:	f002 f936 	bl	8007126 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004eba:	4629      	mov	r1, r5
 8004ebc:	4620      	mov	r0, r4
}
 8004ebe:	b005      	add	sp, #20
 8004ec0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004ec4:	f7ff bba4 	b.w	8004610 <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004ec8:	0441      	lsls	r1, r0, #17
 8004eca:	d50a      	bpl.n	8004ee2 <HAL_PCD_IRQHandler+0x8aa>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004ecc:	6822      	ldr	r2, [r4, #0]
 8004ece:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004ed2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004ed6:	041b      	lsls	r3, r3, #16
 8004ed8:	0c1b      	lsrs	r3, r3, #16
 8004eda:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8004ede:	f7ff bbbf 	b.w	8004660 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004ee2:	0482      	lsls	r2, r0, #18
 8004ee4:	d505      	bpl.n	8004ef2 <HAL_PCD_IRQHandler+0x8ba>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004ee6:	6822      	ldr	r2, [r4, #0]
 8004ee8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004eec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ef0:	e7f1      	b.n	8004ed6 <HAL_PCD_IRQHandler+0x89e>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004ef2:	04c3      	lsls	r3, r0, #19
 8004ef4:	d519      	bpl.n	8004f2a <HAL_PCD_IRQHandler+0x8f2>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004ef6:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8004ef8:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004efa:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004efe:	f023 0304 	bic.w	r3, r3, #4
 8004f02:	041b      	lsls	r3, r3, #16
 8004f04:	0c1b      	lsrs	r3, r3, #16
 8004f06:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004f0a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004f0e:	f023 0308 	bic.w	r3, r3, #8
 8004f12:	041b      	lsls	r3, r3, #16
 8004f14:	0c1b      	lsrs	r3, r3, #16
 8004f16:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8004f1a:	f002 f927 	bl	800716c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004f1e:	6822      	ldr	r2, [r4, #0]
 8004f20:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004f24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f28:	e7d5      	b.n	8004ed6 <HAL_PCD_IRQHandler+0x89e>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004f2a:	0507      	lsls	r7, r0, #20
 8004f2c:	d548      	bpl.n	8004fc0 <HAL_PCD_IRQHandler+0x988>
 8004f2e:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004f30:	6822      	ldr	r2, [r4, #0]
 8004f32:	4606      	mov	r6, r0
 8004f34:	4611      	mov	r1, r2
 8004f36:	4613      	mov	r3, r2
 8004f38:	f102 0520 	add.w	r5, r2, #32
 8004f3c:	f833 7b04 	ldrh.w	r7, [r3], #4
    for (i = 0U; i < 8U; i++)
 8004f40:	429d      	cmp	r5, r3
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004f42:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 8004f46:	d1f9      	bne.n	8004f3c <HAL_PCD_IRQHandler+0x904>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004f48:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	f043 0301 	orr.w	r3, r3, #1
 8004f52:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004f56:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004f5a:	f023 0301 	bic.w	r3, r3, #1
 8004f5e:	041b      	lsls	r3, r3, #16
 8004f60:	0c1b      	lsrs	r3, r3, #16
 8004f62:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004f66:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004f6a:	055e      	lsls	r6, r3, #21
 8004f6c:	d5fb      	bpl.n	8004f66 <HAL_PCD_IRQHandler+0x92e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004f6e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004f72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f76:	041b      	lsls	r3, r3, #16
 8004f78:	0c1b      	lsrs	r3, r3, #16
 8004f7a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004f7e:	f830 3b02 	ldrh.w	r3, [r0], #2
 8004f82:	f821 3b04 	strh.w	r3, [r1], #4
    for (i = 0U; i < 8U; i++)
 8004f86:	428d      	cmp	r5, r1
 8004f88:	d1f9      	bne.n	8004f7e <HAL_PCD_IRQHandler+0x946>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004f8a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8004f8e:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	f043 0308 	orr.w	r3, r3, #8
 8004f96:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004f9a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004f9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fa2:	041b      	lsls	r3, r3, #16
 8004fa4:	0c1b      	lsrs	r3, r3, #16
 8004fa6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004faa:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	f043 0304 	orr.w	r3, r3, #4
 8004fb4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8004fb8:	f002 f8c8 	bl	800714c <HAL_PCD_SuspendCallback>
    return;
 8004fbc:	f7ff bb50 	b.w	8004660 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004fc0:	0582      	lsls	r2, r0, #22
 8004fc2:	d50d      	bpl.n	8004fe0 <HAL_PCD_IRQHandler+0x9a8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004fc4:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8004fc6:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004fc8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004fcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fd0:	041b      	lsls	r3, r3, #16
 8004fd2:	0c1b      	lsrs	r3, r3, #16
 8004fd4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8004fd8:	f002 f8a1 	bl	800711e <HAL_PCD_SOFCallback>
    return;
 8004fdc:	f7ff bb40 	b.w	8004660 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004fe0:	05c3      	lsls	r3, r0, #23
 8004fe2:	f57f ab3d 	bpl.w	8004660 <HAL_PCD_IRQHandler+0x28>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004fe6:	6822      	ldr	r2, [r4, #0]
 8004fe8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004fec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ff0:	e771      	b.n	8004ed6 <HAL_PCD_IRQHandler+0x89e>
 8004ff2:	bf00      	nop

08004ff4 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8004ff4:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8004ff8:	b570      	push	{r4, r5, r6, lr}
 8004ffa:	4605      	mov	r5, r0
 8004ffc:	f04f 0428 	mov.w	r4, #40	; 0x28
 8005000:	f001 0007 	and.w	r0, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 8005004:	d01a      	beq.n	800503c <HAL_PCD_EP_Open+0x48>
    ep->is_in = 1U;
 8005006:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005008:	fb00 4104 	mla	r1, r0, r4, r4
 800500c:	4429      	add	r1, r5
    ep->is_in = 1U;
 800500e:	704e      	strb	r6, [r1, #1]
  if (ep_type == EP_TYPE_BULK)
 8005010:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8005012:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 8005014:	bf08      	it	eq
 8005016:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8005018:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 800501a:	bf08      	it	eq
 800501c:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 800501e:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8005020:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8005024:	2b01      	cmp	r3, #1
 8005026:	d012      	beq.n	800504e <HAL_PCD_EP_Open+0x5a>
 8005028:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800502a:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 800502c:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005030:	f000 fd66 	bl	8005b00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005034:	2000      	movs	r0, #0
 8005036:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 800503a:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 800503c:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800503e:	4344      	muls	r4, r0
 8005040:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    ep->is_in = 0U;
 8005044:	442c      	add	r4, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005046:	4429      	add	r1, r5
    ep->is_in = 0U;
 8005048:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
 800504c:	e7e0      	b.n	8005010 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 800504e:	2002      	movs	r0, #2
 8005050:	e7f3      	b.n	800503a <HAL_PCD_EP_Open+0x46>

08005052 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8005052:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8005056:	b510      	push	{r4, lr}
 8005058:	f04f 0328 	mov.w	r3, #40	; 0x28
 800505c:	4604      	mov	r4, r0
 800505e:	f001 0207 	and.w	r2, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 8005062:	d013      	beq.n	800508c <HAL_PCD_EP_Close+0x3a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005064:	fb02 3103 	mla	r1, r2, r3, r3
 8005068:	4401      	add	r1, r0
    ep->is_in = 1U;
 800506a:	2001      	movs	r0, #1
 800506c:	7048      	strb	r0, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800506e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8005070:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8005074:	2b01      	cmp	r3, #1
 8005076:	d012      	beq.n	800509e <HAL_PCD_EP_Close+0x4c>
 8005078:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800507a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800507c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005080:	f000 fea0 	bl	8005dc4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005084:	2000      	movs	r0, #0
 8005086:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800508a:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800508c:	4353      	muls	r3, r2
 800508e:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8005092:	4401      	add	r1, r0
    ep->is_in = 0U;
 8005094:	4403      	add	r3, r0
 8005096:	2000      	movs	r0, #0
 8005098:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 800509c:	e7e7      	b.n	800506e <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 800509e:	2002      	movs	r0, #2
 80050a0:	e7f3      	b.n	800508a <HAL_PCD_EP_Close+0x38>

080050a2 <HAL_PCD_EP_Receive>:
{
 80050a2:	b570      	push	{r4, r5, r6, lr}
 80050a4:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 80050a8:	2128      	movs	r1, #40	; 0x28
  ep->xfer_count = 0U;
 80050aa:	2600      	movs	r6, #0
  ep->xfer_buff = pBuf;
 80050ac:	4369      	muls	r1, r5
 80050ae:	1844      	adds	r4, r0, r1
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050b0:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80050b4:	4401      	add	r1, r0
  ep->xfer_len = len;
 80050b6:	e9c4 235f 	strd	r2, r3, [r4, #380]	; 0x17c
  ep->xfer_count = 0U;
 80050ba:	f8c4 6184 	str.w	r6, [r4, #388]	; 0x184
  ep->is_in = 0U;
 80050be:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80050c2:	f884 5168 	strb.w	r5, [r4, #360]	; 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80050c6:	6800      	ldr	r0, [r0, #0]
 80050c8:	f000 ffd6 	bl	8006078 <USB_EPStartXfer>
}
 80050cc:	4630      	mov	r0, r6
 80050ce:	bd70      	pop	{r4, r5, r6, pc}

080050d0 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80050d0:	2328      	movs	r3, #40	; 0x28
 80050d2:	f001 0107 	and.w	r1, r1, #7
 80050d6:	fb03 0001 	mla	r0, r3, r1, r0
}
 80050da:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 80050de:	4770      	bx	lr

080050e0 <HAL_PCD_EP_Transmit>:
{
 80050e0:	b570      	push	{r4, r5, r6, lr}
 80050e2:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 80050e6:	2128      	movs	r1, #40	; 0x28
 80050e8:	fb01 0405 	mla	r4, r1, r5, r0
  ep->xfer_count = 0U;
 80050ec:	2600      	movs	r6, #0
  ep->xfer_len = len;
 80050ee:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 80050f2:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050f4:	fb05 1101 	mla	r1, r5, r1, r1
  ep->xfer_fill_db = 1U;
 80050f8:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80050fc:	4401      	add	r1, r0
  ep->xfer_len_db = len;
 80050fe:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8005100:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8005102:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8005106:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800510a:	6800      	ldr	r0, [r0, #0]
 800510c:	f000 ffb4 	bl	8006078 <USB_EPStartXfer>
}
 8005110:	4630      	mov	r0, r6
 8005112:	bd70      	pop	{r4, r5, r6, pc}

08005114 <HAL_PCD_EP_SetStall>:
{
 8005114:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005116:	6843      	ldr	r3, [r0, #4]
 8005118:	f001 0507 	and.w	r5, r1, #7
 800511c:	429d      	cmp	r5, r3
{
 800511e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005120:	d828      	bhi.n	8005174 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8005122:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005126:	f04f 0328 	mov.w	r3, #40	; 0x28
 800512a:	d01a      	beq.n	8005162 <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 800512c:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800512e:	fb05 3103 	mla	r1, r5, r3, r3
 8005132:	4401      	add	r1, r0
    ep->is_in = 1U;
 8005134:	704a      	strb	r2, [r1, #1]
  ep->is_stall = 1U;
 8005136:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8005138:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800513a:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800513c:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 8005140:	429a      	cmp	r2, r3
 8005142:	d019      	beq.n	8005178 <HAL_PCD_EP_SetStall+0x64>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005144:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8005146:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800514a:	f000 ff0c 	bl	8005f66 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800514e:	b925      	cbnz	r5, 800515a <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005150:	6820      	ldr	r0, [r4, #0]
 8005152:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8005156:	f000 ff7d 	bl	8006054 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 800515a:	2000      	movs	r0, #0
 800515c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005160:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8005162:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8005164:	434b      	muls	r3, r1
 8005166:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 800516a:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 800516c:	4401      	add	r1, r0
    ep->is_in = 0U;
 800516e:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 8005172:	e7e0      	b.n	8005136 <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8005174:	2001      	movs	r0, #1
 8005176:	e7f3      	b.n	8005160 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 8005178:	2002      	movs	r0, #2
 800517a:	e7f1      	b.n	8005160 <HAL_PCD_EP_SetStall+0x4c>

0800517c <HAL_PCD_EP_ClrStall>:
{
 800517c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800517e:	6843      	ldr	r3, [r0, #4]
 8005180:	f001 020f 	and.w	r2, r1, #15
 8005184:	429a      	cmp	r2, r3
{
 8005186:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005188:	d825      	bhi.n	80051d6 <HAL_PCD_EP_ClrStall+0x5a>
  if ((0x80U & ep_addr) == 0x80U)
 800518a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800518e:	f04f 0328 	mov.w	r3, #40	; 0x28
 8005192:	f001 0207 	and.w	r2, r1, #7
 8005196:	d015      	beq.n	80051c4 <HAL_PCD_EP_ClrStall+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005198:	fb02 3103 	mla	r1, r2, r3, r3
 800519c:	4401      	add	r1, r0
    ep->is_in = 1U;
 800519e:	2001      	movs	r0, #1
 80051a0:	7048      	strb	r0, [r1, #1]
  ep->is_stall = 0U;
 80051a2:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 80051a4:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 80051a6:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80051a8:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d014      	beq.n	80051da <HAL_PCD_EP_ClrStall+0x5e>
 80051b0:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80051b2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80051b4:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80051b8:	f000 fef5 	bl	8005fa6 <USB_EPClearStall>
  return HAL_OK;
 80051bc:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 80051be:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 80051c2:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051c4:	4353      	muls	r3, r2
 80051c6:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 80051ca:	4401      	add	r1, r0
    ep->is_in = 0U;
 80051cc:	4403      	add	r3, r0
 80051ce:	2000      	movs	r0, #0
 80051d0:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 80051d4:	e7e5      	b.n	80051a2 <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 80051d6:	2001      	movs	r0, #1
 80051d8:	e7f3      	b.n	80051c2 <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 80051da:	2002      	movs	r0, #2
 80051dc:	e7f1      	b.n	80051c2 <HAL_PCD_EP_ClrStall+0x46>

080051de <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80051de:	b510      	push	{r4, lr}
 80051e0:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80051e2:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051e6:	bf1b      	ittet	ne
 80051e8:	f001 0107 	andne.w	r1, r1, #7
 80051ec:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80051f0:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051f4:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 80051f6:	bf08      	it	eq
 80051f8:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80051fc:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 80051fe:	b91a      	cbnz	r2, 8005208 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 8005200:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8005202:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8005204:	2000      	movs	r0, #0
 8005206:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8005208:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800520a:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 800520c:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800520e:	e7f9      	b.n	8005204 <HAL_PCDEx_PMAConfig+0x26>

08005210 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005210:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005214:	4605      	mov	r5, r0
 8005216:	b338      	cbz	r0, 8005268 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005218:	6803      	ldr	r3, [r0, #0]
 800521a:	07db      	lsls	r3, r3, #31
 800521c:	d410      	bmi.n	8005240 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800521e:	682b      	ldr	r3, [r5, #0]
 8005220:	079f      	lsls	r7, r3, #30
 8005222:	d45e      	bmi.n	80052e2 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005224:	682b      	ldr	r3, [r5, #0]
 8005226:	0719      	lsls	r1, r3, #28
 8005228:	f100 8095 	bmi.w	8005356 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800522c:	682b      	ldr	r3, [r5, #0]
 800522e:	075a      	lsls	r2, r3, #29
 8005230:	f100 80c1 	bmi.w	80053b6 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005234:	69e8      	ldr	r0, [r5, #28]
 8005236:	2800      	cmp	r0, #0
 8005238:	f040 812c 	bne.w	8005494 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 800523c:	2000      	movs	r0, #0
 800523e:	e029      	b.n	8005294 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005240:	4c90      	ldr	r4, [pc, #576]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 8005242:	6863      	ldr	r3, [r4, #4]
 8005244:	f003 030c 	and.w	r3, r3, #12
 8005248:	2b04      	cmp	r3, #4
 800524a:	d007      	beq.n	800525c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800524c:	6863      	ldr	r3, [r4, #4]
 800524e:	f003 030c 	and.w	r3, r3, #12
 8005252:	2b08      	cmp	r3, #8
 8005254:	d10a      	bne.n	800526c <HAL_RCC_OscConfig+0x5c>
 8005256:	6863      	ldr	r3, [r4, #4]
 8005258:	03de      	lsls	r6, r3, #15
 800525a:	d507      	bpl.n	800526c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	039c      	lsls	r4, r3, #14
 8005260:	d5dd      	bpl.n	800521e <HAL_RCC_OscConfig+0xe>
 8005262:	686b      	ldr	r3, [r5, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1da      	bne.n	800521e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8005268:	2001      	movs	r0, #1
 800526a:	e013      	b.n	8005294 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800526c:	686b      	ldr	r3, [r5, #4]
 800526e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005272:	d112      	bne.n	800529a <HAL_RCC_OscConfig+0x8a>
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800527a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800527c:	f7fe ffda 	bl	8004234 <HAL_GetTick>
 8005280:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	0398      	lsls	r0, r3, #14
 8005286:	d4ca      	bmi.n	800521e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005288:	f7fe ffd4 	bl	8004234 <HAL_GetTick>
 800528c:	1b80      	subs	r0, r0, r6
 800528e:	2864      	cmp	r0, #100	; 0x64
 8005290:	d9f7      	bls.n	8005282 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8005292:	2003      	movs	r0, #3
}
 8005294:	b002      	add	sp, #8
 8005296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800529a:	b99b      	cbnz	r3, 80052c4 <HAL_RCC_OscConfig+0xb4>
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052a2:	6023      	str	r3, [r4, #0]
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052aa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80052ac:	f7fe ffc2 	bl	8004234 <HAL_GetTick>
 80052b0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	0399      	lsls	r1, r3, #14
 80052b6:	d5b2      	bpl.n	800521e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052b8:	f7fe ffbc 	bl	8004234 <HAL_GetTick>
 80052bc:	1b80      	subs	r0, r0, r6
 80052be:	2864      	cmp	r0, #100	; 0x64
 80052c0:	d9f7      	bls.n	80052b2 <HAL_RCC_OscConfig+0xa2>
 80052c2:	e7e6      	b.n	8005292 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	d103      	bne.n	80052d4 <HAL_RCC_OscConfig+0xc4>
 80052cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052d0:	6023      	str	r3, [r4, #0]
 80052d2:	e7cf      	b.n	8005274 <HAL_RCC_OscConfig+0x64>
 80052d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052d8:	6023      	str	r3, [r4, #0]
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052e0:	e7cb      	b.n	800527a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052e2:	4c68      	ldr	r4, [pc, #416]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 80052e4:	6863      	ldr	r3, [r4, #4]
 80052e6:	f013 0f0c 	tst.w	r3, #12
 80052ea:	d007      	beq.n	80052fc <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80052ec:	6863      	ldr	r3, [r4, #4]
 80052ee:	f003 030c 	and.w	r3, r3, #12
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d110      	bne.n	8005318 <HAL_RCC_OscConfig+0x108>
 80052f6:	6863      	ldr	r3, [r4, #4]
 80052f8:	03da      	lsls	r2, r3, #15
 80052fa:	d40d      	bmi.n	8005318 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052fc:	6823      	ldr	r3, [r4, #0]
 80052fe:	079b      	lsls	r3, r3, #30
 8005300:	d502      	bpl.n	8005308 <HAL_RCC_OscConfig+0xf8>
 8005302:	692b      	ldr	r3, [r5, #16]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d1af      	bne.n	8005268 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005308:	6823      	ldr	r3, [r4, #0]
 800530a:	696a      	ldr	r2, [r5, #20]
 800530c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005310:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005314:	6023      	str	r3, [r4, #0]
 8005316:	e785      	b.n	8005224 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005318:	692a      	ldr	r2, [r5, #16]
 800531a:	4b5b      	ldr	r3, [pc, #364]	; (8005488 <HAL_RCC_OscConfig+0x278>)
 800531c:	b16a      	cbz	r2, 800533a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800531e:	2201      	movs	r2, #1
 8005320:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005322:	f7fe ff87 	bl	8004234 <HAL_GetTick>
 8005326:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	079f      	lsls	r7, r3, #30
 800532c:	d4ec      	bmi.n	8005308 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800532e:	f7fe ff81 	bl	8004234 <HAL_GetTick>
 8005332:	1b80      	subs	r0, r0, r6
 8005334:	2802      	cmp	r0, #2
 8005336:	d9f7      	bls.n	8005328 <HAL_RCC_OscConfig+0x118>
 8005338:	e7ab      	b.n	8005292 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800533a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800533c:	f7fe ff7a 	bl	8004234 <HAL_GetTick>
 8005340:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	0798      	lsls	r0, r3, #30
 8005346:	f57f af6d 	bpl.w	8005224 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800534a:	f7fe ff73 	bl	8004234 <HAL_GetTick>
 800534e:	1b80      	subs	r0, r0, r6
 8005350:	2802      	cmp	r0, #2
 8005352:	d9f6      	bls.n	8005342 <HAL_RCC_OscConfig+0x132>
 8005354:	e79d      	b.n	8005292 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005356:	69aa      	ldr	r2, [r5, #24]
 8005358:	4e4a      	ldr	r6, [pc, #296]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 800535a:	4b4b      	ldr	r3, [pc, #300]	; (8005488 <HAL_RCC_OscConfig+0x278>)
 800535c:	b1e2      	cbz	r2, 8005398 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800535e:	2201      	movs	r2, #1
 8005360:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8005364:	f7fe ff66 	bl	8004234 <HAL_GetTick>
 8005368:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800536a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800536c:	079b      	lsls	r3, r3, #30
 800536e:	d50d      	bpl.n	800538c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005370:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005374:	4b45      	ldr	r3, [pc, #276]	; (800548c <HAL_RCC_OscConfig+0x27c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	fbb3 f3f2 	udiv	r3, r3, r2
 800537c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800537e:	bf00      	nop
  }
  while (Delay --);
 8005380:	9b01      	ldr	r3, [sp, #4]
 8005382:	1e5a      	subs	r2, r3, #1
 8005384:	9201      	str	r2, [sp, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1f9      	bne.n	800537e <HAL_RCC_OscConfig+0x16e>
 800538a:	e74f      	b.n	800522c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800538c:	f7fe ff52 	bl	8004234 <HAL_GetTick>
 8005390:	1b00      	subs	r0, r0, r4
 8005392:	2802      	cmp	r0, #2
 8005394:	d9e9      	bls.n	800536a <HAL_RCC_OscConfig+0x15a>
 8005396:	e77c      	b.n	8005292 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8005398:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800539c:	f7fe ff4a 	bl	8004234 <HAL_GetTick>
 80053a0:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80053a4:	079f      	lsls	r7, r3, #30
 80053a6:	f57f af41 	bpl.w	800522c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053aa:	f7fe ff43 	bl	8004234 <HAL_GetTick>
 80053ae:	1b00      	subs	r0, r0, r4
 80053b0:	2802      	cmp	r0, #2
 80053b2:	d9f6      	bls.n	80053a2 <HAL_RCC_OscConfig+0x192>
 80053b4:	e76d      	b.n	8005292 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053b6:	4c33      	ldr	r4, [pc, #204]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 80053b8:	69e3      	ldr	r3, [r4, #28]
 80053ba:	00d8      	lsls	r0, r3, #3
 80053bc:	d424      	bmi.n	8005408 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80053be:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80053c0:	69e3      	ldr	r3, [r4, #28]
 80053c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c6:	61e3      	str	r3, [r4, #28]
 80053c8:	69e3      	ldr	r3, [r4, #28]
 80053ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053d2:	4e2f      	ldr	r6, [pc, #188]	; (8005490 <HAL_RCC_OscConfig+0x280>)
 80053d4:	6833      	ldr	r3, [r6, #0]
 80053d6:	05d9      	lsls	r1, r3, #23
 80053d8:	d518      	bpl.n	800540c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053da:	68eb      	ldr	r3, [r5, #12]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d126      	bne.n	800542e <HAL_RCC_OscConfig+0x21e>
 80053e0:	6a23      	ldr	r3, [r4, #32]
 80053e2:	f043 0301 	orr.w	r3, r3, #1
 80053e6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80053e8:	f7fe ff24 	bl	8004234 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ec:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80053f0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f2:	6a23      	ldr	r3, [r4, #32]
 80053f4:	079b      	lsls	r3, r3, #30
 80053f6:	d53f      	bpl.n	8005478 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80053f8:	2f00      	cmp	r7, #0
 80053fa:	f43f af1b 	beq.w	8005234 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80053fe:	69e3      	ldr	r3, [r4, #28]
 8005400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005404:	61e3      	str	r3, [r4, #28]
 8005406:	e715      	b.n	8005234 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8005408:	2700      	movs	r7, #0
 800540a:	e7e2      	b.n	80053d2 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800540c:	6833      	ldr	r3, [r6, #0]
 800540e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005412:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005414:	f7fe ff0e 	bl	8004234 <HAL_GetTick>
 8005418:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800541a:	6833      	ldr	r3, [r6, #0]
 800541c:	05da      	lsls	r2, r3, #23
 800541e:	d4dc      	bmi.n	80053da <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005420:	f7fe ff08 	bl	8004234 <HAL_GetTick>
 8005424:	eba0 0008 	sub.w	r0, r0, r8
 8005428:	2864      	cmp	r0, #100	; 0x64
 800542a:	d9f6      	bls.n	800541a <HAL_RCC_OscConfig+0x20a>
 800542c:	e731      	b.n	8005292 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800542e:	b9ab      	cbnz	r3, 800545c <HAL_RCC_OscConfig+0x24c>
 8005430:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005432:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005436:	f023 0301 	bic.w	r3, r3, #1
 800543a:	6223      	str	r3, [r4, #32]
 800543c:	6a23      	ldr	r3, [r4, #32]
 800543e:	f023 0304 	bic.w	r3, r3, #4
 8005442:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8005444:	f7fe fef6 	bl	8004234 <HAL_GetTick>
 8005448:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800544a:	6a23      	ldr	r3, [r4, #32]
 800544c:	0798      	lsls	r0, r3, #30
 800544e:	d5d3      	bpl.n	80053f8 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005450:	f7fe fef0 	bl	8004234 <HAL_GetTick>
 8005454:	1b80      	subs	r0, r0, r6
 8005456:	4540      	cmp	r0, r8
 8005458:	d9f7      	bls.n	800544a <HAL_RCC_OscConfig+0x23a>
 800545a:	e71a      	b.n	8005292 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800545c:	2b05      	cmp	r3, #5
 800545e:	6a23      	ldr	r3, [r4, #32]
 8005460:	d103      	bne.n	800546a <HAL_RCC_OscConfig+0x25a>
 8005462:	f043 0304 	orr.w	r3, r3, #4
 8005466:	6223      	str	r3, [r4, #32]
 8005468:	e7ba      	b.n	80053e0 <HAL_RCC_OscConfig+0x1d0>
 800546a:	f023 0301 	bic.w	r3, r3, #1
 800546e:	6223      	str	r3, [r4, #32]
 8005470:	6a23      	ldr	r3, [r4, #32]
 8005472:	f023 0304 	bic.w	r3, r3, #4
 8005476:	e7b6      	b.n	80053e6 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005478:	f7fe fedc 	bl	8004234 <HAL_GetTick>
 800547c:	1b80      	subs	r0, r0, r6
 800547e:	4540      	cmp	r0, r8
 8005480:	d9b7      	bls.n	80053f2 <HAL_RCC_OscConfig+0x1e2>
 8005482:	e706      	b.n	8005292 <HAL_RCC_OscConfig+0x82>
 8005484:	40021000 	.word	0x40021000
 8005488:	42420000 	.word	0x42420000
 800548c:	20000000 	.word	0x20000000
 8005490:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005494:	4c2a      	ldr	r4, [pc, #168]	; (8005540 <HAL_RCC_OscConfig+0x330>)
 8005496:	6863      	ldr	r3, [r4, #4]
 8005498:	f003 030c 	and.w	r3, r3, #12
 800549c:	2b08      	cmp	r3, #8
 800549e:	d03e      	beq.n	800551e <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054a0:	2200      	movs	r2, #0
 80054a2:	4b28      	ldr	r3, [pc, #160]	; (8005544 <HAL_RCC_OscConfig+0x334>)
 80054a4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80054a6:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054a8:	d12c      	bne.n	8005504 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80054aa:	f7fe fec3 	bl	8004234 <HAL_GetTick>
 80054ae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	0199      	lsls	r1, r3, #6
 80054b4:	d420      	bmi.n	80054f8 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80054b6:	6a2b      	ldr	r3, [r5, #32]
 80054b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054bc:	d105      	bne.n	80054ca <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80054be:	6862      	ldr	r2, [r4, #4]
 80054c0:	68a9      	ldr	r1, [r5, #8]
 80054c2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80054c6:	430a      	orrs	r2, r1
 80054c8:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054ca:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80054cc:	6862      	ldr	r2, [r4, #4]
 80054ce:	430b      	orrs	r3, r1
 80054d0:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80054d4:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80054d6:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054d8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80054da:	4b1a      	ldr	r3, [pc, #104]	; (8005544 <HAL_RCC_OscConfig+0x334>)
 80054dc:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80054de:	f7fe fea9 	bl	8004234 <HAL_GetTick>
 80054e2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	019a      	lsls	r2, r3, #6
 80054e8:	f53f aea8 	bmi.w	800523c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ec:	f7fe fea2 	bl	8004234 <HAL_GetTick>
 80054f0:	1b40      	subs	r0, r0, r5
 80054f2:	2802      	cmp	r0, #2
 80054f4:	d9f6      	bls.n	80054e4 <HAL_RCC_OscConfig+0x2d4>
 80054f6:	e6cc      	b.n	8005292 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054f8:	f7fe fe9c 	bl	8004234 <HAL_GetTick>
 80054fc:	1b80      	subs	r0, r0, r6
 80054fe:	2802      	cmp	r0, #2
 8005500:	d9d6      	bls.n	80054b0 <HAL_RCC_OscConfig+0x2a0>
 8005502:	e6c6      	b.n	8005292 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8005504:	f7fe fe96 	bl	8004234 <HAL_GetTick>
 8005508:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	019b      	lsls	r3, r3, #6
 800550e:	f57f ae95 	bpl.w	800523c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005512:	f7fe fe8f 	bl	8004234 <HAL_GetTick>
 8005516:	1b40      	subs	r0, r0, r5
 8005518:	2802      	cmp	r0, #2
 800551a:	d9f6      	bls.n	800550a <HAL_RCC_OscConfig+0x2fa>
 800551c:	e6b9      	b.n	8005292 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800551e:	2801      	cmp	r0, #1
 8005520:	f43f aeb8 	beq.w	8005294 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8005524:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005526:	6a2a      	ldr	r2, [r5, #32]
 8005528:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800552c:	4291      	cmp	r1, r2
 800552e:	f47f ae9b 	bne.w	8005268 <HAL_RCC_OscConfig+0x58>
 8005532:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005534:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005538:	4293      	cmp	r3, r2
 800553a:	f43f ae7f 	beq.w	800523c <HAL_RCC_OscConfig+0x2c>
 800553e:	e693      	b.n	8005268 <HAL_RCC_OscConfig+0x58>
 8005540:	40021000 	.word	0x40021000
 8005544:	42420000 	.word	0x42420000

08005548 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8005548:	4a0d      	ldr	r2, [pc, #52]	; (8005580 <HAL_RCC_GetSysClockFreq+0x38>)
 800554a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800554c:	f003 010c 	and.w	r1, r3, #12
 8005550:	2908      	cmp	r1, #8
 8005552:	d112      	bne.n	800557a <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005554:	480b      	ldr	r0, [pc, #44]	; (8005584 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005556:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800555a:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800555c:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800555e:	d509      	bpl.n	8005574 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005560:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005562:	4a09      	ldr	r2, [pc, #36]	; (8005588 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005564:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005568:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800556a:	4a08      	ldr	r2, [pc, #32]	; (800558c <HAL_RCC_GetSysClockFreq+0x44>)
 800556c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800556e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005572:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005574:	4b06      	ldr	r3, [pc, #24]	; (8005590 <HAL_RCC_GetSysClockFreq+0x48>)
 8005576:	4358      	muls	r0, r3
 8005578:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800557a:	4803      	ldr	r0, [pc, #12]	; (8005588 <HAL_RCC_GetSysClockFreq+0x40>)
}
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40021000 	.word	0x40021000
 8005584:	0800c3d2 	.word	0x0800c3d2
 8005588:	007a1200 	.word	0x007a1200
 800558c:	0800c3e2 	.word	0x0800c3e2
 8005590:	003d0900 	.word	0x003d0900

08005594 <HAL_RCC_ClockConfig>:
{
 8005594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005598:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800559a:	4604      	mov	r4, r0
 800559c:	b910      	cbnz	r0, 80055a4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800559e:	2001      	movs	r0, #1
}
 80055a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055a4:	4a44      	ldr	r2, [pc, #272]	; (80056b8 <HAL_RCC_ClockConfig+0x124>)
 80055a6:	6813      	ldr	r3, [r2, #0]
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	428b      	cmp	r3, r1
 80055ae:	d328      	bcc.n	8005602 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055b0:	6821      	ldr	r1, [r4, #0]
 80055b2:	078e      	lsls	r6, r1, #30
 80055b4:	d430      	bmi.n	8005618 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055b6:	07ca      	lsls	r2, r1, #31
 80055b8:	d443      	bmi.n	8005642 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055ba:	4a3f      	ldr	r2, [pc, #252]	; (80056b8 <HAL_RCC_ClockConfig+0x124>)
 80055bc:	6813      	ldr	r3, [r2, #0]
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	42ab      	cmp	r3, r5
 80055c4:	d865      	bhi.n	8005692 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055c6:	6822      	ldr	r2, [r4, #0]
 80055c8:	4d3c      	ldr	r5, [pc, #240]	; (80056bc <HAL_RCC_ClockConfig+0x128>)
 80055ca:	f012 0f04 	tst.w	r2, #4
 80055ce:	d16c      	bne.n	80056aa <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d0:	0713      	lsls	r3, r2, #28
 80055d2:	d506      	bpl.n	80055e2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055d4:	686b      	ldr	r3, [r5, #4]
 80055d6:	6922      	ldr	r2, [r4, #16]
 80055d8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80055dc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80055e0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055e2:	f7ff ffb1 	bl	8005548 <HAL_RCC_GetSysClockFreq>
 80055e6:	686b      	ldr	r3, [r5, #4]
 80055e8:	4a35      	ldr	r2, [pc, #212]	; (80056c0 <HAL_RCC_ClockConfig+0x12c>)
 80055ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80055ee:	5cd3      	ldrb	r3, [r2, r3]
 80055f0:	40d8      	lsrs	r0, r3
 80055f2:	4b34      	ldr	r3, [pc, #208]	; (80056c4 <HAL_RCC_ClockConfig+0x130>)
 80055f4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80055f6:	4b34      	ldr	r3, [pc, #208]	; (80056c8 <HAL_RCC_ClockConfig+0x134>)
 80055f8:	6818      	ldr	r0, [r3, #0]
 80055fa:	f7fe fdd9 	bl	80041b0 <HAL_InitTick>
  return HAL_OK;
 80055fe:	2000      	movs	r0, #0
 8005600:	e7ce      	b.n	80055a0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005602:	6813      	ldr	r3, [r2, #0]
 8005604:	f023 0307 	bic.w	r3, r3, #7
 8005608:	430b      	orrs	r3, r1
 800560a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800560c:	6813      	ldr	r3, [r2, #0]
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	428b      	cmp	r3, r1
 8005614:	d1c3      	bne.n	800559e <HAL_RCC_ClockConfig+0xa>
 8005616:	e7cb      	b.n	80055b0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005618:	4b28      	ldr	r3, [pc, #160]	; (80056bc <HAL_RCC_ClockConfig+0x128>)
 800561a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800561e:	bf1e      	ittt	ne
 8005620:	685a      	ldrne	r2, [r3, #4]
 8005622:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8005626:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005628:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800562a:	bf42      	ittt	mi
 800562c:	685a      	ldrmi	r2, [r3, #4]
 800562e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8005632:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	68a0      	ldr	r0, [r4, #8]
 8005638:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800563c:	4302      	orrs	r2, r0
 800563e:	605a      	str	r2, [r3, #4]
 8005640:	e7b9      	b.n	80055b6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005642:	6862      	ldr	r2, [r4, #4]
 8005644:	4e1d      	ldr	r6, [pc, #116]	; (80056bc <HAL_RCC_ClockConfig+0x128>)
 8005646:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005648:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800564a:	d11a      	bne.n	8005682 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800564c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005650:	d0a5      	beq.n	800559e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005652:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005654:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005658:	f023 0303 	bic.w	r3, r3, #3
 800565c:	4313      	orrs	r3, r2
 800565e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8005660:	f7fe fde8 	bl	8004234 <HAL_GetTick>
 8005664:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005666:	6873      	ldr	r3, [r6, #4]
 8005668:	6862      	ldr	r2, [r4, #4]
 800566a:	f003 030c 	and.w	r3, r3, #12
 800566e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005672:	d0a2      	beq.n	80055ba <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005674:	f7fe fdde 	bl	8004234 <HAL_GetTick>
 8005678:	1bc0      	subs	r0, r0, r7
 800567a:	4540      	cmp	r0, r8
 800567c:	d9f3      	bls.n	8005666 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800567e:	2003      	movs	r0, #3
 8005680:	e78e      	b.n	80055a0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005682:	2a02      	cmp	r2, #2
 8005684:	d102      	bne.n	800568c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005686:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800568a:	e7e1      	b.n	8005650 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800568c:	f013 0f02 	tst.w	r3, #2
 8005690:	e7de      	b.n	8005650 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005692:	6813      	ldr	r3, [r2, #0]
 8005694:	f023 0307 	bic.w	r3, r3, #7
 8005698:	432b      	orrs	r3, r5
 800569a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800569c:	6813      	ldr	r3, [r2, #0]
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	42ab      	cmp	r3, r5
 80056a4:	f47f af7b 	bne.w	800559e <HAL_RCC_ClockConfig+0xa>
 80056a8:	e78d      	b.n	80055c6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056aa:	686b      	ldr	r3, [r5, #4]
 80056ac:	68e1      	ldr	r1, [r4, #12]
 80056ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80056b2:	430b      	orrs	r3, r1
 80056b4:	606b      	str	r3, [r5, #4]
 80056b6:	e78b      	b.n	80055d0 <HAL_RCC_ClockConfig+0x3c>
 80056b8:	40022000 	.word	0x40022000
 80056bc:	40021000 	.word	0x40021000
 80056c0:	0800c3c2 	.word	0x0800c3c2
 80056c4:	20000000 	.word	0x20000000
 80056c8:	20000008 	.word	0x20000008

080056cc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80056cc:	6803      	ldr	r3, [r0, #0]
{
 80056ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80056d2:	07d9      	lsls	r1, r3, #31
{
 80056d4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80056d6:	d520      	bpl.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056d8:	4c36      	ldr	r4, [pc, #216]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80056da:	69e3      	ldr	r3, [r4, #28]
 80056dc:	00da      	lsls	r2, r3, #3
 80056de:	d432      	bmi.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80056e0:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80056e2:	69e3      	ldr	r3, [r4, #28]
 80056e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056e8:	61e3      	str	r3, [r4, #28]
 80056ea:	69e3      	ldr	r3, [r4, #28]
 80056ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f0:	9301      	str	r3, [sp, #4]
 80056f2:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056f4:	4f30      	ldr	r7, [pc, #192]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	05db      	lsls	r3, r3, #23
 80056fa:	d526      	bpl.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056fc:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056fe:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005702:	d136      	bne.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005704:	6a23      	ldr	r3, [r4, #32]
 8005706:	686a      	ldr	r2, [r5, #4]
 8005708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800570c:	4313      	orrs	r3, r2
 800570e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005710:	b11e      	cbz	r6, 800571a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005712:	69e3      	ldr	r3, [r4, #28]
 8005714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005718:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800571a:	6828      	ldr	r0, [r5, #0]
 800571c:	0783      	lsls	r3, r0, #30
 800571e:	d506      	bpl.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005720:	4924      	ldr	r1, [pc, #144]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005722:	68ab      	ldr	r3, [r5, #8]
 8005724:	684a      	ldr	r2, [r1, #4]
 8005726:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800572a:	431a      	orrs	r2, r3
 800572c:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800572e:	f010 0010 	ands.w	r0, r0, #16
 8005732:	d01b      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005734:	4a1f      	ldr	r2, [pc, #124]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005736:	68e9      	ldr	r1, [r5, #12]
 8005738:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800573a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800573c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005740:	430b      	orrs	r3, r1
 8005742:	6053      	str	r3, [r2, #4]
 8005744:	e012      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 8005746:	2600      	movs	r6, #0
 8005748:	e7d4      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005750:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8005752:	f7fe fd6f 	bl	8004234 <HAL_GetTick>
 8005756:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	05d8      	lsls	r0, r3, #23
 800575c:	d4ce      	bmi.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800575e:	f7fe fd69 	bl	8004234 <HAL_GetTick>
 8005762:	eba0 0008 	sub.w	r0, r0, r8
 8005766:	2864      	cmp	r0, #100	; 0x64
 8005768:	d9f6      	bls.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800576a:	2003      	movs	r0, #3
}
 800576c:	b002      	add	sp, #8
 800576e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005772:	686a      	ldr	r2, [r5, #4]
 8005774:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005778:	429a      	cmp	r2, r3
 800577a:	d0c3      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800577c:	2001      	movs	r0, #1
 800577e:	4a0f      	ldr	r2, [pc, #60]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005780:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8005782:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005786:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005788:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800578c:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8005790:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005792:	07d9      	lsls	r1, r3, #31
 8005794:	d5b6      	bpl.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8005796:	f7fe fd4d 	bl	8004234 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800579a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800579e:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a0:	6a23      	ldr	r3, [r4, #32]
 80057a2:	079a      	lsls	r2, r3, #30
 80057a4:	d4ae      	bmi.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057a6:	f7fe fd45 	bl	8004234 <HAL_GetTick>
 80057aa:	1bc0      	subs	r0, r0, r7
 80057ac:	4540      	cmp	r0, r8
 80057ae:	d9f7      	bls.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80057b0:	e7db      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80057b2:	bf00      	nop
 80057b4:	40021000 	.word	0x40021000
 80057b8:	40007000 	.word	0x40007000
 80057bc:	42420000 	.word	0x42420000

080057c0 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80057c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80057c4:	461c      	mov	r4, r3
 80057c6:	4616      	mov	r6, r2
 80057c8:	460f      	mov	r7, r1
 80057ca:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80057cc:	f7fe fd32 	bl	8004234 <HAL_GetTick>
 80057d0:	4434      	add	r4, r6
 80057d2:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80057d4:	f7fe fd2e 	bl	8004234 <HAL_GetTick>
 80057d8:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80057da:	4b23      	ldr	r3, [pc, #140]	; (8005868 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80057e2:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057e4:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 80057e6:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057e8:	6893      	ldr	r3, [r2, #8]
 80057ea:	ea37 0303 	bics.w	r3, r7, r3
 80057ee:	d001      	beq.n	80057f4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 80057f0:	2000      	movs	r0, #0
 80057f2:	e02e      	b.n	8005852 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 80057f4:	1c73      	adds	r3, r6, #1
 80057f6:	d0f7      	beq.n	80057e8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057f8:	f7fe fd1c 	bl	8004234 <HAL_GetTick>
 80057fc:	eba0 0008 	sub.w	r0, r0, r8
 8005800:	42a0      	cmp	r0, r4
 8005802:	d329      	bcc.n	8005858 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005804:	682b      	ldr	r3, [r5, #0]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800580c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800580e:	686a      	ldr	r2, [r5, #4]
 8005810:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8005814:	d10a      	bne.n	800582c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 8005816:	68aa      	ldr	r2, [r5, #8]
 8005818:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800581c:	d002      	beq.n	8005824 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800581e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005822:	d103      	bne.n	800582c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800582a:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800582c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800582e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005832:	d107      	bne.n	8005844 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005842:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005844:	2301      	movs	r3, #1
 8005846:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800584a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800584c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 800584e:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8005852:	b002      	add	sp, #8
 8005854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (count == 0U)
 8005858:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800585a:	2b00      	cmp	r3, #0
      count--;
 800585c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800585e:	bf08      	it	eq
 8005860:	2400      	moveq	r4, #0
      count--;
 8005862:	3b01      	subs	r3, #1
 8005864:	e7be      	b.n	80057e4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8005866:	bf00      	nop
 8005868:	20000000 	.word	0x20000000

0800586c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800586c:	b510      	push	{r4, lr}
 800586e:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005870:	460a      	mov	r2, r1
 8005872:	2180      	movs	r1, #128	; 0x80
{
 8005874:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005876:	f7ff ffa3 	bl	80057c0 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800587a:	b120      	cbz	r0, 8005886 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 800587c:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800587e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005880:	f043 0320 	orr.w	r3, r3, #32
 8005884:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8005886:	bd10      	pop	{r4, pc}

08005888 <HAL_SPI_Init>:
{
 8005888:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800588a:	4604      	mov	r4, r0
 800588c:	2800      	cmp	r0, #0
 800588e:	d051      	beq.n	8005934 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005890:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005892:	2b00      	cmp	r3, #0
 8005894:	d14a      	bne.n	800592c <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005896:	6842      	ldr	r2, [r0, #4]
 8005898:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800589c:	d000      	beq.n	80058a0 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800589e:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058a0:	2300      	movs	r3, #0
 80058a2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80058a4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80058a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80058ac:	b923      	cbnz	r3, 80058b8 <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 80058ae:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80058b0:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80058b4:	f7fe fba4 	bl	8004000 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80058b8:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80058ba:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80058bc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80058c0:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058c2:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80058c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058c8:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058ca:	6863      	ldr	r3, [r4, #4]
 80058cc:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 80058d0:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80058d4:	4303      	orrs	r3, r0
 80058d6:	68e0      	ldr	r0, [r4, #12]
 80058d8:	69a1      	ldr	r1, [r4, #24]
 80058da:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 80058de:	4303      	orrs	r3, r0
 80058e0:	6920      	ldr	r0, [r4, #16]
 80058e2:	f000 0002 	and.w	r0, r0, #2
 80058e6:	4303      	orrs	r3, r0
 80058e8:	6960      	ldr	r0, [r4, #20]
 80058ea:	f000 0001 	and.w	r0, r0, #1
 80058ee:	4303      	orrs	r3, r0
 80058f0:	f401 7000 	and.w	r0, r1, #512	; 0x200
 80058f4:	4303      	orrs	r3, r0
 80058f6:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80058f8:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058fa:	f000 0038 	and.w	r0, r0, #56	; 0x38
 80058fe:	4303      	orrs	r3, r0
 8005900:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005902:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005906:	f000 0080 	and.w	r0, r0, #128	; 0x80
 800590a:	4303      	orrs	r3, r0
 800590c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800590e:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8005912:	4303      	orrs	r3, r0
 8005914:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005916:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005918:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800591a:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800591c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005920:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8005922:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005924:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005926:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800592a:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800592c:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800592e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005932:	e7b5      	b.n	80058a0 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8005934:	2001      	movs	r0, #1
 8005936:	e7f8      	b.n	800592a <HAL_SPI_Init+0xa2>

08005938 <HAL_SPI_Transmit>:
{
 8005938:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800593c:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800593e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8005942:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8005944:	2b01      	cmp	r3, #1
{
 8005946:	460d      	mov	r5, r1
 8005948:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 800594a:	f000 80a6 	beq.w	8005a9a <HAL_SPI_Transmit+0x162>
 800594e:	2301      	movs	r3, #1
 8005950:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8005954:	f7fe fc6e 	bl	8004234 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005958:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 800595c:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800595e:	2b01      	cmp	r3, #1
 8005960:	fa5f f883 	uxtb.w	r8, r3
 8005964:	f040 8096 	bne.w	8005a94 <HAL_SPI_Transmit+0x15c>
  if ((pData == NULL) || (Size == 0U))
 8005968:	2d00      	cmp	r5, #0
 800596a:	d063      	beq.n	8005a34 <HAL_SPI_Transmit+0xfc>
 800596c:	2f00      	cmp	r7, #0
 800596e:	d061      	beq.n	8005a34 <HAL_SPI_Transmit+0xfc>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005970:	2303      	movs	r3, #3
 8005972:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005976:	2300      	movs	r3, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005978:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800597a:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800597c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->RxISR       = NULL;
 8005980:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8005984:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005986:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005988:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800598a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800598c:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_DISABLE(hspi);
 800598e:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8005990:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005992:	d107      	bne.n	80059a4 <HAL_SPI_Transmit+0x6c>
    __HAL_SPI_DISABLE(hspi);
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800599a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059a2:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059a4:	681a      	ldr	r2, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059a6:	6861      	ldr	r1, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059a8:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80059aa:	bf5e      	ittt	pl
 80059ac:	681a      	ldrpl	r2, [r3, #0]
 80059ae:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80059b2:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059b4:	68e2      	ldr	r2, [r4, #12]
 80059b6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80059ba:	d145      	bne.n	8005a48 <HAL_SPI_Transmit+0x110>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059bc:	b109      	cbz	r1, 80059c2 <HAL_SPI_Transmit+0x8a>
 80059be:	2f01      	cmp	r7, #1
 80059c0:	d107      	bne.n	80059d2 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059c2:	f835 2b02 	ldrh.w	r2, [r5], #2
 80059c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059c8:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80059ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80059d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	b9b3      	cbnz	r3, 8005a06 <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059d8:	464a      	mov	r2, r9
 80059da:	4631      	mov	r1, r6
 80059dc:	4620      	mov	r0, r4
 80059de:	f7ff ff45 	bl	800586c <SPI_EndRxTxTransaction>
 80059e2:	2800      	cmp	r0, #0
 80059e4:	d153      	bne.n	8005a8e <HAL_SPI_Transmit+0x156>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059e6:	68a3      	ldr	r3, [r4, #8]
 80059e8:	b933      	cbnz	r3, 80059f8 <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059ea:	9301      	str	r3, [sp, #4]
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	9201      	str	r2, [sp, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	9301      	str	r3, [sp, #4]
 80059f6:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80059fa:	b9db      	cbnz	r3, 8005a34 <HAL_SPI_Transmit+0xfc>
    hspi->State = HAL_SPI_STATE_READY;
 80059fc:	2201      	movs	r2, #1
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059fe:	4698      	mov	r8, r3
    hspi->State = HAL_SPI_STATE_READY;
 8005a00:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
 8005a04:	e016      	b.n	8005a34 <HAL_SPI_Transmit+0xfc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a06:	6822      	ldr	r2, [r4, #0]
 8005a08:	6893      	ldr	r3, [r2, #8]
 8005a0a:	0798      	lsls	r0, r3, #30
 8005a0c:	d505      	bpl.n	8005a1a <HAL_SPI_Transmit+0xe2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a10:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005a14:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a16:	6323      	str	r3, [r4, #48]	; 0x30
 8005a18:	e7d7      	b.n	80059ca <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a1a:	f7fe fc0b 	bl	8004234 <HAL_GetTick>
 8005a1e:	eba0 0009 	sub.w	r0, r0, r9
 8005a22:	42b0      	cmp	r0, r6
 8005a24:	d30d      	bcc.n	8005a42 <HAL_SPI_Transmit+0x10a>
 8005a26:	1c71      	adds	r1, r6, #1
 8005a28:	d0d3      	beq.n	80059d2 <HAL_SPI_Transmit+0x9a>
          hspi->State = HAL_SPI_STATE_READY;
 8005a2a:	2301      	movs	r3, #1
          errorcode = HAL_TIMEOUT;
 8005a2c:	f04f 0803 	mov.w	r8, #3
          hspi->State = HAL_SPI_STATE_READY;
 8005a30:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a34:	2300      	movs	r3, #0
 8005a36:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8005a3a:	4640      	mov	r0, r8
 8005a3c:	b003      	add	sp, #12
 8005a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a42:	2e00      	cmp	r6, #0
 8005a44:	d1c5      	bne.n	80059d2 <HAL_SPI_Transmit+0x9a>
 8005a46:	e7f0      	b.n	8005a2a <HAL_SPI_Transmit+0xf2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a48:	b109      	cbz	r1, 8005a4e <HAL_SPI_Transmit+0x116>
 8005a4a:	2f01      	cmp	r7, #1
 8005a4c:	d108      	bne.n	8005a60 <HAL_SPI_Transmit+0x128>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a4e:	782a      	ldrb	r2, [r5, #0]
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a50:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a52:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a54:	3301      	adds	r3, #1
 8005a56:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005a58:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8005a60:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d0b7      	beq.n	80059d8 <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	0792      	lsls	r2, r2, #30
 8005a6e:	d502      	bpl.n	8005a76 <HAL_SPI_Transmit+0x13e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a70:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005a72:	7812      	ldrb	r2, [r2, #0]
 8005a74:	e7ec      	b.n	8005a50 <HAL_SPI_Transmit+0x118>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a76:	f7fe fbdd 	bl	8004234 <HAL_GetTick>
 8005a7a:	eba0 0009 	sub.w	r0, r0, r9
 8005a7e:	42b0      	cmp	r0, r6
 8005a80:	d302      	bcc.n	8005a88 <HAL_SPI_Transmit+0x150>
 8005a82:	1c73      	adds	r3, r6, #1
 8005a84:	d0ec      	beq.n	8005a60 <HAL_SPI_Transmit+0x128>
 8005a86:	e7d0      	b.n	8005a2a <HAL_SPI_Transmit+0xf2>
 8005a88:	2e00      	cmp	r6, #0
 8005a8a:	d1e9      	bne.n	8005a60 <HAL_SPI_Transmit+0x128>
 8005a8c:	e7cd      	b.n	8005a2a <HAL_SPI_Transmit+0xf2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a8e:	2320      	movs	r3, #32
 8005a90:	6563      	str	r3, [r4, #84]	; 0x54
 8005a92:	e7a8      	b.n	80059e6 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 8005a94:	f04f 0802 	mov.w	r8, #2
 8005a98:	e7cc      	b.n	8005a34 <HAL_SPI_Transmit+0xfc>
  __HAL_LOCK(hspi);
 8005a9a:	f04f 0802 	mov.w	r8, #2
 8005a9e:	e7cc      	b.n	8005a3a <HAL_SPI_Transmit+0x102>

08005aa0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005aa0:	b084      	sub	sp, #16
 8005aa2:	a801      	add	r0, sp, #4
 8005aa4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8005aa8:	b004      	add	sp, #16
 8005aaa:	2000      	movs	r0, #0
 8005aac:	4770      	bx	lr

08005aae <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005aae:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005ab0:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8005aba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8005abe:	4770      	bx	lr

08005ac0 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005ac0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8005ac4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005ac8:	045b      	lsls	r3, r3, #17
 8005aca:	0c5b      	lsrs	r3, r3, #17
 8005acc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	4770      	bx	lr

08005ad4 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	4770      	bx	lr

08005ad8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005ad8:	b084      	sub	sp, #16
 8005ada:	b510      	push	{r4, lr}
 8005adc:	4604      	mov	r4, r0
 8005ade:	a803      	add	r0, sp, #12
 8005ae0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005ae4:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0U;
 8005aec:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005af0:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005af4:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 8005af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005afc:	b004      	add	sp, #16
 8005afe:	4770      	bx	lr

08005b00 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b00:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005b02:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8005b04:	78ce      	ldrb	r6, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005b06:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 8005b0a:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005b0c:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8005b10:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8005b14:	0424      	lsls	r4, r4, #16
 8005b16:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 8005b18:	2e03      	cmp	r6, #3
 8005b1a:	d84c      	bhi.n	8005bb6 <USB_ActivateEndpoint+0xb6>
 8005b1c:	e8df f006 	tbb	[pc, r6]
 8005b20:	44464802 	.word	0x44464802
  HAL_StatusTypeDef ret = HAL_OK;
 8005b24:	4630      	mov	r0, r6
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005b26:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005b2a:	f248 0780 	movw	r7, #32896	; 0x8080
 8005b2e:	433c      	orrs	r4, r7
 8005b30:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005b34:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8005b38:	f8df c27c 	ldr.w	ip, [pc, #636]	; 8005db8 <USB_ActivateEndpoint+0x2b8>
 8005b3c:	b2a4      	uxth	r4, r4
 8005b3e:	ea04 040c 	and.w	r4, r4, ip
 8005b42:	4314      	orrs	r4, r2
 8005b44:	433c      	orrs	r4, r7
 8005b46:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8005b4a:	7b0c      	ldrb	r4, [r1, #12]
 8005b4c:	eb03 1e02 	add.w	lr, r3, r2, lsl #4
 8005b50:	2c00      	cmp	r4, #0
 8005b52:	f040 808b 	bne.w	8005c6c <USB_ActivateEndpoint+0x16c>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b56:	88cd      	ldrh	r5, [r1, #6]
    if (ep->is_in != 0U)
 8005b58:	784c      	ldrb	r4, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b5a:	086d      	lsrs	r5, r5, #1
 8005b5c:	006d      	lsls	r5, r5, #1
    if (ep->is_in != 0U)
 8005b5e:	b364      	cbz	r4, 8005bba <USB_ActivateEndpoint+0xba>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b60:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8005b64:	b2a4      	uxth	r4, r4
 8005b66:	4474      	add	r4, lr
 8005b68:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b6c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005b70:	064f      	lsls	r7, r1, #25
 8005b72:	d50a      	bpl.n	8005b8a <USB_ActivateEndpoint+0x8a>
 8005b74:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8005b78:	b2ad      	uxth	r5, r5
 8005b7a:	ea05 050c 	and.w	r5, r5, ip
 8005b7e:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8005b82:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
 8005b86:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b8a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005b8e:	4c8b      	ldr	r4, [pc, #556]	; (8005dbc <USB_ActivateEndpoint+0x2bc>)
 8005b90:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8005b92:	2e01      	cmp	r6, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b94:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8005b98:	d001      	beq.n	8005b9e <USB_ActivateEndpoint+0x9e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b9a:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b9e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8005ba2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005ba6:	e0bf      	b.n	8005d28 <USB_ActivateEndpoint+0x228>
      wEpRegVal |= USB_EP_INTERRUPT;
 8005ba8:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8005bac:	2000      	movs	r0, #0
      break;
 8005bae:	e7bc      	b.n	8005b2a <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005bb0:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
      break;
 8005bb4:	e7fa      	b.n	8005bac <USB_ActivateEndpoint+0xac>
  switch (ep->type)
 8005bb6:	2001      	movs	r0, #1
 8005bb8:	e7b7      	b.n	8005b2a <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005bba:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8005bbe:	b2a4      	uxth	r4, r4
 8005bc0:	4474      	add	r4, lr
 8005bc2:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005bc6:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8005bca:	b2a4      	uxth	r4, r4
 8005bcc:	4474      	add	r4, lr
 8005bce:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	; 0x40c
 8005bd2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005bd6:	f8a4 540c 	strh.w	r5, [r4, #1036]	; 0x40c
 8005bda:	690d      	ldr	r5, [r1, #16]
 8005bdc:	2d3e      	cmp	r5, #62	; 0x3e
 8005bde:	d92f      	bls.n	8005c40 <USB_ActivateEndpoint+0x140>
 8005be0:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 8005be4:	096e      	lsrs	r6, r5, #5
 8005be6:	06ed      	lsls	r5, r5, #27
 8005be8:	bf08      	it	eq
 8005bea:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8005bee:	b289      	uxth	r1, r1
 8005bf0:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8005bf4:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005bf8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005bfc:	b289      	uxth	r1, r1
 8005bfe:	f8a4 140c 	strh.w	r1, [r4, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c02:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005c06:	044f      	lsls	r7, r1, #17
 8005c08:	d50d      	bpl.n	8005c26 <USB_ActivateEndpoint+0x126>
 8005c0a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005c0e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8005c12:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005c16:	0409      	lsls	r1, r1, #16
 8005c18:	0c09      	lsrs	r1, r1, #16
 8005c1a:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8005c1e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005c22:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 8005c26:	4c66      	ldr	r4, [pc, #408]	; (8005dc0 <USB_ActivateEndpoint+0x2c0>)
 8005c28:	b9ca      	cbnz	r2, 8005c5e <USB_ActivateEndpoint+0x15e>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c2a:	8819      	ldrh	r1, [r3, #0]
 8005c2c:	b289      	uxth	r1, r1
 8005c2e:	4021      	ands	r1, r4
 8005c30:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8005c34:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8005c38:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005c3c:	8019      	strh	r1, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8005c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005c40:	b915      	cbnz	r5, 8005c48 <USB_ActivateEndpoint+0x148>
 8005c42:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 8005c46:	e7d5      	b.n	8005bf4 <USB_ActivateEndpoint+0xf4>
 8005c48:	07e9      	lsls	r1, r5, #31
 8005c4a:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 8005c4e:	ea4f 0655 	mov.w	r6, r5, lsr #1
 8005c52:	bf48      	it	mi
 8005c54:	3601      	addmi	r6, #1
 8005c56:	b289      	uxth	r1, r1
 8005c58:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8005c5c:	e7ce      	b.n	8005bfc <USB_ActivateEndpoint+0xfc>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005c5e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005c62:	b289      	uxth	r1, r1
 8005c64:	4021      	ands	r1, r4
 8005c66:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8005c6a:	e798      	b.n	8005b9e <USB_ActivateEndpoint+0x9e>
    if (ep->type == EP_TYPE_BULK)
 8005c6c:	2e02      	cmp	r6, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005c6e:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8005c72:	d15c      	bne.n	8005d2e <USB_ActivateEndpoint+0x22e>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005c74:	b2ad      	uxth	r5, r5
 8005c76:	ea05 050c 	and.w	r5, r5, ip
 8005c7a:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 8005c7e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005c82:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005c86:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8005c8a:	890d      	ldrh	r5, [r1, #8]
 8005c8c:	b2a4      	uxth	r4, r4
 8005c8e:	086d      	lsrs	r5, r5, #1
 8005c90:	4474      	add	r4, lr
 8005c92:	006d      	lsls	r5, r5, #1
 8005c94:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
 8005c98:	894d      	ldrh	r5, [r1, #10]
 8005c9a:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8005c9e:	086d      	lsrs	r5, r5, #1
 8005ca0:	b2a4      	uxth	r4, r4
 8005ca2:	4474      	add	r4, lr
 8005ca4:	006d      	lsls	r5, r5, #1
 8005ca6:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
    if (ep->is_in == 0U)
 8005caa:	7849      	ldrb	r1, [r1, #1]
 8005cac:	2900      	cmp	r1, #0
 8005cae:	d146      	bne.n	8005d3e <USB_ActivateEndpoint+0x23e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cb0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005cb4:	044e      	lsls	r6, r1, #17
 8005cb6:	d50d      	bpl.n	8005cd4 <USB_ActivateEndpoint+0x1d4>
 8005cb8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005cbc:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8005cc0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005cc4:	0409      	lsls	r1, r1, #16
 8005cc6:	0c09      	lsrs	r1, r1, #16
 8005cc8:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8005ccc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005cd0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cd4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005cd8:	064d      	lsls	r5, r1, #25
 8005cda:	d50d      	bpl.n	8005cf8 <USB_ActivateEndpoint+0x1f8>
 8005cdc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005ce0:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8005ce4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005ce8:	0409      	lsls	r1, r1, #16
 8005cea:	0c09      	lsrs	r1, r1, #16
 8005cec:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8005cf0:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8005cf4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cf8:	f248 0480 	movw	r4, #32896	; 0x8080
 8005cfc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005d00:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8005d04:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005d08:	0409      	lsls	r1, r1, #16
 8005d0a:	0c09      	lsrs	r1, r1, #16
 8005d0c:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8005d10:	4321      	orrs	r1, r4
 8005d12:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d16:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005d1a:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8005d1e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8005d22:	0409      	lsls	r1, r1, #16
 8005d24:	0c09      	lsrs	r1, r1, #16
 8005d26:	4321      	orrs	r1, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d28:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8005d2c:	e787      	b.n	8005c3e <USB_ActivateEndpoint+0x13e>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005d2e:	f425 45e2 	bic.w	r5, r5, #28928	; 0x7100
 8005d32:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 8005d36:	042d      	lsls	r5, r5, #16
 8005d38:	0c2d      	lsrs	r5, r5, #16
 8005d3a:	433d      	orrs	r5, r7
 8005d3c:	e7a1      	b.n	8005c82 <USB_ActivateEndpoint+0x182>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d3e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005d42:	044c      	lsls	r4, r1, #17
 8005d44:	d50d      	bpl.n	8005d62 <USB_ActivateEndpoint+0x262>
 8005d46:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005d4a:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8005d4e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005d52:	0409      	lsls	r1, r1, #16
 8005d54:	0c09      	lsrs	r1, r1, #16
 8005d56:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8005d5a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005d5e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d62:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005d66:	0649      	lsls	r1, r1, #25
 8005d68:	d50d      	bpl.n	8005d86 <USB_ActivateEndpoint+0x286>
 8005d6a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005d6e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8005d72:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005d76:	0409      	lsls	r1, r1, #16
 8005d78:	0c09      	lsrs	r1, r1, #16
 8005d7a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8005d7e:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8005d82:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d86:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005d8a:	4c0c      	ldr	r4, [pc, #48]	; (8005dbc <USB_ActivateEndpoint+0x2bc>)
 8005d8c:	b289      	uxth	r1, r1
 8005d8e:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8005d90:	2e01      	cmp	r6, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d92:	bf18      	it	ne
 8005d94:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d98:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8005d9c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005da0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005da4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005da8:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8005dac:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005db0:	0409      	lsls	r1, r1, #16
 8005db2:	0c09      	lsrs	r1, r1, #16
 8005db4:	e6f3      	b.n	8005b9e <USB_ActivateEndpoint+0x9e>
 8005db6:	bf00      	nop
 8005db8:	ffff8f8f 	.word	0xffff8f8f
 8005dbc:	ffff8fbf 	.word	0xffff8fbf
 8005dc0:	ffffbf8f 	.word	0xffffbf8f

08005dc4 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8005dc4:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dc6:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8005dc8:	7b09      	ldrb	r1, [r1, #12]
 8005dca:	bbd9      	cbnz	r1, 8005e44 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8005dcc:	b30a      	cbz	r2, 8005e12 <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dce:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005dd2:	0651      	lsls	r1, r2, #25
 8005dd4:	d50d      	bpl.n	8005df2 <USB_DeactivateEndpoint+0x2e>
 8005dd6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005dda:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005dde:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005de2:	0412      	lsls	r2, r2, #16
 8005de4:	0c12      	lsrs	r2, r2, #16
 8005de6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dea:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005dee:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005df2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005df6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005dfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005dfe:	0412      	lsls	r2, r2, #16
 8005e00:	0c12      	lsrs	r2, r2, #16
 8005e02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e0a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8005e0e:	2000      	movs	r0, #0
 8005e10:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e12:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005e16:	0452      	lsls	r2, r2, #17
 8005e18:	d50d      	bpl.n	8005e36 <USB_DeactivateEndpoint+0x72>
 8005e1a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005e1e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005e22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005e26:	0412      	lsls	r2, r2, #16
 8005e28:	0c12      	lsrs	r2, r2, #16
 8005e2a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005e2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e32:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e36:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005e3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005e42:	e7dc      	b.n	8005dfe <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8005e44:	2a00      	cmp	r2, #0
 8005e46:	d148      	bne.n	8005eda <USB_DeactivateEndpoint+0x116>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e48:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005e4c:	0451      	lsls	r1, r2, #17
 8005e4e:	d50d      	bpl.n	8005e6c <USB_DeactivateEndpoint+0xa8>
 8005e50:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005e54:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005e58:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005e5c:	0412      	lsls	r2, r2, #16
 8005e5e:	0c12      	lsrs	r2, r2, #16
 8005e60:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005e64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e68:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e6c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005e70:	0652      	lsls	r2, r2, #25
 8005e72:	d50d      	bpl.n	8005e90 <USB_DeactivateEndpoint+0xcc>
 8005e74:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005e78:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005e7c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005e80:	0412      	lsls	r2, r2, #16
 8005e82:	0c12      	lsrs	r2, r2, #16
 8005e84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e88:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005e8c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e90:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8005e94:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005e98:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005e9c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005ea0:	0412      	lsls	r2, r2, #16
 8005ea2:	0c12      	lsrs	r2, r2, #16
 8005ea4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ea8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005eac:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005eb0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005eb4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005eb8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005ebc:	0412      	lsls	r2, r2, #16
 8005ebe:	0c12      	lsrs	r2, r2, #16
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ec6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005eca:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ed2:	0412      	lsls	r2, r2, #16
 8005ed4:	0c12      	lsrs	r2, r2, #16
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	e797      	b.n	8005e0a <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005eda:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005ede:	0451      	lsls	r1, r2, #17
 8005ee0:	d50d      	bpl.n	8005efe <USB_DeactivateEndpoint+0x13a>
 8005ee2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005ee6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005eea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005eee:	0412      	lsls	r2, r2, #16
 8005ef0:	0c12      	lsrs	r2, r2, #16
 8005ef2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005ef6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005efa:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005efe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005f02:	0652      	lsls	r2, r2, #25
 8005f04:	d50d      	bpl.n	8005f22 <USB_DeactivateEndpoint+0x15e>
 8005f06:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005f0a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005f0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005f12:	0412      	lsls	r2, r2, #16
 8005f14:	0c12      	lsrs	r2, r2, #16
 8005f16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f1a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005f1e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f22:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8005f26:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005f2a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005f2e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005f32:	0412      	lsls	r2, r2, #16
 8005f34:	0c12      	lsrs	r2, r2, #16
 8005f36:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005f3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f3e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f42:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005f46:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005f4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f4e:	0412      	lsls	r2, r2, #16
 8005f50:	0c12      	lsrs	r2, r2, #16
 8005f52:	430a      	orrs	r2, r1
 8005f54:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f58:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005f5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005f64:	e7b5      	b.n	8005ed2 <USB_DeactivateEndpoint+0x10e>

08005f66 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8005f66:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005f68:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8005f6a:	b18b      	cbz	r3, 8005f90 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005f6c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f78:	041b      	lsls	r3, r3, #16
 8005f7a:	0c1b      	lsrs	r3, r3, #16
 8005f7c:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f88:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005f90:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9c:	041b      	lsls	r3, r3, #16
 8005f9e:	0c1b      	lsrs	r3, r3, #16
 8005fa0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fa4:	e7ec      	b.n	8005f80 <USB_EPSetStall+0x1a>

08005fa6 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8005fa6:	7b0b      	ldrb	r3, [r1, #12]
 8005fa8:	bb3b      	cbnz	r3, 8005ffa <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 8005faa:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fac:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8005fae:	b333      	cbz	r3, 8005ffe <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fb0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005fb4:	065b      	lsls	r3, r3, #25
 8005fb6:	d50d      	bpl.n	8005fd4 <USB_EPClearStall+0x2e>
 8005fb8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005fbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc4:	041b      	lsls	r3, r3, #16
 8005fc6:	0c1b      	lsrs	r3, r3, #16
 8005fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fd0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8005fd4:	78cb      	ldrb	r3, [r1, #3]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d00f      	beq.n	8005ffa <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005fda:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fe6:	041b      	lsls	r3, r3, #16
 8005fe8:	0c1b      	lsrs	r3, r3, #16
 8005fea:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ffe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006002:	045b      	lsls	r3, r3, #17
 8006004:	d50d      	bpl.n	8006022 <USB_EPClearStall+0x7c>
 8006006:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800600a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800600e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006012:	041b      	lsls	r3, r3, #16
 8006014:	0c1b      	lsrs	r3, r3, #16
 8006016:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800601a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800601e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006022:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006026:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800602a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800602e:	041b      	lsls	r3, r3, #16
 8006030:	0c1b      	lsrs	r3, r3, #16
 8006032:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006036:	e7da      	b.n	8005fee <USB_EPClearStall+0x48>

08006038 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8006038:	b911      	cbnz	r1, 8006040 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800603a:	2380      	movs	r3, #128	; 0x80
 800603c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8006040:	2000      	movs	r0, #0
 8006042:	4770      	bx	lr

08006044 <USB_DevConnect>:
 8006044:	2000      	movs	r0, #0
 8006046:	4770      	bx	lr

08006048 <USB_DevDisconnect>:
 8006048:	2000      	movs	r0, #0
 800604a:	4770      	bx	lr

0800604c <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800604c:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8006050:	b280      	uxth	r0, r0
 8006052:	4770      	bx	lr

08006054 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8006054:	2000      	movs	r0, #0
 8006056:	4770      	bx	lr

08006058 <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006058:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800605c:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800605e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006062:	085b      	lsrs	r3, r3, #1
 8006064:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (count = n; count != 0U; count--)
 8006068:	4293      	cmp	r3, r2
 800606a:	d100      	bne.n	800606e <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 800606c:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 800606e:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8006072:	f822 0b04 	strh.w	r0, [r2], #4
  for (count = n; count != 0U; count--)
 8006076:	e7f7      	b.n	8006068 <USB_WritePMA+0x10>

08006078 <USB_EPStartXfer>:
{
 8006078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800607c:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 800607e:	7849      	ldrb	r1, [r1, #1]
{
 8006080:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 8006082:	2901      	cmp	r1, #1
    if (ep->doublebuffer == 0U)
 8006084:	7b22      	ldrb	r2, [r4, #12]
  if (ep->is_in == 1U)
 8006086:	f040 811e 	bne.w	80062c6 <USB_EPStartXfer+0x24e>
    if (ep->xfer_len > ep->maxpacket)
 800608a:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800608e:	69a6      	ldr	r6, [r4, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006090:	6961      	ldr	r1, [r4, #20]
 8006092:	4576      	cmp	r6, lr
 8006094:	bf28      	it	cs
 8006096:	4676      	movcs	r6, lr
    if (ep->doublebuffer == 0U)
 8006098:	bb0a      	cbnz	r2, 80060de <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800609a:	b2b6      	uxth	r6, r6
 800609c:	88e2      	ldrh	r2, [r4, #6]
 800609e:	4633      	mov	r3, r6
 80060a0:	f7ff ffda 	bl	8006058 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80060a4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80060a8:	7821      	ldrb	r1, [r4, #0]
 80060aa:	b290      	uxth	r0, r2
 80060ac:	f205 4204 	addw	r2, r5, #1028	; 0x404
 80060b0:	0109      	lsls	r1, r1, #4
 80060b2:	4402      	add	r2, r0
 80060b4:	528e      	strh	r6, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80060b6:	7822      	ldrb	r2, [r4, #0]
 80060b8:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80060bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060c4:	041b      	lsls	r3, r3, #16
 80060c6:	0c1b      	lsrs	r3, r3, #16
 80060c8:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 80060cc:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d6:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 80060da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (ep->type == EP_TYPE_BULK)
 80060de:	78e2      	ldrb	r2, [r4, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80060e0:	7827      	ldrb	r7, [r4, #0]
      if (ep->type == EP_TYPE_BULK)
 80060e2:	2a02      	cmp	r2, #2
        if (ep->xfer_len_db > ep->maxpacket)
 80060e4:	6a23      	ldr	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060e6:	ea4f 1c07 	mov.w	ip, r7, lsl #4
      if (ep->type == EP_TYPE_BULK)
 80060ea:	f040 80d6 	bne.w	800629a <USB_EPStartXfer+0x222>
        if (ep->xfer_len_db > ep->maxpacket)
 80060ee:	459e      	cmp	lr, r3
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80060f0:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 80060f4:	f080 80ba 	bcs.w	800626c <USB_EPStartXfer+0x1f4>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80060f8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80060fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006100:	0412      	lsls	r2, r2, #16
 8006102:	0c12      	lsrs	r2, r2, #16
 8006104:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8006108:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800610c:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006110:	f830 8027 	ldrh.w	r8, [r0, r7, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006114:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006118:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800611a:	f018 0840 	ands.w	r8, r8, #64	; 0x40
          ep->xfer_len_db -= len;
 800611e:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006120:	b297      	uxth	r7, r2
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006122:	b2b3      	uxth	r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006124:	d052      	beq.n	80061cc <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006126:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 800612a:	443a      	add	r2, r7
 800612c:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006130:	8962      	ldrh	r2, [r4, #10]
 8006132:	f7ff ff91 	bl	8006058 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8006136:	6a27      	ldr	r7, [r4, #32]
 8006138:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 800613a:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800613c:	429f      	cmp	r7, r3
              ep->xfer_len_db -= len;
 800613e:	bf8a      	itet	hi
 8006140:	1bbb      	subhi	r3, r7, r6
              ep->xfer_len_db = 0U;
 8006142:	2300      	movls	r3, #0
 8006144:	4637      	movhi	r7, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006146:	7862      	ldrb	r2, [r4, #1]
            ep->xfer_buff += len;
 8006148:	4431      	add	r1, r6
 800614a:	6223      	str	r3, [r4, #32]
 800614c:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800614e:	b2bb      	uxth	r3, r7
 8006150:	bb82      	cbnz	r2, 80061b4 <USB_EPStartXfer+0x13c>
 8006152:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8006156:	7826      	ldrb	r6, [r4, #0]
 8006158:	b282      	uxth	r2, r0
 800615a:	f205 4004 	addw	r0, r5, #1028	; 0x404
 800615e:	0136      	lsls	r6, r6, #4
 8006160:	4410      	add	r0, r2
 8006162:	5a32      	ldrh	r2, [r6, r0]
 8006164:	2f3e      	cmp	r7, #62	; 0x3e
 8006166:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800616a:	5232      	strh	r2, [r6, r0]
 800616c:	d914      	bls.n	8006198 <USB_EPStartXfer+0x120>
 800616e:	06fa      	lsls	r2, r7, #27
 8006170:	5a32      	ldrh	r2, [r6, r0]
 8006172:	ea4f 1c57 	mov.w	ip, r7, lsr #5
 8006176:	bf08      	it	eq
 8006178:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 800617c:	b292      	uxth	r2, r2
 800617e:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 8006182:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006186:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800618a:	b292      	uxth	r2, r2
 800618c:	5232      	strh	r2, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800618e:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006190:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006192:	f7ff ff61 	bl	8006058 <USB_WritePMA>
 8006196:	e78e      	b.n	80060b6 <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006198:	b90f      	cbnz	r7, 800619e <USB_EPStartXfer+0x126>
 800619a:	5a32      	ldrh	r2, [r6, r0]
 800619c:	e7f1      	b.n	8006182 <USB_EPStartXfer+0x10a>
 800619e:	5a32      	ldrh	r2, [r6, r0]
 80061a0:	ea4f 0c57 	mov.w	ip, r7, lsr #1
 80061a4:	07ff      	lsls	r7, r7, #31
 80061a6:	bf48      	it	mi
 80061a8:	f10c 0c01 	addmi.w	ip, ip, #1
 80061ac:	b292      	uxth	r2, r2
 80061ae:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 80061b2:	e7ea      	b.n	800618a <USB_EPStartXfer+0x112>
 80061b4:	2a01      	cmp	r2, #1
 80061b6:	d1ea      	bne.n	800618e <USB_EPStartXfer+0x116>
 80061b8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80061bc:	7820      	ldrb	r0, [r4, #0]
 80061be:	b296      	uxth	r6, r2
 80061c0:	f205 4204 	addw	r2, r5, #1028	; 0x404
 80061c4:	0100      	lsls	r0, r0, #4
 80061c6:	4432      	add	r2, r6
 80061c8:	5283      	strh	r3, [r0, r2]
 80061ca:	e7e0      	b.n	800618e <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061cc:	f200 4204 	addw	r2, r0, #1028	; 0x404
 80061d0:	443a      	add	r2, r7
 80061d2:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061d6:	8922      	ldrh	r2, [r4, #8]
 80061d8:	f7ff ff3e 	bl	8006058 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80061dc:	6a27      	ldr	r7, [r4, #32]
 80061de:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 80061e0:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80061e2:	429f      	cmp	r7, r3
              ep->xfer_len_db -= len;
 80061e4:	bf8a      	itet	hi
 80061e6:	1bbb      	subhi	r3, r7, r6
              ep->xfer_len_db = 0U;
 80061e8:	4643      	movls	r3, r8
 80061ea:	4637      	movhi	r7, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061ec:	7862      	ldrb	r2, [r4, #1]
            ep->xfer_buff += len;
 80061ee:	4431      	add	r1, r6
 80061f0:	6223      	str	r3, [r4, #32]
 80061f2:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061f4:	b2bb      	uxth	r3, r7
 80061f6:	bb6a      	cbnz	r2, 8006254 <USB_EPStartXfer+0x1dc>
 80061f8:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 80061fc:	7826      	ldrb	r6, [r4, #0]
 80061fe:	b282      	uxth	r2, r0
 8006200:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8006204:	0136      	lsls	r6, r6, #4
 8006206:	4410      	add	r0, r2
 8006208:	5a32      	ldrh	r2, [r6, r0]
 800620a:	2f3e      	cmp	r7, #62	; 0x3e
 800620c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006210:	5232      	strh	r2, [r6, r0]
 8006212:	d911      	bls.n	8006238 <USB_EPStartXfer+0x1c0>
 8006214:	06fa      	lsls	r2, r7, #27
 8006216:	5a32      	ldrh	r2, [r6, r0]
 8006218:	ea4f 1c57 	mov.w	ip, r7, lsr #5
 800621c:	bf08      	it	eq
 800621e:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8006222:	b292      	uxth	r2, r2
 8006224:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 8006228:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800622c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006230:	b292      	uxth	r2, r2
 8006232:	5232      	strh	r2, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006234:	8962      	ldrh	r2, [r4, #10]
 8006236:	e7ab      	b.n	8006190 <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006238:	b90f      	cbnz	r7, 800623e <USB_EPStartXfer+0x1c6>
 800623a:	5a32      	ldrh	r2, [r6, r0]
 800623c:	e7f4      	b.n	8006228 <USB_EPStartXfer+0x1b0>
 800623e:	5a32      	ldrh	r2, [r6, r0]
 8006240:	ea4f 0c57 	mov.w	ip, r7, lsr #1
 8006244:	07ff      	lsls	r7, r7, #31
 8006246:	bf48      	it	mi
 8006248:	f10c 0c01 	addmi.w	ip, ip, #1
 800624c:	b292      	uxth	r2, r2
 800624e:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 8006252:	e7ed      	b.n	8006230 <USB_EPStartXfer+0x1b8>
 8006254:	2a01      	cmp	r2, #1
 8006256:	d1ed      	bne.n	8006234 <USB_EPStartXfer+0x1bc>
 8006258:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800625c:	7820      	ldrb	r0, [r4, #0]
 800625e:	b296      	uxth	r6, r2
 8006260:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8006264:	0100      	lsls	r0, r0, #4
 8006266:	4432      	add	r2, r6
 8006268:	5283      	strh	r3, [r0, r2]
 800626a:	e7e3      	b.n	8006234 <USB_EPStartXfer+0x1bc>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800626c:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8006270:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006274:	0412      	lsls	r2, r2, #16
 8006276:	0c12      	lsrs	r2, r2, #16
 8006278:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800627c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006280:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006284:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006288:	b29b      	uxth	r3, r3
 800628a:	b296      	uxth	r6, r2
 800628c:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8006290:	4432      	add	r2, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006292:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006296:	8922      	ldrh	r2, [r4, #8]
 8006298:	e77b      	b.n	8006192 <USB_EPStartXfer+0x11a>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800629a:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        ep->xfer_len_db -= len;
 800629e:	1b9b      	subs	r3, r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80062a0:	f012 0f40 	tst.w	r2, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062a4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
        ep->xfer_len_db -= len;
 80062a8:	6223      	str	r3, [r4, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80062aa:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062ac:	b296      	uxth	r6, r2
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80062ae:	d006      	beq.n	80062be <USB_EPStartXfer+0x246>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062b0:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 80062b4:	4432      	add	r2, r6
 80062b6:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062ba:	8962      	ldrh	r2, [r4, #10]
 80062bc:	e769      	b.n	8006192 <USB_EPStartXfer+0x11a>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80062be:	f200 4204 	addw	r2, r0, #1028	; 0x404
 80062c2:	4432      	add	r2, r6
 80062c4:	e7e5      	b.n	8006292 <USB_EPStartXfer+0x21a>
    if (ep->doublebuffer == 0U)
 80062c6:	2a00      	cmp	r2, #0
 80062c8:	d131      	bne.n	800632e <USB_EPStartXfer+0x2b6>
      if (ep->xfer_len > ep->maxpacket)
 80062ca:	69a0      	ldr	r0, [r4, #24]
 80062cc:	6923      	ldr	r3, [r4, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80062ce:	7821      	ldrb	r1, [r4, #0]
      if (ep->xfer_len > ep->maxpacket)
 80062d0:	4298      	cmp	r0, r3
        ep->xfer_len -= len;
 80062d2:	bf84      	itt	hi
 80062d4:	1ac2      	subhi	r2, r0, r3
 80062d6:	4618      	movhi	r0, r3
 80062d8:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80062da:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80062de:	0109      	lsls	r1, r1, #4
 80062e0:	b293      	uxth	r3, r2
 80062e2:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 80062e6:	441a      	add	r2, r3
 80062e8:	5a8b      	ldrh	r3, [r1, r2]
 80062ea:	283e      	cmp	r0, #62	; 0x3e
 80062ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062f0:	528b      	strh	r3, [r1, r2]
 80062f2:	d90d      	bls.n	8006310 <USB_EPStartXfer+0x298>
 80062f4:	5a8b      	ldrh	r3, [r1, r2]
 80062f6:	0946      	lsrs	r6, r0, #5
 80062f8:	06c0      	lsls	r0, r0, #27
 80062fa:	bf08      	it	eq
 80062fc:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8006300:	b29b      	uxth	r3, r3
 8006302:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800630a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800630e:	e00b      	b.n	8006328 <USB_EPStartXfer+0x2b0>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006310:	b908      	cbnz	r0, 8006316 <USB_EPStartXfer+0x29e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006312:	5a53      	ldrh	r3, [r2, r1]
 8006314:	e7f7      	b.n	8006306 <USB_EPStartXfer+0x28e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006316:	07c3      	lsls	r3, r0, #31
 8006318:	5a8b      	ldrh	r3, [r1, r2]
 800631a:	ea4f 0650 	mov.w	r6, r0, lsr #1
 800631e:	bf48      	it	mi
 8006320:	3601      	addmi	r6, #1
 8006322:	b29b      	uxth	r3, r3
 8006324:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006328:	b29b      	uxth	r3, r3
 800632a:	5253      	strh	r3, [r2, r1]
 800632c:	e06a      	b.n	8006404 <USB_EPStartXfer+0x38c>
      if (ep->type == EP_TYPE_BULK)
 800632e:	78e3      	ldrb	r3, [r4, #3]
 8006330:	2b02      	cmp	r3, #2
 8006332:	d17c      	bne.n	800642e <USB_EPStartXfer+0x3b6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006334:	2900      	cmp	r1, #0
 8006336:	d14b      	bne.n	80063d0 <USB_EPStartXfer+0x358>
 8006338:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800633c:	7820      	ldrb	r0, [r4, #0]
 800633e:	b28b      	uxth	r3, r1
 8006340:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8006344:	0100      	lsls	r0, r0, #4
 8006346:	4419      	add	r1, r3
 8006348:	5a43      	ldrh	r3, [r0, r1]
 800634a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800634e:	5243      	strh	r3, [r0, r1]
 8006350:	6923      	ldr	r3, [r4, #16]
 8006352:	2b3e      	cmp	r3, #62	; 0x3e
 8006354:	d920      	bls.n	8006398 <USB_EPStartXfer+0x320>
 8006356:	5a42      	ldrh	r2, [r0, r1]
 8006358:	095e      	lsrs	r6, r3, #5
 800635a:	06df      	lsls	r7, r3, #27
 800635c:	bf08      	it	eq
 800635e:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8006362:	b292      	uxth	r2, r2
 8006364:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8006368:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800636c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006370:	b292      	uxth	r2, r2
 8006372:	5242      	strh	r2, [r0, r1]
 8006374:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8006378:	7822      	ldrb	r2, [r4, #0]
 800637a:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 800637e:	b289      	uxth	r1, r1
 8006380:	0112      	lsls	r2, r2, #4
 8006382:	4401      	add	r1, r0
 8006384:	5a50      	ldrh	r0, [r2, r1]
 8006386:	2b3e      	cmp	r3, #62	; 0x3e
 8006388:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800638c:	5250      	strh	r0, [r2, r1]
 800638e:	d810      	bhi.n	80063b2 <USB_EPStartXfer+0x33a>
 8006390:	2b00      	cmp	r3, #0
 8006392:	d143      	bne.n	800641c <USB_EPStartXfer+0x3a4>
 8006394:	5a53      	ldrh	r3, [r2, r1]
 8006396:	e015      	b.n	80063c4 <USB_EPStartXfer+0x34c>
 8006398:	b90b      	cbnz	r3, 800639e <USB_EPStartXfer+0x326>
 800639a:	5a42      	ldrh	r2, [r0, r1]
 800639c:	e7e4      	b.n	8006368 <USB_EPStartXfer+0x2f0>
 800639e:	07da      	lsls	r2, r3, #31
 80063a0:	5a42      	ldrh	r2, [r0, r1]
 80063a2:	ea4f 0653 	mov.w	r6, r3, lsr #1
 80063a6:	bf48      	it	mi
 80063a8:	3601      	addmi	r6, #1
 80063aa:	b292      	uxth	r2, r2
 80063ac:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80063b0:	e7de      	b.n	8006370 <USB_EPStartXfer+0x2f8>
 80063b2:	0958      	lsrs	r0, r3, #5
 80063b4:	06df      	lsls	r7, r3, #27
 80063b6:	5a53      	ldrh	r3, [r2, r1]
 80063b8:	bf08      	it	eq
 80063ba:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80063be:	b29b      	uxth	r3, r3
 80063c0:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80063c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	5253      	strh	r3, [r2, r1]
        if (ep->xfer_count != 0U)
 80063d0:	69e3      	ldr	r3, [r4, #28]
 80063d2:	b1bb      	cbz	r3, 8006404 <USB_EPStartXfer+0x38c>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80063d4:	f244 0340 	movw	r3, #16448	; 0x4040
 80063d8:	7822      	ldrb	r2, [r4, #0]
 80063da:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063de:	ea03 0001 	and.w	r0, r3, r1
 80063e2:	438b      	bics	r3, r1
 80063e4:	d000      	beq.n	80063e8 <USB_EPStartXfer+0x370>
 80063e6:	b968      	cbnz	r0, 8006404 <USB_EPStartXfer+0x38c>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80063e8:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80063ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f4:	041b      	lsls	r3, r3, #16
 80063f6:	0c1b      	lsrs	r3, r3, #16
 80063f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006400:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006404:	7822      	ldrb	r2, [r4, #0]
 8006406:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800640a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800640e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006412:	041b      	lsls	r3, r3, #16
 8006414:	0c1b      	lsrs	r3, r3, #16
 8006416:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800641a:	e657      	b.n	80060cc <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800641c:	0858      	lsrs	r0, r3, #1
 800641e:	07de      	lsls	r6, r3, #31
 8006420:	5a53      	ldrh	r3, [r2, r1]
 8006422:	bf48      	it	mi
 8006424:	3001      	addmi	r0, #1
 8006426:	b29b      	uxth	r3, r3
 8006428:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 800642c:	e7ce      	b.n	80063cc <USB_EPStartXfer+0x354>
      else if (ep->type == EP_TYPE_ISOC)
 800642e:	2b01      	cmp	r3, #1
 8006430:	d158      	bne.n	80064e4 <USB_EPStartXfer+0x46c>
        if (ep->xfer_len > ep->maxpacket)
 8006432:	69a3      	ldr	r3, [r4, #24]
 8006434:	6922      	ldr	r2, [r4, #16]
 8006436:	4293      	cmp	r3, r2
          ep->xfer_len = 0U;
 8006438:	bf94      	ite	ls
 800643a:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 800643c:	1a98      	subhi	r0, r3, r2
 800643e:	61a0      	str	r0, [r4, #24]
 8006440:	bf88      	it	hi
 8006442:	4613      	movhi	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006444:	2900      	cmp	r1, #0
 8006446:	d1dd      	bne.n	8006404 <USB_EPStartXfer+0x38c>
 8006448:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800644c:	7820      	ldrb	r0, [r4, #0]
 800644e:	b28a      	uxth	r2, r1
 8006450:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8006454:	0100      	lsls	r0, r0, #4
 8006456:	4411      	add	r1, r2
 8006458:	5a42      	ldrh	r2, [r0, r1]
 800645a:	2b3e      	cmp	r3, #62	; 0x3e
 800645c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006460:	5242      	strh	r2, [r0, r1]
 8006462:	d929      	bls.n	80064b8 <USB_EPStartXfer+0x440>
 8006464:	06da      	lsls	r2, r3, #27
 8006466:	5a42      	ldrh	r2, [r0, r1]
 8006468:	ea4f 1653 	mov.w	r6, r3, lsr #5
 800646c:	bf08      	it	eq
 800646e:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8006472:	b292      	uxth	r2, r2
 8006474:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8006478:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800647c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006480:	b292      	uxth	r2, r2
 8006482:	5242      	strh	r2, [r0, r1]
 8006484:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8006488:	7822      	ldrb	r2, [r4, #0]
 800648a:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 800648e:	b289      	uxth	r1, r1
 8006490:	0112      	lsls	r2, r2, #4
 8006492:	4401      	add	r1, r0
 8006494:	5a50      	ldrh	r0, [r2, r1]
 8006496:	2b3e      	cmp	r3, #62	; 0x3e
 8006498:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800649c:	5250      	strh	r0, [r2, r1]
 800649e:	d817      	bhi.n	80064d0 <USB_EPStartXfer+0x458>
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f43f af36 	beq.w	8006312 <USB_EPStartXfer+0x29a>
 80064a6:	0858      	lsrs	r0, r3, #1
 80064a8:	07db      	lsls	r3, r3, #31
 80064aa:	5a53      	ldrh	r3, [r2, r1]
 80064ac:	bf48      	it	mi
 80064ae:	3001      	addmi	r0, #1
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80064b6:	e737      	b.n	8006328 <USB_EPStartXfer+0x2b0>
 80064b8:	b90b      	cbnz	r3, 80064be <USB_EPStartXfer+0x446>
 80064ba:	5a42      	ldrh	r2, [r0, r1]
 80064bc:	e7dc      	b.n	8006478 <USB_EPStartXfer+0x400>
 80064be:	5a42      	ldrh	r2, [r0, r1]
 80064c0:	085e      	lsrs	r6, r3, #1
 80064c2:	07df      	lsls	r7, r3, #31
 80064c4:	bf48      	it	mi
 80064c6:	3601      	addmi	r6, #1
 80064c8:	b292      	uxth	r2, r2
 80064ca:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80064ce:	e7d7      	b.n	8006480 <USB_EPStartXfer+0x408>
 80064d0:	0958      	lsrs	r0, r3, #5
 80064d2:	06de      	lsls	r6, r3, #27
 80064d4:	5a53      	ldrh	r3, [r2, r1]
 80064d6:	bf08      	it	eq
 80064d8:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80064dc:	b29b      	uxth	r3, r3
 80064de:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80064e2:	e710      	b.n	8006306 <USB_EPStartXfer+0x28e>
        return HAL_ERROR;
 80064e4:	2001      	movs	r0, #1
 80064e6:	e5f8      	b.n	80060da <USB_EPStartXfer+0x62>

080064e8 <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80064e8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 80064ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80064ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 80064f2:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 80064f4:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80064f6:	4617      	mov	r7, r2
  for (count = n; count != 0U; count--)
 80064f8:	462e      	mov	r6, r5
 80064fa:	3402      	adds	r4, #2
 80064fc:	b936      	cbnz	r6, 800650c <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80064fe:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 8006500:	bf44      	itt	mi
 8006502:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006506:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 800650a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 800650c:	f837 0b04 	ldrh.w	r0, [r7], #4
  for (count = n; count != 0U; count--)
 8006510:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8006512:	b280      	uxth	r0, r0
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006514:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006518:	0a00      	lsrs	r0, r0, #8
 800651a:	f804 0c01 	strb.w	r0, [r4, #-1]
  for (count = n; count != 0U; count--)
 800651e:	e7ec      	b.n	80064fa <USB_ReadPMA+0x12>

08006520 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006520:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8006524:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006526:	b16b      	cbz	r3, 8006544 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006528:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800652c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8006530:	28ff      	cmp	r0, #255	; 0xff
 8006532:	d007      	beq.n	8006544 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	4621      	mov	r1, r4
 8006538:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800653c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800653e:	23ff      	movs	r3, #255	; 0xff
 8006540:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8006544:	2000      	movs	r0, #0
 8006546:	bd10      	pop	{r4, pc}

08006548 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006548:	2343      	movs	r3, #67	; 0x43
 800654a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800654c:	4800      	ldr	r0, [pc, #0]	; (8006550 <USBD_CDC_GetFSCfgDesc+0x8>)
 800654e:	4770      	bx	lr
 8006550:	20000044 	.word	0x20000044

08006554 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006554:	2343      	movs	r3, #67	; 0x43
 8006556:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8006558:	4800      	ldr	r0, [pc, #0]	; (800655c <USBD_CDC_GetHSCfgDesc+0x8>)
 800655a:	4770      	bx	lr
 800655c:	20000088 	.word	0x20000088

08006560 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006560:	2343      	movs	r3, #67	; 0x43
 8006562:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8006564:	4800      	ldr	r0, [pc, #0]	; (8006568 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8006566:	4770      	bx	lr
 8006568:	200000d8 	.word	0x200000d8

0800656c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800656c:	230a      	movs	r3, #10
 800656e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8006570:	4800      	ldr	r0, [pc, #0]	; (8006574 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8006572:	4770      	bx	lr
 8006574:	200000cc 	.word	0x200000cc

08006578 <USBD_CDC_DataOut>:
{
 8006578:	b538      	push	{r3, r4, r5, lr}
 800657a:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800657c:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006580:	f000 fe97 	bl	80072b2 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8006584:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006588:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 800658c:	b14b      	cbz	r3, 80065a2 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800658e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8006592:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800659c:	4798      	blx	r3
    return USBD_OK;
 800659e:	2000      	movs	r0, #0
}
 80065a0:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80065a2:	2002      	movs	r0, #2
 80065a4:	e7fc      	b.n	80065a0 <USBD_CDC_DataOut+0x28>

080065a6 <USBD_CDC_DataIn>:
{
 80065a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065a8:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 80065ac:	b1d6      	cbz	r6, 80065e4 <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80065ae:	2214      	movs	r2, #20
 80065b0:	fb02 0201 	mla	r2, r2, r1, r0
 80065b4:	69d4      	ldr	r4, [r2, #28]
 80065b6:	b18c      	cbz	r4, 80065dc <USBD_CDC_DataIn+0x36>
 80065b8:	2728      	movs	r7, #40	; 0x28
 80065ba:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80065be:	fb07 3501 	mla	r5, r7, r1, r3
 80065c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80065c4:	fbb4 f5f3 	udiv	r5, r4, r3
 80065c8:	fb03 4415 	mls	r4, r3, r5, r4
 80065cc:	b934      	cbnz	r4, 80065dc <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 80065ce:	61d4      	str	r4, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80065d0:	4623      	mov	r3, r4
 80065d2:	4622      	mov	r2, r4
 80065d4:	f000 fe5b 	bl	800728e <USBD_LL_Transmit>
    return USBD_OK;
 80065d8:	4620      	mov	r0, r4
}
 80065da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 80065dc:	2000      	movs	r0, #0
 80065de:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 80065e2:	e7fa      	b.n	80065da <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 80065e4:	2002      	movs	r0, #2
 80065e6:	e7f8      	b.n	80065da <USBD_CDC_DataIn+0x34>

080065e8 <USBD_CDC_Setup>:
{
 80065e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 80065ec:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065f0:	780a      	ldrb	r2, [r1, #0]
{
 80065f2:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065f4:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 80065f8:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065fa:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 80065fe:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8006602:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006606:	d028      	beq.n	800665a <USBD_CDC_Setup+0x72>
 8006608:	2c20      	cmp	r4, #32
 800660a:	d142      	bne.n	8006692 <USBD_CDC_Setup+0xaa>
      if (req->wLength)
 800660c:	88cc      	ldrh	r4, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800660e:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 8006610:	b1e4      	cbz	r4, 800664c <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8006612:	0612      	lsls	r2, r2, #24
 8006614:	d511      	bpl.n	800663a <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006616:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800661a:	4639      	mov	r1, r7
 800661c:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8006620:	4618      	mov	r0, r3
 8006622:	4622      	mov	r2, r4
 8006624:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006626:	4639      	mov	r1, r7
 8006628:	4628      	mov	r0, r5
 800662a:	88f2      	ldrh	r2, [r6, #6]
 800662c:	f000 fc31 	bl	8006e92 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8006630:	4644      	mov	r4, r8
}
 8006632:	4620      	mov	r0, r4
 8006634:	b003      	add	sp, #12
 8006636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800663a:	4622      	mov	r2, r4
 800663c:	4639      	mov	r1, r7
          hcdc->CmdOpCode = req->bRequest;
 800663e:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006642:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006646:	f000 fc39 	bl	8006ebc <USBD_CtlPrepareRx>
 800664a:	e7f1      	b.n	8006630 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800664c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8006650:	4618      	mov	r0, r3
 8006652:	6895      	ldr	r5, [r2, #8]
 8006654:	4622      	mov	r2, r4
 8006656:	47a8      	blx	r5
 8006658:	e7eb      	b.n	8006632 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 800665a:	784b      	ldrb	r3, [r1, #1]
 800665c:	2b0a      	cmp	r3, #10
 800665e:	d00c      	beq.n	800667a <USBD_CDC_Setup+0x92>
 8006660:	2b0b      	cmp	r3, #11
 8006662:	d012      	beq.n	800668a <USBD_CDC_Setup+0xa2>
 8006664:	b9ab      	cbnz	r3, 8006692 <USBD_CDC_Setup+0xaa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006666:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800666a:	2b03      	cmp	r3, #3
 800666c:	d111      	bne.n	8006692 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800666e:	2202      	movs	r2, #2
 8006670:	f10d 0106 	add.w	r1, sp, #6
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006674:	f000 fc0d 	bl	8006e92 <USBD_CtlSendData>
 8006678:	e7db      	b.n	8006632 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800667a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800667e:	2b03      	cmp	r3, #3
 8006680:	d107      	bne.n	8006692 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006682:	2201      	movs	r2, #1
 8006684:	f10d 0105 	add.w	r1, sp, #5
 8006688:	e7f4      	b.n	8006674 <USBD_CDC_Setup+0x8c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800668a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800668e:	2b03      	cmp	r3, #3
 8006690:	d0cf      	beq.n	8006632 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 8006692:	4631      	mov	r1, r6
 8006694:	4628      	mov	r0, r5
 8006696:	f000 fbd5 	bl	8006e44 <USBD_CtlError>
          ret = USBD_FAIL;
 800669a:	2402      	movs	r4, #2
          break;
 800669c:	e7c9      	b.n	8006632 <USBD_CDC_Setup+0x4a>

0800669e <USBD_CDC_DeInit>:
{
 800669e:	b538      	push	{r3, r4, r5, lr}
 80066a0:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80066a2:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80066a4:	2181      	movs	r1, #129	; 0x81
 80066a6:	f000 fdbc 	bl	8007222 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80066aa:	2101      	movs	r1, #1
 80066ac:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80066ae:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80066b0:	f000 fdb7 	bl	8007222 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80066b4:	2182      	movs	r1, #130	; 0x82
 80066b6:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80066b8:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80066bc:	f000 fdb1 	bl	8007222 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80066c0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80066c4:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 80066c6:	b14b      	cbz	r3, 80066dc <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80066c8:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80066d0:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 80066d4:	f000 fdf6 	bl	80072c4 <USBD_static_free>
    pdev->pClassData = NULL;
 80066d8:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 80066dc:	2000      	movs	r0, #0
 80066de:	bd38      	pop	{r3, r4, r5, pc}

080066e0 <USBD_CDC_Init>:
{
 80066e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066e4:	7c03      	ldrb	r3, [r0, #16]
{
 80066e6:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066e8:	bbbb      	cbnz	r3, 800675a <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80066ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066ee:	2202      	movs	r2, #2
 80066f0:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80066f2:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80066f4:	f000 fd89 	bl	800720a <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80066f8:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80066fc:	62e5      	str	r5, [r4, #44]	; 0x2c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80066fe:	2701      	movs	r7, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006700:	4629      	mov	r1, r5
 8006702:	2202      	movs	r2, #2
 8006704:	4620      	mov	r0, r4
 8006706:	f000 fd80 	bl	800720a <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800670a:	2308      	movs	r3, #8
 800670c:	2203      	movs	r2, #3
 800670e:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006710:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006714:	4620      	mov	r0, r4
 8006716:	f000 fd78 	bl	800720a <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800671a:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800671e:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006720:	f000 fdcc 	bl	80072bc <USBD_static_malloc>
 8006724:	4605      	mov	r5, r0
 8006726:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 800672a:	b340      	cbz	r0, 800677e <USBD_CDC_Init+0x9e>
    hcdc->TxState = 0U;
 800672c:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006730:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4798      	blx	r3
    hcdc->TxState = 0U;
 8006738:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 800673c:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006740:	7c26      	ldrb	r6, [r4, #16]
 8006742:	b99e      	cbnz	r6, 800676c <USBD_CDC_Init+0x8c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006744:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006748:	4639      	mov	r1, r7
 800674a:	4620      	mov	r0, r4
 800674c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8006750:	f000 fda6 	bl	80072a0 <USBD_LL_PrepareReceive>
}
 8006754:	4630      	mov	r0, r6
 8006756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800675a:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800675c:	2340      	movs	r3, #64	; 0x40
 800675e:	2202      	movs	r2, #2
 8006760:	2181      	movs	r1, #129	; 0x81
 8006762:	f000 fd52 	bl	800720a <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006766:	2340      	movs	r3, #64	; 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006768:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800676a:	e7c8      	b.n	80066fe <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800676c:	2340      	movs	r3, #64	; 0x40
 800676e:	4639      	mov	r1, r7
 8006770:	4620      	mov	r0, r4
 8006772:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8006776:	f000 fd93 	bl	80072a0 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800677a:	4646      	mov	r6, r8
 800677c:	e7ea      	b.n	8006754 <USBD_CDC_Init+0x74>
    ret = 1U;
 800677e:	463e      	mov	r6, r7
 8006780:	e7e8      	b.n	8006754 <USBD_CDC_Init+0x74>

08006782 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8006782:	b119      	cbz	r1, 800678c <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8006784:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8006788:	2000      	movs	r0, #0
 800678a:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800678c:	2002      	movs	r0, #2
  }

  return ret;
}
 800678e:	4770      	bx	lr

08006790 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006790:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8006794:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8006796:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800679a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800679e:	4770      	bx	lr

080067a0 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80067a0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 80067a4:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80067a6:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 80067aa:	4770      	bx	lr

080067ac <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067ac:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 80067b0:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80067b2:	b182      	cbz	r2, 80067d6 <USBD_CDC_ReceivePacket+0x2a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067b4:	7c04      	ldrb	r4, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80067b6:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067ba:	b934      	cbnz	r4, 80067ca <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 80067bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067c0:	2101      	movs	r1, #1
 80067c2:	f000 fd6d 	bl	80072a0 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 80067c6:	4620      	mov	r0, r4
 80067c8:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80067ca:	2340      	movs	r3, #64	; 0x40
 80067cc:	2101      	movs	r1, #1
 80067ce:	f000 fd67 	bl	80072a0 <USBD_LL_PrepareReceive>
    return USBD_OK;
 80067d2:	2400      	movs	r4, #0
 80067d4:	e7f7      	b.n	80067c6 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 80067d6:	2402      	movs	r4, #2
 80067d8:	e7f5      	b.n	80067c6 <USBD_CDC_ReceivePacket+0x1a>

080067da <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80067da:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80067dc:	b180      	cbz	r0, 8006800 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80067de:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80067e2:	b113      	cbz	r3, 80067ea <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80067e4:	2300      	movs	r3, #0
 80067e6:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80067ea:	b109      	cbz	r1, 80067f0 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80067ec:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067f0:	2301      	movs	r3, #1
  pdev->id = id;
 80067f2:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067f4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80067f8:	f000 fcbc 	bl	8007174 <USBD_LL_Init>

  return USBD_OK;
 80067fc:	2000      	movs	r0, #0
}
 80067fe:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8006800:	2002      	movs	r0, #2
 8006802:	e7fc      	b.n	80067fe <USBD_Init+0x24>

08006804 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8006804:	b119      	cbz	r1, 800680e <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006806:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 800680a:	2000      	movs	r0, #0
 800680c:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800680e:	2002      	movs	r0, #2
  }

  return status;
}
 8006810:	4770      	bx	lr

08006812 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006812:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006814:	f000 fcf0 	bl	80071f8 <USBD_LL_Start>

  return USBD_OK;
}
 8006818:	2000      	movs	r0, #0
 800681a:	bd08      	pop	{r3, pc}

0800681c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800681c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800681e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006822:	b90b      	cbnz	r3, 8006828 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006824:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8006826:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4798      	blx	r3
 800682c:	2800      	cmp	r0, #0
 800682e:	d0fa      	beq.n	8006826 <USBD_SetClassConfig+0xa>
 8006830:	e7f8      	b.n	8006824 <USBD_SetClassConfig+0x8>

08006832 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006832:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006834:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	4798      	blx	r3

  return USBD_OK;
}
 800683c:	2000      	movs	r0, #0
 800683e:	bd08      	pop	{r3, pc}

08006840 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006840:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006842:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8006846:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006848:	4628      	mov	r0, r5
 800684a:	f000 fae7 	bl	8006e1c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800684e:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8006850:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8006854:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8006858:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 800685c:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8006860:	f001 031f 	and.w	r3, r1, #31
 8006864:	2b01      	cmp	r3, #1
 8006866:	d008      	beq.n	800687a <USBD_LL_SetupStage+0x3a>
 8006868:	2b02      	cmp	r3, #2
 800686a:	d00b      	beq.n	8006884 <USBD_LL_SetupStage+0x44>
 800686c:	b97b      	cbnz	r3, 800688e <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800686e:	4629      	mov	r1, r5
 8006870:	4620      	mov	r0, r4
 8006872:	f000 f8fb 	bl	8006a6c <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8006876:	2000      	movs	r0, #0
 8006878:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800687a:	4629      	mov	r1, r5
 800687c:	4620      	mov	r0, r4
 800687e:	f000 fa1f 	bl	8006cc0 <USBD_StdItfReq>
      break;
 8006882:	e7f8      	b.n	8006876 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 8006884:	4629      	mov	r1, r5
 8006886:	4620      	mov	r0, r4
 8006888:	f000 fa3e 	bl	8006d08 <USBD_StdEPReq>
      break;
 800688c:	e7f3      	b.n	8006876 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800688e:	4620      	mov	r0, r4
 8006890:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8006894:	f000 fcce 	bl	8007234 <USBD_LL_StallEP>
      break;
 8006898:	e7ed      	b.n	8006876 <USBD_LL_SetupStage+0x36>

0800689a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800689a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689c:	4604      	mov	r4, r0
 800689e:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80068a0:	460d      	mov	r5, r1
 80068a2:	bb39      	cbnz	r1, 80068f4 <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068a4:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80068a8:	2b03      	cmp	r3, #3
 80068aa:	d11c      	bne.n	80068e6 <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 80068ac:	e9d0 6258 	ldrd	r6, r2, [r0, #352]	; 0x160
 80068b0:	4296      	cmp	r6, r2
 80068b2:	d90b      	bls.n	80068cc <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 80068b4:	1ab6      	subs	r6, r6, r2

        USBD_CtlContinueRx(pdev, pdata,
 80068b6:	42b2      	cmp	r2, r6
 80068b8:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 80068ba:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 80068be:	bf8c      	ite	hi
 80068c0:	b2b2      	uxthhi	r2, r6
 80068c2:	b292      	uxthls	r2, r2
 80068c4:	f000 fb07 	bl	8006ed6 <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80068c8:	4628      	mov	r0, r5
 80068ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80068cc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	b123      	cbz	r3, 80068de <USBD_LL_DataOutStage+0x44>
 80068d4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80068d8:	2a03      	cmp	r2, #3
 80068da:	d100      	bne.n	80068de <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 80068dc:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80068de:	4620      	mov	r0, r4
 80068e0:	f000 fb01 	bl	8006ee6 <USBD_CtlSendStatus>
 80068e4:	e7f0      	b.n	80068c8 <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80068e6:	2b05      	cmp	r3, #5
 80068e8:	d1ee      	bne.n	80068c8 <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 80068ea:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80068ee:	f000 fca1 	bl	8007234 <USBD_LL_StallEP>
 80068f2:	e7e9      	b.n	80068c8 <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 80068f4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	b133      	cbz	r3, 800690a <USBD_LL_DataOutStage+0x70>
 80068fc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006900:	2a03      	cmp	r2, #3
 8006902:	d102      	bne.n	800690a <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8006904:	4798      	blx	r3
  return USBD_OK;
 8006906:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 8006908:	e7de      	b.n	80068c8 <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 800690a:	2502      	movs	r5, #2
 800690c:	e7dc      	b.n	80068c8 <USBD_LL_DataOutStage+0x2e>

0800690e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800690e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006910:	4604      	mov	r4, r0
 8006912:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006914:	460d      	mov	r5, r1
 8006916:	2900      	cmp	r1, #0
 8006918:	d147      	bne.n	80069aa <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800691a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800691e:	2b02      	cmp	r3, #2
 8006920:	d13c      	bne.n	800699c <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8006922:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 8006926:	429e      	cmp	r6, r3
 8006928:	d914      	bls.n	8006954 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 800692a:	1af3      	subs	r3, r6, r3

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800692c:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 800692e:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006930:	b29a      	uxth	r2, r3
 8006932:	f000 fabb 	bl	8006eac <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006936:	462b      	mov	r3, r5
 8006938:	462a      	mov	r2, r5
 800693a:	4629      	mov	r1, r5
 800693c:	4620      	mov	r0, r4
 800693e:	f000 fcaf 	bl	80072a0 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006942:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8006946:	2b01      	cmp	r3, #1
 8006948:	d102      	bne.n	8006950 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800694a:	2300      	movs	r3, #0
 800694c:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8006950:	4628      	mov	r0, r5
 8006952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006954:	69c2      	ldr	r2, [r0, #28]
 8006956:	fbb2 f6f3 	udiv	r6, r2, r3
 800695a:	fb03 2616 	mls	r6, r3, r6, r2
 800695e:	b95e      	cbnz	r6, 8006978 <USBD_LL_DataInStage+0x6a>
 8006960:	4293      	cmp	r3, r2
 8006962:	d809      	bhi.n	8006978 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8006964:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8006968:	429a      	cmp	r2, r3
 800696a:	d205      	bcs.n	8006978 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800696c:	460a      	mov	r2, r1
 800696e:	f000 fa9d 	bl	8006eac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006972:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8006976:	e7de      	b.n	8006936 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006978:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	b12b      	cbz	r3, 800698c <USBD_LL_DataInStage+0x7e>
 8006980:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8006984:	2a03      	cmp	r2, #3
 8006986:	d101      	bne.n	800698c <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8006988:	4620      	mov	r0, r4
 800698a:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800698c:	2180      	movs	r1, #128	; 0x80
 800698e:	4620      	mov	r0, r4
 8006990:	f000 fc50 	bl	8007234 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006994:	4620      	mov	r0, r4
 8006996:	f000 fab1 	bl	8006efc <USBD_CtlReceiveStatus>
 800699a:	e7d2      	b.n	8006942 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800699c:	f033 0304 	bics.w	r3, r3, #4
 80069a0:	d1cf      	bne.n	8006942 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80069a2:	2180      	movs	r1, #128	; 0x80
 80069a4:	f000 fc46 	bl	8007234 <USBD_LL_StallEP>
 80069a8:	e7cb      	b.n	8006942 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 80069aa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	b133      	cbz	r3, 80069c0 <USBD_LL_DataInStage+0xb2>
 80069b2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80069b6:	2a03      	cmp	r2, #3
 80069b8:	d102      	bne.n	80069c0 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 80069ba:	4798      	blx	r3
  return USBD_OK;
 80069bc:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 80069be:	e7c7      	b.n	8006950 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 80069c0:	2502      	movs	r5, #2
 80069c2:	e7c5      	b.n	8006950 <USBD_LL_DataInStage+0x42>

080069c4 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069c4:	2200      	movs	r2, #0
{
 80069c6:	b570      	push	{r4, r5, r6, lr}
 80069c8:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80069ca:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80069cc:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069ce:	4611      	mov	r1, r2
 80069d0:	2340      	movs	r3, #64	; 0x40
 80069d2:	f000 fc1a 	bl	800720a <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069d6:	4633      	mov	r3, r6
 80069d8:	2180      	movs	r1, #128	; 0x80
 80069da:	2200      	movs	r2, #0
 80069dc:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80069de:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80069e2:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069e6:	f000 fc10 	bl	800720a <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 80069ea:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80069ec:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80069f0:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80069f2:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069f4:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80069f8:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 80069fc:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80069fe:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8006a02:	b123      	cbz	r3, 8006a0e <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006a04:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8006a08:	4620      	mov	r0, r4
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	4798      	blx	r3
  }

  return USBD_OK;
}
 8006a0e:	2000      	movs	r0, #0
 8006a10:	bd70      	pop	{r4, r5, r6, pc}

08006a12 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8006a12:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8006a14:	2000      	movs	r0, #0
 8006a16:	4770      	bx	lr

08006a18 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8006a18:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006a1c:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006a20:	2304      	movs	r3, #4
 8006a22:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8006a26:	2000      	movs	r0, #0
 8006a28:	4770      	bx	lr

08006a2a <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006a2a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006a2e:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8006a30:	bf04      	itt	eq
 8006a32:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8006a36:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8006a3a:	2000      	movs	r0, #0
 8006a3c:	4770      	bx	lr

08006a3e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006a3e:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a40:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006a44:	2a03      	cmp	r2, #3
 8006a46:	d104      	bne.n	8006a52 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8006a48:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	b103      	cbz	r3, 8006a52 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8006a50:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8006a52:	2000      	movs	r0, #0
 8006a54:	bd08      	pop	{r3, pc}

08006a56 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8006a56:	b510      	push	{r4, lr}
 8006a58:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8006a5a:	2180      	movs	r1, #128	; 0x80
 8006a5c:	f000 fbea 	bl	8007234 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006a60:	4620      	mov	r0, r4
}
 8006a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8006a66:	2100      	movs	r1, #0
 8006a68:	f000 bbe4 	b.w	8007234 <USBD_LL_StallEP>

08006a6c <USBD_StdDevReq>:
{
 8006a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a6e:	780b      	ldrb	r3, [r1, #0]
 8006a70:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a76:	2b20      	cmp	r3, #32
{
 8006a78:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a7a:	d012      	beq.n	8006aa2 <USBD_StdDevReq+0x36>
 8006a7c:	2b40      	cmp	r3, #64	; 0x40
 8006a7e:	d010      	beq.n	8006aa2 <USBD_StdDevReq+0x36>
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d151      	bne.n	8006b28 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 8006a84:	784b      	ldrb	r3, [r1, #1]
 8006a86:	2b09      	cmp	r3, #9
 8006a88:	d84e      	bhi.n	8006b28 <USBD_StdDevReq+0xbc>
 8006a8a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006a8e:	00ee      	.short	0x00ee
 8006a90:	004d010a 	.word	0x004d010a
 8006a94:	004d0103 	.word	0x004d0103
 8006a98:	00130087 	.word	0x00130087
 8006a9c:	00d6004d 	.word	0x00d6004d
 8006aa0:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 8006aa2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8006aa6:	4629      	mov	r1, r5
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	4798      	blx	r3
}
 8006aae:	2000      	movs	r0, #0
 8006ab0:	b003      	add	sp, #12
 8006ab2:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8006aba:	884b      	ldrh	r3, [r1, #2]
 8006abc:	0a1a      	lsrs	r2, r3, #8
 8006abe:	3a01      	subs	r2, #1
 8006ac0:	2a06      	cmp	r2, #6
 8006ac2:	d831      	bhi.n	8006b28 <USBD_StdDevReq+0xbc>
 8006ac4:	e8df f002 	tbb	[pc, r2]
 8006ac8:	30231604 	.word	0x30231604
 8006acc:	4830      	.short	0x4830
 8006ace:	52          	.byte	0x52
 8006acf:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ad0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006ad4:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ad6:	7c20      	ldrb	r0, [r4, #16]
 8006ad8:	f10d 0106 	add.w	r1, sp, #6
 8006adc:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8006ade:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8006ae2:	2a00      	cmp	r2, #0
 8006ae4:	d056      	beq.n	8006b94 <USBD_StdDevReq+0x128>
 8006ae6:	88eb      	ldrh	r3, [r5, #6]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d14a      	bne.n	8006b82 <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 8006aec:	4620      	mov	r0, r4
 8006aee:	f000 f9fa 	bl	8006ee6 <USBD_CtlSendStatus>
 8006af2:	e7dc      	b.n	8006aae <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006af4:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 8006af6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006afa:	b932      	cbnz	r2, 8006b0a <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006afe:	f10d 0006 	add.w	r0, sp, #6
 8006b02:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b04:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b06:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006b08:	e7e9      	b.n	8006ade <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0c:	e7f7      	b.n	8006afe <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b05      	cmp	r3, #5
 8006b12:	d809      	bhi.n	8006b28 <USBD_StdDevReq+0xbc>
 8006b14:	e8df f003 	tbb	[pc, r3]
 8006b18:	14100c03 	.word	0x14100c03
 8006b1c:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006b1e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006b22:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1d6      	bne.n	8006ad6 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f7ff ff94 	bl	8006a56 <USBD_CtlError.constprop.0>
        break;
 8006b2e:	e7be      	b.n	8006aae <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006b30:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	e7f5      	b.n	8006b24 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006b38:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	e7f1      	b.n	8006b24 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006b40:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	e7ed      	b.n	8006b24 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006b48:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	e7e9      	b.n	8006b24 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006b50:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	e7e5      	b.n	8006b24 <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b58:	7c03      	ldrb	r3, [r0, #16]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1e4      	bne.n	8006b28 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006b5e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006b62:	f10d 0006 	add.w	r0, sp, #6
 8006b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b68:	4798      	blx	r3
  if (err != 0U)
 8006b6a:	e7b8      	b.n	8006ade <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b6c:	7c03      	ldrb	r3, [r0, #16]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1da      	bne.n	8006b28 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006b72:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006b76:	f10d 0006 	add.w	r0, sp, #6
 8006b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b7e:	2307      	movs	r3, #7
 8006b80:	e7c1      	b.n	8006b06 <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 8006b82:	429a      	cmp	r2, r3
 8006b84:	bf28      	it	cs
 8006b86:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b88:	4601      	mov	r1, r0
 8006b8a:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8006b8c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b90:	f000 f97f 	bl	8006e92 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8006b94:	88eb      	ldrh	r3, [r5, #6]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d189      	bne.n	8006aae <USBD_StdDevReq+0x42>
 8006b9a:	e7a7      	b.n	8006aec <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b9c:	888b      	ldrh	r3, [r1, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1c2      	bne.n	8006b28 <USBD_StdDevReq+0xbc>
 8006ba2:	88cb      	ldrh	r3, [r1, #6]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1bf      	bne.n	8006b28 <USBD_StdDevReq+0xbc>
 8006ba8:	884d      	ldrh	r5, [r1, #2]
 8006baa:	2d7f      	cmp	r5, #127	; 0x7f
 8006bac:	d8bc      	bhi.n	8006b28 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bae:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	d0b8      	beq.n	8006b28 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006bb6:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8006bb8:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006bbc:	f000 fb5e 	bl	800727c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	f000 f990 	bl	8006ee6 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8006bc6:	b11d      	cbz	r5, 8006bd0 <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bc8:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006bca:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8006bce:	e76e      	b.n	8006aae <USBD_StdDevReq+0x42>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e7fa      	b.n	8006bca <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 8006bd4:	7889      	ldrb	r1, [r1, #2]
 8006bd6:	4d39      	ldr	r5, [pc, #228]	; (8006cbc <USBD_StdDevReq+0x250>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006bd8:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8006bda:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006bdc:	d8a4      	bhi.n	8006b28 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8006bde:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d008      	beq.n	8006bf8 <USBD_StdDevReq+0x18c>
 8006be6:	2b03      	cmp	r3, #3
 8006be8:	d015      	beq.n	8006c16 <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 8006bea:	f7ff ff34 	bl	8006a56 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006bee:	4620      	mov	r0, r4
 8006bf0:	7829      	ldrb	r1, [r5, #0]
 8006bf2:	f7ff fe1e 	bl	8006832 <USBD_ClrClassConfig>
        break;
 8006bf6:	e75a      	b.n	8006aae <USBD_StdDevReq+0x42>
        if (cfgidx)
 8006bf8:	2900      	cmp	r1, #0
 8006bfa:	f43f af77 	beq.w	8006aec <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 8006bfe:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c00:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8006c02:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c04:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f7ff fe07 	bl	800681c <USBD_SetClassConfig>
 8006c0e:	2802      	cmp	r0, #2
 8006c10:	f47f af6c 	bne.w	8006aec <USBD_StdDevReq+0x80>
 8006c14:	e788      	b.n	8006b28 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 8006c16:	b931      	cbnz	r1, 8006c26 <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c18:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8006c1a:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c1c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8006c20:	f7ff fe07 	bl	8006832 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006c24:	e762      	b.n	8006aec <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 8006c26:	6841      	ldr	r1, [r0, #4]
 8006c28:	2901      	cmp	r1, #1
 8006c2a:	f43f af5f 	beq.w	8006aec <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c2e:	b2c9      	uxtb	r1, r1
 8006c30:	f7ff fdff 	bl	8006832 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006c34:	7829      	ldrb	r1, [r5, #0]
 8006c36:	6061      	str	r1, [r4, #4]
 8006c38:	e7e6      	b.n	8006c08 <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 8006c3a:	88ca      	ldrh	r2, [r1, #6]
 8006c3c:	2a01      	cmp	r2, #1
 8006c3e:	f47f af73 	bne.w	8006b28 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8006c42:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d80a      	bhi.n	8006c60 <USBD_StdDevReq+0x1f4>
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f43f af6c 	beq.w	8006b28 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 8006c50:	4601      	mov	r1, r0
 8006c52:	2300      	movs	r3, #0
 8006c54:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006c58:	4620      	mov	r0, r4
 8006c5a:	f000 f91a 	bl	8006e92 <USBD_CtlSendData>
      break;
 8006c5e:	e726      	b.n	8006aae <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 8006c60:	2b03      	cmp	r3, #3
 8006c62:	f47f af61 	bne.w	8006b28 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006c66:	1d01      	adds	r1, r0, #4
 8006c68:	e7f6      	b.n	8006c58 <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 8006c6a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	f63f af59 	bhi.w	8006b28 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 8006c76:	88cb      	ldrh	r3, [r1, #6]
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	f47f af55 	bne.w	8006b28 <USBD_StdDevReq+0xbc>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8006c82:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8006c86:	b10b      	cbz	r3, 8006c8c <USBD_StdDevReq+0x220>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	f104 010c 	add.w	r1, r4, #12
 8006c92:	e7e1      	b.n	8006c58 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c94:	884b      	ldrh	r3, [r1, #2]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	f47f af09 	bne.w	8006aae <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8006c9c:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8006ca0:	e724      	b.n	8006aec <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 8006ca2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	f63f af3d 	bhi.w	8006b28 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006cae:	884b      	ldrh	r3, [r1, #2]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	f47f aefc 	bne.w	8006aae <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	e7f0      	b.n	8006c9c <USBD_StdDevReq+0x230>
 8006cba:	bf00      	nop
 8006cbc:	200003d8 	.word	0x200003d8

08006cc0 <USBD_StdItfReq>:
{
 8006cc0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cc2:	780b      	ldrb	r3, [r1, #0]
{
 8006cc4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cc6:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8006cca:	2a40      	cmp	r2, #64	; 0x40
{
 8006ccc:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cce:	d001      	beq.n	8006cd4 <USBD_StdItfReq+0x14>
 8006cd0:	065b      	lsls	r3, r3, #25
 8006cd2:	d415      	bmi.n	8006d00 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8006cd4:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d810      	bhi.n	8006d00 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006cde:	792b      	ldrb	r3, [r5, #4]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d80d      	bhi.n	8006d00 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ce4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8006ce8:	4629      	mov	r1, r5
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	4620      	mov	r0, r4
 8006cee:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006cf0:	88eb      	ldrh	r3, [r5, #6]
 8006cf2:	b91b      	cbnz	r3, 8006cfc <USBD_StdItfReq+0x3c>
 8006cf4:	b910      	cbnz	r0, 8006cfc <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	f000 f8f5 	bl	8006ee6 <USBD_CtlSendStatus>
}
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8006d00:	4620      	mov	r0, r4
 8006d02:	f7ff fea8 	bl	8006a56 <USBD_CtlError.constprop.0>
          break;
 8006d06:	e7f9      	b.n	8006cfc <USBD_StdItfReq+0x3c>

08006d08 <USBD_StdEPReq>:
{
 8006d08:	b538      	push	{r3, r4, r5, lr}
 8006d0a:	780a      	ldrb	r2, [r1, #0]
 8006d0c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d0e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8006d12:	2a20      	cmp	r2, #32
{
 8006d14:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d16:	d027      	beq.n	8006d68 <USBD_StdEPReq+0x60>
 8006d18:	2a40      	cmp	r2, #64	; 0x40
 8006d1a:	d025      	beq.n	8006d68 <USBD_StdEPReq+0x60>
 8006d1c:	bb92      	cbnz	r2, 8006d84 <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 8006d1e:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8006d20:	888d      	ldrh	r5, [r1, #4]
 8006d22:	2a01      	cmp	r2, #1
 8006d24:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 8006d26:	d03d      	beq.n	8006da4 <USBD_StdEPReq+0x9c>
 8006d28:	2a03      	cmp	r2, #3
 8006d2a:	d025      	beq.n	8006d78 <USBD_StdEPReq+0x70>
 8006d2c:	bb52      	cbnz	r2, 8006d84 <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 8006d2e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d04d      	beq.n	8006dd2 <USBD_StdEPReq+0xca>
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d124      	bne.n	8006d84 <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 8006d3a:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d3c:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8006d40:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d44:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8006d48:	d054      	beq.n	8006df4 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	b1d3      	cbz	r3, 8006d84 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d4e:	2314      	movs	r3, #20
 8006d50:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8006d54:	fb05 3303 	mla	r3, r5, r3, r3
 8006d58:	18c5      	adds	r5, r0, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d5a:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8006d5e:	d155      	bne.n	8006e0c <USBD_StdEPReq+0x104>
                pep->status = 0x0001U;
 8006d60:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d62:	2202      	movs	r2, #2
 8006d64:	4629      	mov	r1, r5
 8006d66:	e041      	b.n	8006dec <USBD_StdEPReq+0xe4>
      pdev->pClass->Setup(pdev, req);
 8006d68:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	4620      	mov	r0, r4
 8006d70:	6892      	ldr	r2, [r2, #8]
 8006d72:	4790      	blx	r2
}
 8006d74:	2000      	movs	r0, #0
 8006d76:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 8006d78:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006d7c:	2a02      	cmp	r2, #2
 8006d7e:	d01f      	beq.n	8006dc0 <USBD_StdEPReq+0xb8>
 8006d80:	2a03      	cmp	r2, #3
 8006d82:	d003      	beq.n	8006d8c <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 8006d84:	4620      	mov	r0, r4
 8006d86:	f7ff fe66 	bl	8006a56 <USBD_CtlError.constprop.0>
              break;
 8006d8a:	e7f3      	b.n	8006d74 <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d8c:	885a      	ldrh	r2, [r3, #2]
 8006d8e:	b92a      	cbnz	r2, 8006d9c <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 8006d90:	064a      	lsls	r2, r1, #25
 8006d92:	d003      	beq.n	8006d9c <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d94:	88db      	ldrh	r3, [r3, #6]
 8006d96:	b90b      	cbnz	r3, 8006d9c <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 8006d98:	f000 fa4c 	bl	8007234 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f000 f8a2 	bl	8006ee6 <USBD_CtlSendStatus>
              break;
 8006da2:	e7e7      	b.n	8006d74 <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 8006da4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006da8:	2a02      	cmp	r2, #2
 8006daa:	d009      	beq.n	8006dc0 <USBD_StdEPReq+0xb8>
 8006dac:	2a03      	cmp	r2, #3
 8006dae:	d1e9      	bne.n	8006d84 <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006db0:	885b      	ldrh	r3, [r3, #2]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1de      	bne.n	8006d74 <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8006db6:	064d      	lsls	r5, r1, #25
 8006db8:	d0f0      	beq.n	8006d9c <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006dba:	f000 fa44 	bl	8007246 <USBD_LL_ClearStallEP>
 8006dbe:	e7ed      	b.n	8006d9c <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dc0:	064b      	lsls	r3, r1, #25
 8006dc2:	d0df      	beq.n	8006d84 <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 8006dc4:	f000 fa36 	bl	8007234 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006dc8:	2180      	movs	r1, #128	; 0x80
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f000 fa32 	bl	8007234 <USBD_LL_StallEP>
 8006dd0:	e7d0      	b.n	8006d74 <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dd2:	064a      	lsls	r2, r1, #25
 8006dd4:	d1d6      	bne.n	8006d84 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dd6:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8006dd8:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006ddc:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006de0:	bf4c      	ite	mi
 8006de2:	f100 0114 	addmi.w	r1, r0, #20
 8006de6:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8006dea:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006dec:	4620      	mov	r0, r4
 8006dee:	f000 f850 	bl	8006e92 <USBD_CtlSendData>
              break;
 8006df2:	e7bf      	b.n	8006d74 <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006df4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0c3      	beq.n	8006d84 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dfc:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006dfe:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e02:	fb03 0505 	mla	r5, r3, r5, r0
 8006e06:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8006e0a:	e7a6      	b.n	8006d5a <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f000 fa23 	bl	8007258 <USBD_LL_IsStallEP>
 8006e12:	b108      	cbz	r0, 8006e18 <USBD_StdEPReq+0x110>
                pep->status = 0x0001U;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e7a3      	b.n	8006d60 <USBD_StdEPReq+0x58>
                pep->status = 0x0000U;
 8006e18:	6028      	str	r0, [r5, #0]
 8006e1a:	e7a2      	b.n	8006d62 <USBD_StdEPReq+0x5a>

08006e1c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8006e1c:	780b      	ldrb	r3, [r1, #0]
 8006e1e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006e20:	784b      	ldrb	r3, [r1, #1]
 8006e22:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006e24:	78ca      	ldrb	r2, [r1, #3]
 8006e26:	788b      	ldrb	r3, [r1, #2]
 8006e28:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006e2c:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006e2e:	794a      	ldrb	r2, [r1, #5]
 8006e30:	790b      	ldrb	r3, [r1, #4]
 8006e32:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006e36:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006e38:	79ca      	ldrb	r2, [r1, #7]
 8006e3a:	798b      	ldrb	r3, [r1, #6]
 8006e3c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006e40:	80c3      	strh	r3, [r0, #6]
}
 8006e42:	4770      	bx	lr

08006e44 <USBD_CtlError>:
{
 8006e44:	b510      	push	{r4, lr}
 8006e46:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8006e48:	2180      	movs	r1, #128	; 0x80
 8006e4a:	f000 f9f3 	bl	8007234 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006e4e:	4620      	mov	r0, r4
}
 8006e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8006e54:	2100      	movs	r1, #0
 8006e56:	f000 b9ed 	b.w	8007234 <USBD_LL_StallEP>

08006e5a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e5a:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8006e5c:	b188      	cbz	r0, 8006e82 <USBD_GetString+0x28>
 8006e5e:	2400      	movs	r4, #0
 8006e60:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8006e62:	4623      	mov	r3, r4
 8006e64:	3401      	adds	r4, #1
 8006e66:	5d05      	ldrb	r5, [r0, r4]
 8006e68:	2d00      	cmp	r5, #0
 8006e6a:	d1fa      	bne.n	8006e62 <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	3301      	adds	r3, #1
 8006e70:	005b      	lsls	r3, r3, #1
 8006e72:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006e74:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006e76:	2303      	movs	r3, #3
 8006e78:	704b      	strb	r3, [r1, #1]
 8006e7a:	2302      	movs	r3, #2
    while (*desc != '\0')
 8006e7c:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8006e80:	b904      	cbnz	r4, 8006e84 <USBD_GetString+0x2a>
}
 8006e82:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8006e84:	1c5a      	adds	r2, r3, #1
 8006e86:	54cc      	strb	r4, [r1, r3]
 8006e88:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8006e8a:	3302      	adds	r3, #2
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	548d      	strb	r5, [r1, r2]
 8006e90:	e7f4      	b.n	8006e7c <USBD_GetString+0x22>

08006e92 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006e92:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e94:	2202      	movs	r2, #2
{
 8006e96:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8006e98:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e9c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ea0:	460a      	mov	r2, r1
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	f000 f9f3 	bl	800728e <USBD_LL_Transmit>

  return USBD_OK;
}
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	bd10      	pop	{r4, pc}

08006eac <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006eac:	b508      	push	{r3, lr}
 8006eae:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006eb0:	460a      	mov	r2, r1
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	f000 f9eb 	bl	800728e <USBD_LL_Transmit>

  return USBD_OK;
}
 8006eb8:	2000      	movs	r0, #0
 8006eba:	bd08      	pop	{r3, pc}

08006ebc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006ebc:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006ebe:	2203      	movs	r2, #3
{
 8006ec0:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8006ec2:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006ec6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006eca:	460a      	mov	r2, r1
 8006ecc:	2100      	movs	r1, #0
 8006ece:	f000 f9e7 	bl	80072a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	bd10      	pop	{r4, pc}

08006ed6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006ed6:	b508      	push	{r3, lr}
 8006ed8:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006eda:	460a      	mov	r2, r1
 8006edc:	2100      	movs	r1, #0
 8006ede:	f000 f9df 	bl	80072a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006ee2:	2000      	movs	r0, #0
 8006ee4:	bd08      	pop	{r3, pc}

08006ee6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ee6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ee8:	2304      	movs	r3, #4
 8006eea:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006eee:	2300      	movs	r3, #0
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	f000 f9cb 	bl	800728e <USBD_LL_Transmit>

  return USBD_OK;
}
 8006ef8:	2000      	movs	r0, #0
 8006efa:	bd08      	pop	{r3, pc}

08006efc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006efc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006efe:	2305      	movs	r3, #5
 8006f00:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f04:	2300      	movs	r3, #0
 8006f06:	461a      	mov	r2, r3
 8006f08:	4619      	mov	r1, r3
 8006f0a:	f000 f9c9 	bl	80072a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006f0e:	2000      	movs	r0, #0
 8006f10:	bd08      	pop	{r3, pc}
	...

08006f14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006f14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006f16:	2200      	movs	r2, #0
 8006f18:	490e      	ldr	r1, [pc, #56]	; (8006f54 <MX_USB_DEVICE_Init+0x40>)
 8006f1a:	480f      	ldr	r0, [pc, #60]	; (8006f58 <MX_USB_DEVICE_Init+0x44>)
 8006f1c:	f7ff fc5d 	bl	80067da <USBD_Init>
 8006f20:	b108      	cbz	r0, 8006f26 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8006f22:	f7fc fcad 	bl	8003880 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006f26:	490d      	ldr	r1, [pc, #52]	; (8006f5c <MX_USB_DEVICE_Init+0x48>)
 8006f28:	480b      	ldr	r0, [pc, #44]	; (8006f58 <MX_USB_DEVICE_Init+0x44>)
 8006f2a:	f7ff fc6b 	bl	8006804 <USBD_RegisterClass>
 8006f2e:	b108      	cbz	r0, 8006f34 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8006f30:	f7fc fca6 	bl	8003880 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006f34:	490a      	ldr	r1, [pc, #40]	; (8006f60 <MX_USB_DEVICE_Init+0x4c>)
 8006f36:	4808      	ldr	r0, [pc, #32]	; (8006f58 <MX_USB_DEVICE_Init+0x44>)
 8006f38:	f7ff fc23 	bl	8006782 <USBD_CDC_RegisterInterface>
 8006f3c:	b108      	cbz	r0, 8006f42 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8006f3e:	f7fc fc9f 	bl	8003880 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006f42:	4805      	ldr	r0, [pc, #20]	; (8006f58 <MX_USB_DEVICE_Init+0x44>)
 8006f44:	f7ff fc65 	bl	8006812 <USBD_Start>
 8006f48:	b118      	cbz	r0, 8006f52 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006f4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006f4e:	f7fc bc97 	b.w	8003880 <Error_Handler>
}
 8006f52:	bd08      	pop	{r3, pc}
 8006f54:	2000012c 	.word	0x2000012c
 8006f58:	200003dc 	.word	0x200003dc
 8006f5c:	2000000c 	.word	0x2000000c
 8006f60:	2000011c 	.word	0x2000011c

08006f64 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8006f64:	2000      	movs	r0, #0
 8006f66:	4770      	bx	lr

08006f68 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8006f68:	2000      	movs	r0, #0
 8006f6a:	4770      	bx	lr

08006f6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f6c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f6e:	4c05      	ldr	r4, [pc, #20]	; (8006f84 <CDC_Receive_FS+0x18>)
{
 8006f70:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f72:	4620      	mov	r0, r4
 8006f74:	f7ff fc14 	bl	80067a0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f7ff fc17 	bl	80067ac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8006f7e:	2000      	movs	r0, #0
 8006f80:	bd10      	pop	{r4, pc}
 8006f82:	bf00      	nop
 8006f84:	200003dc 	.word	0x200003dc

08006f88 <CDC_Init_FS>:
{
 8006f88:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006f8a:	4c06      	ldr	r4, [pc, #24]	; (8006fa4 <CDC_Init_FS+0x1c>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	4620      	mov	r0, r4
 8006f90:	4905      	ldr	r1, [pc, #20]	; (8006fa8 <CDC_Init_FS+0x20>)
 8006f92:	f7ff fbfd 	bl	8006790 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006f96:	4620      	mov	r0, r4
 8006f98:	4904      	ldr	r1, [pc, #16]	; (8006fac <CDC_Init_FS+0x24>)
 8006f9a:	f7ff fc01 	bl	80067a0 <USBD_CDC_SetRxBuffer>
}
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	bd10      	pop	{r4, pc}
 8006fa2:	bf00      	nop
 8006fa4:	200003dc 	.word	0x200003dc
 8006fa8:	20000aa0 	.word	0x20000aa0
 8006fac:	200006a0 	.word	0x200006a0

08006fb0 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006fb0:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8006fb2:	4801      	ldr	r0, [pc, #4]	; (8006fb8 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8006fb4:	800b      	strh	r3, [r1, #0]
}
 8006fb6:	4770      	bx	lr
 8006fb8:	20000148 	.word	0x20000148

08006fbc <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006fbc:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8006fbe:	4801      	ldr	r0, [pc, #4]	; (8006fc4 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8006fc0:	800b      	strh	r3, [r1, #0]
}
 8006fc2:	4770      	bx	lr
 8006fc4:	2000015c 	.word	0x2000015c

08006fc8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006fc8:	2300      	movs	r3, #0
 8006fca:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8006fcc:	461e      	mov	r6, r3
 8006fce:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 8006fd0:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 8006fd2:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8006fd6:	bf34      	ite	cc
 8006fd8:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006fda:	3437      	addcs	r4, #55	; 0x37
 8006fdc:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8006fe0:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	b2dc      	uxtb	r4, r3
 8006fe8:	42a2      	cmp	r2, r4
    value = value << 4;
 8006fea:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8006fee:	d8ef      	bhi.n	8006fd0 <IntToUnicode+0x8>
  }
}
 8006ff0:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ff4 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8006ff4:	231a      	movs	r3, #26
{
 8006ff6:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8006ff8:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006ffa:	4b0a      	ldr	r3, [pc, #40]	; (8007024 <USBD_FS_SerialStrDescriptor+0x30>)
 8006ffc:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial0 += deviceserial2;
 8007000:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 8007004:	1880      	adds	r0, r0, r2
 8007006:	d00a      	beq.n	800701e <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007008:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	; 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800700c:	4906      	ldr	r1, [pc, #24]	; (8007028 <USBD_FS_SerialStrDescriptor+0x34>)
 800700e:	2208      	movs	r2, #8
 8007010:	f7ff ffda 	bl	8006fc8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007014:	2204      	movs	r2, #4
 8007016:	4620      	mov	r0, r4
 8007018:	3110      	adds	r1, #16
 800701a:	f7ff ffd5 	bl	8006fc8 <IntToUnicode>
}
 800701e:	4803      	ldr	r0, [pc, #12]	; (800702c <USBD_FS_SerialStrDescriptor+0x38>)
 8007020:	bd10      	pop	{r4, pc}
 8007022:	bf00      	nop
 8007024:	1ffff000 	.word	0x1ffff000
 8007028:	20000162 	.word	0x20000162
 800702c:	20000160 	.word	0x20000160

08007030 <USBD_FS_ManufacturerStrDescriptor>:
{
 8007030:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007032:	4c04      	ldr	r4, [pc, #16]	; (8007044 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8007034:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007036:	4804      	ldr	r0, [pc, #16]	; (8007048 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8007038:	4621      	mov	r1, r4
 800703a:	f7ff ff0e 	bl	8006e5a <USBD_GetString>
}
 800703e:	4620      	mov	r0, r4
 8007040:	bd10      	pop	{r4, pc}
 8007042:	bf00      	nop
 8007044:	20000ea0 	.word	0x20000ea0
 8007048:	0800c3e4 	.word	0x0800c3e4

0800704c <USBD_FS_ProductStrDescriptor>:
{
 800704c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800704e:	4c04      	ldr	r4, [pc, #16]	; (8007060 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8007050:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007052:	4804      	ldr	r0, [pc, #16]	; (8007064 <USBD_FS_ProductStrDescriptor+0x18>)
 8007054:	4621      	mov	r1, r4
 8007056:	f7ff ff00 	bl	8006e5a <USBD_GetString>
}
 800705a:	4620      	mov	r0, r4
 800705c:	bd10      	pop	{r4, pc}
 800705e:	bf00      	nop
 8007060:	20000ea0 	.word	0x20000ea0
 8007064:	0800c3f7 	.word	0x0800c3f7

08007068 <USBD_FS_ConfigStrDescriptor>:
{
 8007068:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800706a:	4c04      	ldr	r4, [pc, #16]	; (800707c <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800706c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800706e:	4804      	ldr	r0, [pc, #16]	; (8007080 <USBD_FS_ConfigStrDescriptor+0x18>)
 8007070:	4621      	mov	r1, r4
 8007072:	f7ff fef2 	bl	8006e5a <USBD_GetString>
}
 8007076:	4620      	mov	r0, r4
 8007078:	bd10      	pop	{r4, pc}
 800707a:	bf00      	nop
 800707c:	20000ea0 	.word	0x20000ea0
 8007080:	0800c40d 	.word	0x0800c40d

08007084 <USBD_FS_InterfaceStrDescriptor>:
{
 8007084:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007086:	4c04      	ldr	r4, [pc, #16]	; (8007098 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8007088:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800708a:	4804      	ldr	r0, [pc, #16]	; (800709c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800708c:	4621      	mov	r1, r4
 800708e:	f7ff fee4 	bl	8006e5a <USBD_GetString>
}
 8007092:	4620      	mov	r0, r4
 8007094:	bd10      	pop	{r4, pc}
 8007096:	bf00      	nop
 8007098:	20000ea0 	.word	0x20000ea0
 800709c:	0800c418 	.word	0x0800c418

080070a0 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80070a0:	2803      	cmp	r0, #3
 80070a2:	bf9a      	itte	ls
 80070a4:	4b01      	ldrls	r3, [pc, #4]	; (80070ac <USBD_Get_USB_Status+0xc>)
 80070a6:	5c18      	ldrbls	r0, [r3, r0]
{
 80070a8:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80070aa:	4770      	bx	lr
 80070ac:	0800c426 	.word	0x0800c426

080070b0 <HAL_PCD_MspInit>:
{
 80070b0:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 80070b2:	4b0e      	ldr	r3, [pc, #56]	; (80070ec <HAL_PCD_MspInit+0x3c>)
 80070b4:	6802      	ldr	r2, [r0, #0]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d115      	bne.n	80070e6 <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 80070ba:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80070be:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80070c0:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 80070c2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80070c6:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80070c8:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80070ca:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80070cc:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80070ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070d2:	9301      	str	r3, [sp, #4]
 80070d4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80070d6:	f7fd f8d7 	bl	8004288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80070da:	2014      	movs	r0, #20
}
 80070dc:	b003      	add	sp, #12
 80070de:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80070e2:	f7fd b903 	b.w	80042ec <HAL_NVIC_EnableIRQ>
}
 80070e6:	b003      	add	sp, #12
 80070e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80070ec:	40005c00 	.word	0x40005c00

080070f0 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070f0:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 80070f4:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 80070f8:	f7ff bba2 	b.w	8006840 <USBD_LL_SetupStage>

080070fc <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80070fc:	2328      	movs	r3, #40	; 0x28
 80070fe:	fb03 0301 	mla	r3, r3, r1, r0
 8007102:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8007106:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800710a:	f7ff bbc6 	b.w	800689a <USBD_LL_DataOutStage>

0800710e <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800710e:	2328      	movs	r3, #40	; 0x28
 8007110:	fb03 0301 	mla	r3, r3, r1, r0
 8007114:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8007118:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800711a:	f7ff bbf8 	b.w	800690e <USBD_LL_DataInStage>

0800711e <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800711e:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8007122:	f7ff bc8c 	b.w	8006a3e <USBD_LL_SOF>

08007126 <HAL_PCD_ResetCallback>:
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007126:	6883      	ldr	r3, [r0, #8]
{
 8007128:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800712a:	2b02      	cmp	r3, #2
{
 800712c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800712e:	d001      	beq.n	8007134 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8007130:	f7fc fba6 	bl	8003880 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007134:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
 8007138:	2101      	movs	r1, #1
 800713a:	f7ff fc6a 	bl	8006a12 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800713e:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
}
 8007142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007146:	f7ff bc3d 	b.w	80069c4 <USBD_LL_Reset>
	...

0800714c <HAL_PCD_SuspendCallback>:
{
 800714c:	b510      	push	{r4, lr}
 800714e:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007150:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8007154:	f7ff fc60 	bl	8006a18 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8007158:	69a3      	ldr	r3, [r4, #24]
 800715a:	b123      	cbz	r3, 8007166 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800715c:	4a02      	ldr	r2, [pc, #8]	; (8007168 <HAL_PCD_SuspendCallback+0x1c>)
 800715e:	6913      	ldr	r3, [r2, #16]
 8007160:	f043 0306 	orr.w	r3, r3, #6
 8007164:	6113      	str	r3, [r2, #16]
}
 8007166:	bd10      	pop	{r4, pc}
 8007168:	e000ed00 	.word	0xe000ed00

0800716c <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800716c:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8007170:	f7ff bc5b 	b.w	8006a2a <USBD_LL_Resume>

08007174 <USBD_LL_Init>:
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007174:	2308      	movs	r3, #8
{
 8007176:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007178:	4a1d      	ldr	r2, [pc, #116]	; (80071f0 <USBD_LL_Init+0x7c>)
{
 800717a:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800717c:	481d      	ldr	r0, [pc, #116]	; (80071f4 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800717e:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007182:	2302      	movs	r3, #2
 8007184:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007186:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8007188:	f8c0 42ec 	str.w	r4, [r0, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800718c:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007190:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007194:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007196:	f7fd f9aa 	bl	80044ee <HAL_PCD_Init>
 800719a:	b108      	cbz	r0, 80071a0 <USBD_LL_Init+0x2c>
    Error_Handler( );
 800719c:	f7fc fb70 	bl	8003880 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80071a0:	2200      	movs	r2, #0
 80071a2:	2318      	movs	r3, #24
 80071a4:	4611      	mov	r1, r2
 80071a6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80071aa:	f7fe f818 	bl	80051de <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80071ae:	2358      	movs	r3, #88	; 0x58
 80071b0:	2200      	movs	r2, #0
 80071b2:	2180      	movs	r1, #128	; 0x80
 80071b4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80071b8:	f7fe f811 	bl	80051de <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80071bc:	23c0      	movs	r3, #192	; 0xc0
 80071be:	2200      	movs	r2, #0
 80071c0:	2181      	movs	r1, #129	; 0x81
 80071c2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80071c6:	f7fe f80a 	bl	80051de <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80071ca:	f44f 7388 	mov.w	r3, #272	; 0x110
 80071ce:	2200      	movs	r2, #0
 80071d0:	2101      	movs	r1, #1
 80071d2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80071d6:	f7fe f802 	bl	80051de <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80071da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071de:	2200      	movs	r2, #0
 80071e0:	2182      	movs	r1, #130	; 0x82
 80071e2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80071e6:	f7fd fffa 	bl	80051de <HAL_PCDEx_PMAConfig>
}
 80071ea:	2000      	movs	r0, #0
 80071ec:	bd10      	pop	{r4, pc}
 80071ee:	bf00      	nop
 80071f0:	40005c00 	.word	0x40005c00
 80071f4:	200010a0 	.word	0x200010a0

080071f8 <USBD_LL_Start>:
{
 80071f8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80071fa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80071fe:	f7fd f9ee 	bl	80045de <HAL_PCD_Start>
}
 8007202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007206:	f7ff bf4b 	b.w	80070a0 <USBD_Get_USB_Status>

0800720a <USBD_LL_OpenEP>:
{
 800720a:	b510      	push	{r4, lr}
 800720c:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800720e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 8007212:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007214:	4623      	mov	r3, r4
 8007216:	f7fd feed 	bl	8004ff4 <HAL_PCD_EP_Open>
}
 800721a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800721e:	f7ff bf3f 	b.w	80070a0 <USBD_Get_USB_Status>

08007222 <USBD_LL_CloseEP>:
{
 8007222:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007224:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007228:	f7fd ff13 	bl	8005052 <HAL_PCD_EP_Close>
}
 800722c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007230:	f7ff bf36 	b.w	80070a0 <USBD_Get_USB_Status>

08007234 <USBD_LL_StallEP>:
{
 8007234:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007236:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800723a:	f7fd ff6b 	bl	8005114 <HAL_PCD_EP_SetStall>
}
 800723e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007242:	f7ff bf2d 	b.w	80070a0 <USBD_Get_USB_Status>

08007246 <USBD_LL_ClearStallEP>:
{
 8007246:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007248:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800724c:	f7fd ff96 	bl	800517c <HAL_PCD_EP_ClrStall>
}
 8007250:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007254:	f7ff bf24 	b.w	80070a0 <USBD_Get_USB_Status>

08007258 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007258:	2228      	movs	r2, #40	; 0x28
  if((ep_addr & 0x80) == 0x80)
 800725a:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800725e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007262:	bf1b      	ittet	ne
 8007264:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8007268:	fb01 2102 	mlane	r1, r1, r2, r2
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800726c:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007270:	185b      	addne	r3, r3, r1
 8007272:	bf14      	ite	ne
 8007274:	7898      	ldrbne	r0, [r3, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007276:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
}
 800727a:	4770      	bx	lr

0800727c <USBD_LL_SetUSBAddress>:
{
 800727c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800727e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007282:	f7fd f9c5 	bl	8004610 <HAL_PCD_SetAddress>
}
 8007286:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800728a:	f7ff bf09 	b.w	80070a0 <USBD_Get_USB_Status>

0800728e <USBD_LL_Transmit>:
{
 800728e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007290:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007294:	f7fd ff24 	bl	80050e0 <HAL_PCD_EP_Transmit>
}
 8007298:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800729c:	f7ff bf00 	b.w	80070a0 <USBD_Get_USB_Status>

080072a0 <USBD_LL_PrepareReceive>:
{
 80072a0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80072a2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80072a6:	f7fd fefc 	bl	80050a2 <HAL_PCD_EP_Receive>
}
 80072aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80072ae:	f7ff bef7 	b.w	80070a0 <USBD_Get_USB_Status>

080072b2 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80072b2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80072b6:	f7fd bf0b 	b.w	80050d0 <HAL_PCD_EP_GetRxCount>
	...

080072bc <USBD_static_malloc>:
}
 80072bc:	4800      	ldr	r0, [pc, #0]	; (80072c0 <USBD_static_malloc+0x4>)
 80072be:	4770      	bx	lr
 80072c0:	20001390 	.word	0x20001390

080072c4 <USBD_static_free>:
}
 80072c4:	4770      	bx	lr

080072c6 <HAL_PCDEx_SetConnectionState>:
}
 80072c6:	4770      	bx	lr

080072c8 <_ZdlPvj>:
 80072c8:	f000 bb3c 	b.w	8007944 <_ZdlPv>

080072cc <_Znwj>:
 80072cc:	2801      	cmp	r0, #1
 80072ce:	bf38      	it	cc
 80072d0:	2001      	movcc	r0, #1
 80072d2:	b510      	push	{r4, lr}
 80072d4:	4604      	mov	r4, r0
 80072d6:	4620      	mov	r0, r4
 80072d8:	f000 fb70 	bl	80079bc <malloc>
 80072dc:	b930      	cbnz	r0, 80072ec <_Znwj+0x20>
 80072de:	f000 fb33 	bl	8007948 <_ZSt15get_new_handlerv>
 80072e2:	b908      	cbnz	r0, 80072e8 <_Znwj+0x1c>
 80072e4:	f000 fb38 	bl	8007958 <abort>
 80072e8:	4780      	blx	r0
 80072ea:	e7f4      	b.n	80072d6 <_Znwj+0xa>
 80072ec:	bd10      	pop	{r4, pc}

080072ee <_ZNSaIcEC1Ev>:
 80072ee:	4770      	bx	lr

080072f0 <_ZNSaIcED1Ev>:
 80072f0:	4770      	bx	lr

080072f2 <_ZSt17__throw_bad_allocv>:
 80072f2:	b508      	push	{r3, lr}
 80072f4:	f000 fb30 	bl	8007958 <abort>

080072f8 <_ZSt19__throw_logic_errorPKc>:
 80072f8:	b508      	push	{r3, lr}
 80072fa:	f000 fb2d 	bl	8007958 <abort>

080072fe <_ZSt24__throw_invalid_argumentPKc>:
 80072fe:	b508      	push	{r3, lr}
 8007300:	f000 fb2a 	bl	8007958 <abort>

08007304 <_ZSt20__throw_length_errorPKc>:
 8007304:	b508      	push	{r3, lr}
 8007306:	f000 fb27 	bl	8007958 <abort>

0800730a <_ZSt20__throw_out_of_rangePKc>:
 800730a:	b508      	push	{r3, lr}
 800730c:	f000 fb24 	bl	8007958 <abort>

08007310 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8007310:	b40f      	push	{r0, r1, r2, r3}
 8007312:	b580      	push	{r7, lr}
 8007314:	b082      	sub	sp, #8
 8007316:	af00      	add	r7, sp, #0
 8007318:	f107 0410 	add.w	r4, r7, #16
 800731c:	f854 5b04 	ldr.w	r5, [r4], #4
 8007320:	4628      	mov	r0, r5
 8007322:	f7f8 ff15 	bl	8000150 <strlen>
 8007326:	f200 2307 	addw	r3, r0, #519	; 0x207
 800732a:	f023 0307 	bic.w	r3, r3, #7
 800732e:	ebad 0d03 	sub.w	sp, sp, r3
 8007332:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8007336:	4623      	mov	r3, r4
 8007338:	462a      	mov	r2, r5
 800733a:	4668      	mov	r0, sp
 800733c:	607c      	str	r4, [r7, #4]
 800733e:	f000 f855 	bl	80073ec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8007342:	f000 fb09 	bl	8007958 <abort>
	...

08007348 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8007348:	4606      	mov	r6, r0
 800734a:	460c      	mov	r4, r1
 800734c:	b580      	push	{r7, lr}
 800734e:	b09c      	sub	sp, #112	; 0x70
 8007350:	af00      	add	r7, sp, #0
 8007352:	1ba4      	subs	r4, r4, r6
 8007354:	2269      	movs	r2, #105	; 0x69
 8007356:	490e      	ldr	r1, [pc, #56]	; (8007390 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8007358:	1d38      	adds	r0, r7, #4
 800735a:	f000 fb4d 	bl	80079f8 <memcpy>
 800735e:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8007362:	f023 0307 	bic.w	r3, r3, #7
 8007366:	ebad 0d03 	sub.w	sp, sp, r3
 800736a:	466d      	mov	r5, sp
 800736c:	2268      	movs	r2, #104	; 0x68
 800736e:	1d39      	adds	r1, r7, #4
 8007370:	4628      	mov	r0, r5
 8007372:	f000 fb41 	bl	80079f8 <memcpy>
 8007376:	4622      	mov	r2, r4
 8007378:	4631      	mov	r1, r6
 800737a:	f105 0068 	add.w	r0, r5, #104	; 0x68
 800737e:	f000 fb3b 	bl	80079f8 <memcpy>
 8007382:	2300      	movs	r3, #0
 8007384:	442c      	add	r4, r5
 8007386:	4628      	mov	r0, r5
 8007388:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800738c:	f7ff ffb4 	bl	80072f8 <_ZSt19__throw_logic_errorPKc>
 8007390:	0800c42a 	.word	0x0800c42a

08007394 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8007394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007398:	af00      	add	r7, sp, #0
 800739a:	b084      	sub	sp, #16
 800739c:	466d      	mov	r5, sp
 800739e:	f105 040c 	add.w	r4, r5, #12
 80073a2:	4623      	mov	r3, r4
 80073a4:	f04f 0c0a 	mov.w	ip, #10
 80073a8:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80073e8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 80073ac:	fbb2 f6fc 	udiv	r6, r2, ip
 80073b0:	fb0c 2e16 	mls	lr, ip, r6, r2
 80073b4:	f818 e00e 	ldrb.w	lr, [r8, lr]
 80073b8:	f803 ed01 	strb.w	lr, [r3, #-1]!
 80073bc:	4696      	mov	lr, r2
 80073be:	f1be 0f09 	cmp.w	lr, #9
 80073c2:	4632      	mov	r2, r6
 80073c4:	d8f2      	bhi.n	80073ac <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 80073c6:	1ae4      	subs	r4, r4, r3
 80073c8:	428c      	cmp	r4, r1
 80073ca:	d809      	bhi.n	80073e0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 80073cc:	f1c4 030c 	rsb	r3, r4, #12
 80073d0:	4622      	mov	r2, r4
 80073d2:	18e9      	adds	r1, r5, r3
 80073d4:	f000 fb10 	bl	80079f8 <memcpy>
 80073d8:	4620      	mov	r0, r4
 80073da:	46bd      	mov	sp, r7
 80073dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073e0:	f04f 34ff 	mov.w	r4, #4294967295
 80073e4:	e7f8      	b.n	80073d8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 80073e6:	bf00      	nop
 80073e8:	0800c493 	.word	0x0800c493

080073ec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80073ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073f0:	4607      	mov	r7, r0
 80073f2:	4615      	mov	r5, r2
 80073f4:	4604      	mov	r4, r0
 80073f6:	3901      	subs	r1, #1
 80073f8:	eb00 0801 	add.w	r8, r0, r1
 80073fc:	782a      	ldrb	r2, [r5, #0]
 80073fe:	b392      	cbz	r2, 8007466 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 8007400:	4544      	cmp	r4, r8
 8007402:	d22a      	bcs.n	800745a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8007404:	2a25      	cmp	r2, #37	; 0x25
 8007406:	d107      	bne.n	8007418 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8007408:	786a      	ldrb	r2, [r5, #1]
 800740a:	2a73      	cmp	r2, #115	; 0x73
 800740c:	d009      	beq.n	8007422 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 800740e:	2a7a      	cmp	r2, #122	; 0x7a
 8007410:	d012      	beq.n	8007438 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8007412:	2a25      	cmp	r2, #37	; 0x25
 8007414:	d100      	bne.n	8007418 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8007416:	3501      	adds	r5, #1
 8007418:	f815 2b01 	ldrb.w	r2, [r5], #1
 800741c:	f804 2b01 	strb.w	r2, [r4], #1
 8007420:	e7ec      	b.n	80073fc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8007422:	f853 2b04 	ldr.w	r2, [r3], #4
 8007426:	3a01      	subs	r2, #1
 8007428:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800742c:	b1c9      	cbz	r1, 8007462 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 800742e:	4544      	cmp	r4, r8
 8007430:	d013      	beq.n	800745a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8007432:	f804 1b01 	strb.w	r1, [r4], #1
 8007436:	e7f7      	b.n	8007428 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8007438:	78aa      	ldrb	r2, [r5, #2]
 800743a:	2a75      	cmp	r2, #117	; 0x75
 800743c:	d1ec      	bne.n	8007418 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800743e:	461e      	mov	r6, r3
 8007440:	4620      	mov	r0, r4
 8007442:	f856 2b04 	ldr.w	r2, [r6], #4
 8007446:	eba8 0104 	sub.w	r1, r8, r4
 800744a:	f7ff ffa3 	bl	8007394 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 800744e:	2800      	cmp	r0, #0
 8007450:	dd03      	ble.n	800745a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8007452:	4633      	mov	r3, r6
 8007454:	4404      	add	r4, r0
 8007456:	3503      	adds	r5, #3
 8007458:	e7d0      	b.n	80073fc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800745a:	4621      	mov	r1, r4
 800745c:	4638      	mov	r0, r7
 800745e:	f7ff ff73 	bl	8007348 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8007462:	3502      	adds	r5, #2
 8007464:	e7ca      	b.n	80073fc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8007466:	7022      	strb	r2, [r4, #0]
 8007468:	1be0      	subs	r0, r4, r7
 800746a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800746e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800746e:	b10a      	cbz	r2, 8007474 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8007470:	f000 bac2 	b.w	80079f8 <memcpy>
 8007474:	4770      	bx	lr

08007476 <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
 8007476:	4613      	mov	r3, r2
 8007478:	460a      	mov	r2, r1
 800747a:	b111      	cbz	r1, 8007482 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
 800747c:	7819      	ldrb	r1, [r3, #0]
 800747e:	f000 baad 	b.w	80079dc <memchr>
 8007482:	4608      	mov	r0, r1
 8007484:	4770      	bx	lr

08007486 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8007486:	6001      	str	r1, [r0, #0]
 8007488:	4770      	bx	lr

0800748a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 800748a:	6800      	ldr	r0, [r0, #0]
 800748c:	4770      	bx	lr

0800748e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 800748e:	3008      	adds	r0, #8
 8007490:	4770      	bx	lr

08007492 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8007492:	6081      	str	r1, [r0, #8]
 8007494:	4770      	bx	lr

08007496 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8007496:	2200      	movs	r2, #0
 8007498:	6803      	ldr	r3, [r0, #0]
 800749a:	6041      	str	r1, [r0, #4]
 800749c:	545a      	strb	r2, [r3, r1]
 800749e:	4770      	bx	lr

080074a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80074a0:	b508      	push	{r3, lr}
 80074a2:	680b      	ldr	r3, [r1, #0]
 80074a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a8:	d302      	bcc.n	80074b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80074aa:	480d      	ldr	r0, [pc, #52]	; (80074e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80074ac:	f7ff ff2a 	bl	8007304 <_ZSt20__throw_length_errorPKc>
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d90b      	bls.n	80074cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80074b4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80074b8:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80074bc:	d206      	bcs.n	80074cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80074be:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80074c2:	bf2a      	itet	cs
 80074c4:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 80074c8:	6008      	strcc	r0, [r1, #0]
 80074ca:	600b      	strcs	r3, [r1, #0]
 80074cc:	6808      	ldr	r0, [r1, #0]
 80074ce:	3001      	adds	r0, #1
 80074d0:	d501      	bpl.n	80074d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80074d2:	f7ff ff0e 	bl	80072f2 <_ZSt17__throw_bad_allocv>
 80074d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80074da:	f7ff bef7 	b.w	80072cc <_Znwj>
 80074de:	bf00      	nop
 80074e0:	0800c49e 	.word	0x0800c49e

080074e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80074e4:	4603      	mov	r3, r0
 80074e6:	f853 0b08 	ldr.w	r0, [r3], #8
 80074ea:	4298      	cmp	r0, r3
 80074ec:	d001      	beq.n	80074f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80074ee:	f000 ba29 	b.w	8007944 <_ZdlPv>
 80074f2:	4770      	bx	lr

080074f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 80074f4:	b508      	push	{r3, lr}
 80074f6:	4603      	mov	r3, r0
 80074f8:	4608      	mov	r0, r1
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	4611      	mov	r1, r2
 80074fe:	4298      	cmp	r0, r3
 8007500:	d903      	bls.n	800750a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 8007502:	4602      	mov	r2, r0
 8007504:	4801      	ldr	r0, [pc, #4]	; (800750c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8007506:	f7ff ff03 	bl	8007310 <_ZSt24__throw_out_of_range_fmtPKcz>
 800750a:	bd08      	pop	{r3, pc}
 800750c:	0800c4b6 	.word	0x0800c4b6

08007510 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8007510:	6840      	ldr	r0, [r0, #4]
 8007512:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8007516:	3901      	subs	r1, #1
 8007518:	1a09      	subs	r1, r1, r0
 800751a:	4291      	cmp	r1, r2
 800751c:	b508      	push	{r3, lr}
 800751e:	d202      	bcs.n	8007526 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8007520:	4618      	mov	r0, r3
 8007522:	f7ff feef 	bl	8007304 <_ZSt20__throw_length_errorPKc>
 8007526:	bd08      	pop	{r3, pc}

08007528 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8007528:	6803      	ldr	r3, [r0, #0]
 800752a:	428b      	cmp	r3, r1
 800752c:	d806      	bhi.n	800753c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 800752e:	6840      	ldr	r0, [r0, #4]
 8007530:	4418      	add	r0, r3
 8007532:	4281      	cmp	r1, r0
 8007534:	bf94      	ite	ls
 8007536:	2000      	movls	r0, #0
 8007538:	2001      	movhi	r0, #1
 800753a:	4770      	bx	lr
 800753c:	2001      	movs	r0, #1
 800753e:	4770      	bx	lr

08007540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8007540:	2a01      	cmp	r2, #1
 8007542:	b410      	push	{r4}
 8007544:	d103      	bne.n	800754e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xe>
 8007546:	780a      	ldrb	r2, [r1, #0]
 8007548:	bc10      	pop	{r4}
 800754a:	7002      	strb	r2, [r0, #0]
 800754c:	4770      	bx	lr
 800754e:	bc10      	pop	{r4}
 8007550:	f7ff bf8d 	b.w	800746e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08007554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8007554:	2a01      	cmp	r2, #1
 8007556:	b430      	push	{r4, r5}
 8007558:	d103      	bne.n	8007562 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 800755a:	780b      	ldrb	r3, [r1, #0]
 800755c:	7003      	strb	r3, [r0, #0]
 800755e:	bc30      	pop	{r4, r5}
 8007560:	4770      	bx	lr
 8007562:	2a00      	cmp	r2, #0
 8007564:	d0fb      	beq.n	800755e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8007566:	bc30      	pop	{r4, r5}
 8007568:	f000 ba54 	b.w	8007a14 <memmove>

0800756c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800756c:	b508      	push	{r3, lr}
 800756e:	1a52      	subs	r2, r2, r1
 8007570:	f7ff ffe6 	bl	8007540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007574:	bd08      	pop	{r3, pc}

08007576 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8007576:	b508      	push	{r3, lr}
 8007578:	1a52      	subs	r2, r2, r1
 800757a:	f7ff ffe1 	bl	8007540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800757e:	bd08      	pop	{r3, pc}

08007580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8007580:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007584:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007586:	461f      	mov	r7, r3
 8007588:	6843      	ldr	r3, [r0, #4]
 800758a:	eb01 0802 	add.w	r8, r1, r2
 800758e:	1ab2      	subs	r2, r6, r2
 8007590:	441a      	add	r2, r3
 8007592:	eba3 0908 	sub.w	r9, r3, r8
 8007596:	4603      	mov	r3, r0
 8007598:	9201      	str	r2, [sp, #4]
 800759a:	f853 2b08 	ldr.w	r2, [r3], #8
 800759e:	460d      	mov	r5, r1
 80075a0:	429a      	cmp	r2, r3
 80075a2:	bf0c      	ite	eq
 80075a4:	220f      	moveq	r2, #15
 80075a6:	6882      	ldrne	r2, [r0, #8]
 80075a8:	a901      	add	r1, sp, #4
 80075aa:	4604      	mov	r4, r0
 80075ac:	f7ff ff78 	bl	80074a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80075b0:	4682      	mov	sl, r0
 80075b2:	b11d      	cbz	r5, 80075bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3c>
 80075b4:	462a      	mov	r2, r5
 80075b6:	6821      	ldr	r1, [r4, #0]
 80075b8:	f7ff ffc2 	bl	8007540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80075bc:	b137      	cbz	r7, 80075cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4c>
 80075be:	b12e      	cbz	r6, 80075cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4c>
 80075c0:	4632      	mov	r2, r6
 80075c2:	4639      	mov	r1, r7
 80075c4:	eb0a 0005 	add.w	r0, sl, r5
 80075c8:	f7ff ffba 	bl	8007540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80075cc:	f1b9 0f00 	cmp.w	r9, #0
 80075d0:	d007      	beq.n	80075e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x62>
 80075d2:	6821      	ldr	r1, [r4, #0]
 80075d4:	4435      	add	r5, r6
 80075d6:	464a      	mov	r2, r9
 80075d8:	4441      	add	r1, r8
 80075da:	eb0a 0005 	add.w	r0, sl, r5
 80075de:	f7ff ffaf 	bl	8007540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80075e2:	4620      	mov	r0, r4
 80075e4:	f7ff ff7e 	bl	80074e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80075e8:	9b01      	ldr	r3, [sp, #4]
 80075ea:	f8c4 a000 	str.w	sl, [r4]
 80075ee:	60a3      	str	r3, [r4, #8]
 80075f0:	b002      	add	sp, #8
 80075f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080075f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 80075f6:	f100 0208 	add.w	r2, r0, #8
 80075fa:	6002      	str	r2, [r0, #0]
 80075fc:	2200      	movs	r2, #0
 80075fe:	6042      	str	r2, [r0, #4]
 8007600:	7202      	strb	r2, [r0, #8]
 8007602:	4770      	bx	lr

08007604 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8007604:	b510      	push	{r4, lr}
 8007606:	4604      	mov	r4, r0
 8007608:	f7ff ff6c 	bl	80074e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800760c:	4620      	mov	r0, r4
 800760e:	bd10      	pop	{r4, pc}

08007610 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8007610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007612:	460d      	mov	r5, r1
 8007614:	f851 3b08 	ldr.w	r3, [r1], #8
 8007618:	4604      	mov	r4, r0
 800761a:	4299      	cmp	r1, r3
 800761c:	6800      	ldr	r0, [r0, #0]
 800761e:	686a      	ldr	r2, [r5, #4]
 8007620:	d10d      	bne.n	800763e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8007622:	b10a      	cbz	r2, 8007628 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x18>
 8007624:	f7ff ff8c 	bl	8007540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007628:	2100      	movs	r1, #0
 800762a:	686b      	ldr	r3, [r5, #4]
 800762c:	6822      	ldr	r2, [r4, #0]
 800762e:	6063      	str	r3, [r4, #4]
 8007630:	54d1      	strb	r1, [r2, r3]
 8007632:	2300      	movs	r3, #0
 8007634:	682a      	ldr	r2, [r5, #0]
 8007636:	606b      	str	r3, [r5, #4]
 8007638:	7013      	strb	r3, [r2, #0]
 800763a:	4620      	mov	r0, r4
 800763c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800763e:	f104 0708 	add.w	r7, r4, #8
 8007642:	42b8      	cmp	r0, r7
 8007644:	bf08      	it	eq
 8007646:	2000      	moveq	r0, #0
 8007648:	e9c4 3200 	strd	r3, r2, [r4]
 800764c:	68ab      	ldr	r3, [r5, #8]
 800764e:	bf18      	it	ne
 8007650:	68a6      	ldrne	r6, [r4, #8]
 8007652:	60a3      	str	r3, [r4, #8]
 8007654:	b110      	cbz	r0, 800765c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x4c>
 8007656:	6028      	str	r0, [r5, #0]
 8007658:	60ae      	str	r6, [r5, #8]
 800765a:	e7ea      	b.n	8007632 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>
 800765c:	6029      	str	r1, [r5, #0]
 800765e:	e7e8      	b.n	8007632 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>

08007660 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv>:
 8007660:	e9d1 3200 	ldrd	r3, r2, [r1]
 8007664:	4413      	add	r3, r2
 8007666:	6003      	str	r3, [r0, #0]
 8007668:	4770      	bx	lr

0800766a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4rendEv>:
 800766a:	680b      	ldr	r3, [r1, #0]
 800766c:	6003      	str	r3, [r0, #0]
 800766e:	4770      	bx	lr

08007670 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8007670:	6840      	ldr	r0, [r0, #4]
 8007672:	4770      	bx	lr

08007674 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 8007674:	6840      	ldr	r0, [r0, #4]
 8007676:	fab0 f080 	clz	r0, r0
 800767a:	0940      	lsrs	r0, r0, #5
 800767c:	4770      	bx	lr

0800767e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 800767e:	6800      	ldr	r0, [r0, #0]
 8007680:	4408      	add	r0, r1
 8007682:	4770      	bx	lr

08007684 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8007684:	6800      	ldr	r0, [r0, #0]
 8007686:	4408      	add	r0, r1
 8007688:	4770      	bx	lr

0800768a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 800768a:	4603      	mov	r3, r0
 800768c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800768e:	f853 2b08 	ldr.w	r2, [r3], #8
 8007692:	6846      	ldr	r6, [r0, #4]
 8007694:	429a      	cmp	r2, r3
 8007696:	bf0c      	ite	eq
 8007698:	230f      	moveq	r3, #15
 800769a:	6883      	ldrne	r3, [r0, #8]
 800769c:	1c75      	adds	r5, r6, #1
 800769e:	429d      	cmp	r5, r3
 80076a0:	4604      	mov	r4, r0
 80076a2:	460f      	mov	r7, r1
 80076a4:	d906      	bls.n	80076b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2a>
 80076a6:	2301      	movs	r3, #1
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	2300      	movs	r3, #0
 80076ac:	4631      	mov	r1, r6
 80076ae:	461a      	mov	r2, r3
 80076b0:	f7ff ff66 	bl	8007580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80076b4:	2200      	movs	r2, #0
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	559f      	strb	r7, [r3, r6]
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	6065      	str	r5, [r4, #4]
 80076be:	555a      	strb	r2, [r3, r5]
 80076c0:	b003      	add	sp, #12
 80076c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 80076c4:	b510      	push	{r4, lr}
 80076c6:	4604      	mov	r4, r0
 80076c8:	f7ff ffdf 	bl	800768a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 80076cc:	4620      	mov	r0, r4
 80076ce:	bd10      	pop	{r4, pc}

080076d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 80076d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d4:	4614      	mov	r4, r2
 80076d6:	4680      	mov	r8, r0
 80076d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076da:	4689      	mov	r9, r1
 80076dc:	462a      	mov	r2, r5
 80076de:	461f      	mov	r7, r3
 80076e0:	4621      	mov	r1, r4
 80076e2:	4b38      	ldr	r3, [pc, #224]	; (80077c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf4>)
 80076e4:	f7ff ff14 	bl	8007510 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80076e8:	4642      	mov	r2, r8
 80076ea:	f852 6b08 	ldr.w	r6, [r2], #8
 80076ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80076f2:	4296      	cmp	r6, r2
 80076f4:	bf0c      	ite	eq
 80076f6:	220f      	moveq	r2, #15
 80076f8:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 80076fc:	eba5 0b04 	sub.w	fp, r5, r4
 8007700:	eb03 0a0b 	add.w	sl, r3, fp
 8007704:	4552      	cmp	r2, sl
 8007706:	d351      	bcc.n	80077ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xdc>
 8007708:	444e      	add	r6, r9
 800770a:	4639      	mov	r1, r7
 800770c:	44a1      	add	r9, r4
 800770e:	4640      	mov	r0, r8
 8007710:	eba3 0909 	sub.w	r9, r3, r9
 8007714:	f7ff ff08 	bl	8007528 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8007718:	b180      	cbz	r0, 800773c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6c>
 800771a:	f1b9 0f00 	cmp.w	r9, #0
 800771e:	d006      	beq.n	800772e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8007720:	42ac      	cmp	r4, r5
 8007722:	d004      	beq.n	800772e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8007724:	464a      	mov	r2, r9
 8007726:	1931      	adds	r1, r6, r4
 8007728:	1970      	adds	r0, r6, r5
 800772a:	f7ff ff13 	bl	8007554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800772e:	b315      	cbz	r5, 8007776 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8007730:	462a      	mov	r2, r5
 8007732:	4639      	mov	r1, r7
 8007734:	4630      	mov	r0, r6
 8007736:	f7ff ff03 	bl	8007540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800773a:	e01c      	b.n	8007776 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 800773c:	b135      	cbz	r5, 800774c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7c>
 800773e:	42ac      	cmp	r4, r5
 8007740:	d33c      	bcc.n	80077bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xec>
 8007742:	462a      	mov	r2, r5
 8007744:	4639      	mov	r1, r7
 8007746:	4630      	mov	r0, r6
 8007748:	f7ff ff04 	bl	8007554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800774c:	f1b9 0f00 	cmp.w	r9, #0
 8007750:	d011      	beq.n	8007776 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8007752:	42ac      	cmp	r4, r5
 8007754:	d00f      	beq.n	8007776 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8007756:	464a      	mov	r2, r9
 8007758:	1931      	adds	r1, r6, r4
 800775a:	1970      	adds	r0, r6, r5
 800775c:	f7ff fefa 	bl	8007554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8007760:	42ac      	cmp	r4, r5
 8007762:	d208      	bcs.n	8007776 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8007764:	4434      	add	r4, r6
 8007766:	197b      	adds	r3, r7, r5
 8007768:	429c      	cmp	r4, r3
 800776a:	d30f      	bcc.n	800778c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
 800776c:	462a      	mov	r2, r5
 800776e:	4639      	mov	r1, r7
 8007770:	4630      	mov	r0, r6
 8007772:	f7ff feef 	bl	8007554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8007776:	2200      	movs	r2, #0
 8007778:	4640      	mov	r0, r8
 800777a:	f8d8 3000 	ldr.w	r3, [r8]
 800777e:	f8c8 a004 	str.w	sl, [r8, #4]
 8007782:	f803 200a 	strb.w	r2, [r3, sl]
 8007786:	b003      	add	sp, #12
 8007788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800778c:	42bc      	cmp	r4, r7
 800778e:	d803      	bhi.n	8007798 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc8>
 8007790:	462a      	mov	r2, r5
 8007792:	eb07 010b 	add.w	r1, r7, fp
 8007796:	e7cd      	b.n	8007734 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x64>
 8007798:	1be4      	subs	r4, r4, r7
 800779a:	4622      	mov	r2, r4
 800779c:	4639      	mov	r1, r7
 800779e:	4630      	mov	r0, r6
 80077a0:	f7ff fed8 	bl	8007554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80077a4:	1b2a      	subs	r2, r5, r4
 80077a6:	1971      	adds	r1, r6, r5
 80077a8:	1930      	adds	r0, r6, r4
 80077aa:	e7c4      	b.n	8007736 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 80077ac:	463b      	mov	r3, r7
 80077ae:	4622      	mov	r2, r4
 80077b0:	4649      	mov	r1, r9
 80077b2:	4640      	mov	r0, r8
 80077b4:	9500      	str	r5, [sp, #0]
 80077b6:	f7ff fee3 	bl	8007580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80077ba:	e7dc      	b.n	8007776 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 80077bc:	f1b9 0f00 	cmp.w	r9, #0
 80077c0:	d0d0      	beq.n	8007764 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x94>
 80077c2:	e7c8      	b.n	8007756 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x86>
 80077c4:	0800c4ed 	.word	0x0800c4ed

080077c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 80077c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077ca:	4604      	mov	r4, r0
 80077cc:	4608      	mov	r0, r1
 80077ce:	460d      	mov	r5, r1
 80077d0:	f7f8 fcbe 	bl	8000150 <strlen>
 80077d4:	462b      	mov	r3, r5
 80077d6:	9000      	str	r0, [sp, #0]
 80077d8:	2100      	movs	r1, #0
 80077da:	4620      	mov	r0, r4
 80077dc:	6862      	ldr	r2, [r4, #4]
 80077de:	f7ff ff77 	bl	80076d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80077e2:	b003      	add	sp, #12
 80077e4:	bd30      	pop	{r4, r5, pc}

080077e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 80077e6:	b508      	push	{r3, lr}
 80077e8:	f7ff ffee 	bl	80077c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 80077ec:	bd08      	pop	{r3, pc}

080077ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 80077ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077f0:	4604      	mov	r4, r0
 80077f2:	4623      	mov	r3, r4
 80077f4:	f853 6b08 	ldr.w	r6, [r3], #8
 80077f8:	6840      	ldr	r0, [r0, #4]
 80077fa:	429e      	cmp	r6, r3
 80077fc:	bf0c      	ite	eq
 80077fe:	230f      	moveq	r3, #15
 8007800:	68a3      	ldrne	r3, [r4, #8]
 8007802:	1885      	adds	r5, r0, r2
 8007804:	429d      	cmp	r5, r3
 8007806:	d80a      	bhi.n	800781e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 8007808:	b112      	cbz	r2, 8007810 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 800780a:	4430      	add	r0, r6
 800780c:	f7ff fe98 	bl	8007540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007810:	2200      	movs	r2, #0
 8007812:	4620      	mov	r0, r4
 8007814:	6823      	ldr	r3, [r4, #0]
 8007816:	6065      	str	r5, [r4, #4]
 8007818:	555a      	strb	r2, [r3, r5]
 800781a:	b002      	add	sp, #8
 800781c:	bd70      	pop	{r4, r5, r6, pc}
 800781e:	460b      	mov	r3, r1
 8007820:	9200      	str	r2, [sp, #0]
 8007822:	4601      	mov	r1, r0
 8007824:	2200      	movs	r2, #0
 8007826:	4620      	mov	r0, r4
 8007828:	f7ff feaa 	bl	8007580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800782c:	e7f0      	b.n	8007810 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

0800782e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 800782e:	b508      	push	{r3, lr}
 8007830:	e9d1 1200 	ldrd	r1, r2, [r1]
 8007834:	f7ff ffdb 	bl	80077ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8007838:	bd08      	pop	{r3, pc}

0800783a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 800783a:	b508      	push	{r3, lr}
 800783c:	f7ff fff7 	bl	800782e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8007840:	bd08      	pop	{r3, pc}

08007842 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8007842:	6800      	ldr	r0, [r0, #0]
 8007844:	4770      	bx	lr

08007846 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>:
 8007846:	b513      	push	{r0, r1, r4, lr}
 8007848:	f88d 1007 	strb.w	r1, [sp, #7]
 800784c:	6841      	ldr	r1, [r0, #4]
 800784e:	4613      	mov	r3, r2
 8007850:	428a      	cmp	r2, r1
 8007852:	d20a      	bcs.n	800786a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 8007854:	6804      	ldr	r4, [r0, #0]
 8007856:	f10d 0207 	add.w	r2, sp, #7
 800785a:	1ac9      	subs	r1, r1, r3
 800785c:	18e0      	adds	r0, r4, r3
 800785e:	f7ff fe0a 	bl	8007476 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 8007862:	b110      	cbz	r0, 800786a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 8007864:	1b00      	subs	r0, r0, r4
 8007866:	b002      	add	sp, #8
 8007868:	bd10      	pop	{r4, pc}
 800786a:	f04f 30ff 	mov.w	r0, #4294967295
 800786e:	e7fa      	b.n	8007866 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x20>

08007870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8007870:	6001      	str	r1, [r0, #0]
 8007872:	4770      	bx	lr

08007874 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8007874:	b510      	push	{r4, lr}
 8007876:	4604      	mov	r4, r0
 8007878:	f100 0208 	add.w	r2, r0, #8
 800787c:	6002      	str	r2, [r0, #0]
 800787e:	e9d1 1200 	ldrd	r1, r2, [r1]
 8007882:	f04f 0300 	mov.w	r3, #0
 8007886:	440a      	add	r2, r1
 8007888:	f7fa fdd6 	bl	8002438 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800788c:	4620      	mov	r0, r4
 800788e:	bd10      	pop	{r4, pc}

08007890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8007890:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007892:	4604      	mov	r4, r0
 8007894:	4616      	mov	r6, r2
 8007896:	460d      	mov	r5, r1
 8007898:	b919      	cbnz	r1, 80078a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800789a:	b112      	cbz	r2, 80078a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800789c:	480d      	ldr	r0, [pc, #52]	; (80078d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800789e:	f7ff fd2b 	bl	80072f8 <_ZSt19__throw_logic_errorPKc>
 80078a2:	1b73      	subs	r3, r6, r5
 80078a4:	2b0f      	cmp	r3, #15
 80078a6:	9301      	str	r3, [sp, #4]
 80078a8:	d907      	bls.n	80078ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80078aa:	2200      	movs	r2, #0
 80078ac:	4620      	mov	r0, r4
 80078ae:	a901      	add	r1, sp, #4
 80078b0:	f7ff fdf6 	bl	80074a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80078b4:	9b01      	ldr	r3, [sp, #4]
 80078b6:	6020      	str	r0, [r4, #0]
 80078b8:	60a3      	str	r3, [r4, #8]
 80078ba:	4632      	mov	r2, r6
 80078bc:	4629      	mov	r1, r5
 80078be:	6820      	ldr	r0, [r4, #0]
 80078c0:	f7ff fe59 	bl	8007576 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80078c4:	2100      	movs	r1, #0
 80078c6:	9b01      	ldr	r3, [sp, #4]
 80078c8:	6822      	ldr	r2, [r4, #0]
 80078ca:	6063      	str	r3, [r4, #4]
 80078cc:	54d1      	strb	r1, [r2, r3]
 80078ce:	b002      	add	sp, #8
 80078d0:	bd70      	pop	{r4, r5, r6, pc}
 80078d2:	bf00      	nop
 80078d4:	0800c506 	.word	0x0800c506

080078d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 80078d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078dc:	460d      	mov	r5, r1
 80078de:	4617      	mov	r7, r2
 80078e0:	4698      	mov	r8, r3
 80078e2:	f100 0308 	add.w	r3, r0, #8
 80078e6:	4604      	mov	r4, r0
 80078e8:	4639      	mov	r1, r7
 80078ea:	6003      	str	r3, [r0, #0]
 80078ec:	4a0a      	ldr	r2, [pc, #40]	; (8007918 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
 80078ee:	4628      	mov	r0, r5
 80078f0:	f7ff fe00 	bl	80074f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80078f4:	686a      	ldr	r2, [r5, #4]
 80078f6:	682e      	ldr	r6, [r5, #0]
 80078f8:	1bd7      	subs	r7, r2, r7
 80078fa:	1831      	adds	r1, r6, r0
 80078fc:	f04f 0300 	mov.w	r3, #0
 8007900:	4620      	mov	r0, r4
 8007902:	4547      	cmp	r7, r8
 8007904:	bf94      	ite	ls
 8007906:	19ca      	addls	r2, r1, r7
 8007908:	eb01 0208 	addhi.w	r2, r1, r8
 800790c:	f7ff ffc0 	bl	8007890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8007910:	4620      	mov	r0, r4
 8007912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007916:	bf00      	nop
 8007918:	0800c530 	.word	0x0800c530

0800791c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 800791c:	b570      	push	{r4, r5, r6, lr}
 800791e:	460d      	mov	r5, r1
 8007920:	4604      	mov	r4, r0
 8007922:	4611      	mov	r1, r2
 8007924:	4628      	mov	r0, r5
 8007926:	4a06      	ldr	r2, [pc, #24]	; (8007940 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 8007928:	461e      	mov	r6, r3
 800792a:	f7ff fde3 	bl	80074f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 800792e:	4633      	mov	r3, r6
 8007930:	4602      	mov	r2, r0
 8007932:	4629      	mov	r1, r5
 8007934:	4620      	mov	r0, r4
 8007936:	f7ff ffcf 	bl	80078d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 800793a:	4620      	mov	r0, r4
 800793c:	bd70      	pop	{r4, r5, r6, pc}
 800793e:	bf00      	nop
 8007940:	0800c54b 	.word	0x0800c54b

08007944 <_ZdlPv>:
 8007944:	f000 b842 	b.w	80079cc <free>

08007948 <_ZSt15get_new_handlerv>:
 8007948:	4b02      	ldr	r3, [pc, #8]	; (8007954 <_ZSt15get_new_handlerv+0xc>)
 800794a:	6818      	ldr	r0, [r3, #0]
 800794c:	f3bf 8f5b 	dmb	ish
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	200015b0 	.word	0x200015b0

08007958 <abort>:
 8007958:	2006      	movs	r0, #6
 800795a:	b508      	push	{r3, lr}
 800795c:	f001 f802 	bl	8008964 <raise>
 8007960:	2001      	movs	r0, #1
 8007962:	f7fc fbaf 	bl	80040c4 <_exit>
	...

08007968 <__errno>:
 8007968:	4b01      	ldr	r3, [pc, #4]	; (8007970 <__errno+0x8>)
 800796a:	6818      	ldr	r0, [r3, #0]
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	2000017c 	.word	0x2000017c

08007974 <__libc_init_array>:
 8007974:	b570      	push	{r4, r5, r6, lr}
 8007976:	2600      	movs	r6, #0
 8007978:	4d0c      	ldr	r5, [pc, #48]	; (80079ac <__libc_init_array+0x38>)
 800797a:	4c0d      	ldr	r4, [pc, #52]	; (80079b0 <__libc_init_array+0x3c>)
 800797c:	1b64      	subs	r4, r4, r5
 800797e:	10a4      	asrs	r4, r4, #2
 8007980:	42a6      	cmp	r6, r4
 8007982:	d109      	bne.n	8007998 <__libc_init_array+0x24>
 8007984:	f004 fcdc 	bl	800c340 <_init>
 8007988:	2600      	movs	r6, #0
 800798a:	4d0a      	ldr	r5, [pc, #40]	; (80079b4 <__libc_init_array+0x40>)
 800798c:	4c0a      	ldr	r4, [pc, #40]	; (80079b8 <__libc_init_array+0x44>)
 800798e:	1b64      	subs	r4, r4, r5
 8007990:	10a4      	asrs	r4, r4, #2
 8007992:	42a6      	cmp	r6, r4
 8007994:	d105      	bne.n	80079a2 <__libc_init_array+0x2e>
 8007996:	bd70      	pop	{r4, r5, r6, pc}
 8007998:	f855 3b04 	ldr.w	r3, [r5], #4
 800799c:	4798      	blx	r3
 800799e:	3601      	adds	r6, #1
 80079a0:	e7ee      	b.n	8007980 <__libc_init_array+0xc>
 80079a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a6:	4798      	blx	r3
 80079a8:	3601      	adds	r6, #1
 80079aa:	e7f2      	b.n	8007992 <__libc_init_array+0x1e>
 80079ac:	0800ca04 	.word	0x0800ca04
 80079b0:	0800ca04 	.word	0x0800ca04
 80079b4:	0800ca04 	.word	0x0800ca04
 80079b8:	0800ca0c 	.word	0x0800ca0c

080079bc <malloc>:
 80079bc:	4b02      	ldr	r3, [pc, #8]	; (80079c8 <malloc+0xc>)
 80079be:	4601      	mov	r1, r0
 80079c0:	6818      	ldr	r0, [r3, #0]
 80079c2:	f000 b8b1 	b.w	8007b28 <_malloc_r>
 80079c6:	bf00      	nop
 80079c8:	2000017c 	.word	0x2000017c

080079cc <free>:
 80079cc:	4b02      	ldr	r3, [pc, #8]	; (80079d8 <free+0xc>)
 80079ce:	4601      	mov	r1, r0
 80079d0:	6818      	ldr	r0, [r3, #0]
 80079d2:	f000 b841 	b.w	8007a58 <_free_r>
 80079d6:	bf00      	nop
 80079d8:	2000017c 	.word	0x2000017c

080079dc <memchr>:
 80079dc:	4603      	mov	r3, r0
 80079de:	b510      	push	{r4, lr}
 80079e0:	b2c9      	uxtb	r1, r1
 80079e2:	4402      	add	r2, r0
 80079e4:	4293      	cmp	r3, r2
 80079e6:	4618      	mov	r0, r3
 80079e8:	d101      	bne.n	80079ee <memchr+0x12>
 80079ea:	2000      	movs	r0, #0
 80079ec:	e003      	b.n	80079f6 <memchr+0x1a>
 80079ee:	7804      	ldrb	r4, [r0, #0]
 80079f0:	3301      	adds	r3, #1
 80079f2:	428c      	cmp	r4, r1
 80079f4:	d1f6      	bne.n	80079e4 <memchr+0x8>
 80079f6:	bd10      	pop	{r4, pc}

080079f8 <memcpy>:
 80079f8:	440a      	add	r2, r1
 80079fa:	4291      	cmp	r1, r2
 80079fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a00:	d100      	bne.n	8007a04 <memcpy+0xc>
 8007a02:	4770      	bx	lr
 8007a04:	b510      	push	{r4, lr}
 8007a06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a0a:	4291      	cmp	r1, r2
 8007a0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a10:	d1f9      	bne.n	8007a06 <memcpy+0xe>
 8007a12:	bd10      	pop	{r4, pc}

08007a14 <memmove>:
 8007a14:	4288      	cmp	r0, r1
 8007a16:	b510      	push	{r4, lr}
 8007a18:	eb01 0402 	add.w	r4, r1, r2
 8007a1c:	d902      	bls.n	8007a24 <memmove+0x10>
 8007a1e:	4284      	cmp	r4, r0
 8007a20:	4623      	mov	r3, r4
 8007a22:	d807      	bhi.n	8007a34 <memmove+0x20>
 8007a24:	1e43      	subs	r3, r0, #1
 8007a26:	42a1      	cmp	r1, r4
 8007a28:	d008      	beq.n	8007a3c <memmove+0x28>
 8007a2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a32:	e7f8      	b.n	8007a26 <memmove+0x12>
 8007a34:	4601      	mov	r1, r0
 8007a36:	4402      	add	r2, r0
 8007a38:	428a      	cmp	r2, r1
 8007a3a:	d100      	bne.n	8007a3e <memmove+0x2a>
 8007a3c:	bd10      	pop	{r4, pc}
 8007a3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a46:	e7f7      	b.n	8007a38 <memmove+0x24>

08007a48 <memset>:
 8007a48:	4603      	mov	r3, r0
 8007a4a:	4402      	add	r2, r0
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d100      	bne.n	8007a52 <memset+0xa>
 8007a50:	4770      	bx	lr
 8007a52:	f803 1b01 	strb.w	r1, [r3], #1
 8007a56:	e7f9      	b.n	8007a4c <memset+0x4>

08007a58 <_free_r>:
 8007a58:	b538      	push	{r3, r4, r5, lr}
 8007a5a:	4605      	mov	r5, r0
 8007a5c:	2900      	cmp	r1, #0
 8007a5e:	d040      	beq.n	8007ae2 <_free_r+0x8a>
 8007a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a64:	1f0c      	subs	r4, r1, #4
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	bfb8      	it	lt
 8007a6a:	18e4      	addlt	r4, r4, r3
 8007a6c:	f003 f8c6 	bl	800abfc <__malloc_lock>
 8007a70:	4a1c      	ldr	r2, [pc, #112]	; (8007ae4 <_free_r+0x8c>)
 8007a72:	6813      	ldr	r3, [r2, #0]
 8007a74:	b933      	cbnz	r3, 8007a84 <_free_r+0x2c>
 8007a76:	6063      	str	r3, [r4, #4]
 8007a78:	6014      	str	r4, [r2, #0]
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a80:	f003 b8c2 	b.w	800ac08 <__malloc_unlock>
 8007a84:	42a3      	cmp	r3, r4
 8007a86:	d908      	bls.n	8007a9a <_free_r+0x42>
 8007a88:	6820      	ldr	r0, [r4, #0]
 8007a8a:	1821      	adds	r1, r4, r0
 8007a8c:	428b      	cmp	r3, r1
 8007a8e:	bf01      	itttt	eq
 8007a90:	6819      	ldreq	r1, [r3, #0]
 8007a92:	685b      	ldreq	r3, [r3, #4]
 8007a94:	1809      	addeq	r1, r1, r0
 8007a96:	6021      	streq	r1, [r4, #0]
 8007a98:	e7ed      	b.n	8007a76 <_free_r+0x1e>
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	b10b      	cbz	r3, 8007aa4 <_free_r+0x4c>
 8007aa0:	42a3      	cmp	r3, r4
 8007aa2:	d9fa      	bls.n	8007a9a <_free_r+0x42>
 8007aa4:	6811      	ldr	r1, [r2, #0]
 8007aa6:	1850      	adds	r0, r2, r1
 8007aa8:	42a0      	cmp	r0, r4
 8007aaa:	d10b      	bne.n	8007ac4 <_free_r+0x6c>
 8007aac:	6820      	ldr	r0, [r4, #0]
 8007aae:	4401      	add	r1, r0
 8007ab0:	1850      	adds	r0, r2, r1
 8007ab2:	4283      	cmp	r3, r0
 8007ab4:	6011      	str	r1, [r2, #0]
 8007ab6:	d1e0      	bne.n	8007a7a <_free_r+0x22>
 8007ab8:	6818      	ldr	r0, [r3, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	4401      	add	r1, r0
 8007abe:	6011      	str	r1, [r2, #0]
 8007ac0:	6053      	str	r3, [r2, #4]
 8007ac2:	e7da      	b.n	8007a7a <_free_r+0x22>
 8007ac4:	d902      	bls.n	8007acc <_free_r+0x74>
 8007ac6:	230c      	movs	r3, #12
 8007ac8:	602b      	str	r3, [r5, #0]
 8007aca:	e7d6      	b.n	8007a7a <_free_r+0x22>
 8007acc:	6820      	ldr	r0, [r4, #0]
 8007ace:	1821      	adds	r1, r4, r0
 8007ad0:	428b      	cmp	r3, r1
 8007ad2:	bf01      	itttt	eq
 8007ad4:	6819      	ldreq	r1, [r3, #0]
 8007ad6:	685b      	ldreq	r3, [r3, #4]
 8007ad8:	1809      	addeq	r1, r1, r0
 8007ada:	6021      	streq	r1, [r4, #0]
 8007adc:	6063      	str	r3, [r4, #4]
 8007ade:	6054      	str	r4, [r2, #4]
 8007ae0:	e7cb      	b.n	8007a7a <_free_r+0x22>
 8007ae2:	bd38      	pop	{r3, r4, r5, pc}
 8007ae4:	200015b4 	.word	0x200015b4

08007ae8 <sbrk_aligned>:
 8007ae8:	b570      	push	{r4, r5, r6, lr}
 8007aea:	4e0e      	ldr	r6, [pc, #56]	; (8007b24 <sbrk_aligned+0x3c>)
 8007aec:	460c      	mov	r4, r1
 8007aee:	6831      	ldr	r1, [r6, #0]
 8007af0:	4605      	mov	r5, r0
 8007af2:	b911      	cbnz	r1, 8007afa <sbrk_aligned+0x12>
 8007af4:	f000 fefa 	bl	80088ec <_sbrk_r>
 8007af8:	6030      	str	r0, [r6, #0]
 8007afa:	4621      	mov	r1, r4
 8007afc:	4628      	mov	r0, r5
 8007afe:	f000 fef5 	bl	80088ec <_sbrk_r>
 8007b02:	1c43      	adds	r3, r0, #1
 8007b04:	d00a      	beq.n	8007b1c <sbrk_aligned+0x34>
 8007b06:	1cc4      	adds	r4, r0, #3
 8007b08:	f024 0403 	bic.w	r4, r4, #3
 8007b0c:	42a0      	cmp	r0, r4
 8007b0e:	d007      	beq.n	8007b20 <sbrk_aligned+0x38>
 8007b10:	1a21      	subs	r1, r4, r0
 8007b12:	4628      	mov	r0, r5
 8007b14:	f000 feea 	bl	80088ec <_sbrk_r>
 8007b18:	3001      	adds	r0, #1
 8007b1a:	d101      	bne.n	8007b20 <sbrk_aligned+0x38>
 8007b1c:	f04f 34ff 	mov.w	r4, #4294967295
 8007b20:	4620      	mov	r0, r4
 8007b22:	bd70      	pop	{r4, r5, r6, pc}
 8007b24:	200015b8 	.word	0x200015b8

08007b28 <_malloc_r>:
 8007b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b2c:	1ccd      	adds	r5, r1, #3
 8007b2e:	f025 0503 	bic.w	r5, r5, #3
 8007b32:	3508      	adds	r5, #8
 8007b34:	2d0c      	cmp	r5, #12
 8007b36:	bf38      	it	cc
 8007b38:	250c      	movcc	r5, #12
 8007b3a:	2d00      	cmp	r5, #0
 8007b3c:	4607      	mov	r7, r0
 8007b3e:	db01      	blt.n	8007b44 <_malloc_r+0x1c>
 8007b40:	42a9      	cmp	r1, r5
 8007b42:	d905      	bls.n	8007b50 <_malloc_r+0x28>
 8007b44:	230c      	movs	r3, #12
 8007b46:	2600      	movs	r6, #0
 8007b48:	603b      	str	r3, [r7, #0]
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b50:	4e2e      	ldr	r6, [pc, #184]	; (8007c0c <_malloc_r+0xe4>)
 8007b52:	f003 f853 	bl	800abfc <__malloc_lock>
 8007b56:	6833      	ldr	r3, [r6, #0]
 8007b58:	461c      	mov	r4, r3
 8007b5a:	bb34      	cbnz	r4, 8007baa <_malloc_r+0x82>
 8007b5c:	4629      	mov	r1, r5
 8007b5e:	4638      	mov	r0, r7
 8007b60:	f7ff ffc2 	bl	8007ae8 <sbrk_aligned>
 8007b64:	1c43      	adds	r3, r0, #1
 8007b66:	4604      	mov	r4, r0
 8007b68:	d14d      	bne.n	8007c06 <_malloc_r+0xde>
 8007b6a:	6834      	ldr	r4, [r6, #0]
 8007b6c:	4626      	mov	r6, r4
 8007b6e:	2e00      	cmp	r6, #0
 8007b70:	d140      	bne.n	8007bf4 <_malloc_r+0xcc>
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	4631      	mov	r1, r6
 8007b76:	4638      	mov	r0, r7
 8007b78:	eb04 0803 	add.w	r8, r4, r3
 8007b7c:	f000 feb6 	bl	80088ec <_sbrk_r>
 8007b80:	4580      	cmp	r8, r0
 8007b82:	d13a      	bne.n	8007bfa <_malloc_r+0xd2>
 8007b84:	6821      	ldr	r1, [r4, #0]
 8007b86:	3503      	adds	r5, #3
 8007b88:	1a6d      	subs	r5, r5, r1
 8007b8a:	f025 0503 	bic.w	r5, r5, #3
 8007b8e:	3508      	adds	r5, #8
 8007b90:	2d0c      	cmp	r5, #12
 8007b92:	bf38      	it	cc
 8007b94:	250c      	movcc	r5, #12
 8007b96:	4638      	mov	r0, r7
 8007b98:	4629      	mov	r1, r5
 8007b9a:	f7ff ffa5 	bl	8007ae8 <sbrk_aligned>
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	d02b      	beq.n	8007bfa <_malloc_r+0xd2>
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	442b      	add	r3, r5
 8007ba6:	6023      	str	r3, [r4, #0]
 8007ba8:	e00e      	b.n	8007bc8 <_malloc_r+0xa0>
 8007baa:	6822      	ldr	r2, [r4, #0]
 8007bac:	1b52      	subs	r2, r2, r5
 8007bae:	d41e      	bmi.n	8007bee <_malloc_r+0xc6>
 8007bb0:	2a0b      	cmp	r2, #11
 8007bb2:	d916      	bls.n	8007be2 <_malloc_r+0xba>
 8007bb4:	1961      	adds	r1, r4, r5
 8007bb6:	42a3      	cmp	r3, r4
 8007bb8:	6025      	str	r5, [r4, #0]
 8007bba:	bf18      	it	ne
 8007bbc:	6059      	strne	r1, [r3, #4]
 8007bbe:	6863      	ldr	r3, [r4, #4]
 8007bc0:	bf08      	it	eq
 8007bc2:	6031      	streq	r1, [r6, #0]
 8007bc4:	5162      	str	r2, [r4, r5]
 8007bc6:	604b      	str	r3, [r1, #4]
 8007bc8:	4638      	mov	r0, r7
 8007bca:	f104 060b 	add.w	r6, r4, #11
 8007bce:	f003 f81b 	bl	800ac08 <__malloc_unlock>
 8007bd2:	f026 0607 	bic.w	r6, r6, #7
 8007bd6:	1d23      	adds	r3, r4, #4
 8007bd8:	1af2      	subs	r2, r6, r3
 8007bda:	d0b6      	beq.n	8007b4a <_malloc_r+0x22>
 8007bdc:	1b9b      	subs	r3, r3, r6
 8007bde:	50a3      	str	r3, [r4, r2]
 8007be0:	e7b3      	b.n	8007b4a <_malloc_r+0x22>
 8007be2:	6862      	ldr	r2, [r4, #4]
 8007be4:	42a3      	cmp	r3, r4
 8007be6:	bf0c      	ite	eq
 8007be8:	6032      	streq	r2, [r6, #0]
 8007bea:	605a      	strne	r2, [r3, #4]
 8007bec:	e7ec      	b.n	8007bc8 <_malloc_r+0xa0>
 8007bee:	4623      	mov	r3, r4
 8007bf0:	6864      	ldr	r4, [r4, #4]
 8007bf2:	e7b2      	b.n	8007b5a <_malloc_r+0x32>
 8007bf4:	4634      	mov	r4, r6
 8007bf6:	6876      	ldr	r6, [r6, #4]
 8007bf8:	e7b9      	b.n	8007b6e <_malloc_r+0x46>
 8007bfa:	230c      	movs	r3, #12
 8007bfc:	4638      	mov	r0, r7
 8007bfe:	603b      	str	r3, [r7, #0]
 8007c00:	f003 f802 	bl	800ac08 <__malloc_unlock>
 8007c04:	e7a1      	b.n	8007b4a <_malloc_r+0x22>
 8007c06:	6025      	str	r5, [r4, #0]
 8007c08:	e7de      	b.n	8007bc8 <_malloc_r+0xa0>
 8007c0a:	bf00      	nop
 8007c0c:	200015b4 	.word	0x200015b4

08007c10 <__cvt>:
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c16:	461f      	mov	r7, r3
 8007c18:	bfbb      	ittet	lt
 8007c1a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007c1e:	461f      	movlt	r7, r3
 8007c20:	2300      	movge	r3, #0
 8007c22:	232d      	movlt	r3, #45	; 0x2d
 8007c24:	b088      	sub	sp, #32
 8007c26:	4614      	mov	r4, r2
 8007c28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c2a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007c2c:	7013      	strb	r3, [r2, #0]
 8007c2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c30:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007c34:	f023 0820 	bic.w	r8, r3, #32
 8007c38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c3c:	d005      	beq.n	8007c4a <__cvt+0x3a>
 8007c3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c42:	d100      	bne.n	8007c46 <__cvt+0x36>
 8007c44:	3501      	adds	r5, #1
 8007c46:	2302      	movs	r3, #2
 8007c48:	e000      	b.n	8007c4c <__cvt+0x3c>
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	aa07      	add	r2, sp, #28
 8007c4e:	9204      	str	r2, [sp, #16]
 8007c50:	aa06      	add	r2, sp, #24
 8007c52:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007c56:	e9cd 3500 	strd	r3, r5, [sp]
 8007c5a:	4622      	mov	r2, r4
 8007c5c:	463b      	mov	r3, r7
 8007c5e:	f001 fe63 	bl	8009928 <_dtoa_r>
 8007c62:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c66:	4606      	mov	r6, r0
 8007c68:	d102      	bne.n	8007c70 <__cvt+0x60>
 8007c6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c6c:	07db      	lsls	r3, r3, #31
 8007c6e:	d522      	bpl.n	8007cb6 <__cvt+0xa6>
 8007c70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c74:	eb06 0905 	add.w	r9, r6, r5
 8007c78:	d110      	bne.n	8007c9c <__cvt+0x8c>
 8007c7a:	7833      	ldrb	r3, [r6, #0]
 8007c7c:	2b30      	cmp	r3, #48	; 0x30
 8007c7e:	d10a      	bne.n	8007c96 <__cvt+0x86>
 8007c80:	2200      	movs	r2, #0
 8007c82:	2300      	movs	r3, #0
 8007c84:	4620      	mov	r0, r4
 8007c86:	4639      	mov	r1, r7
 8007c88:	f7f8 fe8e 	bl	80009a8 <__aeabi_dcmpeq>
 8007c8c:	b918      	cbnz	r0, 8007c96 <__cvt+0x86>
 8007c8e:	f1c5 0501 	rsb	r5, r5, #1
 8007c92:	f8ca 5000 	str.w	r5, [sl]
 8007c96:	f8da 3000 	ldr.w	r3, [sl]
 8007c9a:	4499      	add	r9, r3
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	4639      	mov	r1, r7
 8007ca4:	f7f8 fe80 	bl	80009a8 <__aeabi_dcmpeq>
 8007ca8:	b108      	cbz	r0, 8007cae <__cvt+0x9e>
 8007caa:	f8cd 901c 	str.w	r9, [sp, #28]
 8007cae:	2230      	movs	r2, #48	; 0x30
 8007cb0:	9b07      	ldr	r3, [sp, #28]
 8007cb2:	454b      	cmp	r3, r9
 8007cb4:	d307      	bcc.n	8007cc6 <__cvt+0xb6>
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	9b07      	ldr	r3, [sp, #28]
 8007cba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007cbc:	1b9b      	subs	r3, r3, r6
 8007cbe:	6013      	str	r3, [r2, #0]
 8007cc0:	b008      	add	sp, #32
 8007cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc6:	1c59      	adds	r1, r3, #1
 8007cc8:	9107      	str	r1, [sp, #28]
 8007cca:	701a      	strb	r2, [r3, #0]
 8007ccc:	e7f0      	b.n	8007cb0 <__cvt+0xa0>

08007cce <__exponent>:
 8007cce:	4603      	mov	r3, r0
 8007cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cd2:	2900      	cmp	r1, #0
 8007cd4:	f803 2b02 	strb.w	r2, [r3], #2
 8007cd8:	bfb6      	itet	lt
 8007cda:	222d      	movlt	r2, #45	; 0x2d
 8007cdc:	222b      	movge	r2, #43	; 0x2b
 8007cde:	4249      	neglt	r1, r1
 8007ce0:	2909      	cmp	r1, #9
 8007ce2:	7042      	strb	r2, [r0, #1]
 8007ce4:	dd2b      	ble.n	8007d3e <__exponent+0x70>
 8007ce6:	f10d 0407 	add.w	r4, sp, #7
 8007cea:	46a4      	mov	ip, r4
 8007cec:	270a      	movs	r7, #10
 8007cee:	fb91 f6f7 	sdiv	r6, r1, r7
 8007cf2:	460a      	mov	r2, r1
 8007cf4:	46a6      	mov	lr, r4
 8007cf6:	fb07 1516 	mls	r5, r7, r6, r1
 8007cfa:	2a63      	cmp	r2, #99	; 0x63
 8007cfc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007d00:	4631      	mov	r1, r6
 8007d02:	f104 34ff 	add.w	r4, r4, #4294967295
 8007d06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007d0a:	dcf0      	bgt.n	8007cee <__exponent+0x20>
 8007d0c:	3130      	adds	r1, #48	; 0x30
 8007d0e:	f1ae 0502 	sub.w	r5, lr, #2
 8007d12:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007d16:	4629      	mov	r1, r5
 8007d18:	1c44      	adds	r4, r0, #1
 8007d1a:	4561      	cmp	r1, ip
 8007d1c:	d30a      	bcc.n	8007d34 <__exponent+0x66>
 8007d1e:	f10d 0209 	add.w	r2, sp, #9
 8007d22:	eba2 020e 	sub.w	r2, r2, lr
 8007d26:	4565      	cmp	r5, ip
 8007d28:	bf88      	it	hi
 8007d2a:	2200      	movhi	r2, #0
 8007d2c:	4413      	add	r3, r2
 8007d2e:	1a18      	subs	r0, r3, r0
 8007d30:	b003      	add	sp, #12
 8007d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d34:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d38:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007d3c:	e7ed      	b.n	8007d1a <__exponent+0x4c>
 8007d3e:	2330      	movs	r3, #48	; 0x30
 8007d40:	3130      	adds	r1, #48	; 0x30
 8007d42:	7083      	strb	r3, [r0, #2]
 8007d44:	70c1      	strb	r1, [r0, #3]
 8007d46:	1d03      	adds	r3, r0, #4
 8007d48:	e7f1      	b.n	8007d2e <__exponent+0x60>
	...

08007d4c <_printf_float>:
 8007d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d50:	b091      	sub	sp, #68	; 0x44
 8007d52:	460c      	mov	r4, r1
 8007d54:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007d58:	4616      	mov	r6, r2
 8007d5a:	461f      	mov	r7, r3
 8007d5c:	4605      	mov	r5, r0
 8007d5e:	f002 ff37 	bl	800abd0 <_localeconv_r>
 8007d62:	6803      	ldr	r3, [r0, #0]
 8007d64:	4618      	mov	r0, r3
 8007d66:	9309      	str	r3, [sp, #36]	; 0x24
 8007d68:	f7f8 f9f2 	bl	8000150 <strlen>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	930e      	str	r3, [sp, #56]	; 0x38
 8007d70:	f8d8 3000 	ldr.w	r3, [r8]
 8007d74:	900a      	str	r0, [sp, #40]	; 0x28
 8007d76:	3307      	adds	r3, #7
 8007d78:	f023 0307 	bic.w	r3, r3, #7
 8007d7c:	f103 0208 	add.w	r2, r3, #8
 8007d80:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007d84:	f8d4 b000 	ldr.w	fp, [r4]
 8007d88:	f8c8 2000 	str.w	r2, [r8]
 8007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d90:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007d94:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007d98:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007d9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007da2:	4640      	mov	r0, r8
 8007da4:	4b9c      	ldr	r3, [pc, #624]	; (8008018 <_printf_float+0x2cc>)
 8007da6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007da8:	f7f8 fe30 	bl	8000a0c <__aeabi_dcmpun>
 8007dac:	bb70      	cbnz	r0, 8007e0c <_printf_float+0xc0>
 8007dae:	f04f 32ff 	mov.w	r2, #4294967295
 8007db2:	4640      	mov	r0, r8
 8007db4:	4b98      	ldr	r3, [pc, #608]	; (8008018 <_printf_float+0x2cc>)
 8007db6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007db8:	f7f8 fe0a 	bl	80009d0 <__aeabi_dcmple>
 8007dbc:	bb30      	cbnz	r0, 8007e0c <_printf_float+0xc0>
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	4640      	mov	r0, r8
 8007dc4:	4651      	mov	r1, sl
 8007dc6:	f7f8 fdf9 	bl	80009bc <__aeabi_dcmplt>
 8007dca:	b110      	cbz	r0, 8007dd2 <_printf_float+0x86>
 8007dcc:	232d      	movs	r3, #45	; 0x2d
 8007dce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dd2:	4b92      	ldr	r3, [pc, #584]	; (800801c <_printf_float+0x2d0>)
 8007dd4:	4892      	ldr	r0, [pc, #584]	; (8008020 <_printf_float+0x2d4>)
 8007dd6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007dda:	bf94      	ite	ls
 8007ddc:	4698      	movls	r8, r3
 8007dde:	4680      	movhi	r8, r0
 8007de0:	2303      	movs	r3, #3
 8007de2:	f04f 0a00 	mov.w	sl, #0
 8007de6:	6123      	str	r3, [r4, #16]
 8007de8:	f02b 0304 	bic.w	r3, fp, #4
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	4633      	mov	r3, r6
 8007df0:	4621      	mov	r1, r4
 8007df2:	4628      	mov	r0, r5
 8007df4:	9700      	str	r7, [sp, #0]
 8007df6:	aa0f      	add	r2, sp, #60	; 0x3c
 8007df8:	f000 f9d4 	bl	80081a4 <_printf_common>
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	f040 8090 	bne.w	8007f22 <_printf_float+0x1d6>
 8007e02:	f04f 30ff 	mov.w	r0, #4294967295
 8007e06:	b011      	add	sp, #68	; 0x44
 8007e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e0c:	4642      	mov	r2, r8
 8007e0e:	4653      	mov	r3, sl
 8007e10:	4640      	mov	r0, r8
 8007e12:	4651      	mov	r1, sl
 8007e14:	f7f8 fdfa 	bl	8000a0c <__aeabi_dcmpun>
 8007e18:	b148      	cbz	r0, 8007e2e <_printf_float+0xe2>
 8007e1a:	f1ba 0f00 	cmp.w	sl, #0
 8007e1e:	bfb8      	it	lt
 8007e20:	232d      	movlt	r3, #45	; 0x2d
 8007e22:	4880      	ldr	r0, [pc, #512]	; (8008024 <_printf_float+0x2d8>)
 8007e24:	bfb8      	it	lt
 8007e26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e2a:	4b7f      	ldr	r3, [pc, #508]	; (8008028 <_printf_float+0x2dc>)
 8007e2c:	e7d3      	b.n	8007dd6 <_printf_float+0x8a>
 8007e2e:	6863      	ldr	r3, [r4, #4]
 8007e30:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007e34:	1c5a      	adds	r2, r3, #1
 8007e36:	d142      	bne.n	8007ebe <_printf_float+0x172>
 8007e38:	2306      	movs	r3, #6
 8007e3a:	6063      	str	r3, [r4, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	9206      	str	r2, [sp, #24]
 8007e40:	aa0e      	add	r2, sp, #56	; 0x38
 8007e42:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007e46:	aa0d      	add	r2, sp, #52	; 0x34
 8007e48:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007e4c:	9203      	str	r2, [sp, #12]
 8007e4e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007e52:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007e56:	6023      	str	r3, [r4, #0]
 8007e58:	6863      	ldr	r3, [r4, #4]
 8007e5a:	4642      	mov	r2, r8
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	4628      	mov	r0, r5
 8007e60:	4653      	mov	r3, sl
 8007e62:	910b      	str	r1, [sp, #44]	; 0x2c
 8007e64:	f7ff fed4 	bl	8007c10 <__cvt>
 8007e68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e6a:	4680      	mov	r8, r0
 8007e6c:	2947      	cmp	r1, #71	; 0x47
 8007e6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007e70:	d108      	bne.n	8007e84 <_printf_float+0x138>
 8007e72:	1cc8      	adds	r0, r1, #3
 8007e74:	db02      	blt.n	8007e7c <_printf_float+0x130>
 8007e76:	6863      	ldr	r3, [r4, #4]
 8007e78:	4299      	cmp	r1, r3
 8007e7a:	dd40      	ble.n	8007efe <_printf_float+0x1b2>
 8007e7c:	f1a9 0902 	sub.w	r9, r9, #2
 8007e80:	fa5f f989 	uxtb.w	r9, r9
 8007e84:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007e88:	d81f      	bhi.n	8007eca <_printf_float+0x17e>
 8007e8a:	464a      	mov	r2, r9
 8007e8c:	3901      	subs	r1, #1
 8007e8e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e92:	910d      	str	r1, [sp, #52]	; 0x34
 8007e94:	f7ff ff1b 	bl	8007cce <__exponent>
 8007e98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e9a:	4682      	mov	sl, r0
 8007e9c:	1813      	adds	r3, r2, r0
 8007e9e:	2a01      	cmp	r2, #1
 8007ea0:	6123      	str	r3, [r4, #16]
 8007ea2:	dc02      	bgt.n	8007eaa <_printf_float+0x15e>
 8007ea4:	6822      	ldr	r2, [r4, #0]
 8007ea6:	07d2      	lsls	r2, r2, #31
 8007ea8:	d501      	bpl.n	8007eae <_printf_float+0x162>
 8007eaa:	3301      	adds	r3, #1
 8007eac:	6123      	str	r3, [r4, #16]
 8007eae:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d09b      	beq.n	8007dee <_printf_float+0xa2>
 8007eb6:	232d      	movs	r3, #45	; 0x2d
 8007eb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ebc:	e797      	b.n	8007dee <_printf_float+0xa2>
 8007ebe:	2947      	cmp	r1, #71	; 0x47
 8007ec0:	d1bc      	bne.n	8007e3c <_printf_float+0xf0>
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1ba      	bne.n	8007e3c <_printf_float+0xf0>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e7b7      	b.n	8007e3a <_printf_float+0xee>
 8007eca:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007ece:	d118      	bne.n	8007f02 <_printf_float+0x1b6>
 8007ed0:	2900      	cmp	r1, #0
 8007ed2:	6863      	ldr	r3, [r4, #4]
 8007ed4:	dd0b      	ble.n	8007eee <_printf_float+0x1a2>
 8007ed6:	6121      	str	r1, [r4, #16]
 8007ed8:	b913      	cbnz	r3, 8007ee0 <_printf_float+0x194>
 8007eda:	6822      	ldr	r2, [r4, #0]
 8007edc:	07d0      	lsls	r0, r2, #31
 8007ede:	d502      	bpl.n	8007ee6 <_printf_float+0x19a>
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	440b      	add	r3, r1
 8007ee4:	6123      	str	r3, [r4, #16]
 8007ee6:	f04f 0a00 	mov.w	sl, #0
 8007eea:	65a1      	str	r1, [r4, #88]	; 0x58
 8007eec:	e7df      	b.n	8007eae <_printf_float+0x162>
 8007eee:	b913      	cbnz	r3, 8007ef6 <_printf_float+0x1aa>
 8007ef0:	6822      	ldr	r2, [r4, #0]
 8007ef2:	07d2      	lsls	r2, r2, #31
 8007ef4:	d501      	bpl.n	8007efa <_printf_float+0x1ae>
 8007ef6:	3302      	adds	r3, #2
 8007ef8:	e7f4      	b.n	8007ee4 <_printf_float+0x198>
 8007efa:	2301      	movs	r3, #1
 8007efc:	e7f2      	b.n	8007ee4 <_printf_float+0x198>
 8007efe:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007f02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f04:	4299      	cmp	r1, r3
 8007f06:	db05      	blt.n	8007f14 <_printf_float+0x1c8>
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	6121      	str	r1, [r4, #16]
 8007f0c:	07d8      	lsls	r0, r3, #31
 8007f0e:	d5ea      	bpl.n	8007ee6 <_printf_float+0x19a>
 8007f10:	1c4b      	adds	r3, r1, #1
 8007f12:	e7e7      	b.n	8007ee4 <_printf_float+0x198>
 8007f14:	2900      	cmp	r1, #0
 8007f16:	bfcc      	ite	gt
 8007f18:	2201      	movgt	r2, #1
 8007f1a:	f1c1 0202 	rsble	r2, r1, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	e7e0      	b.n	8007ee4 <_printf_float+0x198>
 8007f22:	6823      	ldr	r3, [r4, #0]
 8007f24:	055a      	lsls	r2, r3, #21
 8007f26:	d407      	bmi.n	8007f38 <_printf_float+0x1ec>
 8007f28:	6923      	ldr	r3, [r4, #16]
 8007f2a:	4642      	mov	r2, r8
 8007f2c:	4631      	mov	r1, r6
 8007f2e:	4628      	mov	r0, r5
 8007f30:	47b8      	blx	r7
 8007f32:	3001      	adds	r0, #1
 8007f34:	d12b      	bne.n	8007f8e <_printf_float+0x242>
 8007f36:	e764      	b.n	8007e02 <_printf_float+0xb6>
 8007f38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007f3c:	f240 80dd 	bls.w	80080fa <_printf_float+0x3ae>
 8007f40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f44:	2200      	movs	r2, #0
 8007f46:	2300      	movs	r3, #0
 8007f48:	f7f8 fd2e 	bl	80009a8 <__aeabi_dcmpeq>
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	d033      	beq.n	8007fb8 <_printf_float+0x26c>
 8007f50:	2301      	movs	r3, #1
 8007f52:	4631      	mov	r1, r6
 8007f54:	4628      	mov	r0, r5
 8007f56:	4a35      	ldr	r2, [pc, #212]	; (800802c <_printf_float+0x2e0>)
 8007f58:	47b8      	blx	r7
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	f43f af51 	beq.w	8007e02 <_printf_float+0xb6>
 8007f60:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007f64:	429a      	cmp	r2, r3
 8007f66:	db02      	blt.n	8007f6e <_printf_float+0x222>
 8007f68:	6823      	ldr	r3, [r4, #0]
 8007f6a:	07d8      	lsls	r0, r3, #31
 8007f6c:	d50f      	bpl.n	8007f8e <_printf_float+0x242>
 8007f6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f72:	4631      	mov	r1, r6
 8007f74:	4628      	mov	r0, r5
 8007f76:	47b8      	blx	r7
 8007f78:	3001      	adds	r0, #1
 8007f7a:	f43f af42 	beq.w	8007e02 <_printf_float+0xb6>
 8007f7e:	f04f 0800 	mov.w	r8, #0
 8007f82:	f104 091a 	add.w	r9, r4, #26
 8007f86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	4543      	cmp	r3, r8
 8007f8c:	dc09      	bgt.n	8007fa2 <_printf_float+0x256>
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	079b      	lsls	r3, r3, #30
 8007f92:	f100 8102 	bmi.w	800819a <_printf_float+0x44e>
 8007f96:	68e0      	ldr	r0, [r4, #12]
 8007f98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f9a:	4298      	cmp	r0, r3
 8007f9c:	bfb8      	it	lt
 8007f9e:	4618      	movlt	r0, r3
 8007fa0:	e731      	b.n	8007e06 <_printf_float+0xba>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	464a      	mov	r2, r9
 8007fa6:	4631      	mov	r1, r6
 8007fa8:	4628      	mov	r0, r5
 8007faa:	47b8      	blx	r7
 8007fac:	3001      	adds	r0, #1
 8007fae:	f43f af28 	beq.w	8007e02 <_printf_float+0xb6>
 8007fb2:	f108 0801 	add.w	r8, r8, #1
 8007fb6:	e7e6      	b.n	8007f86 <_printf_float+0x23a>
 8007fb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	dc38      	bgt.n	8008030 <_printf_float+0x2e4>
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	4631      	mov	r1, r6
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	4a19      	ldr	r2, [pc, #100]	; (800802c <_printf_float+0x2e0>)
 8007fc6:	47b8      	blx	r7
 8007fc8:	3001      	adds	r0, #1
 8007fca:	f43f af1a 	beq.w	8007e02 <_printf_float+0xb6>
 8007fce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	d102      	bne.n	8007fdc <_printf_float+0x290>
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	07d9      	lsls	r1, r3, #31
 8007fda:	d5d8      	bpl.n	8007f8e <_printf_float+0x242>
 8007fdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fe0:	4631      	mov	r1, r6
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	47b8      	blx	r7
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	f43f af0b 	beq.w	8007e02 <_printf_float+0xb6>
 8007fec:	f04f 0900 	mov.w	r9, #0
 8007ff0:	f104 0a1a 	add.w	sl, r4, #26
 8007ff4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ff6:	425b      	negs	r3, r3
 8007ff8:	454b      	cmp	r3, r9
 8007ffa:	dc01      	bgt.n	8008000 <_printf_float+0x2b4>
 8007ffc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ffe:	e794      	b.n	8007f2a <_printf_float+0x1de>
 8008000:	2301      	movs	r3, #1
 8008002:	4652      	mov	r2, sl
 8008004:	4631      	mov	r1, r6
 8008006:	4628      	mov	r0, r5
 8008008:	47b8      	blx	r7
 800800a:	3001      	adds	r0, #1
 800800c:	f43f aef9 	beq.w	8007e02 <_printf_float+0xb6>
 8008010:	f109 0901 	add.w	r9, r9, #1
 8008014:	e7ee      	b.n	8007ff4 <_printf_float+0x2a8>
 8008016:	bf00      	nop
 8008018:	7fefffff 	.word	0x7fefffff
 800801c:	0800c564 	.word	0x0800c564
 8008020:	0800c568 	.word	0x0800c568
 8008024:	0800c570 	.word	0x0800c570
 8008028:	0800c56c 	.word	0x0800c56c
 800802c:	0800c574 	.word	0x0800c574
 8008030:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008032:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008034:	429a      	cmp	r2, r3
 8008036:	bfa8      	it	ge
 8008038:	461a      	movge	r2, r3
 800803a:	2a00      	cmp	r2, #0
 800803c:	4691      	mov	r9, r2
 800803e:	dc37      	bgt.n	80080b0 <_printf_float+0x364>
 8008040:	f04f 0b00 	mov.w	fp, #0
 8008044:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008048:	f104 021a 	add.w	r2, r4, #26
 800804c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008050:	ebaa 0309 	sub.w	r3, sl, r9
 8008054:	455b      	cmp	r3, fp
 8008056:	dc33      	bgt.n	80080c0 <_printf_float+0x374>
 8008058:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800805c:	429a      	cmp	r2, r3
 800805e:	db3b      	blt.n	80080d8 <_printf_float+0x38c>
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	07da      	lsls	r2, r3, #31
 8008064:	d438      	bmi.n	80080d8 <_printf_float+0x38c>
 8008066:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008068:	990d      	ldr	r1, [sp, #52]	; 0x34
 800806a:	eba3 020a 	sub.w	r2, r3, sl
 800806e:	eba3 0901 	sub.w	r9, r3, r1
 8008072:	4591      	cmp	r9, r2
 8008074:	bfa8      	it	ge
 8008076:	4691      	movge	r9, r2
 8008078:	f1b9 0f00 	cmp.w	r9, #0
 800807c:	dc34      	bgt.n	80080e8 <_printf_float+0x39c>
 800807e:	f04f 0800 	mov.w	r8, #0
 8008082:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008086:	f104 0a1a 	add.w	sl, r4, #26
 800808a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800808e:	1a9b      	subs	r3, r3, r2
 8008090:	eba3 0309 	sub.w	r3, r3, r9
 8008094:	4543      	cmp	r3, r8
 8008096:	f77f af7a 	ble.w	8007f8e <_printf_float+0x242>
 800809a:	2301      	movs	r3, #1
 800809c:	4652      	mov	r2, sl
 800809e:	4631      	mov	r1, r6
 80080a0:	4628      	mov	r0, r5
 80080a2:	47b8      	blx	r7
 80080a4:	3001      	adds	r0, #1
 80080a6:	f43f aeac 	beq.w	8007e02 <_printf_float+0xb6>
 80080aa:	f108 0801 	add.w	r8, r8, #1
 80080ae:	e7ec      	b.n	800808a <_printf_float+0x33e>
 80080b0:	4613      	mov	r3, r2
 80080b2:	4631      	mov	r1, r6
 80080b4:	4642      	mov	r2, r8
 80080b6:	4628      	mov	r0, r5
 80080b8:	47b8      	blx	r7
 80080ba:	3001      	adds	r0, #1
 80080bc:	d1c0      	bne.n	8008040 <_printf_float+0x2f4>
 80080be:	e6a0      	b.n	8007e02 <_printf_float+0xb6>
 80080c0:	2301      	movs	r3, #1
 80080c2:	4631      	mov	r1, r6
 80080c4:	4628      	mov	r0, r5
 80080c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80080c8:	47b8      	blx	r7
 80080ca:	3001      	adds	r0, #1
 80080cc:	f43f ae99 	beq.w	8007e02 <_printf_float+0xb6>
 80080d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080d2:	f10b 0b01 	add.w	fp, fp, #1
 80080d6:	e7b9      	b.n	800804c <_printf_float+0x300>
 80080d8:	4631      	mov	r1, r6
 80080da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080de:	4628      	mov	r0, r5
 80080e0:	47b8      	blx	r7
 80080e2:	3001      	adds	r0, #1
 80080e4:	d1bf      	bne.n	8008066 <_printf_float+0x31a>
 80080e6:	e68c      	b.n	8007e02 <_printf_float+0xb6>
 80080e8:	464b      	mov	r3, r9
 80080ea:	4631      	mov	r1, r6
 80080ec:	4628      	mov	r0, r5
 80080ee:	eb08 020a 	add.w	r2, r8, sl
 80080f2:	47b8      	blx	r7
 80080f4:	3001      	adds	r0, #1
 80080f6:	d1c2      	bne.n	800807e <_printf_float+0x332>
 80080f8:	e683      	b.n	8007e02 <_printf_float+0xb6>
 80080fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080fc:	2a01      	cmp	r2, #1
 80080fe:	dc01      	bgt.n	8008104 <_printf_float+0x3b8>
 8008100:	07db      	lsls	r3, r3, #31
 8008102:	d537      	bpl.n	8008174 <_printf_float+0x428>
 8008104:	2301      	movs	r3, #1
 8008106:	4642      	mov	r2, r8
 8008108:	4631      	mov	r1, r6
 800810a:	4628      	mov	r0, r5
 800810c:	47b8      	blx	r7
 800810e:	3001      	adds	r0, #1
 8008110:	f43f ae77 	beq.w	8007e02 <_printf_float+0xb6>
 8008114:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008118:	4631      	mov	r1, r6
 800811a:	4628      	mov	r0, r5
 800811c:	47b8      	blx	r7
 800811e:	3001      	adds	r0, #1
 8008120:	f43f ae6f 	beq.w	8007e02 <_printf_float+0xb6>
 8008124:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008128:	2200      	movs	r2, #0
 800812a:	2300      	movs	r3, #0
 800812c:	f7f8 fc3c 	bl	80009a8 <__aeabi_dcmpeq>
 8008130:	b9d8      	cbnz	r0, 800816a <_printf_float+0x41e>
 8008132:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008134:	f108 0201 	add.w	r2, r8, #1
 8008138:	3b01      	subs	r3, #1
 800813a:	4631      	mov	r1, r6
 800813c:	4628      	mov	r0, r5
 800813e:	47b8      	blx	r7
 8008140:	3001      	adds	r0, #1
 8008142:	d10e      	bne.n	8008162 <_printf_float+0x416>
 8008144:	e65d      	b.n	8007e02 <_printf_float+0xb6>
 8008146:	2301      	movs	r3, #1
 8008148:	464a      	mov	r2, r9
 800814a:	4631      	mov	r1, r6
 800814c:	4628      	mov	r0, r5
 800814e:	47b8      	blx	r7
 8008150:	3001      	adds	r0, #1
 8008152:	f43f ae56 	beq.w	8007e02 <_printf_float+0xb6>
 8008156:	f108 0801 	add.w	r8, r8, #1
 800815a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800815c:	3b01      	subs	r3, #1
 800815e:	4543      	cmp	r3, r8
 8008160:	dcf1      	bgt.n	8008146 <_printf_float+0x3fa>
 8008162:	4653      	mov	r3, sl
 8008164:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008168:	e6e0      	b.n	8007f2c <_printf_float+0x1e0>
 800816a:	f04f 0800 	mov.w	r8, #0
 800816e:	f104 091a 	add.w	r9, r4, #26
 8008172:	e7f2      	b.n	800815a <_printf_float+0x40e>
 8008174:	2301      	movs	r3, #1
 8008176:	4642      	mov	r2, r8
 8008178:	e7df      	b.n	800813a <_printf_float+0x3ee>
 800817a:	2301      	movs	r3, #1
 800817c:	464a      	mov	r2, r9
 800817e:	4631      	mov	r1, r6
 8008180:	4628      	mov	r0, r5
 8008182:	47b8      	blx	r7
 8008184:	3001      	adds	r0, #1
 8008186:	f43f ae3c 	beq.w	8007e02 <_printf_float+0xb6>
 800818a:	f108 0801 	add.w	r8, r8, #1
 800818e:	68e3      	ldr	r3, [r4, #12]
 8008190:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008192:	1a5b      	subs	r3, r3, r1
 8008194:	4543      	cmp	r3, r8
 8008196:	dcf0      	bgt.n	800817a <_printf_float+0x42e>
 8008198:	e6fd      	b.n	8007f96 <_printf_float+0x24a>
 800819a:	f04f 0800 	mov.w	r8, #0
 800819e:	f104 0919 	add.w	r9, r4, #25
 80081a2:	e7f4      	b.n	800818e <_printf_float+0x442>

080081a4 <_printf_common>:
 80081a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a8:	4616      	mov	r6, r2
 80081aa:	4699      	mov	r9, r3
 80081ac:	688a      	ldr	r2, [r1, #8]
 80081ae:	690b      	ldr	r3, [r1, #16]
 80081b0:	4607      	mov	r7, r0
 80081b2:	4293      	cmp	r3, r2
 80081b4:	bfb8      	it	lt
 80081b6:	4613      	movlt	r3, r2
 80081b8:	6033      	str	r3, [r6, #0]
 80081ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081be:	460c      	mov	r4, r1
 80081c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081c4:	b10a      	cbz	r2, 80081ca <_printf_common+0x26>
 80081c6:	3301      	adds	r3, #1
 80081c8:	6033      	str	r3, [r6, #0]
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	0699      	lsls	r1, r3, #26
 80081ce:	bf42      	ittt	mi
 80081d0:	6833      	ldrmi	r3, [r6, #0]
 80081d2:	3302      	addmi	r3, #2
 80081d4:	6033      	strmi	r3, [r6, #0]
 80081d6:	6825      	ldr	r5, [r4, #0]
 80081d8:	f015 0506 	ands.w	r5, r5, #6
 80081dc:	d106      	bne.n	80081ec <_printf_common+0x48>
 80081de:	f104 0a19 	add.w	sl, r4, #25
 80081e2:	68e3      	ldr	r3, [r4, #12]
 80081e4:	6832      	ldr	r2, [r6, #0]
 80081e6:	1a9b      	subs	r3, r3, r2
 80081e8:	42ab      	cmp	r3, r5
 80081ea:	dc28      	bgt.n	800823e <_printf_common+0x9a>
 80081ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081f0:	1e13      	subs	r3, r2, #0
 80081f2:	6822      	ldr	r2, [r4, #0]
 80081f4:	bf18      	it	ne
 80081f6:	2301      	movne	r3, #1
 80081f8:	0692      	lsls	r2, r2, #26
 80081fa:	d42d      	bmi.n	8008258 <_printf_common+0xb4>
 80081fc:	4649      	mov	r1, r9
 80081fe:	4638      	mov	r0, r7
 8008200:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008204:	47c0      	blx	r8
 8008206:	3001      	adds	r0, #1
 8008208:	d020      	beq.n	800824c <_printf_common+0xa8>
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	68e5      	ldr	r5, [r4, #12]
 800820e:	f003 0306 	and.w	r3, r3, #6
 8008212:	2b04      	cmp	r3, #4
 8008214:	bf18      	it	ne
 8008216:	2500      	movne	r5, #0
 8008218:	6832      	ldr	r2, [r6, #0]
 800821a:	f04f 0600 	mov.w	r6, #0
 800821e:	68a3      	ldr	r3, [r4, #8]
 8008220:	bf08      	it	eq
 8008222:	1aad      	subeq	r5, r5, r2
 8008224:	6922      	ldr	r2, [r4, #16]
 8008226:	bf08      	it	eq
 8008228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800822c:	4293      	cmp	r3, r2
 800822e:	bfc4      	itt	gt
 8008230:	1a9b      	subgt	r3, r3, r2
 8008232:	18ed      	addgt	r5, r5, r3
 8008234:	341a      	adds	r4, #26
 8008236:	42b5      	cmp	r5, r6
 8008238:	d11a      	bne.n	8008270 <_printf_common+0xcc>
 800823a:	2000      	movs	r0, #0
 800823c:	e008      	b.n	8008250 <_printf_common+0xac>
 800823e:	2301      	movs	r3, #1
 8008240:	4652      	mov	r2, sl
 8008242:	4649      	mov	r1, r9
 8008244:	4638      	mov	r0, r7
 8008246:	47c0      	blx	r8
 8008248:	3001      	adds	r0, #1
 800824a:	d103      	bne.n	8008254 <_printf_common+0xb0>
 800824c:	f04f 30ff 	mov.w	r0, #4294967295
 8008250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008254:	3501      	adds	r5, #1
 8008256:	e7c4      	b.n	80081e2 <_printf_common+0x3e>
 8008258:	2030      	movs	r0, #48	; 0x30
 800825a:	18e1      	adds	r1, r4, r3
 800825c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008260:	1c5a      	adds	r2, r3, #1
 8008262:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008266:	4422      	add	r2, r4
 8008268:	3302      	adds	r3, #2
 800826a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800826e:	e7c5      	b.n	80081fc <_printf_common+0x58>
 8008270:	2301      	movs	r3, #1
 8008272:	4622      	mov	r2, r4
 8008274:	4649      	mov	r1, r9
 8008276:	4638      	mov	r0, r7
 8008278:	47c0      	blx	r8
 800827a:	3001      	adds	r0, #1
 800827c:	d0e6      	beq.n	800824c <_printf_common+0xa8>
 800827e:	3601      	adds	r6, #1
 8008280:	e7d9      	b.n	8008236 <_printf_common+0x92>
	...

08008284 <_printf_i>:
 8008284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008288:	7e0f      	ldrb	r7, [r1, #24]
 800828a:	4691      	mov	r9, r2
 800828c:	2f78      	cmp	r7, #120	; 0x78
 800828e:	4680      	mov	r8, r0
 8008290:	460c      	mov	r4, r1
 8008292:	469a      	mov	sl, r3
 8008294:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008296:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800829a:	d807      	bhi.n	80082ac <_printf_i+0x28>
 800829c:	2f62      	cmp	r7, #98	; 0x62
 800829e:	d80a      	bhi.n	80082b6 <_printf_i+0x32>
 80082a0:	2f00      	cmp	r7, #0
 80082a2:	f000 80d9 	beq.w	8008458 <_printf_i+0x1d4>
 80082a6:	2f58      	cmp	r7, #88	; 0x58
 80082a8:	f000 80a4 	beq.w	80083f4 <_printf_i+0x170>
 80082ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082b4:	e03a      	b.n	800832c <_printf_i+0xa8>
 80082b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082ba:	2b15      	cmp	r3, #21
 80082bc:	d8f6      	bhi.n	80082ac <_printf_i+0x28>
 80082be:	a101      	add	r1, pc, #4	; (adr r1, 80082c4 <_printf_i+0x40>)
 80082c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082c4:	0800831d 	.word	0x0800831d
 80082c8:	08008331 	.word	0x08008331
 80082cc:	080082ad 	.word	0x080082ad
 80082d0:	080082ad 	.word	0x080082ad
 80082d4:	080082ad 	.word	0x080082ad
 80082d8:	080082ad 	.word	0x080082ad
 80082dc:	08008331 	.word	0x08008331
 80082e0:	080082ad 	.word	0x080082ad
 80082e4:	080082ad 	.word	0x080082ad
 80082e8:	080082ad 	.word	0x080082ad
 80082ec:	080082ad 	.word	0x080082ad
 80082f0:	0800843f 	.word	0x0800843f
 80082f4:	08008361 	.word	0x08008361
 80082f8:	08008421 	.word	0x08008421
 80082fc:	080082ad 	.word	0x080082ad
 8008300:	080082ad 	.word	0x080082ad
 8008304:	08008461 	.word	0x08008461
 8008308:	080082ad 	.word	0x080082ad
 800830c:	08008361 	.word	0x08008361
 8008310:	080082ad 	.word	0x080082ad
 8008314:	080082ad 	.word	0x080082ad
 8008318:	08008429 	.word	0x08008429
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	1d1a      	adds	r2, r3, #4
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	602a      	str	r2, [r5, #0]
 8008324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008328:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800832c:	2301      	movs	r3, #1
 800832e:	e0a4      	b.n	800847a <_printf_i+0x1f6>
 8008330:	6820      	ldr	r0, [r4, #0]
 8008332:	6829      	ldr	r1, [r5, #0]
 8008334:	0606      	lsls	r6, r0, #24
 8008336:	f101 0304 	add.w	r3, r1, #4
 800833a:	d50a      	bpl.n	8008352 <_printf_i+0xce>
 800833c:	680e      	ldr	r6, [r1, #0]
 800833e:	602b      	str	r3, [r5, #0]
 8008340:	2e00      	cmp	r6, #0
 8008342:	da03      	bge.n	800834c <_printf_i+0xc8>
 8008344:	232d      	movs	r3, #45	; 0x2d
 8008346:	4276      	negs	r6, r6
 8008348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800834c:	230a      	movs	r3, #10
 800834e:	485e      	ldr	r0, [pc, #376]	; (80084c8 <_printf_i+0x244>)
 8008350:	e019      	b.n	8008386 <_printf_i+0x102>
 8008352:	680e      	ldr	r6, [r1, #0]
 8008354:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008358:	602b      	str	r3, [r5, #0]
 800835a:	bf18      	it	ne
 800835c:	b236      	sxthne	r6, r6
 800835e:	e7ef      	b.n	8008340 <_printf_i+0xbc>
 8008360:	682b      	ldr	r3, [r5, #0]
 8008362:	6820      	ldr	r0, [r4, #0]
 8008364:	1d19      	adds	r1, r3, #4
 8008366:	6029      	str	r1, [r5, #0]
 8008368:	0601      	lsls	r1, r0, #24
 800836a:	d501      	bpl.n	8008370 <_printf_i+0xec>
 800836c:	681e      	ldr	r6, [r3, #0]
 800836e:	e002      	b.n	8008376 <_printf_i+0xf2>
 8008370:	0646      	lsls	r6, r0, #25
 8008372:	d5fb      	bpl.n	800836c <_printf_i+0xe8>
 8008374:	881e      	ldrh	r6, [r3, #0]
 8008376:	2f6f      	cmp	r7, #111	; 0x6f
 8008378:	bf0c      	ite	eq
 800837a:	2308      	moveq	r3, #8
 800837c:	230a      	movne	r3, #10
 800837e:	4852      	ldr	r0, [pc, #328]	; (80084c8 <_printf_i+0x244>)
 8008380:	2100      	movs	r1, #0
 8008382:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008386:	6865      	ldr	r5, [r4, #4]
 8008388:	2d00      	cmp	r5, #0
 800838a:	bfa8      	it	ge
 800838c:	6821      	ldrge	r1, [r4, #0]
 800838e:	60a5      	str	r5, [r4, #8]
 8008390:	bfa4      	itt	ge
 8008392:	f021 0104 	bicge.w	r1, r1, #4
 8008396:	6021      	strge	r1, [r4, #0]
 8008398:	b90e      	cbnz	r6, 800839e <_printf_i+0x11a>
 800839a:	2d00      	cmp	r5, #0
 800839c:	d04d      	beq.n	800843a <_printf_i+0x1b6>
 800839e:	4615      	mov	r5, r2
 80083a0:	fbb6 f1f3 	udiv	r1, r6, r3
 80083a4:	fb03 6711 	mls	r7, r3, r1, r6
 80083a8:	5dc7      	ldrb	r7, [r0, r7]
 80083aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80083ae:	4637      	mov	r7, r6
 80083b0:	42bb      	cmp	r3, r7
 80083b2:	460e      	mov	r6, r1
 80083b4:	d9f4      	bls.n	80083a0 <_printf_i+0x11c>
 80083b6:	2b08      	cmp	r3, #8
 80083b8:	d10b      	bne.n	80083d2 <_printf_i+0x14e>
 80083ba:	6823      	ldr	r3, [r4, #0]
 80083bc:	07de      	lsls	r6, r3, #31
 80083be:	d508      	bpl.n	80083d2 <_printf_i+0x14e>
 80083c0:	6923      	ldr	r3, [r4, #16]
 80083c2:	6861      	ldr	r1, [r4, #4]
 80083c4:	4299      	cmp	r1, r3
 80083c6:	bfde      	ittt	le
 80083c8:	2330      	movle	r3, #48	; 0x30
 80083ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083d2:	1b52      	subs	r2, r2, r5
 80083d4:	6122      	str	r2, [r4, #16]
 80083d6:	464b      	mov	r3, r9
 80083d8:	4621      	mov	r1, r4
 80083da:	4640      	mov	r0, r8
 80083dc:	f8cd a000 	str.w	sl, [sp]
 80083e0:	aa03      	add	r2, sp, #12
 80083e2:	f7ff fedf 	bl	80081a4 <_printf_common>
 80083e6:	3001      	adds	r0, #1
 80083e8:	d14c      	bne.n	8008484 <_printf_i+0x200>
 80083ea:	f04f 30ff 	mov.w	r0, #4294967295
 80083ee:	b004      	add	sp, #16
 80083f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083f4:	4834      	ldr	r0, [pc, #208]	; (80084c8 <_printf_i+0x244>)
 80083f6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80083fa:	6829      	ldr	r1, [r5, #0]
 80083fc:	6823      	ldr	r3, [r4, #0]
 80083fe:	f851 6b04 	ldr.w	r6, [r1], #4
 8008402:	6029      	str	r1, [r5, #0]
 8008404:	061d      	lsls	r5, r3, #24
 8008406:	d514      	bpl.n	8008432 <_printf_i+0x1ae>
 8008408:	07df      	lsls	r7, r3, #31
 800840a:	bf44      	itt	mi
 800840c:	f043 0320 	orrmi.w	r3, r3, #32
 8008410:	6023      	strmi	r3, [r4, #0]
 8008412:	b91e      	cbnz	r6, 800841c <_printf_i+0x198>
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	f023 0320 	bic.w	r3, r3, #32
 800841a:	6023      	str	r3, [r4, #0]
 800841c:	2310      	movs	r3, #16
 800841e:	e7af      	b.n	8008380 <_printf_i+0xfc>
 8008420:	6823      	ldr	r3, [r4, #0]
 8008422:	f043 0320 	orr.w	r3, r3, #32
 8008426:	6023      	str	r3, [r4, #0]
 8008428:	2378      	movs	r3, #120	; 0x78
 800842a:	4828      	ldr	r0, [pc, #160]	; (80084cc <_printf_i+0x248>)
 800842c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008430:	e7e3      	b.n	80083fa <_printf_i+0x176>
 8008432:	0659      	lsls	r1, r3, #25
 8008434:	bf48      	it	mi
 8008436:	b2b6      	uxthmi	r6, r6
 8008438:	e7e6      	b.n	8008408 <_printf_i+0x184>
 800843a:	4615      	mov	r5, r2
 800843c:	e7bb      	b.n	80083b6 <_printf_i+0x132>
 800843e:	682b      	ldr	r3, [r5, #0]
 8008440:	6826      	ldr	r6, [r4, #0]
 8008442:	1d18      	adds	r0, r3, #4
 8008444:	6961      	ldr	r1, [r4, #20]
 8008446:	6028      	str	r0, [r5, #0]
 8008448:	0635      	lsls	r5, r6, #24
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	d501      	bpl.n	8008452 <_printf_i+0x1ce>
 800844e:	6019      	str	r1, [r3, #0]
 8008450:	e002      	b.n	8008458 <_printf_i+0x1d4>
 8008452:	0670      	lsls	r0, r6, #25
 8008454:	d5fb      	bpl.n	800844e <_printf_i+0x1ca>
 8008456:	8019      	strh	r1, [r3, #0]
 8008458:	2300      	movs	r3, #0
 800845a:	4615      	mov	r5, r2
 800845c:	6123      	str	r3, [r4, #16]
 800845e:	e7ba      	b.n	80083d6 <_printf_i+0x152>
 8008460:	682b      	ldr	r3, [r5, #0]
 8008462:	2100      	movs	r1, #0
 8008464:	1d1a      	adds	r2, r3, #4
 8008466:	602a      	str	r2, [r5, #0]
 8008468:	681d      	ldr	r5, [r3, #0]
 800846a:	6862      	ldr	r2, [r4, #4]
 800846c:	4628      	mov	r0, r5
 800846e:	f7ff fab5 	bl	80079dc <memchr>
 8008472:	b108      	cbz	r0, 8008478 <_printf_i+0x1f4>
 8008474:	1b40      	subs	r0, r0, r5
 8008476:	6060      	str	r0, [r4, #4]
 8008478:	6863      	ldr	r3, [r4, #4]
 800847a:	6123      	str	r3, [r4, #16]
 800847c:	2300      	movs	r3, #0
 800847e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008482:	e7a8      	b.n	80083d6 <_printf_i+0x152>
 8008484:	462a      	mov	r2, r5
 8008486:	4649      	mov	r1, r9
 8008488:	4640      	mov	r0, r8
 800848a:	6923      	ldr	r3, [r4, #16]
 800848c:	47d0      	blx	sl
 800848e:	3001      	adds	r0, #1
 8008490:	d0ab      	beq.n	80083ea <_printf_i+0x166>
 8008492:	6823      	ldr	r3, [r4, #0]
 8008494:	079b      	lsls	r3, r3, #30
 8008496:	d413      	bmi.n	80084c0 <_printf_i+0x23c>
 8008498:	68e0      	ldr	r0, [r4, #12]
 800849a:	9b03      	ldr	r3, [sp, #12]
 800849c:	4298      	cmp	r0, r3
 800849e:	bfb8      	it	lt
 80084a0:	4618      	movlt	r0, r3
 80084a2:	e7a4      	b.n	80083ee <_printf_i+0x16a>
 80084a4:	2301      	movs	r3, #1
 80084a6:	4632      	mov	r2, r6
 80084a8:	4649      	mov	r1, r9
 80084aa:	4640      	mov	r0, r8
 80084ac:	47d0      	blx	sl
 80084ae:	3001      	adds	r0, #1
 80084b0:	d09b      	beq.n	80083ea <_printf_i+0x166>
 80084b2:	3501      	adds	r5, #1
 80084b4:	68e3      	ldr	r3, [r4, #12]
 80084b6:	9903      	ldr	r1, [sp, #12]
 80084b8:	1a5b      	subs	r3, r3, r1
 80084ba:	42ab      	cmp	r3, r5
 80084bc:	dcf2      	bgt.n	80084a4 <_printf_i+0x220>
 80084be:	e7eb      	b.n	8008498 <_printf_i+0x214>
 80084c0:	2500      	movs	r5, #0
 80084c2:	f104 0619 	add.w	r6, r4, #25
 80084c6:	e7f5      	b.n	80084b4 <_printf_i+0x230>
 80084c8:	0800c576 	.word	0x0800c576
 80084cc:	0800c587 	.word	0x0800c587

080084d0 <_scanf_float>:
 80084d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d4:	b087      	sub	sp, #28
 80084d6:	9303      	str	r3, [sp, #12]
 80084d8:	688b      	ldr	r3, [r1, #8]
 80084da:	4617      	mov	r7, r2
 80084dc:	1e5a      	subs	r2, r3, #1
 80084de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80084e2:	bf85      	ittet	hi
 80084e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80084e8:	195b      	addhi	r3, r3, r5
 80084ea:	2300      	movls	r3, #0
 80084ec:	9302      	strhi	r3, [sp, #8]
 80084ee:	bf88      	it	hi
 80084f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80084f4:	468b      	mov	fp, r1
 80084f6:	f04f 0500 	mov.w	r5, #0
 80084fa:	bf8c      	ite	hi
 80084fc:	608b      	strhi	r3, [r1, #8]
 80084fe:	9302      	strls	r3, [sp, #8]
 8008500:	680b      	ldr	r3, [r1, #0]
 8008502:	4680      	mov	r8, r0
 8008504:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008508:	f84b 3b1c 	str.w	r3, [fp], #28
 800850c:	460c      	mov	r4, r1
 800850e:	465e      	mov	r6, fp
 8008510:	46aa      	mov	sl, r5
 8008512:	46a9      	mov	r9, r5
 8008514:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008518:	9501      	str	r5, [sp, #4]
 800851a:	68a2      	ldr	r2, [r4, #8]
 800851c:	b152      	cbz	r2, 8008534 <_scanf_float+0x64>
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	2b4e      	cmp	r3, #78	; 0x4e
 8008524:	d864      	bhi.n	80085f0 <_scanf_float+0x120>
 8008526:	2b40      	cmp	r3, #64	; 0x40
 8008528:	d83c      	bhi.n	80085a4 <_scanf_float+0xd4>
 800852a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800852e:	b2c8      	uxtb	r0, r1
 8008530:	280e      	cmp	r0, #14
 8008532:	d93a      	bls.n	80085aa <_scanf_float+0xda>
 8008534:	f1b9 0f00 	cmp.w	r9, #0
 8008538:	d003      	beq.n	8008542 <_scanf_float+0x72>
 800853a:	6823      	ldr	r3, [r4, #0]
 800853c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008540:	6023      	str	r3, [r4, #0]
 8008542:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008546:	f1ba 0f01 	cmp.w	sl, #1
 800854a:	f200 8113 	bhi.w	8008774 <_scanf_float+0x2a4>
 800854e:	455e      	cmp	r6, fp
 8008550:	f200 8105 	bhi.w	800875e <_scanf_float+0x28e>
 8008554:	2501      	movs	r5, #1
 8008556:	4628      	mov	r0, r5
 8008558:	b007      	add	sp, #28
 800855a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800855e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008562:	2a0d      	cmp	r2, #13
 8008564:	d8e6      	bhi.n	8008534 <_scanf_float+0x64>
 8008566:	a101      	add	r1, pc, #4	; (adr r1, 800856c <_scanf_float+0x9c>)
 8008568:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800856c:	080086ab 	.word	0x080086ab
 8008570:	08008535 	.word	0x08008535
 8008574:	08008535 	.word	0x08008535
 8008578:	08008535 	.word	0x08008535
 800857c:	0800870b 	.word	0x0800870b
 8008580:	080086e3 	.word	0x080086e3
 8008584:	08008535 	.word	0x08008535
 8008588:	08008535 	.word	0x08008535
 800858c:	080086b9 	.word	0x080086b9
 8008590:	08008535 	.word	0x08008535
 8008594:	08008535 	.word	0x08008535
 8008598:	08008535 	.word	0x08008535
 800859c:	08008535 	.word	0x08008535
 80085a0:	08008671 	.word	0x08008671
 80085a4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80085a8:	e7db      	b.n	8008562 <_scanf_float+0x92>
 80085aa:	290e      	cmp	r1, #14
 80085ac:	d8c2      	bhi.n	8008534 <_scanf_float+0x64>
 80085ae:	a001      	add	r0, pc, #4	; (adr r0, 80085b4 <_scanf_float+0xe4>)
 80085b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80085b4:	08008663 	.word	0x08008663
 80085b8:	08008535 	.word	0x08008535
 80085bc:	08008663 	.word	0x08008663
 80085c0:	080086f7 	.word	0x080086f7
 80085c4:	08008535 	.word	0x08008535
 80085c8:	08008611 	.word	0x08008611
 80085cc:	0800864d 	.word	0x0800864d
 80085d0:	0800864d 	.word	0x0800864d
 80085d4:	0800864d 	.word	0x0800864d
 80085d8:	0800864d 	.word	0x0800864d
 80085dc:	0800864d 	.word	0x0800864d
 80085e0:	0800864d 	.word	0x0800864d
 80085e4:	0800864d 	.word	0x0800864d
 80085e8:	0800864d 	.word	0x0800864d
 80085ec:	0800864d 	.word	0x0800864d
 80085f0:	2b6e      	cmp	r3, #110	; 0x6e
 80085f2:	d809      	bhi.n	8008608 <_scanf_float+0x138>
 80085f4:	2b60      	cmp	r3, #96	; 0x60
 80085f6:	d8b2      	bhi.n	800855e <_scanf_float+0x8e>
 80085f8:	2b54      	cmp	r3, #84	; 0x54
 80085fa:	d077      	beq.n	80086ec <_scanf_float+0x21c>
 80085fc:	2b59      	cmp	r3, #89	; 0x59
 80085fe:	d199      	bne.n	8008534 <_scanf_float+0x64>
 8008600:	2d07      	cmp	r5, #7
 8008602:	d197      	bne.n	8008534 <_scanf_float+0x64>
 8008604:	2508      	movs	r5, #8
 8008606:	e029      	b.n	800865c <_scanf_float+0x18c>
 8008608:	2b74      	cmp	r3, #116	; 0x74
 800860a:	d06f      	beq.n	80086ec <_scanf_float+0x21c>
 800860c:	2b79      	cmp	r3, #121	; 0x79
 800860e:	e7f6      	b.n	80085fe <_scanf_float+0x12e>
 8008610:	6821      	ldr	r1, [r4, #0]
 8008612:	05c8      	lsls	r0, r1, #23
 8008614:	d51a      	bpl.n	800864c <_scanf_float+0x17c>
 8008616:	9b02      	ldr	r3, [sp, #8]
 8008618:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800861c:	6021      	str	r1, [r4, #0]
 800861e:	f109 0901 	add.w	r9, r9, #1
 8008622:	b11b      	cbz	r3, 800862c <_scanf_float+0x15c>
 8008624:	3b01      	subs	r3, #1
 8008626:	3201      	adds	r2, #1
 8008628:	9302      	str	r3, [sp, #8]
 800862a:	60a2      	str	r2, [r4, #8]
 800862c:	68a3      	ldr	r3, [r4, #8]
 800862e:	3b01      	subs	r3, #1
 8008630:	60a3      	str	r3, [r4, #8]
 8008632:	6923      	ldr	r3, [r4, #16]
 8008634:	3301      	adds	r3, #1
 8008636:	6123      	str	r3, [r4, #16]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	3b01      	subs	r3, #1
 800863c:	2b00      	cmp	r3, #0
 800863e:	607b      	str	r3, [r7, #4]
 8008640:	f340 8084 	ble.w	800874c <_scanf_float+0x27c>
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	3301      	adds	r3, #1
 8008648:	603b      	str	r3, [r7, #0]
 800864a:	e766      	b.n	800851a <_scanf_float+0x4a>
 800864c:	eb1a 0f05 	cmn.w	sl, r5
 8008650:	f47f af70 	bne.w	8008534 <_scanf_float+0x64>
 8008654:	6822      	ldr	r2, [r4, #0]
 8008656:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800865a:	6022      	str	r2, [r4, #0]
 800865c:	f806 3b01 	strb.w	r3, [r6], #1
 8008660:	e7e4      	b.n	800862c <_scanf_float+0x15c>
 8008662:	6822      	ldr	r2, [r4, #0]
 8008664:	0610      	lsls	r0, r2, #24
 8008666:	f57f af65 	bpl.w	8008534 <_scanf_float+0x64>
 800866a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800866e:	e7f4      	b.n	800865a <_scanf_float+0x18a>
 8008670:	f1ba 0f00 	cmp.w	sl, #0
 8008674:	d10e      	bne.n	8008694 <_scanf_float+0x1c4>
 8008676:	f1b9 0f00 	cmp.w	r9, #0
 800867a:	d10e      	bne.n	800869a <_scanf_float+0x1ca>
 800867c:	6822      	ldr	r2, [r4, #0]
 800867e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008682:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008686:	d108      	bne.n	800869a <_scanf_float+0x1ca>
 8008688:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800868c:	f04f 0a01 	mov.w	sl, #1
 8008690:	6022      	str	r2, [r4, #0]
 8008692:	e7e3      	b.n	800865c <_scanf_float+0x18c>
 8008694:	f1ba 0f02 	cmp.w	sl, #2
 8008698:	d055      	beq.n	8008746 <_scanf_float+0x276>
 800869a:	2d01      	cmp	r5, #1
 800869c:	d002      	beq.n	80086a4 <_scanf_float+0x1d4>
 800869e:	2d04      	cmp	r5, #4
 80086a0:	f47f af48 	bne.w	8008534 <_scanf_float+0x64>
 80086a4:	3501      	adds	r5, #1
 80086a6:	b2ed      	uxtb	r5, r5
 80086a8:	e7d8      	b.n	800865c <_scanf_float+0x18c>
 80086aa:	f1ba 0f01 	cmp.w	sl, #1
 80086ae:	f47f af41 	bne.w	8008534 <_scanf_float+0x64>
 80086b2:	f04f 0a02 	mov.w	sl, #2
 80086b6:	e7d1      	b.n	800865c <_scanf_float+0x18c>
 80086b8:	b97d      	cbnz	r5, 80086da <_scanf_float+0x20a>
 80086ba:	f1b9 0f00 	cmp.w	r9, #0
 80086be:	f47f af3c 	bne.w	800853a <_scanf_float+0x6a>
 80086c2:	6822      	ldr	r2, [r4, #0]
 80086c4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80086c8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80086cc:	f47f af39 	bne.w	8008542 <_scanf_float+0x72>
 80086d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80086d4:	2501      	movs	r5, #1
 80086d6:	6022      	str	r2, [r4, #0]
 80086d8:	e7c0      	b.n	800865c <_scanf_float+0x18c>
 80086da:	2d03      	cmp	r5, #3
 80086dc:	d0e2      	beq.n	80086a4 <_scanf_float+0x1d4>
 80086de:	2d05      	cmp	r5, #5
 80086e0:	e7de      	b.n	80086a0 <_scanf_float+0x1d0>
 80086e2:	2d02      	cmp	r5, #2
 80086e4:	f47f af26 	bne.w	8008534 <_scanf_float+0x64>
 80086e8:	2503      	movs	r5, #3
 80086ea:	e7b7      	b.n	800865c <_scanf_float+0x18c>
 80086ec:	2d06      	cmp	r5, #6
 80086ee:	f47f af21 	bne.w	8008534 <_scanf_float+0x64>
 80086f2:	2507      	movs	r5, #7
 80086f4:	e7b2      	b.n	800865c <_scanf_float+0x18c>
 80086f6:	6822      	ldr	r2, [r4, #0]
 80086f8:	0591      	lsls	r1, r2, #22
 80086fa:	f57f af1b 	bpl.w	8008534 <_scanf_float+0x64>
 80086fe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008702:	6022      	str	r2, [r4, #0]
 8008704:	f8cd 9004 	str.w	r9, [sp, #4]
 8008708:	e7a8      	b.n	800865c <_scanf_float+0x18c>
 800870a:	6822      	ldr	r2, [r4, #0]
 800870c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008710:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008714:	d006      	beq.n	8008724 <_scanf_float+0x254>
 8008716:	0550      	lsls	r0, r2, #21
 8008718:	f57f af0c 	bpl.w	8008534 <_scanf_float+0x64>
 800871c:	f1b9 0f00 	cmp.w	r9, #0
 8008720:	f43f af0f 	beq.w	8008542 <_scanf_float+0x72>
 8008724:	0591      	lsls	r1, r2, #22
 8008726:	bf58      	it	pl
 8008728:	9901      	ldrpl	r1, [sp, #4]
 800872a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800872e:	bf58      	it	pl
 8008730:	eba9 0101 	subpl.w	r1, r9, r1
 8008734:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008738:	f04f 0900 	mov.w	r9, #0
 800873c:	bf58      	it	pl
 800873e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008742:	6022      	str	r2, [r4, #0]
 8008744:	e78a      	b.n	800865c <_scanf_float+0x18c>
 8008746:	f04f 0a03 	mov.w	sl, #3
 800874a:	e787      	b.n	800865c <_scanf_float+0x18c>
 800874c:	4639      	mov	r1, r7
 800874e:	4640      	mov	r0, r8
 8008750:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008754:	4798      	blx	r3
 8008756:	2800      	cmp	r0, #0
 8008758:	f43f aedf 	beq.w	800851a <_scanf_float+0x4a>
 800875c:	e6ea      	b.n	8008534 <_scanf_float+0x64>
 800875e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008762:	463a      	mov	r2, r7
 8008764:	4640      	mov	r0, r8
 8008766:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800876a:	4798      	blx	r3
 800876c:	6923      	ldr	r3, [r4, #16]
 800876e:	3b01      	subs	r3, #1
 8008770:	6123      	str	r3, [r4, #16]
 8008772:	e6ec      	b.n	800854e <_scanf_float+0x7e>
 8008774:	1e6b      	subs	r3, r5, #1
 8008776:	2b06      	cmp	r3, #6
 8008778:	d825      	bhi.n	80087c6 <_scanf_float+0x2f6>
 800877a:	2d02      	cmp	r5, #2
 800877c:	d836      	bhi.n	80087ec <_scanf_float+0x31c>
 800877e:	455e      	cmp	r6, fp
 8008780:	f67f aee8 	bls.w	8008554 <_scanf_float+0x84>
 8008784:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008788:	463a      	mov	r2, r7
 800878a:	4640      	mov	r0, r8
 800878c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008790:	4798      	blx	r3
 8008792:	6923      	ldr	r3, [r4, #16]
 8008794:	3b01      	subs	r3, #1
 8008796:	6123      	str	r3, [r4, #16]
 8008798:	e7f1      	b.n	800877e <_scanf_float+0x2ae>
 800879a:	9802      	ldr	r0, [sp, #8]
 800879c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087a0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80087a4:	463a      	mov	r2, r7
 80087a6:	9002      	str	r0, [sp, #8]
 80087a8:	4640      	mov	r0, r8
 80087aa:	4798      	blx	r3
 80087ac:	6923      	ldr	r3, [r4, #16]
 80087ae:	3b01      	subs	r3, #1
 80087b0:	6123      	str	r3, [r4, #16]
 80087b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087b6:	fa5f fa8a 	uxtb.w	sl, sl
 80087ba:	f1ba 0f02 	cmp.w	sl, #2
 80087be:	d1ec      	bne.n	800879a <_scanf_float+0x2ca>
 80087c0:	3d03      	subs	r5, #3
 80087c2:	b2ed      	uxtb	r5, r5
 80087c4:	1b76      	subs	r6, r6, r5
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	05da      	lsls	r2, r3, #23
 80087ca:	d52f      	bpl.n	800882c <_scanf_float+0x35c>
 80087cc:	055b      	lsls	r3, r3, #21
 80087ce:	d510      	bpl.n	80087f2 <_scanf_float+0x322>
 80087d0:	455e      	cmp	r6, fp
 80087d2:	f67f aebf 	bls.w	8008554 <_scanf_float+0x84>
 80087d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087da:	463a      	mov	r2, r7
 80087dc:	4640      	mov	r0, r8
 80087de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087e2:	4798      	blx	r3
 80087e4:	6923      	ldr	r3, [r4, #16]
 80087e6:	3b01      	subs	r3, #1
 80087e8:	6123      	str	r3, [r4, #16]
 80087ea:	e7f1      	b.n	80087d0 <_scanf_float+0x300>
 80087ec:	46aa      	mov	sl, r5
 80087ee:	9602      	str	r6, [sp, #8]
 80087f0:	e7df      	b.n	80087b2 <_scanf_float+0x2e2>
 80087f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80087f6:	6923      	ldr	r3, [r4, #16]
 80087f8:	2965      	cmp	r1, #101	; 0x65
 80087fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80087fe:	f106 35ff 	add.w	r5, r6, #4294967295
 8008802:	6123      	str	r3, [r4, #16]
 8008804:	d00c      	beq.n	8008820 <_scanf_float+0x350>
 8008806:	2945      	cmp	r1, #69	; 0x45
 8008808:	d00a      	beq.n	8008820 <_scanf_float+0x350>
 800880a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800880e:	463a      	mov	r2, r7
 8008810:	4640      	mov	r0, r8
 8008812:	4798      	blx	r3
 8008814:	6923      	ldr	r3, [r4, #16]
 8008816:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800881a:	3b01      	subs	r3, #1
 800881c:	1eb5      	subs	r5, r6, #2
 800881e:	6123      	str	r3, [r4, #16]
 8008820:	463a      	mov	r2, r7
 8008822:	4640      	mov	r0, r8
 8008824:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008828:	4798      	blx	r3
 800882a:	462e      	mov	r6, r5
 800882c:	6825      	ldr	r5, [r4, #0]
 800882e:	f015 0510 	ands.w	r5, r5, #16
 8008832:	d155      	bne.n	80088e0 <_scanf_float+0x410>
 8008834:	7035      	strb	r5, [r6, #0]
 8008836:	6823      	ldr	r3, [r4, #0]
 8008838:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800883c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008840:	d11b      	bne.n	800887a <_scanf_float+0x3aa>
 8008842:	9b01      	ldr	r3, [sp, #4]
 8008844:	454b      	cmp	r3, r9
 8008846:	eba3 0209 	sub.w	r2, r3, r9
 800884a:	d123      	bne.n	8008894 <_scanf_float+0x3c4>
 800884c:	2200      	movs	r2, #0
 800884e:	4659      	mov	r1, fp
 8008850:	4640      	mov	r0, r8
 8008852:	f000 fecd 	bl	80095f0 <_strtod_r>
 8008856:	6822      	ldr	r2, [r4, #0]
 8008858:	9b03      	ldr	r3, [sp, #12]
 800885a:	f012 0f02 	tst.w	r2, #2
 800885e:	4606      	mov	r6, r0
 8008860:	460f      	mov	r7, r1
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	d021      	beq.n	80088aa <_scanf_float+0x3da>
 8008866:	1d1a      	adds	r2, r3, #4
 8008868:	9903      	ldr	r1, [sp, #12]
 800886a:	600a      	str	r2, [r1, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	e9c3 6700 	strd	r6, r7, [r3]
 8008872:	68e3      	ldr	r3, [r4, #12]
 8008874:	3301      	adds	r3, #1
 8008876:	60e3      	str	r3, [r4, #12]
 8008878:	e66d      	b.n	8008556 <_scanf_float+0x86>
 800887a:	9b04      	ldr	r3, [sp, #16]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d0e5      	beq.n	800884c <_scanf_float+0x37c>
 8008880:	9905      	ldr	r1, [sp, #20]
 8008882:	230a      	movs	r3, #10
 8008884:	462a      	mov	r2, r5
 8008886:	4640      	mov	r0, r8
 8008888:	3101      	adds	r1, #1
 800888a:	f000 ff85 	bl	8009798 <_strtol_r>
 800888e:	9b04      	ldr	r3, [sp, #16]
 8008890:	9e05      	ldr	r6, [sp, #20]
 8008892:	1ac2      	subs	r2, r0, r3
 8008894:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008898:	429e      	cmp	r6, r3
 800889a:	bf28      	it	cs
 800889c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80088a0:	4630      	mov	r0, r6
 80088a2:	4910      	ldr	r1, [pc, #64]	; (80088e4 <_scanf_float+0x414>)
 80088a4:	f000 f87a 	bl	800899c <siprintf>
 80088a8:	e7d0      	b.n	800884c <_scanf_float+0x37c>
 80088aa:	f012 0f04 	tst.w	r2, #4
 80088ae:	f103 0204 	add.w	r2, r3, #4
 80088b2:	d1d9      	bne.n	8008868 <_scanf_float+0x398>
 80088b4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80088b8:	f8cc 2000 	str.w	r2, [ip]
 80088bc:	f8d3 8000 	ldr.w	r8, [r3]
 80088c0:	4602      	mov	r2, r0
 80088c2:	460b      	mov	r3, r1
 80088c4:	f7f8 f8a2 	bl	8000a0c <__aeabi_dcmpun>
 80088c8:	b128      	cbz	r0, 80088d6 <_scanf_float+0x406>
 80088ca:	4807      	ldr	r0, [pc, #28]	; (80088e8 <_scanf_float+0x418>)
 80088cc:	f000 f81e 	bl	800890c <nanf>
 80088d0:	f8c8 0000 	str.w	r0, [r8]
 80088d4:	e7cd      	b.n	8008872 <_scanf_float+0x3a2>
 80088d6:	4630      	mov	r0, r6
 80088d8:	4639      	mov	r1, r7
 80088da:	f7f8 f8f5 	bl	8000ac8 <__aeabi_d2f>
 80088de:	e7f7      	b.n	80088d0 <_scanf_float+0x400>
 80088e0:	2500      	movs	r5, #0
 80088e2:	e638      	b.n	8008556 <_scanf_float+0x86>
 80088e4:	0800c598 	.word	0x0800c598
 80088e8:	0800c9a0 	.word	0x0800c9a0

080088ec <_sbrk_r>:
 80088ec:	b538      	push	{r3, r4, r5, lr}
 80088ee:	2300      	movs	r3, #0
 80088f0:	4d05      	ldr	r5, [pc, #20]	; (8008908 <_sbrk_r+0x1c>)
 80088f2:	4604      	mov	r4, r0
 80088f4:	4608      	mov	r0, r1
 80088f6:	602b      	str	r3, [r5, #0]
 80088f8:	f7fb fc12 	bl	8004120 <_sbrk>
 80088fc:	1c43      	adds	r3, r0, #1
 80088fe:	d102      	bne.n	8008906 <_sbrk_r+0x1a>
 8008900:	682b      	ldr	r3, [r5, #0]
 8008902:	b103      	cbz	r3, 8008906 <_sbrk_r+0x1a>
 8008904:	6023      	str	r3, [r4, #0]
 8008906:	bd38      	pop	{r3, r4, r5, pc}
 8008908:	200015bc 	.word	0x200015bc

0800890c <nanf>:
 800890c:	4800      	ldr	r0, [pc, #0]	; (8008910 <nanf+0x4>)
 800890e:	4770      	bx	lr
 8008910:	7fc00000 	.word	0x7fc00000

08008914 <_raise_r>:
 8008914:	291f      	cmp	r1, #31
 8008916:	b538      	push	{r3, r4, r5, lr}
 8008918:	4604      	mov	r4, r0
 800891a:	460d      	mov	r5, r1
 800891c:	d904      	bls.n	8008928 <_raise_r+0x14>
 800891e:	2316      	movs	r3, #22
 8008920:	6003      	str	r3, [r0, #0]
 8008922:	f04f 30ff 	mov.w	r0, #4294967295
 8008926:	bd38      	pop	{r3, r4, r5, pc}
 8008928:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800892a:	b112      	cbz	r2, 8008932 <_raise_r+0x1e>
 800892c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008930:	b94b      	cbnz	r3, 8008946 <_raise_r+0x32>
 8008932:	4620      	mov	r0, r4
 8008934:	f000 f830 	bl	8008998 <_getpid_r>
 8008938:	462a      	mov	r2, r5
 800893a:	4601      	mov	r1, r0
 800893c:	4620      	mov	r0, r4
 800893e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008942:	f000 b817 	b.w	8008974 <_kill_r>
 8008946:	2b01      	cmp	r3, #1
 8008948:	d00a      	beq.n	8008960 <_raise_r+0x4c>
 800894a:	1c59      	adds	r1, r3, #1
 800894c:	d103      	bne.n	8008956 <_raise_r+0x42>
 800894e:	2316      	movs	r3, #22
 8008950:	6003      	str	r3, [r0, #0]
 8008952:	2001      	movs	r0, #1
 8008954:	e7e7      	b.n	8008926 <_raise_r+0x12>
 8008956:	2400      	movs	r4, #0
 8008958:	4628      	mov	r0, r5
 800895a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800895e:	4798      	blx	r3
 8008960:	2000      	movs	r0, #0
 8008962:	e7e0      	b.n	8008926 <_raise_r+0x12>

08008964 <raise>:
 8008964:	4b02      	ldr	r3, [pc, #8]	; (8008970 <raise+0xc>)
 8008966:	4601      	mov	r1, r0
 8008968:	6818      	ldr	r0, [r3, #0]
 800896a:	f7ff bfd3 	b.w	8008914 <_raise_r>
 800896e:	bf00      	nop
 8008970:	2000017c 	.word	0x2000017c

08008974 <_kill_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	2300      	movs	r3, #0
 8008978:	4d06      	ldr	r5, [pc, #24]	; (8008994 <_kill_r+0x20>)
 800897a:	4604      	mov	r4, r0
 800897c:	4608      	mov	r0, r1
 800897e:	4611      	mov	r1, r2
 8008980:	602b      	str	r3, [r5, #0]
 8008982:	f7fb fb97 	bl	80040b4 <_kill>
 8008986:	1c43      	adds	r3, r0, #1
 8008988:	d102      	bne.n	8008990 <_kill_r+0x1c>
 800898a:	682b      	ldr	r3, [r5, #0]
 800898c:	b103      	cbz	r3, 8008990 <_kill_r+0x1c>
 800898e:	6023      	str	r3, [r4, #0]
 8008990:	bd38      	pop	{r3, r4, r5, pc}
 8008992:	bf00      	nop
 8008994:	200015bc 	.word	0x200015bc

08008998 <_getpid_r>:
 8008998:	f7fb bb8a 	b.w	80040b0 <_getpid>

0800899c <siprintf>:
 800899c:	b40e      	push	{r1, r2, r3}
 800899e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089a2:	b500      	push	{lr}
 80089a4:	b09c      	sub	sp, #112	; 0x70
 80089a6:	ab1d      	add	r3, sp, #116	; 0x74
 80089a8:	9002      	str	r0, [sp, #8]
 80089aa:	9006      	str	r0, [sp, #24]
 80089ac:	9107      	str	r1, [sp, #28]
 80089ae:	9104      	str	r1, [sp, #16]
 80089b0:	4808      	ldr	r0, [pc, #32]	; (80089d4 <siprintf+0x38>)
 80089b2:	4909      	ldr	r1, [pc, #36]	; (80089d8 <siprintf+0x3c>)
 80089b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80089b8:	9105      	str	r1, [sp, #20]
 80089ba:	6800      	ldr	r0, [r0, #0]
 80089bc:	a902      	add	r1, sp, #8
 80089be:	9301      	str	r3, [sp, #4]
 80089c0:	f002 fe50 	bl	800b664 <_svfiprintf_r>
 80089c4:	2200      	movs	r2, #0
 80089c6:	9b02      	ldr	r3, [sp, #8]
 80089c8:	701a      	strb	r2, [r3, #0]
 80089ca:	b01c      	add	sp, #112	; 0x70
 80089cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80089d0:	b003      	add	sp, #12
 80089d2:	4770      	bx	lr
 80089d4:	2000017c 	.word	0x2000017c
 80089d8:	ffff0208 	.word	0xffff0208

080089dc <sulp>:
 80089dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089e0:	460f      	mov	r7, r1
 80089e2:	4690      	mov	r8, r2
 80089e4:	f002 fc86 	bl	800b2f4 <__ulp>
 80089e8:	4604      	mov	r4, r0
 80089ea:	460d      	mov	r5, r1
 80089ec:	f1b8 0f00 	cmp.w	r8, #0
 80089f0:	d011      	beq.n	8008a16 <sulp+0x3a>
 80089f2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80089f6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	dd0b      	ble.n	8008a16 <sulp+0x3a>
 80089fe:	2400      	movs	r4, #0
 8008a00:	051b      	lsls	r3, r3, #20
 8008a02:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008a06:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008a0a:	4622      	mov	r2, r4
 8008a0c:	462b      	mov	r3, r5
 8008a0e:	f7f7 fd63 	bl	80004d8 <__aeabi_dmul>
 8008a12:	4604      	mov	r4, r0
 8008a14:	460d      	mov	r5, r1
 8008a16:	4620      	mov	r0, r4
 8008a18:	4629      	mov	r1, r5
 8008a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008a20 <_strtod_l>:
 8008a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a24:	469b      	mov	fp, r3
 8008a26:	2300      	movs	r3, #0
 8008a28:	b09f      	sub	sp, #124	; 0x7c
 8008a2a:	931a      	str	r3, [sp, #104]	; 0x68
 8008a2c:	4b9e      	ldr	r3, [pc, #632]	; (8008ca8 <_strtod_l+0x288>)
 8008a2e:	4682      	mov	sl, r0
 8008a30:	681f      	ldr	r7, [r3, #0]
 8008a32:	460e      	mov	r6, r1
 8008a34:	4638      	mov	r0, r7
 8008a36:	9215      	str	r2, [sp, #84]	; 0x54
 8008a38:	f7f7 fb8a 	bl	8000150 <strlen>
 8008a3c:	f04f 0800 	mov.w	r8, #0
 8008a40:	4604      	mov	r4, r0
 8008a42:	f04f 0900 	mov.w	r9, #0
 8008a46:	9619      	str	r6, [sp, #100]	; 0x64
 8008a48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a4a:	781a      	ldrb	r2, [r3, #0]
 8008a4c:	2a2b      	cmp	r2, #43	; 0x2b
 8008a4e:	d04c      	beq.n	8008aea <_strtod_l+0xca>
 8008a50:	d83a      	bhi.n	8008ac8 <_strtod_l+0xa8>
 8008a52:	2a0d      	cmp	r2, #13
 8008a54:	d833      	bhi.n	8008abe <_strtod_l+0x9e>
 8008a56:	2a08      	cmp	r2, #8
 8008a58:	d833      	bhi.n	8008ac2 <_strtod_l+0xa2>
 8008a5a:	2a00      	cmp	r2, #0
 8008a5c:	d03d      	beq.n	8008ada <_strtod_l+0xba>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	930a      	str	r3, [sp, #40]	; 0x28
 8008a62:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008a64:	782b      	ldrb	r3, [r5, #0]
 8008a66:	2b30      	cmp	r3, #48	; 0x30
 8008a68:	f040 80aa 	bne.w	8008bc0 <_strtod_l+0x1a0>
 8008a6c:	786b      	ldrb	r3, [r5, #1]
 8008a6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a72:	2b58      	cmp	r3, #88	; 0x58
 8008a74:	d166      	bne.n	8008b44 <_strtod_l+0x124>
 8008a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a78:	4650      	mov	r0, sl
 8008a7a:	9301      	str	r3, [sp, #4]
 8008a7c:	ab1a      	add	r3, sp, #104	; 0x68
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	4a8a      	ldr	r2, [pc, #552]	; (8008cac <_strtod_l+0x28c>)
 8008a82:	f8cd b008 	str.w	fp, [sp, #8]
 8008a86:	ab1b      	add	r3, sp, #108	; 0x6c
 8008a88:	a919      	add	r1, sp, #100	; 0x64
 8008a8a:	f001 fda3 	bl	800a5d4 <__gethex>
 8008a8e:	f010 0607 	ands.w	r6, r0, #7
 8008a92:	4604      	mov	r4, r0
 8008a94:	d005      	beq.n	8008aa2 <_strtod_l+0x82>
 8008a96:	2e06      	cmp	r6, #6
 8008a98:	d129      	bne.n	8008aee <_strtod_l+0xce>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	3501      	adds	r5, #1
 8008a9e:	9519      	str	r5, [sp, #100]	; 0x64
 8008aa0:	930a      	str	r3, [sp, #40]	; 0x28
 8008aa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f040 858a 	bne.w	80095be <_strtod_l+0xb9e>
 8008aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aac:	b1d3      	cbz	r3, 8008ae4 <_strtod_l+0xc4>
 8008aae:	4642      	mov	r2, r8
 8008ab0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008ab4:	4610      	mov	r0, r2
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	b01f      	add	sp, #124	; 0x7c
 8008aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008abe:	2a20      	cmp	r2, #32
 8008ac0:	d1cd      	bne.n	8008a5e <_strtod_l+0x3e>
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	9319      	str	r3, [sp, #100]	; 0x64
 8008ac6:	e7bf      	b.n	8008a48 <_strtod_l+0x28>
 8008ac8:	2a2d      	cmp	r2, #45	; 0x2d
 8008aca:	d1c8      	bne.n	8008a5e <_strtod_l+0x3e>
 8008acc:	2201      	movs	r2, #1
 8008ace:	920a      	str	r2, [sp, #40]	; 0x28
 8008ad0:	1c5a      	adds	r2, r3, #1
 8008ad2:	9219      	str	r2, [sp, #100]	; 0x64
 8008ad4:	785b      	ldrb	r3, [r3, #1]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1c3      	bne.n	8008a62 <_strtod_l+0x42>
 8008ada:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008adc:	9619      	str	r6, [sp, #100]	; 0x64
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f040 856b 	bne.w	80095ba <_strtod_l+0xb9a>
 8008ae4:	4642      	mov	r2, r8
 8008ae6:	464b      	mov	r3, r9
 8008ae8:	e7e4      	b.n	8008ab4 <_strtod_l+0x94>
 8008aea:	2200      	movs	r2, #0
 8008aec:	e7ef      	b.n	8008ace <_strtod_l+0xae>
 8008aee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008af0:	b13a      	cbz	r2, 8008b02 <_strtod_l+0xe2>
 8008af2:	2135      	movs	r1, #53	; 0x35
 8008af4:	a81c      	add	r0, sp, #112	; 0x70
 8008af6:	f002 fd01 	bl	800b4fc <__copybits>
 8008afa:	4650      	mov	r0, sl
 8008afc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008afe:	f002 f8c9 	bl	800ac94 <_Bfree>
 8008b02:	3e01      	subs	r6, #1
 8008b04:	2e04      	cmp	r6, #4
 8008b06:	d806      	bhi.n	8008b16 <_strtod_l+0xf6>
 8008b08:	e8df f006 	tbb	[pc, r6]
 8008b0c:	1714030a 	.word	0x1714030a
 8008b10:	0a          	.byte	0x0a
 8008b11:	00          	.byte	0x00
 8008b12:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008b16:	0721      	lsls	r1, r4, #28
 8008b18:	d5c3      	bpl.n	8008aa2 <_strtod_l+0x82>
 8008b1a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008b1e:	e7c0      	b.n	8008aa2 <_strtod_l+0x82>
 8008b20:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008b22:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008b26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008b2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008b2e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008b32:	e7f0      	b.n	8008b16 <_strtod_l+0xf6>
 8008b34:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008cb0 <_strtod_l+0x290>
 8008b38:	e7ed      	b.n	8008b16 <_strtod_l+0xf6>
 8008b3a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008b3e:	f04f 38ff 	mov.w	r8, #4294967295
 8008b42:	e7e8      	b.n	8008b16 <_strtod_l+0xf6>
 8008b44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b46:	1c5a      	adds	r2, r3, #1
 8008b48:	9219      	str	r2, [sp, #100]	; 0x64
 8008b4a:	785b      	ldrb	r3, [r3, #1]
 8008b4c:	2b30      	cmp	r3, #48	; 0x30
 8008b4e:	d0f9      	beq.n	8008b44 <_strtod_l+0x124>
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d0a6      	beq.n	8008aa2 <_strtod_l+0x82>
 8008b54:	2301      	movs	r3, #1
 8008b56:	9307      	str	r3, [sp, #28]
 8008b58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b5a:	220a      	movs	r2, #10
 8008b5c:	9308      	str	r3, [sp, #32]
 8008b5e:	2300      	movs	r3, #0
 8008b60:	469b      	mov	fp, r3
 8008b62:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008b66:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008b68:	7805      	ldrb	r5, [r0, #0]
 8008b6a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8008b6e:	b2d9      	uxtb	r1, r3
 8008b70:	2909      	cmp	r1, #9
 8008b72:	d927      	bls.n	8008bc4 <_strtod_l+0x1a4>
 8008b74:	4622      	mov	r2, r4
 8008b76:	4639      	mov	r1, r7
 8008b78:	f002 fe7a 	bl	800b870 <strncmp>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	d033      	beq.n	8008be8 <_strtod_l+0x1c8>
 8008b80:	2000      	movs	r0, #0
 8008b82:	462a      	mov	r2, r5
 8008b84:	465c      	mov	r4, fp
 8008b86:	4603      	mov	r3, r0
 8008b88:	9004      	str	r0, [sp, #16]
 8008b8a:	2a65      	cmp	r2, #101	; 0x65
 8008b8c:	d001      	beq.n	8008b92 <_strtod_l+0x172>
 8008b8e:	2a45      	cmp	r2, #69	; 0x45
 8008b90:	d114      	bne.n	8008bbc <_strtod_l+0x19c>
 8008b92:	b91c      	cbnz	r4, 8008b9c <_strtod_l+0x17c>
 8008b94:	9a07      	ldr	r2, [sp, #28]
 8008b96:	4302      	orrs	r2, r0
 8008b98:	d09f      	beq.n	8008ada <_strtod_l+0xba>
 8008b9a:	2400      	movs	r4, #0
 8008b9c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008b9e:	1c72      	adds	r2, r6, #1
 8008ba0:	9219      	str	r2, [sp, #100]	; 0x64
 8008ba2:	7872      	ldrb	r2, [r6, #1]
 8008ba4:	2a2b      	cmp	r2, #43	; 0x2b
 8008ba6:	d079      	beq.n	8008c9c <_strtod_l+0x27c>
 8008ba8:	2a2d      	cmp	r2, #45	; 0x2d
 8008baa:	f000 8083 	beq.w	8008cb4 <_strtod_l+0x294>
 8008bae:	2700      	movs	r7, #0
 8008bb0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008bb4:	2909      	cmp	r1, #9
 8008bb6:	f240 8083 	bls.w	8008cc0 <_strtod_l+0x2a0>
 8008bba:	9619      	str	r6, [sp, #100]	; 0x64
 8008bbc:	2500      	movs	r5, #0
 8008bbe:	e09f      	b.n	8008d00 <_strtod_l+0x2e0>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	e7c8      	b.n	8008b56 <_strtod_l+0x136>
 8008bc4:	f1bb 0f08 	cmp.w	fp, #8
 8008bc8:	bfd5      	itete	le
 8008bca:	9906      	ldrle	r1, [sp, #24]
 8008bcc:	9905      	ldrgt	r1, [sp, #20]
 8008bce:	fb02 3301 	mlale	r3, r2, r1, r3
 8008bd2:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008bd6:	f100 0001 	add.w	r0, r0, #1
 8008bda:	bfd4      	ite	le
 8008bdc:	9306      	strle	r3, [sp, #24]
 8008bde:	9305      	strgt	r3, [sp, #20]
 8008be0:	f10b 0b01 	add.w	fp, fp, #1
 8008be4:	9019      	str	r0, [sp, #100]	; 0x64
 8008be6:	e7be      	b.n	8008b66 <_strtod_l+0x146>
 8008be8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008bea:	191a      	adds	r2, r3, r4
 8008bec:	9219      	str	r2, [sp, #100]	; 0x64
 8008bee:	5d1a      	ldrb	r2, [r3, r4]
 8008bf0:	f1bb 0f00 	cmp.w	fp, #0
 8008bf4:	d036      	beq.n	8008c64 <_strtod_l+0x244>
 8008bf6:	465c      	mov	r4, fp
 8008bf8:	9004      	str	r0, [sp, #16]
 8008bfa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008bfe:	2b09      	cmp	r3, #9
 8008c00:	d912      	bls.n	8008c28 <_strtod_l+0x208>
 8008c02:	2301      	movs	r3, #1
 8008c04:	e7c1      	b.n	8008b8a <_strtod_l+0x16a>
 8008c06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c08:	3001      	adds	r0, #1
 8008c0a:	1c5a      	adds	r2, r3, #1
 8008c0c:	9219      	str	r2, [sp, #100]	; 0x64
 8008c0e:	785a      	ldrb	r2, [r3, #1]
 8008c10:	2a30      	cmp	r2, #48	; 0x30
 8008c12:	d0f8      	beq.n	8008c06 <_strtod_l+0x1e6>
 8008c14:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008c18:	2b08      	cmp	r3, #8
 8008c1a:	f200 84d5 	bhi.w	80095c8 <_strtod_l+0xba8>
 8008c1e:	9004      	str	r0, [sp, #16]
 8008c20:	2000      	movs	r0, #0
 8008c22:	4604      	mov	r4, r0
 8008c24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c26:	9308      	str	r3, [sp, #32]
 8008c28:	3a30      	subs	r2, #48	; 0x30
 8008c2a:	f100 0301 	add.w	r3, r0, #1
 8008c2e:	d013      	beq.n	8008c58 <_strtod_l+0x238>
 8008c30:	9904      	ldr	r1, [sp, #16]
 8008c32:	1905      	adds	r5, r0, r4
 8008c34:	4419      	add	r1, r3
 8008c36:	9104      	str	r1, [sp, #16]
 8008c38:	4623      	mov	r3, r4
 8008c3a:	210a      	movs	r1, #10
 8008c3c:	42ab      	cmp	r3, r5
 8008c3e:	d113      	bne.n	8008c68 <_strtod_l+0x248>
 8008c40:	1823      	adds	r3, r4, r0
 8008c42:	2b08      	cmp	r3, #8
 8008c44:	f104 0401 	add.w	r4, r4, #1
 8008c48:	4404      	add	r4, r0
 8008c4a:	dc1b      	bgt.n	8008c84 <_strtod_l+0x264>
 8008c4c:	230a      	movs	r3, #10
 8008c4e:	9906      	ldr	r1, [sp, #24]
 8008c50:	fb03 2301 	mla	r3, r3, r1, r2
 8008c54:	9306      	str	r3, [sp, #24]
 8008c56:	2300      	movs	r3, #0
 8008c58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	1c51      	adds	r1, r2, #1
 8008c5e:	9119      	str	r1, [sp, #100]	; 0x64
 8008c60:	7852      	ldrb	r2, [r2, #1]
 8008c62:	e7ca      	b.n	8008bfa <_strtod_l+0x1da>
 8008c64:	4658      	mov	r0, fp
 8008c66:	e7d3      	b.n	8008c10 <_strtod_l+0x1f0>
 8008c68:	2b08      	cmp	r3, #8
 8008c6a:	dc04      	bgt.n	8008c76 <_strtod_l+0x256>
 8008c6c:	9f06      	ldr	r7, [sp, #24]
 8008c6e:	434f      	muls	r7, r1
 8008c70:	9706      	str	r7, [sp, #24]
 8008c72:	3301      	adds	r3, #1
 8008c74:	e7e2      	b.n	8008c3c <_strtod_l+0x21c>
 8008c76:	1c5f      	adds	r7, r3, #1
 8008c78:	2f10      	cmp	r7, #16
 8008c7a:	bfde      	ittt	le
 8008c7c:	9f05      	ldrle	r7, [sp, #20]
 8008c7e:	434f      	mulle	r7, r1
 8008c80:	9705      	strle	r7, [sp, #20]
 8008c82:	e7f6      	b.n	8008c72 <_strtod_l+0x252>
 8008c84:	2c10      	cmp	r4, #16
 8008c86:	bfdf      	itttt	le
 8008c88:	230a      	movle	r3, #10
 8008c8a:	9905      	ldrle	r1, [sp, #20]
 8008c8c:	fb03 2301 	mlale	r3, r3, r1, r2
 8008c90:	9305      	strle	r3, [sp, #20]
 8008c92:	e7e0      	b.n	8008c56 <_strtod_l+0x236>
 8008c94:	2300      	movs	r3, #0
 8008c96:	9304      	str	r3, [sp, #16]
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e77b      	b.n	8008b94 <_strtod_l+0x174>
 8008c9c:	2700      	movs	r7, #0
 8008c9e:	1cb2      	adds	r2, r6, #2
 8008ca0:	9219      	str	r2, [sp, #100]	; 0x64
 8008ca2:	78b2      	ldrb	r2, [r6, #2]
 8008ca4:	e784      	b.n	8008bb0 <_strtod_l+0x190>
 8008ca6:	bf00      	nop
 8008ca8:	0800c7e8 	.word	0x0800c7e8
 8008cac:	0800c5a0 	.word	0x0800c5a0
 8008cb0:	7ff00000 	.word	0x7ff00000
 8008cb4:	2701      	movs	r7, #1
 8008cb6:	e7f2      	b.n	8008c9e <_strtod_l+0x27e>
 8008cb8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008cba:	1c51      	adds	r1, r2, #1
 8008cbc:	9119      	str	r1, [sp, #100]	; 0x64
 8008cbe:	7852      	ldrb	r2, [r2, #1]
 8008cc0:	2a30      	cmp	r2, #48	; 0x30
 8008cc2:	d0f9      	beq.n	8008cb8 <_strtod_l+0x298>
 8008cc4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008cc8:	2908      	cmp	r1, #8
 8008cca:	f63f af77 	bhi.w	8008bbc <_strtod_l+0x19c>
 8008cce:	f04f 0e0a 	mov.w	lr, #10
 8008cd2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008cd6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008cd8:	9209      	str	r2, [sp, #36]	; 0x24
 8008cda:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008cdc:	1c51      	adds	r1, r2, #1
 8008cde:	9119      	str	r1, [sp, #100]	; 0x64
 8008ce0:	7852      	ldrb	r2, [r2, #1]
 8008ce2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008ce6:	2d09      	cmp	r5, #9
 8008ce8:	d935      	bls.n	8008d56 <_strtod_l+0x336>
 8008cea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008cec:	1b49      	subs	r1, r1, r5
 8008cee:	2908      	cmp	r1, #8
 8008cf0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008cf4:	dc02      	bgt.n	8008cfc <_strtod_l+0x2dc>
 8008cf6:	4565      	cmp	r5, ip
 8008cf8:	bfa8      	it	ge
 8008cfa:	4665      	movge	r5, ip
 8008cfc:	b107      	cbz	r7, 8008d00 <_strtod_l+0x2e0>
 8008cfe:	426d      	negs	r5, r5
 8008d00:	2c00      	cmp	r4, #0
 8008d02:	d14c      	bne.n	8008d9e <_strtod_l+0x37e>
 8008d04:	9907      	ldr	r1, [sp, #28]
 8008d06:	4301      	orrs	r1, r0
 8008d08:	f47f aecb 	bne.w	8008aa2 <_strtod_l+0x82>
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f47f aee4 	bne.w	8008ada <_strtod_l+0xba>
 8008d12:	2a69      	cmp	r2, #105	; 0x69
 8008d14:	d026      	beq.n	8008d64 <_strtod_l+0x344>
 8008d16:	dc23      	bgt.n	8008d60 <_strtod_l+0x340>
 8008d18:	2a49      	cmp	r2, #73	; 0x49
 8008d1a:	d023      	beq.n	8008d64 <_strtod_l+0x344>
 8008d1c:	2a4e      	cmp	r2, #78	; 0x4e
 8008d1e:	f47f aedc 	bne.w	8008ada <_strtod_l+0xba>
 8008d22:	499d      	ldr	r1, [pc, #628]	; (8008f98 <_strtod_l+0x578>)
 8008d24:	a819      	add	r0, sp, #100	; 0x64
 8008d26:	f001 fea3 	bl	800aa70 <__match>
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	f43f aed5 	beq.w	8008ada <_strtod_l+0xba>
 8008d30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	2b28      	cmp	r3, #40	; 0x28
 8008d36:	d12c      	bne.n	8008d92 <_strtod_l+0x372>
 8008d38:	4998      	ldr	r1, [pc, #608]	; (8008f9c <_strtod_l+0x57c>)
 8008d3a:	aa1c      	add	r2, sp, #112	; 0x70
 8008d3c:	a819      	add	r0, sp, #100	; 0x64
 8008d3e:	f001 feab 	bl	800aa98 <__hexnan>
 8008d42:	2805      	cmp	r0, #5
 8008d44:	d125      	bne.n	8008d92 <_strtod_l+0x372>
 8008d46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d48:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008d4c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008d50:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008d54:	e6a5      	b.n	8008aa2 <_strtod_l+0x82>
 8008d56:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8008d5a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8008d5e:	e7bc      	b.n	8008cda <_strtod_l+0x2ba>
 8008d60:	2a6e      	cmp	r2, #110	; 0x6e
 8008d62:	e7dc      	b.n	8008d1e <_strtod_l+0x2fe>
 8008d64:	498e      	ldr	r1, [pc, #568]	; (8008fa0 <_strtod_l+0x580>)
 8008d66:	a819      	add	r0, sp, #100	; 0x64
 8008d68:	f001 fe82 	bl	800aa70 <__match>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	f43f aeb4 	beq.w	8008ada <_strtod_l+0xba>
 8008d72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d74:	498b      	ldr	r1, [pc, #556]	; (8008fa4 <_strtod_l+0x584>)
 8008d76:	3b01      	subs	r3, #1
 8008d78:	a819      	add	r0, sp, #100	; 0x64
 8008d7a:	9319      	str	r3, [sp, #100]	; 0x64
 8008d7c:	f001 fe78 	bl	800aa70 <__match>
 8008d80:	b910      	cbnz	r0, 8008d88 <_strtod_l+0x368>
 8008d82:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d84:	3301      	adds	r3, #1
 8008d86:	9319      	str	r3, [sp, #100]	; 0x64
 8008d88:	f04f 0800 	mov.w	r8, #0
 8008d8c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8008fa8 <_strtod_l+0x588>
 8008d90:	e687      	b.n	8008aa2 <_strtod_l+0x82>
 8008d92:	4886      	ldr	r0, [pc, #536]	; (8008fac <_strtod_l+0x58c>)
 8008d94:	f002 fd66 	bl	800b864 <nan>
 8008d98:	4680      	mov	r8, r0
 8008d9a:	4689      	mov	r9, r1
 8008d9c:	e681      	b.n	8008aa2 <_strtod_l+0x82>
 8008d9e:	9b04      	ldr	r3, [sp, #16]
 8008da0:	f1bb 0f00 	cmp.w	fp, #0
 8008da4:	bf08      	it	eq
 8008da6:	46a3      	moveq	fp, r4
 8008da8:	1aeb      	subs	r3, r5, r3
 8008daa:	2c10      	cmp	r4, #16
 8008dac:	9806      	ldr	r0, [sp, #24]
 8008dae:	4626      	mov	r6, r4
 8008db0:	9307      	str	r3, [sp, #28]
 8008db2:	bfa8      	it	ge
 8008db4:	2610      	movge	r6, #16
 8008db6:	f7f7 fb15 	bl	80003e4 <__aeabi_ui2d>
 8008dba:	2c09      	cmp	r4, #9
 8008dbc:	4680      	mov	r8, r0
 8008dbe:	4689      	mov	r9, r1
 8008dc0:	dd13      	ble.n	8008dea <_strtod_l+0x3ca>
 8008dc2:	4b7b      	ldr	r3, [pc, #492]	; (8008fb0 <_strtod_l+0x590>)
 8008dc4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008dc8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008dcc:	f7f7 fb84 	bl	80004d8 <__aeabi_dmul>
 8008dd0:	4680      	mov	r8, r0
 8008dd2:	9805      	ldr	r0, [sp, #20]
 8008dd4:	4689      	mov	r9, r1
 8008dd6:	f7f7 fb05 	bl	80003e4 <__aeabi_ui2d>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	460b      	mov	r3, r1
 8008dde:	4640      	mov	r0, r8
 8008de0:	4649      	mov	r1, r9
 8008de2:	f7f7 f9c3 	bl	800016c <__adddf3>
 8008de6:	4680      	mov	r8, r0
 8008de8:	4689      	mov	r9, r1
 8008dea:	2c0f      	cmp	r4, #15
 8008dec:	dc36      	bgt.n	8008e5c <_strtod_l+0x43c>
 8008dee:	9b07      	ldr	r3, [sp, #28]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f43f ae56 	beq.w	8008aa2 <_strtod_l+0x82>
 8008df6:	dd22      	ble.n	8008e3e <_strtod_l+0x41e>
 8008df8:	2b16      	cmp	r3, #22
 8008dfa:	dc09      	bgt.n	8008e10 <_strtod_l+0x3f0>
 8008dfc:	496c      	ldr	r1, [pc, #432]	; (8008fb0 <_strtod_l+0x590>)
 8008dfe:	4642      	mov	r2, r8
 8008e00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e04:	464b      	mov	r3, r9
 8008e06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e0a:	f7f7 fb65 	bl	80004d8 <__aeabi_dmul>
 8008e0e:	e7c3      	b.n	8008d98 <_strtod_l+0x378>
 8008e10:	9a07      	ldr	r2, [sp, #28]
 8008e12:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008e16:	4293      	cmp	r3, r2
 8008e18:	db20      	blt.n	8008e5c <_strtod_l+0x43c>
 8008e1a:	4d65      	ldr	r5, [pc, #404]	; (8008fb0 <_strtod_l+0x590>)
 8008e1c:	f1c4 040f 	rsb	r4, r4, #15
 8008e20:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008e24:	4642      	mov	r2, r8
 8008e26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e2a:	464b      	mov	r3, r9
 8008e2c:	f7f7 fb54 	bl	80004d8 <__aeabi_dmul>
 8008e30:	9b07      	ldr	r3, [sp, #28]
 8008e32:	1b1c      	subs	r4, r3, r4
 8008e34:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008e38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e3c:	e7e5      	b.n	8008e0a <_strtod_l+0x3ea>
 8008e3e:	9b07      	ldr	r3, [sp, #28]
 8008e40:	3316      	adds	r3, #22
 8008e42:	db0b      	blt.n	8008e5c <_strtod_l+0x43c>
 8008e44:	9b04      	ldr	r3, [sp, #16]
 8008e46:	4640      	mov	r0, r8
 8008e48:	1b5d      	subs	r5, r3, r5
 8008e4a:	4b59      	ldr	r3, [pc, #356]	; (8008fb0 <_strtod_l+0x590>)
 8008e4c:	4649      	mov	r1, r9
 8008e4e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008e52:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e56:	f7f7 fc69 	bl	800072c <__aeabi_ddiv>
 8008e5a:	e79d      	b.n	8008d98 <_strtod_l+0x378>
 8008e5c:	9b07      	ldr	r3, [sp, #28]
 8008e5e:	1ba6      	subs	r6, r4, r6
 8008e60:	441e      	add	r6, r3
 8008e62:	2e00      	cmp	r6, #0
 8008e64:	dd74      	ble.n	8008f50 <_strtod_l+0x530>
 8008e66:	f016 030f 	ands.w	r3, r6, #15
 8008e6a:	d00a      	beq.n	8008e82 <_strtod_l+0x462>
 8008e6c:	4950      	ldr	r1, [pc, #320]	; (8008fb0 <_strtod_l+0x590>)
 8008e6e:	4642      	mov	r2, r8
 8008e70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e78:	464b      	mov	r3, r9
 8008e7a:	f7f7 fb2d 	bl	80004d8 <__aeabi_dmul>
 8008e7e:	4680      	mov	r8, r0
 8008e80:	4689      	mov	r9, r1
 8008e82:	f036 060f 	bics.w	r6, r6, #15
 8008e86:	d052      	beq.n	8008f2e <_strtod_l+0x50e>
 8008e88:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8008e8c:	dd27      	ble.n	8008ede <_strtod_l+0x4be>
 8008e8e:	f04f 0b00 	mov.w	fp, #0
 8008e92:	f8cd b010 	str.w	fp, [sp, #16]
 8008e96:	f8cd b020 	str.w	fp, [sp, #32]
 8008e9a:	f8cd b018 	str.w	fp, [sp, #24]
 8008e9e:	2322      	movs	r3, #34	; 0x22
 8008ea0:	f04f 0800 	mov.w	r8, #0
 8008ea4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8008fa8 <_strtod_l+0x588>
 8008ea8:	f8ca 3000 	str.w	r3, [sl]
 8008eac:	9b08      	ldr	r3, [sp, #32]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	f43f adf7 	beq.w	8008aa2 <_strtod_l+0x82>
 8008eb4:	4650      	mov	r0, sl
 8008eb6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008eb8:	f001 feec 	bl	800ac94 <_Bfree>
 8008ebc:	4650      	mov	r0, sl
 8008ebe:	9906      	ldr	r1, [sp, #24]
 8008ec0:	f001 fee8 	bl	800ac94 <_Bfree>
 8008ec4:	4650      	mov	r0, sl
 8008ec6:	9904      	ldr	r1, [sp, #16]
 8008ec8:	f001 fee4 	bl	800ac94 <_Bfree>
 8008ecc:	4650      	mov	r0, sl
 8008ece:	9908      	ldr	r1, [sp, #32]
 8008ed0:	f001 fee0 	bl	800ac94 <_Bfree>
 8008ed4:	4659      	mov	r1, fp
 8008ed6:	4650      	mov	r0, sl
 8008ed8:	f001 fedc 	bl	800ac94 <_Bfree>
 8008edc:	e5e1      	b.n	8008aa2 <_strtod_l+0x82>
 8008ede:	4b35      	ldr	r3, [pc, #212]	; (8008fb4 <_strtod_l+0x594>)
 8008ee0:	4640      	mov	r0, r8
 8008ee2:	9305      	str	r3, [sp, #20]
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	4649      	mov	r1, r9
 8008ee8:	461f      	mov	r7, r3
 8008eea:	1136      	asrs	r6, r6, #4
 8008eec:	2e01      	cmp	r6, #1
 8008eee:	dc21      	bgt.n	8008f34 <_strtod_l+0x514>
 8008ef0:	b10b      	cbz	r3, 8008ef6 <_strtod_l+0x4d6>
 8008ef2:	4680      	mov	r8, r0
 8008ef4:	4689      	mov	r9, r1
 8008ef6:	4b2f      	ldr	r3, [pc, #188]	; (8008fb4 <_strtod_l+0x594>)
 8008ef8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008efc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008f00:	4642      	mov	r2, r8
 8008f02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f06:	464b      	mov	r3, r9
 8008f08:	f7f7 fae6 	bl	80004d8 <__aeabi_dmul>
 8008f0c:	4b26      	ldr	r3, [pc, #152]	; (8008fa8 <_strtod_l+0x588>)
 8008f0e:	460a      	mov	r2, r1
 8008f10:	400b      	ands	r3, r1
 8008f12:	4929      	ldr	r1, [pc, #164]	; (8008fb8 <_strtod_l+0x598>)
 8008f14:	4680      	mov	r8, r0
 8008f16:	428b      	cmp	r3, r1
 8008f18:	d8b9      	bhi.n	8008e8e <_strtod_l+0x46e>
 8008f1a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008f1e:	428b      	cmp	r3, r1
 8008f20:	bf86      	itte	hi
 8008f22:	f04f 38ff 	movhi.w	r8, #4294967295
 8008f26:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8008fbc <_strtod_l+0x59c>
 8008f2a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008f2e:	2300      	movs	r3, #0
 8008f30:	9305      	str	r3, [sp, #20]
 8008f32:	e07f      	b.n	8009034 <_strtod_l+0x614>
 8008f34:	07f2      	lsls	r2, r6, #31
 8008f36:	d505      	bpl.n	8008f44 <_strtod_l+0x524>
 8008f38:	9b05      	ldr	r3, [sp, #20]
 8008f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3e:	f7f7 facb 	bl	80004d8 <__aeabi_dmul>
 8008f42:	2301      	movs	r3, #1
 8008f44:	9a05      	ldr	r2, [sp, #20]
 8008f46:	3701      	adds	r7, #1
 8008f48:	3208      	adds	r2, #8
 8008f4a:	1076      	asrs	r6, r6, #1
 8008f4c:	9205      	str	r2, [sp, #20]
 8008f4e:	e7cd      	b.n	8008eec <_strtod_l+0x4cc>
 8008f50:	d0ed      	beq.n	8008f2e <_strtod_l+0x50e>
 8008f52:	4276      	negs	r6, r6
 8008f54:	f016 020f 	ands.w	r2, r6, #15
 8008f58:	d00a      	beq.n	8008f70 <_strtod_l+0x550>
 8008f5a:	4b15      	ldr	r3, [pc, #84]	; (8008fb0 <_strtod_l+0x590>)
 8008f5c:	4640      	mov	r0, r8
 8008f5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f62:	4649      	mov	r1, r9
 8008f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f68:	f7f7 fbe0 	bl	800072c <__aeabi_ddiv>
 8008f6c:	4680      	mov	r8, r0
 8008f6e:	4689      	mov	r9, r1
 8008f70:	1136      	asrs	r6, r6, #4
 8008f72:	d0dc      	beq.n	8008f2e <_strtod_l+0x50e>
 8008f74:	2e1f      	cmp	r6, #31
 8008f76:	dd23      	ble.n	8008fc0 <_strtod_l+0x5a0>
 8008f78:	f04f 0b00 	mov.w	fp, #0
 8008f7c:	f8cd b010 	str.w	fp, [sp, #16]
 8008f80:	f8cd b020 	str.w	fp, [sp, #32]
 8008f84:	f8cd b018 	str.w	fp, [sp, #24]
 8008f88:	2322      	movs	r3, #34	; 0x22
 8008f8a:	f04f 0800 	mov.w	r8, #0
 8008f8e:	f04f 0900 	mov.w	r9, #0
 8008f92:	f8ca 3000 	str.w	r3, [sl]
 8008f96:	e789      	b.n	8008eac <_strtod_l+0x48c>
 8008f98:	0800c571 	.word	0x0800c571
 8008f9c:	0800c5b4 	.word	0x0800c5b4
 8008fa0:	0800c569 	.word	0x0800c569
 8008fa4:	0800c6f4 	.word	0x0800c6f4
 8008fa8:	7ff00000 	.word	0x7ff00000
 8008fac:	0800c9a0 	.word	0x0800c9a0
 8008fb0:	0800c880 	.word	0x0800c880
 8008fb4:	0800c858 	.word	0x0800c858
 8008fb8:	7ca00000 	.word	0x7ca00000
 8008fbc:	7fefffff 	.word	0x7fefffff
 8008fc0:	f016 0310 	ands.w	r3, r6, #16
 8008fc4:	bf18      	it	ne
 8008fc6:	236a      	movne	r3, #106	; 0x6a
 8008fc8:	4640      	mov	r0, r8
 8008fca:	9305      	str	r3, [sp, #20]
 8008fcc:	4649      	mov	r1, r9
 8008fce:	2300      	movs	r3, #0
 8008fd0:	4fb0      	ldr	r7, [pc, #704]	; (8009294 <_strtod_l+0x874>)
 8008fd2:	07f2      	lsls	r2, r6, #31
 8008fd4:	d504      	bpl.n	8008fe0 <_strtod_l+0x5c0>
 8008fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fda:	f7f7 fa7d 	bl	80004d8 <__aeabi_dmul>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	1076      	asrs	r6, r6, #1
 8008fe2:	f107 0708 	add.w	r7, r7, #8
 8008fe6:	d1f4      	bne.n	8008fd2 <_strtod_l+0x5b2>
 8008fe8:	b10b      	cbz	r3, 8008fee <_strtod_l+0x5ce>
 8008fea:	4680      	mov	r8, r0
 8008fec:	4689      	mov	r9, r1
 8008fee:	9b05      	ldr	r3, [sp, #20]
 8008ff0:	b1c3      	cbz	r3, 8009024 <_strtod_l+0x604>
 8008ff2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008ff6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	4649      	mov	r1, r9
 8008ffe:	dd11      	ble.n	8009024 <_strtod_l+0x604>
 8009000:	2b1f      	cmp	r3, #31
 8009002:	f340 8127 	ble.w	8009254 <_strtod_l+0x834>
 8009006:	2b34      	cmp	r3, #52	; 0x34
 8009008:	bfd8      	it	le
 800900a:	f04f 33ff 	movle.w	r3, #4294967295
 800900e:	f04f 0800 	mov.w	r8, #0
 8009012:	bfcf      	iteee	gt
 8009014:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009018:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800901c:	fa03 f202 	lslle.w	r2, r3, r2
 8009020:	ea02 0901 	andle.w	r9, r2, r1
 8009024:	2200      	movs	r2, #0
 8009026:	2300      	movs	r3, #0
 8009028:	4640      	mov	r0, r8
 800902a:	4649      	mov	r1, r9
 800902c:	f7f7 fcbc 	bl	80009a8 <__aeabi_dcmpeq>
 8009030:	2800      	cmp	r0, #0
 8009032:	d1a1      	bne.n	8008f78 <_strtod_l+0x558>
 8009034:	9b06      	ldr	r3, [sp, #24]
 8009036:	465a      	mov	r2, fp
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	4650      	mov	r0, sl
 800903c:	4623      	mov	r3, r4
 800903e:	9908      	ldr	r1, [sp, #32]
 8009040:	f001 fe90 	bl	800ad64 <__s2b>
 8009044:	9008      	str	r0, [sp, #32]
 8009046:	2800      	cmp	r0, #0
 8009048:	f43f af21 	beq.w	8008e8e <_strtod_l+0x46e>
 800904c:	9b04      	ldr	r3, [sp, #16]
 800904e:	f04f 0b00 	mov.w	fp, #0
 8009052:	1b5d      	subs	r5, r3, r5
 8009054:	9b07      	ldr	r3, [sp, #28]
 8009056:	f8cd b010 	str.w	fp, [sp, #16]
 800905a:	2b00      	cmp	r3, #0
 800905c:	bfb4      	ite	lt
 800905e:	462b      	movlt	r3, r5
 8009060:	2300      	movge	r3, #0
 8009062:	930e      	str	r3, [sp, #56]	; 0x38
 8009064:	9b07      	ldr	r3, [sp, #28]
 8009066:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800906a:	9314      	str	r3, [sp, #80]	; 0x50
 800906c:	9b08      	ldr	r3, [sp, #32]
 800906e:	4650      	mov	r0, sl
 8009070:	6859      	ldr	r1, [r3, #4]
 8009072:	f001 fdcf 	bl	800ac14 <_Balloc>
 8009076:	9006      	str	r0, [sp, #24]
 8009078:	2800      	cmp	r0, #0
 800907a:	f43f af10 	beq.w	8008e9e <_strtod_l+0x47e>
 800907e:	9b08      	ldr	r3, [sp, #32]
 8009080:	300c      	adds	r0, #12
 8009082:	691a      	ldr	r2, [r3, #16]
 8009084:	f103 010c 	add.w	r1, r3, #12
 8009088:	3202      	adds	r2, #2
 800908a:	0092      	lsls	r2, r2, #2
 800908c:	f7fe fcb4 	bl	80079f8 <memcpy>
 8009090:	ab1c      	add	r3, sp, #112	; 0x70
 8009092:	9301      	str	r3, [sp, #4]
 8009094:	ab1b      	add	r3, sp, #108	; 0x6c
 8009096:	9300      	str	r3, [sp, #0]
 8009098:	4642      	mov	r2, r8
 800909a:	464b      	mov	r3, r9
 800909c:	4650      	mov	r0, sl
 800909e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80090a2:	f002 f9a1 	bl	800b3e8 <__d2b>
 80090a6:	901a      	str	r0, [sp, #104]	; 0x68
 80090a8:	2800      	cmp	r0, #0
 80090aa:	f43f aef8 	beq.w	8008e9e <_strtod_l+0x47e>
 80090ae:	2101      	movs	r1, #1
 80090b0:	4650      	mov	r0, sl
 80090b2:	f001 feef 	bl	800ae94 <__i2b>
 80090b6:	4603      	mov	r3, r0
 80090b8:	9004      	str	r0, [sp, #16]
 80090ba:	2800      	cmp	r0, #0
 80090bc:	f43f aeef 	beq.w	8008e9e <_strtod_l+0x47e>
 80090c0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80090c2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80090c4:	2d00      	cmp	r5, #0
 80090c6:	bfab      	itete	ge
 80090c8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80090ca:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80090cc:	18ee      	addge	r6, r5, r3
 80090ce:	1b5c      	sublt	r4, r3, r5
 80090d0:	9b05      	ldr	r3, [sp, #20]
 80090d2:	bfa8      	it	ge
 80090d4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80090d6:	eba5 0503 	sub.w	r5, r5, r3
 80090da:	4415      	add	r5, r2
 80090dc:	4b6e      	ldr	r3, [pc, #440]	; (8009298 <_strtod_l+0x878>)
 80090de:	f105 35ff 	add.w	r5, r5, #4294967295
 80090e2:	bfb8      	it	lt
 80090e4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80090e6:	429d      	cmp	r5, r3
 80090e8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80090ec:	f280 80c4 	bge.w	8009278 <_strtod_l+0x858>
 80090f0:	1b5b      	subs	r3, r3, r5
 80090f2:	2b1f      	cmp	r3, #31
 80090f4:	f04f 0701 	mov.w	r7, #1
 80090f8:	eba2 0203 	sub.w	r2, r2, r3
 80090fc:	f300 80b1 	bgt.w	8009262 <_strtod_l+0x842>
 8009100:	2500      	movs	r5, #0
 8009102:	fa07 f303 	lsl.w	r3, r7, r3
 8009106:	930f      	str	r3, [sp, #60]	; 0x3c
 8009108:	18b7      	adds	r7, r6, r2
 800910a:	9b05      	ldr	r3, [sp, #20]
 800910c:	42be      	cmp	r6, r7
 800910e:	4414      	add	r4, r2
 8009110:	441c      	add	r4, r3
 8009112:	4633      	mov	r3, r6
 8009114:	bfa8      	it	ge
 8009116:	463b      	movge	r3, r7
 8009118:	42a3      	cmp	r3, r4
 800911a:	bfa8      	it	ge
 800911c:	4623      	movge	r3, r4
 800911e:	2b00      	cmp	r3, #0
 8009120:	bfc2      	ittt	gt
 8009122:	1aff      	subgt	r7, r7, r3
 8009124:	1ae4      	subgt	r4, r4, r3
 8009126:	1af6      	subgt	r6, r6, r3
 8009128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800912a:	2b00      	cmp	r3, #0
 800912c:	dd17      	ble.n	800915e <_strtod_l+0x73e>
 800912e:	461a      	mov	r2, r3
 8009130:	4650      	mov	r0, sl
 8009132:	9904      	ldr	r1, [sp, #16]
 8009134:	f001 ff6c 	bl	800b010 <__pow5mult>
 8009138:	9004      	str	r0, [sp, #16]
 800913a:	2800      	cmp	r0, #0
 800913c:	f43f aeaf 	beq.w	8008e9e <_strtod_l+0x47e>
 8009140:	4601      	mov	r1, r0
 8009142:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009144:	4650      	mov	r0, sl
 8009146:	f001 febb 	bl	800aec0 <__multiply>
 800914a:	9009      	str	r0, [sp, #36]	; 0x24
 800914c:	2800      	cmp	r0, #0
 800914e:	f43f aea6 	beq.w	8008e9e <_strtod_l+0x47e>
 8009152:	4650      	mov	r0, sl
 8009154:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009156:	f001 fd9d 	bl	800ac94 <_Bfree>
 800915a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800915c:	931a      	str	r3, [sp, #104]	; 0x68
 800915e:	2f00      	cmp	r7, #0
 8009160:	f300 808e 	bgt.w	8009280 <_strtod_l+0x860>
 8009164:	9b07      	ldr	r3, [sp, #28]
 8009166:	2b00      	cmp	r3, #0
 8009168:	dd08      	ble.n	800917c <_strtod_l+0x75c>
 800916a:	4650      	mov	r0, sl
 800916c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800916e:	9906      	ldr	r1, [sp, #24]
 8009170:	f001 ff4e 	bl	800b010 <__pow5mult>
 8009174:	9006      	str	r0, [sp, #24]
 8009176:	2800      	cmp	r0, #0
 8009178:	f43f ae91 	beq.w	8008e9e <_strtod_l+0x47e>
 800917c:	2c00      	cmp	r4, #0
 800917e:	dd08      	ble.n	8009192 <_strtod_l+0x772>
 8009180:	4622      	mov	r2, r4
 8009182:	4650      	mov	r0, sl
 8009184:	9906      	ldr	r1, [sp, #24]
 8009186:	f001 ff9d 	bl	800b0c4 <__lshift>
 800918a:	9006      	str	r0, [sp, #24]
 800918c:	2800      	cmp	r0, #0
 800918e:	f43f ae86 	beq.w	8008e9e <_strtod_l+0x47e>
 8009192:	2e00      	cmp	r6, #0
 8009194:	dd08      	ble.n	80091a8 <_strtod_l+0x788>
 8009196:	4632      	mov	r2, r6
 8009198:	4650      	mov	r0, sl
 800919a:	9904      	ldr	r1, [sp, #16]
 800919c:	f001 ff92 	bl	800b0c4 <__lshift>
 80091a0:	9004      	str	r0, [sp, #16]
 80091a2:	2800      	cmp	r0, #0
 80091a4:	f43f ae7b 	beq.w	8008e9e <_strtod_l+0x47e>
 80091a8:	4650      	mov	r0, sl
 80091aa:	9a06      	ldr	r2, [sp, #24]
 80091ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80091ae:	f002 f815 	bl	800b1dc <__mdiff>
 80091b2:	4683      	mov	fp, r0
 80091b4:	2800      	cmp	r0, #0
 80091b6:	f43f ae72 	beq.w	8008e9e <_strtod_l+0x47e>
 80091ba:	2400      	movs	r4, #0
 80091bc:	68c3      	ldr	r3, [r0, #12]
 80091be:	9904      	ldr	r1, [sp, #16]
 80091c0:	60c4      	str	r4, [r0, #12]
 80091c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80091c4:	f001 ffee 	bl	800b1a4 <__mcmp>
 80091c8:	42a0      	cmp	r0, r4
 80091ca:	da6b      	bge.n	80092a4 <_strtod_l+0x884>
 80091cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ce:	ea53 0308 	orrs.w	r3, r3, r8
 80091d2:	f040 8091 	bne.w	80092f8 <_strtod_l+0x8d8>
 80091d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f040 808c 	bne.w	80092f8 <_strtod_l+0x8d8>
 80091e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80091e4:	0d1b      	lsrs	r3, r3, #20
 80091e6:	051b      	lsls	r3, r3, #20
 80091e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80091ec:	f240 8084 	bls.w	80092f8 <_strtod_l+0x8d8>
 80091f0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80091f4:	b91b      	cbnz	r3, 80091fe <_strtod_l+0x7de>
 80091f6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	dd7c      	ble.n	80092f8 <_strtod_l+0x8d8>
 80091fe:	4659      	mov	r1, fp
 8009200:	2201      	movs	r2, #1
 8009202:	4650      	mov	r0, sl
 8009204:	f001 ff5e 	bl	800b0c4 <__lshift>
 8009208:	9904      	ldr	r1, [sp, #16]
 800920a:	4683      	mov	fp, r0
 800920c:	f001 ffca 	bl	800b1a4 <__mcmp>
 8009210:	2800      	cmp	r0, #0
 8009212:	dd71      	ble.n	80092f8 <_strtod_l+0x8d8>
 8009214:	9905      	ldr	r1, [sp, #20]
 8009216:	464b      	mov	r3, r9
 8009218:	4a20      	ldr	r2, [pc, #128]	; (800929c <_strtod_l+0x87c>)
 800921a:	2900      	cmp	r1, #0
 800921c:	f000 808c 	beq.w	8009338 <_strtod_l+0x918>
 8009220:	ea02 0109 	and.w	r1, r2, r9
 8009224:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009228:	f300 8086 	bgt.w	8009338 <_strtod_l+0x918>
 800922c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009230:	f77f aeaa 	ble.w	8008f88 <_strtod_l+0x568>
 8009234:	4640      	mov	r0, r8
 8009236:	4649      	mov	r1, r9
 8009238:	4b19      	ldr	r3, [pc, #100]	; (80092a0 <_strtod_l+0x880>)
 800923a:	2200      	movs	r2, #0
 800923c:	f7f7 f94c 	bl	80004d8 <__aeabi_dmul>
 8009240:	460b      	mov	r3, r1
 8009242:	4303      	orrs	r3, r0
 8009244:	bf08      	it	eq
 8009246:	2322      	moveq	r3, #34	; 0x22
 8009248:	4680      	mov	r8, r0
 800924a:	4689      	mov	r9, r1
 800924c:	bf08      	it	eq
 800924e:	f8ca 3000 	streq.w	r3, [sl]
 8009252:	e62f      	b.n	8008eb4 <_strtod_l+0x494>
 8009254:	f04f 32ff 	mov.w	r2, #4294967295
 8009258:	fa02 f303 	lsl.w	r3, r2, r3
 800925c:	ea03 0808 	and.w	r8, r3, r8
 8009260:	e6e0      	b.n	8009024 <_strtod_l+0x604>
 8009262:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8009266:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800926a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800926e:	35e2      	adds	r5, #226	; 0xe2
 8009270:	fa07 f505 	lsl.w	r5, r7, r5
 8009274:	970f      	str	r7, [sp, #60]	; 0x3c
 8009276:	e747      	b.n	8009108 <_strtod_l+0x6e8>
 8009278:	2301      	movs	r3, #1
 800927a:	2500      	movs	r5, #0
 800927c:	930f      	str	r3, [sp, #60]	; 0x3c
 800927e:	e743      	b.n	8009108 <_strtod_l+0x6e8>
 8009280:	463a      	mov	r2, r7
 8009282:	4650      	mov	r0, sl
 8009284:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009286:	f001 ff1d 	bl	800b0c4 <__lshift>
 800928a:	901a      	str	r0, [sp, #104]	; 0x68
 800928c:	2800      	cmp	r0, #0
 800928e:	f47f af69 	bne.w	8009164 <_strtod_l+0x744>
 8009292:	e604      	b.n	8008e9e <_strtod_l+0x47e>
 8009294:	0800c5c8 	.word	0x0800c5c8
 8009298:	fffffc02 	.word	0xfffffc02
 800929c:	7ff00000 	.word	0x7ff00000
 80092a0:	39500000 	.word	0x39500000
 80092a4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80092a8:	d165      	bne.n	8009376 <_strtod_l+0x956>
 80092aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80092ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092b0:	b35a      	cbz	r2, 800930a <_strtod_l+0x8ea>
 80092b2:	4a99      	ldr	r2, [pc, #612]	; (8009518 <_strtod_l+0xaf8>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d12b      	bne.n	8009310 <_strtod_l+0x8f0>
 80092b8:	9b05      	ldr	r3, [sp, #20]
 80092ba:	4641      	mov	r1, r8
 80092bc:	b303      	cbz	r3, 8009300 <_strtod_l+0x8e0>
 80092be:	464a      	mov	r2, r9
 80092c0:	4b96      	ldr	r3, [pc, #600]	; (800951c <_strtod_l+0xafc>)
 80092c2:	4013      	ands	r3, r2
 80092c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80092c8:	f04f 32ff 	mov.w	r2, #4294967295
 80092cc:	d81b      	bhi.n	8009306 <_strtod_l+0x8e6>
 80092ce:	0d1b      	lsrs	r3, r3, #20
 80092d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80092d4:	fa02 f303 	lsl.w	r3, r2, r3
 80092d8:	4299      	cmp	r1, r3
 80092da:	d119      	bne.n	8009310 <_strtod_l+0x8f0>
 80092dc:	4b90      	ldr	r3, [pc, #576]	; (8009520 <_strtod_l+0xb00>)
 80092de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d102      	bne.n	80092ea <_strtod_l+0x8ca>
 80092e4:	3101      	adds	r1, #1
 80092e6:	f43f adda 	beq.w	8008e9e <_strtod_l+0x47e>
 80092ea:	f04f 0800 	mov.w	r8, #0
 80092ee:	4b8b      	ldr	r3, [pc, #556]	; (800951c <_strtod_l+0xafc>)
 80092f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092f2:	401a      	ands	r2, r3
 80092f4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80092f8:	9b05      	ldr	r3, [sp, #20]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d19a      	bne.n	8009234 <_strtod_l+0x814>
 80092fe:	e5d9      	b.n	8008eb4 <_strtod_l+0x494>
 8009300:	f04f 33ff 	mov.w	r3, #4294967295
 8009304:	e7e8      	b.n	80092d8 <_strtod_l+0x8b8>
 8009306:	4613      	mov	r3, r2
 8009308:	e7e6      	b.n	80092d8 <_strtod_l+0x8b8>
 800930a:	ea53 0308 	orrs.w	r3, r3, r8
 800930e:	d081      	beq.n	8009214 <_strtod_l+0x7f4>
 8009310:	b1e5      	cbz	r5, 800934c <_strtod_l+0x92c>
 8009312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009314:	421d      	tst	r5, r3
 8009316:	d0ef      	beq.n	80092f8 <_strtod_l+0x8d8>
 8009318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800931a:	4640      	mov	r0, r8
 800931c:	4649      	mov	r1, r9
 800931e:	9a05      	ldr	r2, [sp, #20]
 8009320:	b1c3      	cbz	r3, 8009354 <_strtod_l+0x934>
 8009322:	f7ff fb5b 	bl	80089dc <sulp>
 8009326:	4602      	mov	r2, r0
 8009328:	460b      	mov	r3, r1
 800932a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800932e:	f7f6 ff1d 	bl	800016c <__adddf3>
 8009332:	4680      	mov	r8, r0
 8009334:	4689      	mov	r9, r1
 8009336:	e7df      	b.n	80092f8 <_strtod_l+0x8d8>
 8009338:	4013      	ands	r3, r2
 800933a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800933e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009342:	f04f 38ff 	mov.w	r8, #4294967295
 8009346:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800934a:	e7d5      	b.n	80092f8 <_strtod_l+0x8d8>
 800934c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800934e:	ea13 0f08 	tst.w	r3, r8
 8009352:	e7e0      	b.n	8009316 <_strtod_l+0x8f6>
 8009354:	f7ff fb42 	bl	80089dc <sulp>
 8009358:	4602      	mov	r2, r0
 800935a:	460b      	mov	r3, r1
 800935c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009360:	f7f6 ff02 	bl	8000168 <__aeabi_dsub>
 8009364:	2200      	movs	r2, #0
 8009366:	2300      	movs	r3, #0
 8009368:	4680      	mov	r8, r0
 800936a:	4689      	mov	r9, r1
 800936c:	f7f7 fb1c 	bl	80009a8 <__aeabi_dcmpeq>
 8009370:	2800      	cmp	r0, #0
 8009372:	d0c1      	beq.n	80092f8 <_strtod_l+0x8d8>
 8009374:	e608      	b.n	8008f88 <_strtod_l+0x568>
 8009376:	4658      	mov	r0, fp
 8009378:	9904      	ldr	r1, [sp, #16]
 800937a:	f002 f891 	bl	800b4a0 <__ratio>
 800937e:	2200      	movs	r2, #0
 8009380:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009384:	4606      	mov	r6, r0
 8009386:	460f      	mov	r7, r1
 8009388:	f7f7 fb22 	bl	80009d0 <__aeabi_dcmple>
 800938c:	2800      	cmp	r0, #0
 800938e:	d070      	beq.n	8009472 <_strtod_l+0xa52>
 8009390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009392:	2b00      	cmp	r3, #0
 8009394:	d042      	beq.n	800941c <_strtod_l+0x9fc>
 8009396:	2600      	movs	r6, #0
 8009398:	4f62      	ldr	r7, [pc, #392]	; (8009524 <_strtod_l+0xb04>)
 800939a:	4d62      	ldr	r5, [pc, #392]	; (8009524 <_strtod_l+0xb04>)
 800939c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800939e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093a2:	0d1b      	lsrs	r3, r3, #20
 80093a4:	051b      	lsls	r3, r3, #20
 80093a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80093a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80093aa:	4b5f      	ldr	r3, [pc, #380]	; (8009528 <_strtod_l+0xb08>)
 80093ac:	429a      	cmp	r2, r3
 80093ae:	f040 80c3 	bne.w	8009538 <_strtod_l+0xb18>
 80093b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b4:	4640      	mov	r0, r8
 80093b6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80093ba:	4649      	mov	r1, r9
 80093bc:	f001 ff9a 	bl	800b2f4 <__ulp>
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	4630      	mov	r0, r6
 80093c6:	4639      	mov	r1, r7
 80093c8:	f7f7 f886 	bl	80004d8 <__aeabi_dmul>
 80093cc:	4642      	mov	r2, r8
 80093ce:	464b      	mov	r3, r9
 80093d0:	f7f6 fecc 	bl	800016c <__adddf3>
 80093d4:	460b      	mov	r3, r1
 80093d6:	4951      	ldr	r1, [pc, #324]	; (800951c <_strtod_l+0xafc>)
 80093d8:	4a54      	ldr	r2, [pc, #336]	; (800952c <_strtod_l+0xb0c>)
 80093da:	4019      	ands	r1, r3
 80093dc:	4291      	cmp	r1, r2
 80093de:	4680      	mov	r8, r0
 80093e0:	d95d      	bls.n	800949e <_strtod_l+0xa7e>
 80093e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093e4:	4b4e      	ldr	r3, [pc, #312]	; (8009520 <_strtod_l+0xb00>)
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d103      	bne.n	80093f2 <_strtod_l+0x9d2>
 80093ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093ec:	3301      	adds	r3, #1
 80093ee:	f43f ad56 	beq.w	8008e9e <_strtod_l+0x47e>
 80093f2:	f04f 38ff 	mov.w	r8, #4294967295
 80093f6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009520 <_strtod_l+0xb00>
 80093fa:	4650      	mov	r0, sl
 80093fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80093fe:	f001 fc49 	bl	800ac94 <_Bfree>
 8009402:	4650      	mov	r0, sl
 8009404:	9906      	ldr	r1, [sp, #24]
 8009406:	f001 fc45 	bl	800ac94 <_Bfree>
 800940a:	4650      	mov	r0, sl
 800940c:	9904      	ldr	r1, [sp, #16]
 800940e:	f001 fc41 	bl	800ac94 <_Bfree>
 8009412:	4659      	mov	r1, fp
 8009414:	4650      	mov	r0, sl
 8009416:	f001 fc3d 	bl	800ac94 <_Bfree>
 800941a:	e627      	b.n	800906c <_strtod_l+0x64c>
 800941c:	f1b8 0f00 	cmp.w	r8, #0
 8009420:	d119      	bne.n	8009456 <_strtod_l+0xa36>
 8009422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009428:	b9e3      	cbnz	r3, 8009464 <_strtod_l+0xa44>
 800942a:	2200      	movs	r2, #0
 800942c:	4630      	mov	r0, r6
 800942e:	4639      	mov	r1, r7
 8009430:	4b3c      	ldr	r3, [pc, #240]	; (8009524 <_strtod_l+0xb04>)
 8009432:	f7f7 fac3 	bl	80009bc <__aeabi_dcmplt>
 8009436:	b9c8      	cbnz	r0, 800946c <_strtod_l+0xa4c>
 8009438:	2200      	movs	r2, #0
 800943a:	4630      	mov	r0, r6
 800943c:	4639      	mov	r1, r7
 800943e:	4b3c      	ldr	r3, [pc, #240]	; (8009530 <_strtod_l+0xb10>)
 8009440:	f7f7 f84a 	bl	80004d8 <__aeabi_dmul>
 8009444:	4604      	mov	r4, r0
 8009446:	460d      	mov	r5, r1
 8009448:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800944c:	9416      	str	r4, [sp, #88]	; 0x58
 800944e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009450:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8009454:	e7a2      	b.n	800939c <_strtod_l+0x97c>
 8009456:	f1b8 0f01 	cmp.w	r8, #1
 800945a:	d103      	bne.n	8009464 <_strtod_l+0xa44>
 800945c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800945e:	2b00      	cmp	r3, #0
 8009460:	f43f ad92 	beq.w	8008f88 <_strtod_l+0x568>
 8009464:	2600      	movs	r6, #0
 8009466:	2400      	movs	r4, #0
 8009468:	4f32      	ldr	r7, [pc, #200]	; (8009534 <_strtod_l+0xb14>)
 800946a:	e796      	b.n	800939a <_strtod_l+0x97a>
 800946c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800946e:	4d30      	ldr	r5, [pc, #192]	; (8009530 <_strtod_l+0xb10>)
 8009470:	e7ea      	b.n	8009448 <_strtod_l+0xa28>
 8009472:	4b2f      	ldr	r3, [pc, #188]	; (8009530 <_strtod_l+0xb10>)
 8009474:	2200      	movs	r2, #0
 8009476:	4630      	mov	r0, r6
 8009478:	4639      	mov	r1, r7
 800947a:	f7f7 f82d 	bl	80004d8 <__aeabi_dmul>
 800947e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009480:	4604      	mov	r4, r0
 8009482:	460d      	mov	r5, r1
 8009484:	b933      	cbnz	r3, 8009494 <_strtod_l+0xa74>
 8009486:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800948a:	9010      	str	r0, [sp, #64]	; 0x40
 800948c:	9311      	str	r3, [sp, #68]	; 0x44
 800948e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009492:	e783      	b.n	800939c <_strtod_l+0x97c>
 8009494:	4602      	mov	r2, r0
 8009496:	460b      	mov	r3, r1
 8009498:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800949c:	e7f7      	b.n	800948e <_strtod_l+0xa6e>
 800949e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80094a2:	9b05      	ldr	r3, [sp, #20]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d1a8      	bne.n	80093fa <_strtod_l+0x9da>
 80094a8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80094ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80094ae:	0d1b      	lsrs	r3, r3, #20
 80094b0:	051b      	lsls	r3, r3, #20
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d1a1      	bne.n	80093fa <_strtod_l+0x9da>
 80094b6:	4620      	mov	r0, r4
 80094b8:	4629      	mov	r1, r5
 80094ba:	f7f7 fe3f 	bl	800113c <__aeabi_d2lz>
 80094be:	f7f6 ffdd 	bl	800047c <__aeabi_l2d>
 80094c2:	4602      	mov	r2, r0
 80094c4:	460b      	mov	r3, r1
 80094c6:	4620      	mov	r0, r4
 80094c8:	4629      	mov	r1, r5
 80094ca:	f7f6 fe4d 	bl	8000168 <__aeabi_dsub>
 80094ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094d4:	ea43 0308 	orr.w	r3, r3, r8
 80094d8:	4313      	orrs	r3, r2
 80094da:	4604      	mov	r4, r0
 80094dc:	460d      	mov	r5, r1
 80094de:	d066      	beq.n	80095ae <_strtod_l+0xb8e>
 80094e0:	a309      	add	r3, pc, #36	; (adr r3, 8009508 <_strtod_l+0xae8>)
 80094e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e6:	f7f7 fa69 	bl	80009bc <__aeabi_dcmplt>
 80094ea:	2800      	cmp	r0, #0
 80094ec:	f47f ace2 	bne.w	8008eb4 <_strtod_l+0x494>
 80094f0:	a307      	add	r3, pc, #28	; (adr r3, 8009510 <_strtod_l+0xaf0>)
 80094f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f6:	4620      	mov	r0, r4
 80094f8:	4629      	mov	r1, r5
 80094fa:	f7f7 fa7d 	bl	80009f8 <__aeabi_dcmpgt>
 80094fe:	2800      	cmp	r0, #0
 8009500:	f43f af7b 	beq.w	80093fa <_strtod_l+0x9da>
 8009504:	e4d6      	b.n	8008eb4 <_strtod_l+0x494>
 8009506:	bf00      	nop
 8009508:	94a03595 	.word	0x94a03595
 800950c:	3fdfffff 	.word	0x3fdfffff
 8009510:	35afe535 	.word	0x35afe535
 8009514:	3fe00000 	.word	0x3fe00000
 8009518:	000fffff 	.word	0x000fffff
 800951c:	7ff00000 	.word	0x7ff00000
 8009520:	7fefffff 	.word	0x7fefffff
 8009524:	3ff00000 	.word	0x3ff00000
 8009528:	7fe00000 	.word	0x7fe00000
 800952c:	7c9fffff 	.word	0x7c9fffff
 8009530:	3fe00000 	.word	0x3fe00000
 8009534:	bff00000 	.word	0xbff00000
 8009538:	9b05      	ldr	r3, [sp, #20]
 800953a:	b313      	cbz	r3, 8009582 <_strtod_l+0xb62>
 800953c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800953e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009542:	d81e      	bhi.n	8009582 <_strtod_l+0xb62>
 8009544:	a326      	add	r3, pc, #152	; (adr r3, 80095e0 <_strtod_l+0xbc0>)
 8009546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954a:	4620      	mov	r0, r4
 800954c:	4629      	mov	r1, r5
 800954e:	f7f7 fa3f 	bl	80009d0 <__aeabi_dcmple>
 8009552:	b190      	cbz	r0, 800957a <_strtod_l+0xb5a>
 8009554:	4629      	mov	r1, r5
 8009556:	4620      	mov	r0, r4
 8009558:	f7f7 fa96 	bl	8000a88 <__aeabi_d2uiz>
 800955c:	2801      	cmp	r0, #1
 800955e:	bf38      	it	cc
 8009560:	2001      	movcc	r0, #1
 8009562:	f7f6 ff3f 	bl	80003e4 <__aeabi_ui2d>
 8009566:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009568:	4604      	mov	r4, r0
 800956a:	460d      	mov	r5, r1
 800956c:	b9d3      	cbnz	r3, 80095a4 <_strtod_l+0xb84>
 800956e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009572:	9012      	str	r0, [sp, #72]	; 0x48
 8009574:	9313      	str	r3, [sp, #76]	; 0x4c
 8009576:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800957a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800957c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009580:	1a9f      	subs	r7, r3, r2
 8009582:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009586:	f001 feb5 	bl	800b2f4 <__ulp>
 800958a:	4602      	mov	r2, r0
 800958c:	460b      	mov	r3, r1
 800958e:	4630      	mov	r0, r6
 8009590:	4639      	mov	r1, r7
 8009592:	f7f6 ffa1 	bl	80004d8 <__aeabi_dmul>
 8009596:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800959a:	f7f6 fde7 	bl	800016c <__adddf3>
 800959e:	4680      	mov	r8, r0
 80095a0:	4689      	mov	r9, r1
 80095a2:	e77e      	b.n	80094a2 <_strtod_l+0xa82>
 80095a4:	4602      	mov	r2, r0
 80095a6:	460b      	mov	r3, r1
 80095a8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80095ac:	e7e3      	b.n	8009576 <_strtod_l+0xb56>
 80095ae:	a30e      	add	r3, pc, #56	; (adr r3, 80095e8 <_strtod_l+0xbc8>)
 80095b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b4:	f7f7 fa02 	bl	80009bc <__aeabi_dcmplt>
 80095b8:	e7a1      	b.n	80094fe <_strtod_l+0xade>
 80095ba:	2300      	movs	r3, #0
 80095bc:	930a      	str	r3, [sp, #40]	; 0x28
 80095be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80095c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80095c2:	6013      	str	r3, [r2, #0]
 80095c4:	f7ff ba71 	b.w	8008aaa <_strtod_l+0x8a>
 80095c8:	2a65      	cmp	r2, #101	; 0x65
 80095ca:	f43f ab63 	beq.w	8008c94 <_strtod_l+0x274>
 80095ce:	2a45      	cmp	r2, #69	; 0x45
 80095d0:	f43f ab60 	beq.w	8008c94 <_strtod_l+0x274>
 80095d4:	2301      	movs	r3, #1
 80095d6:	f7ff bb95 	b.w	8008d04 <_strtod_l+0x2e4>
 80095da:	bf00      	nop
 80095dc:	f3af 8000 	nop.w
 80095e0:	ffc00000 	.word	0xffc00000
 80095e4:	41dfffff 	.word	0x41dfffff
 80095e8:	94a03595 	.word	0x94a03595
 80095ec:	3fcfffff 	.word	0x3fcfffff

080095f0 <_strtod_r>:
 80095f0:	4b01      	ldr	r3, [pc, #4]	; (80095f8 <_strtod_r+0x8>)
 80095f2:	f7ff ba15 	b.w	8008a20 <_strtod_l>
 80095f6:	bf00      	nop
 80095f8:	200001e4 	.word	0x200001e4

080095fc <strtof>:
 80095fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009600:	4f22      	ldr	r7, [pc, #136]	; (800968c <strtof+0x90>)
 8009602:	460a      	mov	r2, r1
 8009604:	4b22      	ldr	r3, [pc, #136]	; (8009690 <strtof+0x94>)
 8009606:	4601      	mov	r1, r0
 8009608:	6838      	ldr	r0, [r7, #0]
 800960a:	f7ff fa09 	bl	8008a20 <_strtod_l>
 800960e:	4602      	mov	r2, r0
 8009610:	460b      	mov	r3, r1
 8009612:	4606      	mov	r6, r0
 8009614:	460c      	mov	r4, r1
 8009616:	f7f7 f9f9 	bl	8000a0c <__aeabi_dcmpun>
 800961a:	b168      	cbz	r0, 8009638 <strtof+0x3c>
 800961c:	2c00      	cmp	r4, #0
 800961e:	481d      	ldr	r0, [pc, #116]	; (8009694 <strtof+0x98>)
 8009620:	da06      	bge.n	8009630 <strtof+0x34>
 8009622:	f7ff f973 	bl	800890c <nanf>
 8009626:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 800962a:	4628      	mov	r0, r5
 800962c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009630:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009634:	f7ff b96a 	b.w	800890c <nanf>
 8009638:	4621      	mov	r1, r4
 800963a:	4630      	mov	r0, r6
 800963c:	f7f7 fa44 	bl	8000ac8 <__aeabi_d2f>
 8009640:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8009644:	4605      	mov	r5, r0
 8009646:	4914      	ldr	r1, [pc, #80]	; (8009698 <strtof+0x9c>)
 8009648:	4640      	mov	r0, r8
 800964a:	f7f7 fd61 	bl	8001110 <__aeabi_fcmpun>
 800964e:	2800      	cmp	r0, #0
 8009650:	d1eb      	bne.n	800962a <strtof+0x2e>
 8009652:	4640      	mov	r0, r8
 8009654:	4910      	ldr	r1, [pc, #64]	; (8009698 <strtof+0x9c>)
 8009656:	f7f7 fd3d 	bl	80010d4 <__aeabi_fcmple>
 800965a:	2800      	cmp	r0, #0
 800965c:	d1e5      	bne.n	800962a <strtof+0x2e>
 800965e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8009662:	f04f 32ff 	mov.w	r2, #4294967295
 8009666:	4630      	mov	r0, r6
 8009668:	4621      	mov	r1, r4
 800966a:	4b0c      	ldr	r3, [pc, #48]	; (800969c <strtof+0xa0>)
 800966c:	f7f7 f9ce 	bl	8000a0c <__aeabi_dcmpun>
 8009670:	b940      	cbnz	r0, 8009684 <strtof+0x88>
 8009672:	f04f 32ff 	mov.w	r2, #4294967295
 8009676:	4630      	mov	r0, r6
 8009678:	4621      	mov	r1, r4
 800967a:	4b08      	ldr	r3, [pc, #32]	; (800969c <strtof+0xa0>)
 800967c:	f7f7 f9a8 	bl	80009d0 <__aeabi_dcmple>
 8009680:	2800      	cmp	r0, #0
 8009682:	d0d2      	beq.n	800962a <strtof+0x2e>
 8009684:	2222      	movs	r2, #34	; 0x22
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	601a      	str	r2, [r3, #0]
 800968a:	e7ce      	b.n	800962a <strtof+0x2e>
 800968c:	2000017c 	.word	0x2000017c
 8009690:	200001e4 	.word	0x200001e4
 8009694:	0800c9a0 	.word	0x0800c9a0
 8009698:	7f7fffff 	.word	0x7f7fffff
 800969c:	7fefffff 	.word	0x7fefffff

080096a0 <_strtol_l.constprop.0>:
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096a6:	4680      	mov	r8, r0
 80096a8:	d001      	beq.n	80096ae <_strtol_l.constprop.0+0xe>
 80096aa:	2b24      	cmp	r3, #36	; 0x24
 80096ac:	d906      	bls.n	80096bc <_strtol_l.constprop.0+0x1c>
 80096ae:	f7fe f95b 	bl	8007968 <__errno>
 80096b2:	2316      	movs	r3, #22
 80096b4:	6003      	str	r3, [r0, #0]
 80096b6:	2000      	movs	r0, #0
 80096b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096bc:	460d      	mov	r5, r1
 80096be:	4f35      	ldr	r7, [pc, #212]	; (8009794 <_strtol_l.constprop.0+0xf4>)
 80096c0:	4628      	mov	r0, r5
 80096c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096c6:	5de6      	ldrb	r6, [r4, r7]
 80096c8:	f016 0608 	ands.w	r6, r6, #8
 80096cc:	d1f8      	bne.n	80096c0 <_strtol_l.constprop.0+0x20>
 80096ce:	2c2d      	cmp	r4, #45	; 0x2d
 80096d0:	d12f      	bne.n	8009732 <_strtol_l.constprop.0+0x92>
 80096d2:	2601      	movs	r6, #1
 80096d4:	782c      	ldrb	r4, [r5, #0]
 80096d6:	1c85      	adds	r5, r0, #2
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d057      	beq.n	800978c <_strtol_l.constprop.0+0xec>
 80096dc:	2b10      	cmp	r3, #16
 80096de:	d109      	bne.n	80096f4 <_strtol_l.constprop.0+0x54>
 80096e0:	2c30      	cmp	r4, #48	; 0x30
 80096e2:	d107      	bne.n	80096f4 <_strtol_l.constprop.0+0x54>
 80096e4:	7828      	ldrb	r0, [r5, #0]
 80096e6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80096ea:	2858      	cmp	r0, #88	; 0x58
 80096ec:	d149      	bne.n	8009782 <_strtol_l.constprop.0+0xe2>
 80096ee:	2310      	movs	r3, #16
 80096f0:	786c      	ldrb	r4, [r5, #1]
 80096f2:	3502      	adds	r5, #2
 80096f4:	2700      	movs	r7, #0
 80096f6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80096fa:	f10e 3eff 	add.w	lr, lr, #4294967295
 80096fe:	fbbe f9f3 	udiv	r9, lr, r3
 8009702:	4638      	mov	r0, r7
 8009704:	fb03 ea19 	mls	sl, r3, r9, lr
 8009708:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800970c:	f1bc 0f09 	cmp.w	ip, #9
 8009710:	d814      	bhi.n	800973c <_strtol_l.constprop.0+0x9c>
 8009712:	4664      	mov	r4, ip
 8009714:	42a3      	cmp	r3, r4
 8009716:	dd22      	ble.n	800975e <_strtol_l.constprop.0+0xbe>
 8009718:	2f00      	cmp	r7, #0
 800971a:	db1d      	blt.n	8009758 <_strtol_l.constprop.0+0xb8>
 800971c:	4581      	cmp	r9, r0
 800971e:	d31b      	bcc.n	8009758 <_strtol_l.constprop.0+0xb8>
 8009720:	d101      	bne.n	8009726 <_strtol_l.constprop.0+0x86>
 8009722:	45a2      	cmp	sl, r4
 8009724:	db18      	blt.n	8009758 <_strtol_l.constprop.0+0xb8>
 8009726:	2701      	movs	r7, #1
 8009728:	fb00 4003 	mla	r0, r0, r3, r4
 800972c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009730:	e7ea      	b.n	8009708 <_strtol_l.constprop.0+0x68>
 8009732:	2c2b      	cmp	r4, #43	; 0x2b
 8009734:	bf04      	itt	eq
 8009736:	782c      	ldrbeq	r4, [r5, #0]
 8009738:	1c85      	addeq	r5, r0, #2
 800973a:	e7cd      	b.n	80096d8 <_strtol_l.constprop.0+0x38>
 800973c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009740:	f1bc 0f19 	cmp.w	ip, #25
 8009744:	d801      	bhi.n	800974a <_strtol_l.constprop.0+0xaa>
 8009746:	3c37      	subs	r4, #55	; 0x37
 8009748:	e7e4      	b.n	8009714 <_strtol_l.constprop.0+0x74>
 800974a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800974e:	f1bc 0f19 	cmp.w	ip, #25
 8009752:	d804      	bhi.n	800975e <_strtol_l.constprop.0+0xbe>
 8009754:	3c57      	subs	r4, #87	; 0x57
 8009756:	e7dd      	b.n	8009714 <_strtol_l.constprop.0+0x74>
 8009758:	f04f 37ff 	mov.w	r7, #4294967295
 800975c:	e7e6      	b.n	800972c <_strtol_l.constprop.0+0x8c>
 800975e:	2f00      	cmp	r7, #0
 8009760:	da07      	bge.n	8009772 <_strtol_l.constprop.0+0xd2>
 8009762:	2322      	movs	r3, #34	; 0x22
 8009764:	4670      	mov	r0, lr
 8009766:	f8c8 3000 	str.w	r3, [r8]
 800976a:	2a00      	cmp	r2, #0
 800976c:	d0a4      	beq.n	80096b8 <_strtol_l.constprop.0+0x18>
 800976e:	1e69      	subs	r1, r5, #1
 8009770:	e005      	b.n	800977e <_strtol_l.constprop.0+0xde>
 8009772:	b106      	cbz	r6, 8009776 <_strtol_l.constprop.0+0xd6>
 8009774:	4240      	negs	r0, r0
 8009776:	2a00      	cmp	r2, #0
 8009778:	d09e      	beq.n	80096b8 <_strtol_l.constprop.0+0x18>
 800977a:	2f00      	cmp	r7, #0
 800977c:	d1f7      	bne.n	800976e <_strtol_l.constprop.0+0xce>
 800977e:	6011      	str	r1, [r2, #0]
 8009780:	e79a      	b.n	80096b8 <_strtol_l.constprop.0+0x18>
 8009782:	2430      	movs	r4, #48	; 0x30
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1b5      	bne.n	80096f4 <_strtol_l.constprop.0+0x54>
 8009788:	2308      	movs	r3, #8
 800978a:	e7b3      	b.n	80096f4 <_strtol_l.constprop.0+0x54>
 800978c:	2c30      	cmp	r4, #48	; 0x30
 800978e:	d0a9      	beq.n	80096e4 <_strtol_l.constprop.0+0x44>
 8009790:	230a      	movs	r3, #10
 8009792:	e7af      	b.n	80096f4 <_strtol_l.constprop.0+0x54>
 8009794:	0800c5f1 	.word	0x0800c5f1

08009798 <_strtol_r>:
 8009798:	f7ff bf82 	b.w	80096a0 <_strtol_l.constprop.0>

0800979c <_vsniprintf_r>:
 800979c:	b530      	push	{r4, r5, lr}
 800979e:	4614      	mov	r4, r2
 80097a0:	2c00      	cmp	r4, #0
 80097a2:	4605      	mov	r5, r0
 80097a4:	461a      	mov	r2, r3
 80097a6:	b09b      	sub	sp, #108	; 0x6c
 80097a8:	da05      	bge.n	80097b6 <_vsniprintf_r+0x1a>
 80097aa:	238b      	movs	r3, #139	; 0x8b
 80097ac:	6003      	str	r3, [r0, #0]
 80097ae:	f04f 30ff 	mov.w	r0, #4294967295
 80097b2:	b01b      	add	sp, #108	; 0x6c
 80097b4:	bd30      	pop	{r4, r5, pc}
 80097b6:	f44f 7302 	mov.w	r3, #520	; 0x208
 80097ba:	f8ad 300c 	strh.w	r3, [sp, #12]
 80097be:	bf0c      	ite	eq
 80097c0:	4623      	moveq	r3, r4
 80097c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80097c6:	9302      	str	r3, [sp, #8]
 80097c8:	9305      	str	r3, [sp, #20]
 80097ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80097ce:	9100      	str	r1, [sp, #0]
 80097d0:	9104      	str	r1, [sp, #16]
 80097d2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80097d6:	4669      	mov	r1, sp
 80097d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80097da:	f001 ff43 	bl	800b664 <_svfiprintf_r>
 80097de:	1c43      	adds	r3, r0, #1
 80097e0:	bfbc      	itt	lt
 80097e2:	238b      	movlt	r3, #139	; 0x8b
 80097e4:	602b      	strlt	r3, [r5, #0]
 80097e6:	2c00      	cmp	r4, #0
 80097e8:	d0e3      	beq.n	80097b2 <_vsniprintf_r+0x16>
 80097ea:	2200      	movs	r2, #0
 80097ec:	9b00      	ldr	r3, [sp, #0]
 80097ee:	701a      	strb	r2, [r3, #0]
 80097f0:	e7df      	b.n	80097b2 <_vsniprintf_r+0x16>
	...

080097f4 <vsniprintf>:
 80097f4:	b507      	push	{r0, r1, r2, lr}
 80097f6:	9300      	str	r3, [sp, #0]
 80097f8:	4613      	mov	r3, r2
 80097fa:	460a      	mov	r2, r1
 80097fc:	4601      	mov	r1, r0
 80097fe:	4803      	ldr	r0, [pc, #12]	; (800980c <vsniprintf+0x18>)
 8009800:	6800      	ldr	r0, [r0, #0]
 8009802:	f7ff ffcb 	bl	800979c <_vsniprintf_r>
 8009806:	b003      	add	sp, #12
 8009808:	f85d fb04 	ldr.w	pc, [sp], #4
 800980c:	2000017c 	.word	0x2000017c

08009810 <quorem>:
 8009810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009814:	6903      	ldr	r3, [r0, #16]
 8009816:	690c      	ldr	r4, [r1, #16]
 8009818:	4607      	mov	r7, r0
 800981a:	42a3      	cmp	r3, r4
 800981c:	f2c0 8082 	blt.w	8009924 <quorem+0x114>
 8009820:	3c01      	subs	r4, #1
 8009822:	f100 0514 	add.w	r5, r0, #20
 8009826:	f101 0814 	add.w	r8, r1, #20
 800982a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800982e:	9301      	str	r3, [sp, #4]
 8009830:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009834:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009838:	3301      	adds	r3, #1
 800983a:	429a      	cmp	r2, r3
 800983c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009840:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009844:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009848:	d331      	bcc.n	80098ae <quorem+0x9e>
 800984a:	f04f 0e00 	mov.w	lr, #0
 800984e:	4640      	mov	r0, r8
 8009850:	46ac      	mov	ip, r5
 8009852:	46f2      	mov	sl, lr
 8009854:	f850 2b04 	ldr.w	r2, [r0], #4
 8009858:	b293      	uxth	r3, r2
 800985a:	fb06 e303 	mla	r3, r6, r3, lr
 800985e:	0c12      	lsrs	r2, r2, #16
 8009860:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009864:	b29b      	uxth	r3, r3
 8009866:	fb06 e202 	mla	r2, r6, r2, lr
 800986a:	ebaa 0303 	sub.w	r3, sl, r3
 800986e:	f8dc a000 	ldr.w	sl, [ip]
 8009872:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009876:	fa1f fa8a 	uxth.w	sl, sl
 800987a:	4453      	add	r3, sl
 800987c:	f8dc a000 	ldr.w	sl, [ip]
 8009880:	b292      	uxth	r2, r2
 8009882:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009886:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800988a:	b29b      	uxth	r3, r3
 800988c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009890:	4581      	cmp	r9, r0
 8009892:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009896:	f84c 3b04 	str.w	r3, [ip], #4
 800989a:	d2db      	bcs.n	8009854 <quorem+0x44>
 800989c:	f855 300b 	ldr.w	r3, [r5, fp]
 80098a0:	b92b      	cbnz	r3, 80098ae <quorem+0x9e>
 80098a2:	9b01      	ldr	r3, [sp, #4]
 80098a4:	3b04      	subs	r3, #4
 80098a6:	429d      	cmp	r5, r3
 80098a8:	461a      	mov	r2, r3
 80098aa:	d32f      	bcc.n	800990c <quorem+0xfc>
 80098ac:	613c      	str	r4, [r7, #16]
 80098ae:	4638      	mov	r0, r7
 80098b0:	f001 fc78 	bl	800b1a4 <__mcmp>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	db25      	blt.n	8009904 <quorem+0xf4>
 80098b8:	4628      	mov	r0, r5
 80098ba:	f04f 0c00 	mov.w	ip, #0
 80098be:	3601      	adds	r6, #1
 80098c0:	f858 1b04 	ldr.w	r1, [r8], #4
 80098c4:	f8d0 e000 	ldr.w	lr, [r0]
 80098c8:	b28b      	uxth	r3, r1
 80098ca:	ebac 0303 	sub.w	r3, ip, r3
 80098ce:	fa1f f28e 	uxth.w	r2, lr
 80098d2:	4413      	add	r3, r2
 80098d4:	0c0a      	lsrs	r2, r1, #16
 80098d6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80098da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098de:	b29b      	uxth	r3, r3
 80098e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098e4:	45c1      	cmp	r9, r8
 80098e6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80098ea:	f840 3b04 	str.w	r3, [r0], #4
 80098ee:	d2e7      	bcs.n	80098c0 <quorem+0xb0>
 80098f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098f8:	b922      	cbnz	r2, 8009904 <quorem+0xf4>
 80098fa:	3b04      	subs	r3, #4
 80098fc:	429d      	cmp	r5, r3
 80098fe:	461a      	mov	r2, r3
 8009900:	d30a      	bcc.n	8009918 <quorem+0x108>
 8009902:	613c      	str	r4, [r7, #16]
 8009904:	4630      	mov	r0, r6
 8009906:	b003      	add	sp, #12
 8009908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990c:	6812      	ldr	r2, [r2, #0]
 800990e:	3b04      	subs	r3, #4
 8009910:	2a00      	cmp	r2, #0
 8009912:	d1cb      	bne.n	80098ac <quorem+0x9c>
 8009914:	3c01      	subs	r4, #1
 8009916:	e7c6      	b.n	80098a6 <quorem+0x96>
 8009918:	6812      	ldr	r2, [r2, #0]
 800991a:	3b04      	subs	r3, #4
 800991c:	2a00      	cmp	r2, #0
 800991e:	d1f0      	bne.n	8009902 <quorem+0xf2>
 8009920:	3c01      	subs	r4, #1
 8009922:	e7eb      	b.n	80098fc <quorem+0xec>
 8009924:	2000      	movs	r0, #0
 8009926:	e7ee      	b.n	8009906 <quorem+0xf6>

08009928 <_dtoa_r>:
 8009928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992c:	4616      	mov	r6, r2
 800992e:	461f      	mov	r7, r3
 8009930:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009932:	b099      	sub	sp, #100	; 0x64
 8009934:	4605      	mov	r5, r0
 8009936:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800993a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800993e:	b974      	cbnz	r4, 800995e <_dtoa_r+0x36>
 8009940:	2010      	movs	r0, #16
 8009942:	f7fe f83b 	bl	80079bc <malloc>
 8009946:	4602      	mov	r2, r0
 8009948:	6268      	str	r0, [r5, #36]	; 0x24
 800994a:	b920      	cbnz	r0, 8009956 <_dtoa_r+0x2e>
 800994c:	21ea      	movs	r1, #234	; 0xea
 800994e:	4ba8      	ldr	r3, [pc, #672]	; (8009bf0 <_dtoa_r+0x2c8>)
 8009950:	48a8      	ldr	r0, [pc, #672]	; (8009bf4 <_dtoa_r+0x2cc>)
 8009952:	f001 ffaf 	bl	800b8b4 <__assert_func>
 8009956:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800995a:	6004      	str	r4, [r0, #0]
 800995c:	60c4      	str	r4, [r0, #12]
 800995e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009960:	6819      	ldr	r1, [r3, #0]
 8009962:	b151      	cbz	r1, 800997a <_dtoa_r+0x52>
 8009964:	685a      	ldr	r2, [r3, #4]
 8009966:	2301      	movs	r3, #1
 8009968:	4093      	lsls	r3, r2
 800996a:	604a      	str	r2, [r1, #4]
 800996c:	608b      	str	r3, [r1, #8]
 800996e:	4628      	mov	r0, r5
 8009970:	f001 f990 	bl	800ac94 <_Bfree>
 8009974:	2200      	movs	r2, #0
 8009976:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009978:	601a      	str	r2, [r3, #0]
 800997a:	1e3b      	subs	r3, r7, #0
 800997c:	bfaf      	iteee	ge
 800997e:	2300      	movge	r3, #0
 8009980:	2201      	movlt	r2, #1
 8009982:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009986:	9305      	strlt	r3, [sp, #20]
 8009988:	bfa8      	it	ge
 800998a:	f8c8 3000 	strge.w	r3, [r8]
 800998e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009992:	4b99      	ldr	r3, [pc, #612]	; (8009bf8 <_dtoa_r+0x2d0>)
 8009994:	bfb8      	it	lt
 8009996:	f8c8 2000 	strlt.w	r2, [r8]
 800999a:	ea33 0309 	bics.w	r3, r3, r9
 800999e:	d119      	bne.n	80099d4 <_dtoa_r+0xac>
 80099a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80099a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80099a6:	6013      	str	r3, [r2, #0]
 80099a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099ac:	4333      	orrs	r3, r6
 80099ae:	f000 857f 	beq.w	800a4b0 <_dtoa_r+0xb88>
 80099b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80099b4:	b953      	cbnz	r3, 80099cc <_dtoa_r+0xa4>
 80099b6:	4b91      	ldr	r3, [pc, #580]	; (8009bfc <_dtoa_r+0x2d4>)
 80099b8:	e022      	b.n	8009a00 <_dtoa_r+0xd8>
 80099ba:	4b91      	ldr	r3, [pc, #580]	; (8009c00 <_dtoa_r+0x2d8>)
 80099bc:	9303      	str	r3, [sp, #12]
 80099be:	3308      	adds	r3, #8
 80099c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80099c2:	6013      	str	r3, [r2, #0]
 80099c4:	9803      	ldr	r0, [sp, #12]
 80099c6:	b019      	add	sp, #100	; 0x64
 80099c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099cc:	4b8b      	ldr	r3, [pc, #556]	; (8009bfc <_dtoa_r+0x2d4>)
 80099ce:	9303      	str	r3, [sp, #12]
 80099d0:	3303      	adds	r3, #3
 80099d2:	e7f5      	b.n	80099c0 <_dtoa_r+0x98>
 80099d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80099d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80099dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80099e0:	2200      	movs	r2, #0
 80099e2:	2300      	movs	r3, #0
 80099e4:	f7f6 ffe0 	bl	80009a8 <__aeabi_dcmpeq>
 80099e8:	4680      	mov	r8, r0
 80099ea:	b158      	cbz	r0, 8009a04 <_dtoa_r+0xdc>
 80099ec:	2301      	movs	r3, #1
 80099ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80099f0:	6013      	str	r3, [r2, #0]
 80099f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f000 8558 	beq.w	800a4aa <_dtoa_r+0xb82>
 80099fa:	4882      	ldr	r0, [pc, #520]	; (8009c04 <_dtoa_r+0x2dc>)
 80099fc:	6018      	str	r0, [r3, #0]
 80099fe:	1e43      	subs	r3, r0, #1
 8009a00:	9303      	str	r3, [sp, #12]
 8009a02:	e7df      	b.n	80099c4 <_dtoa_r+0x9c>
 8009a04:	ab16      	add	r3, sp, #88	; 0x58
 8009a06:	9301      	str	r3, [sp, #4]
 8009a08:	ab17      	add	r3, sp, #92	; 0x5c
 8009a0a:	9300      	str	r3, [sp, #0]
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009a12:	f001 fce9 	bl	800b3e8 <__d2b>
 8009a16:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009a1a:	4683      	mov	fp, r0
 8009a1c:	2c00      	cmp	r4, #0
 8009a1e:	d07f      	beq.n	8009b20 <_dtoa_r+0x1f8>
 8009a20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009a24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a26:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009a2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a2e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009a32:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009a36:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	4b72      	ldr	r3, [pc, #456]	; (8009c08 <_dtoa_r+0x2e0>)
 8009a3e:	f7f6 fb93 	bl	8000168 <__aeabi_dsub>
 8009a42:	a365      	add	r3, pc, #404	; (adr r3, 8009bd8 <_dtoa_r+0x2b0>)
 8009a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a48:	f7f6 fd46 	bl	80004d8 <__aeabi_dmul>
 8009a4c:	a364      	add	r3, pc, #400	; (adr r3, 8009be0 <_dtoa_r+0x2b8>)
 8009a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a52:	f7f6 fb8b 	bl	800016c <__adddf3>
 8009a56:	4606      	mov	r6, r0
 8009a58:	4620      	mov	r0, r4
 8009a5a:	460f      	mov	r7, r1
 8009a5c:	f7f6 fcd2 	bl	8000404 <__aeabi_i2d>
 8009a60:	a361      	add	r3, pc, #388	; (adr r3, 8009be8 <_dtoa_r+0x2c0>)
 8009a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a66:	f7f6 fd37 	bl	80004d8 <__aeabi_dmul>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	4630      	mov	r0, r6
 8009a70:	4639      	mov	r1, r7
 8009a72:	f7f6 fb7b 	bl	800016c <__adddf3>
 8009a76:	4606      	mov	r6, r0
 8009a78:	460f      	mov	r7, r1
 8009a7a:	f7f6 ffdd 	bl	8000a38 <__aeabi_d2iz>
 8009a7e:	2200      	movs	r2, #0
 8009a80:	4682      	mov	sl, r0
 8009a82:	2300      	movs	r3, #0
 8009a84:	4630      	mov	r0, r6
 8009a86:	4639      	mov	r1, r7
 8009a88:	f7f6 ff98 	bl	80009bc <__aeabi_dcmplt>
 8009a8c:	b148      	cbz	r0, 8009aa2 <_dtoa_r+0x17a>
 8009a8e:	4650      	mov	r0, sl
 8009a90:	f7f6 fcb8 	bl	8000404 <__aeabi_i2d>
 8009a94:	4632      	mov	r2, r6
 8009a96:	463b      	mov	r3, r7
 8009a98:	f7f6 ff86 	bl	80009a8 <__aeabi_dcmpeq>
 8009a9c:	b908      	cbnz	r0, 8009aa2 <_dtoa_r+0x17a>
 8009a9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009aa2:	f1ba 0f16 	cmp.w	sl, #22
 8009aa6:	d858      	bhi.n	8009b5a <_dtoa_r+0x232>
 8009aa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009aac:	4b57      	ldr	r3, [pc, #348]	; (8009c0c <_dtoa_r+0x2e4>)
 8009aae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab6:	f7f6 ff81 	bl	80009bc <__aeabi_dcmplt>
 8009aba:	2800      	cmp	r0, #0
 8009abc:	d04f      	beq.n	8009b5e <_dtoa_r+0x236>
 8009abe:	2300      	movs	r3, #0
 8009ac0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ac4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ac6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009ac8:	1b1c      	subs	r4, r3, r4
 8009aca:	1e63      	subs	r3, r4, #1
 8009acc:	9309      	str	r3, [sp, #36]	; 0x24
 8009ace:	bf49      	itett	mi
 8009ad0:	f1c4 0301 	rsbmi	r3, r4, #1
 8009ad4:	2300      	movpl	r3, #0
 8009ad6:	9306      	strmi	r3, [sp, #24]
 8009ad8:	2300      	movmi	r3, #0
 8009ada:	bf54      	ite	pl
 8009adc:	9306      	strpl	r3, [sp, #24]
 8009ade:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009ae0:	f1ba 0f00 	cmp.w	sl, #0
 8009ae4:	db3d      	blt.n	8009b62 <_dtoa_r+0x23a>
 8009ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ae8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009aec:	4453      	add	r3, sl
 8009aee:	9309      	str	r3, [sp, #36]	; 0x24
 8009af0:	2300      	movs	r3, #0
 8009af2:	930a      	str	r3, [sp, #40]	; 0x28
 8009af4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009af6:	2b09      	cmp	r3, #9
 8009af8:	f200 808c 	bhi.w	8009c14 <_dtoa_r+0x2ec>
 8009afc:	2b05      	cmp	r3, #5
 8009afe:	bfc4      	itt	gt
 8009b00:	3b04      	subgt	r3, #4
 8009b02:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009b04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b06:	bfc8      	it	gt
 8009b08:	2400      	movgt	r4, #0
 8009b0a:	f1a3 0302 	sub.w	r3, r3, #2
 8009b0e:	bfd8      	it	le
 8009b10:	2401      	movle	r4, #1
 8009b12:	2b03      	cmp	r3, #3
 8009b14:	f200 808a 	bhi.w	8009c2c <_dtoa_r+0x304>
 8009b18:	e8df f003 	tbb	[pc, r3]
 8009b1c:	5b4d4f2d 	.word	0x5b4d4f2d
 8009b20:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009b24:	441c      	add	r4, r3
 8009b26:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009b2a:	2b20      	cmp	r3, #32
 8009b2c:	bfc3      	ittte	gt
 8009b2e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009b32:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8009b36:	fa09 f303 	lslgt.w	r3, r9, r3
 8009b3a:	f1c3 0320 	rsble	r3, r3, #32
 8009b3e:	bfc6      	itte	gt
 8009b40:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009b44:	4318      	orrgt	r0, r3
 8009b46:	fa06 f003 	lslle.w	r0, r6, r3
 8009b4a:	f7f6 fc4b 	bl	80003e4 <__aeabi_ui2d>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009b54:	3c01      	subs	r4, #1
 8009b56:	9313      	str	r3, [sp, #76]	; 0x4c
 8009b58:	e76f      	b.n	8009a3a <_dtoa_r+0x112>
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e7b2      	b.n	8009ac4 <_dtoa_r+0x19c>
 8009b5e:	900f      	str	r0, [sp, #60]	; 0x3c
 8009b60:	e7b1      	b.n	8009ac6 <_dtoa_r+0x19e>
 8009b62:	9b06      	ldr	r3, [sp, #24]
 8009b64:	eba3 030a 	sub.w	r3, r3, sl
 8009b68:	9306      	str	r3, [sp, #24]
 8009b6a:	f1ca 0300 	rsb	r3, sl, #0
 8009b6e:	930a      	str	r3, [sp, #40]	; 0x28
 8009b70:	2300      	movs	r3, #0
 8009b72:	930e      	str	r3, [sp, #56]	; 0x38
 8009b74:	e7be      	b.n	8009af4 <_dtoa_r+0x1cc>
 8009b76:	2300      	movs	r3, #0
 8009b78:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	dc58      	bgt.n	8009c32 <_dtoa_r+0x30a>
 8009b80:	f04f 0901 	mov.w	r9, #1
 8009b84:	464b      	mov	r3, r9
 8009b86:	f8cd 9020 	str.w	r9, [sp, #32]
 8009b8a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8009b8e:	2200      	movs	r2, #0
 8009b90:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009b92:	6042      	str	r2, [r0, #4]
 8009b94:	2204      	movs	r2, #4
 8009b96:	f102 0614 	add.w	r6, r2, #20
 8009b9a:	429e      	cmp	r6, r3
 8009b9c:	6841      	ldr	r1, [r0, #4]
 8009b9e:	d94e      	bls.n	8009c3e <_dtoa_r+0x316>
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	f001 f837 	bl	800ac14 <_Balloc>
 8009ba6:	9003      	str	r0, [sp, #12]
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	d14c      	bne.n	8009c46 <_dtoa_r+0x31e>
 8009bac:	4602      	mov	r2, r0
 8009bae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009bb2:	4b17      	ldr	r3, [pc, #92]	; (8009c10 <_dtoa_r+0x2e8>)
 8009bb4:	e6cc      	b.n	8009950 <_dtoa_r+0x28>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e7de      	b.n	8009b78 <_dtoa_r+0x250>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bbe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009bc0:	eb0a 0903 	add.w	r9, sl, r3
 8009bc4:	f109 0301 	add.w	r3, r9, #1
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	9308      	str	r3, [sp, #32]
 8009bcc:	bfb8      	it	lt
 8009bce:	2301      	movlt	r3, #1
 8009bd0:	e7dd      	b.n	8009b8e <_dtoa_r+0x266>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e7f2      	b.n	8009bbc <_dtoa_r+0x294>
 8009bd6:	bf00      	nop
 8009bd8:	636f4361 	.word	0x636f4361
 8009bdc:	3fd287a7 	.word	0x3fd287a7
 8009be0:	8b60c8b3 	.word	0x8b60c8b3
 8009be4:	3fc68a28 	.word	0x3fc68a28
 8009be8:	509f79fb 	.word	0x509f79fb
 8009bec:	3fd34413 	.word	0x3fd34413
 8009bf0:	0800c6fe 	.word	0x0800c6fe
 8009bf4:	0800c715 	.word	0x0800c715
 8009bf8:	7ff00000 	.word	0x7ff00000
 8009bfc:	0800c6fa 	.word	0x0800c6fa
 8009c00:	0800c6f1 	.word	0x0800c6f1
 8009c04:	0800c575 	.word	0x0800c575
 8009c08:	3ff80000 	.word	0x3ff80000
 8009c0c:	0800c880 	.word	0x0800c880
 8009c10:	0800c770 	.word	0x0800c770
 8009c14:	2401      	movs	r4, #1
 8009c16:	2300      	movs	r3, #0
 8009c18:	940b      	str	r4, [sp, #44]	; 0x2c
 8009c1a:	9322      	str	r3, [sp, #136]	; 0x88
 8009c1c:	f04f 39ff 	mov.w	r9, #4294967295
 8009c20:	2200      	movs	r2, #0
 8009c22:	2312      	movs	r3, #18
 8009c24:	f8cd 9020 	str.w	r9, [sp, #32]
 8009c28:	9223      	str	r2, [sp, #140]	; 0x8c
 8009c2a:	e7b0      	b.n	8009b8e <_dtoa_r+0x266>
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c30:	e7f4      	b.n	8009c1c <_dtoa_r+0x2f4>
 8009c32:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8009c36:	464b      	mov	r3, r9
 8009c38:	f8cd 9020 	str.w	r9, [sp, #32]
 8009c3c:	e7a7      	b.n	8009b8e <_dtoa_r+0x266>
 8009c3e:	3101      	adds	r1, #1
 8009c40:	6041      	str	r1, [r0, #4]
 8009c42:	0052      	lsls	r2, r2, #1
 8009c44:	e7a7      	b.n	8009b96 <_dtoa_r+0x26e>
 8009c46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c48:	9a03      	ldr	r2, [sp, #12]
 8009c4a:	601a      	str	r2, [r3, #0]
 8009c4c:	9b08      	ldr	r3, [sp, #32]
 8009c4e:	2b0e      	cmp	r3, #14
 8009c50:	f200 80a8 	bhi.w	8009da4 <_dtoa_r+0x47c>
 8009c54:	2c00      	cmp	r4, #0
 8009c56:	f000 80a5 	beq.w	8009da4 <_dtoa_r+0x47c>
 8009c5a:	f1ba 0f00 	cmp.w	sl, #0
 8009c5e:	dd34      	ble.n	8009cca <_dtoa_r+0x3a2>
 8009c60:	4a9a      	ldr	r2, [pc, #616]	; (8009ecc <_dtoa_r+0x5a4>)
 8009c62:	f00a 030f 	and.w	r3, sl, #15
 8009c66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009c6a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009c6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009c76:	ea4f 142a 	mov.w	r4, sl, asr #4
 8009c7a:	d016      	beq.n	8009caa <_dtoa_r+0x382>
 8009c7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c80:	4b93      	ldr	r3, [pc, #588]	; (8009ed0 <_dtoa_r+0x5a8>)
 8009c82:	2703      	movs	r7, #3
 8009c84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c88:	f7f6 fd50 	bl	800072c <__aeabi_ddiv>
 8009c8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c90:	f004 040f 	and.w	r4, r4, #15
 8009c94:	4e8e      	ldr	r6, [pc, #568]	; (8009ed0 <_dtoa_r+0x5a8>)
 8009c96:	b954      	cbnz	r4, 8009cae <_dtoa_r+0x386>
 8009c98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009c9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ca0:	f7f6 fd44 	bl	800072c <__aeabi_ddiv>
 8009ca4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ca8:	e029      	b.n	8009cfe <_dtoa_r+0x3d6>
 8009caa:	2702      	movs	r7, #2
 8009cac:	e7f2      	b.n	8009c94 <_dtoa_r+0x36c>
 8009cae:	07e1      	lsls	r1, r4, #31
 8009cb0:	d508      	bpl.n	8009cc4 <_dtoa_r+0x39c>
 8009cb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009cb6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009cba:	f7f6 fc0d 	bl	80004d8 <__aeabi_dmul>
 8009cbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009cc2:	3701      	adds	r7, #1
 8009cc4:	1064      	asrs	r4, r4, #1
 8009cc6:	3608      	adds	r6, #8
 8009cc8:	e7e5      	b.n	8009c96 <_dtoa_r+0x36e>
 8009cca:	f000 80a5 	beq.w	8009e18 <_dtoa_r+0x4f0>
 8009cce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009cd2:	f1ca 0400 	rsb	r4, sl, #0
 8009cd6:	4b7d      	ldr	r3, [pc, #500]	; (8009ecc <_dtoa_r+0x5a4>)
 8009cd8:	f004 020f 	and.w	r2, r4, #15
 8009cdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce4:	f7f6 fbf8 	bl	80004d8 <__aeabi_dmul>
 8009ce8:	2702      	movs	r7, #2
 8009cea:	2300      	movs	r3, #0
 8009cec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cf0:	4e77      	ldr	r6, [pc, #476]	; (8009ed0 <_dtoa_r+0x5a8>)
 8009cf2:	1124      	asrs	r4, r4, #4
 8009cf4:	2c00      	cmp	r4, #0
 8009cf6:	f040 8084 	bne.w	8009e02 <_dtoa_r+0x4da>
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d1d2      	bne.n	8009ca4 <_dtoa_r+0x37c>
 8009cfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f000 808b 	beq.w	8009e1c <_dtoa_r+0x4f4>
 8009d06:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009d0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009d0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d12:	2200      	movs	r2, #0
 8009d14:	4b6f      	ldr	r3, [pc, #444]	; (8009ed4 <_dtoa_r+0x5ac>)
 8009d16:	f7f6 fe51 	bl	80009bc <__aeabi_dcmplt>
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	d07e      	beq.n	8009e1c <_dtoa_r+0x4f4>
 8009d1e:	9b08      	ldr	r3, [sp, #32]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d07b      	beq.n	8009e1c <_dtoa_r+0x4f4>
 8009d24:	f1b9 0f00 	cmp.w	r9, #0
 8009d28:	dd38      	ble.n	8009d9c <_dtoa_r+0x474>
 8009d2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d2e:	2200      	movs	r2, #0
 8009d30:	4b69      	ldr	r3, [pc, #420]	; (8009ed8 <_dtoa_r+0x5b0>)
 8009d32:	f7f6 fbd1 	bl	80004d8 <__aeabi_dmul>
 8009d36:	464c      	mov	r4, r9
 8009d38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d3c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8009d40:	3701      	adds	r7, #1
 8009d42:	4638      	mov	r0, r7
 8009d44:	f7f6 fb5e 	bl	8000404 <__aeabi_i2d>
 8009d48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d4c:	f7f6 fbc4 	bl	80004d8 <__aeabi_dmul>
 8009d50:	2200      	movs	r2, #0
 8009d52:	4b62      	ldr	r3, [pc, #392]	; (8009edc <_dtoa_r+0x5b4>)
 8009d54:	f7f6 fa0a 	bl	800016c <__adddf3>
 8009d58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009d5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d60:	9611      	str	r6, [sp, #68]	; 0x44
 8009d62:	2c00      	cmp	r4, #0
 8009d64:	d15d      	bne.n	8009e22 <_dtoa_r+0x4fa>
 8009d66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	4b5c      	ldr	r3, [pc, #368]	; (8009ee0 <_dtoa_r+0x5b8>)
 8009d6e:	f7f6 f9fb 	bl	8000168 <__aeabi_dsub>
 8009d72:	4602      	mov	r2, r0
 8009d74:	460b      	mov	r3, r1
 8009d76:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d7a:	4633      	mov	r3, r6
 8009d7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d7e:	f7f6 fe3b 	bl	80009f8 <__aeabi_dcmpgt>
 8009d82:	2800      	cmp	r0, #0
 8009d84:	f040 829c 	bne.w	800a2c0 <_dtoa_r+0x998>
 8009d88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d8e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009d92:	f7f6 fe13 	bl	80009bc <__aeabi_dcmplt>
 8009d96:	2800      	cmp	r0, #0
 8009d98:	f040 8290 	bne.w	800a2bc <_dtoa_r+0x994>
 8009d9c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009da0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009da4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f2c0 8152 	blt.w	800a050 <_dtoa_r+0x728>
 8009dac:	f1ba 0f0e 	cmp.w	sl, #14
 8009db0:	f300 814e 	bgt.w	800a050 <_dtoa_r+0x728>
 8009db4:	4b45      	ldr	r3, [pc, #276]	; (8009ecc <_dtoa_r+0x5a4>)
 8009db6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009dba:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009dbe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009dc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f280 80db 	bge.w	8009f80 <_dtoa_r+0x658>
 8009dca:	9b08      	ldr	r3, [sp, #32]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	f300 80d7 	bgt.w	8009f80 <_dtoa_r+0x658>
 8009dd2:	f040 8272 	bne.w	800a2ba <_dtoa_r+0x992>
 8009dd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	4b40      	ldr	r3, [pc, #256]	; (8009ee0 <_dtoa_r+0x5b8>)
 8009dde:	f7f6 fb7b 	bl	80004d8 <__aeabi_dmul>
 8009de2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009de6:	f7f6 fdfd 	bl	80009e4 <__aeabi_dcmpge>
 8009dea:	9c08      	ldr	r4, [sp, #32]
 8009dec:	4626      	mov	r6, r4
 8009dee:	2800      	cmp	r0, #0
 8009df0:	f040 8248 	bne.w	800a284 <_dtoa_r+0x95c>
 8009df4:	2331      	movs	r3, #49	; 0x31
 8009df6:	9f03      	ldr	r7, [sp, #12]
 8009df8:	f10a 0a01 	add.w	sl, sl, #1
 8009dfc:	f807 3b01 	strb.w	r3, [r7], #1
 8009e00:	e244      	b.n	800a28c <_dtoa_r+0x964>
 8009e02:	07e2      	lsls	r2, r4, #31
 8009e04:	d505      	bpl.n	8009e12 <_dtoa_r+0x4ea>
 8009e06:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009e0a:	f7f6 fb65 	bl	80004d8 <__aeabi_dmul>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	3701      	adds	r7, #1
 8009e12:	1064      	asrs	r4, r4, #1
 8009e14:	3608      	adds	r6, #8
 8009e16:	e76d      	b.n	8009cf4 <_dtoa_r+0x3cc>
 8009e18:	2702      	movs	r7, #2
 8009e1a:	e770      	b.n	8009cfe <_dtoa_r+0x3d6>
 8009e1c:	46d0      	mov	r8, sl
 8009e1e:	9c08      	ldr	r4, [sp, #32]
 8009e20:	e78f      	b.n	8009d42 <_dtoa_r+0x41a>
 8009e22:	9903      	ldr	r1, [sp, #12]
 8009e24:	4b29      	ldr	r3, [pc, #164]	; (8009ecc <_dtoa_r+0x5a4>)
 8009e26:	4421      	add	r1, r4
 8009e28:	9112      	str	r1, [sp, #72]	; 0x48
 8009e2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e30:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009e34:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e38:	2900      	cmp	r1, #0
 8009e3a:	d055      	beq.n	8009ee8 <_dtoa_r+0x5c0>
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	4929      	ldr	r1, [pc, #164]	; (8009ee4 <_dtoa_r+0x5bc>)
 8009e40:	f7f6 fc74 	bl	800072c <__aeabi_ddiv>
 8009e44:	463b      	mov	r3, r7
 8009e46:	4632      	mov	r2, r6
 8009e48:	f7f6 f98e 	bl	8000168 <__aeabi_dsub>
 8009e4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009e50:	9f03      	ldr	r7, [sp, #12]
 8009e52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e56:	f7f6 fdef 	bl	8000a38 <__aeabi_d2iz>
 8009e5a:	4604      	mov	r4, r0
 8009e5c:	f7f6 fad2 	bl	8000404 <__aeabi_i2d>
 8009e60:	4602      	mov	r2, r0
 8009e62:	460b      	mov	r3, r1
 8009e64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e68:	f7f6 f97e 	bl	8000168 <__aeabi_dsub>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	460b      	mov	r3, r1
 8009e70:	3430      	adds	r4, #48	; 0x30
 8009e72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009e76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009e7a:	f807 4b01 	strb.w	r4, [r7], #1
 8009e7e:	f7f6 fd9d 	bl	80009bc <__aeabi_dcmplt>
 8009e82:	2800      	cmp	r0, #0
 8009e84:	d174      	bne.n	8009f70 <_dtoa_r+0x648>
 8009e86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	4911      	ldr	r1, [pc, #68]	; (8009ed4 <_dtoa_r+0x5ac>)
 8009e8e:	f7f6 f96b 	bl	8000168 <__aeabi_dsub>
 8009e92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009e96:	f7f6 fd91 	bl	80009bc <__aeabi_dcmplt>
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	f040 80b7 	bne.w	800a00e <_dtoa_r+0x6e6>
 8009ea0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ea2:	429f      	cmp	r7, r3
 8009ea4:	f43f af7a 	beq.w	8009d9c <_dtoa_r+0x474>
 8009ea8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009eac:	2200      	movs	r2, #0
 8009eae:	4b0a      	ldr	r3, [pc, #40]	; (8009ed8 <_dtoa_r+0x5b0>)
 8009eb0:	f7f6 fb12 	bl	80004d8 <__aeabi_dmul>
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009eba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ebe:	4b06      	ldr	r3, [pc, #24]	; (8009ed8 <_dtoa_r+0x5b0>)
 8009ec0:	f7f6 fb0a 	bl	80004d8 <__aeabi_dmul>
 8009ec4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ec8:	e7c3      	b.n	8009e52 <_dtoa_r+0x52a>
 8009eca:	bf00      	nop
 8009ecc:	0800c880 	.word	0x0800c880
 8009ed0:	0800c858 	.word	0x0800c858
 8009ed4:	3ff00000 	.word	0x3ff00000
 8009ed8:	40240000 	.word	0x40240000
 8009edc:	401c0000 	.word	0x401c0000
 8009ee0:	40140000 	.word	0x40140000
 8009ee4:	3fe00000 	.word	0x3fe00000
 8009ee8:	4630      	mov	r0, r6
 8009eea:	4639      	mov	r1, r7
 8009eec:	f7f6 faf4 	bl	80004d8 <__aeabi_dmul>
 8009ef0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ef2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009ef6:	9c03      	ldr	r4, [sp, #12]
 8009ef8:	9314      	str	r3, [sp, #80]	; 0x50
 8009efa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009efe:	f7f6 fd9b 	bl	8000a38 <__aeabi_d2iz>
 8009f02:	9015      	str	r0, [sp, #84]	; 0x54
 8009f04:	f7f6 fa7e 	bl	8000404 <__aeabi_i2d>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f10:	f7f6 f92a 	bl	8000168 <__aeabi_dsub>
 8009f14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f16:	4606      	mov	r6, r0
 8009f18:	3330      	adds	r3, #48	; 0x30
 8009f1a:	f804 3b01 	strb.w	r3, [r4], #1
 8009f1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f20:	460f      	mov	r7, r1
 8009f22:	429c      	cmp	r4, r3
 8009f24:	f04f 0200 	mov.w	r2, #0
 8009f28:	d124      	bne.n	8009f74 <_dtoa_r+0x64c>
 8009f2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009f2e:	4bb0      	ldr	r3, [pc, #704]	; (800a1f0 <_dtoa_r+0x8c8>)
 8009f30:	f7f6 f91c 	bl	800016c <__adddf3>
 8009f34:	4602      	mov	r2, r0
 8009f36:	460b      	mov	r3, r1
 8009f38:	4630      	mov	r0, r6
 8009f3a:	4639      	mov	r1, r7
 8009f3c:	f7f6 fd5c 	bl	80009f8 <__aeabi_dcmpgt>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	d163      	bne.n	800a00c <_dtoa_r+0x6e4>
 8009f44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009f48:	2000      	movs	r0, #0
 8009f4a:	49a9      	ldr	r1, [pc, #676]	; (800a1f0 <_dtoa_r+0x8c8>)
 8009f4c:	f7f6 f90c 	bl	8000168 <__aeabi_dsub>
 8009f50:	4602      	mov	r2, r0
 8009f52:	460b      	mov	r3, r1
 8009f54:	4630      	mov	r0, r6
 8009f56:	4639      	mov	r1, r7
 8009f58:	f7f6 fd30 	bl	80009bc <__aeabi_dcmplt>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	f43f af1d 	beq.w	8009d9c <_dtoa_r+0x474>
 8009f62:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009f64:	1e7b      	subs	r3, r7, #1
 8009f66:	9314      	str	r3, [sp, #80]	; 0x50
 8009f68:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009f6c:	2b30      	cmp	r3, #48	; 0x30
 8009f6e:	d0f8      	beq.n	8009f62 <_dtoa_r+0x63a>
 8009f70:	46c2      	mov	sl, r8
 8009f72:	e03b      	b.n	8009fec <_dtoa_r+0x6c4>
 8009f74:	4b9f      	ldr	r3, [pc, #636]	; (800a1f4 <_dtoa_r+0x8cc>)
 8009f76:	f7f6 faaf 	bl	80004d8 <__aeabi_dmul>
 8009f7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f7e:	e7bc      	b.n	8009efa <_dtoa_r+0x5d2>
 8009f80:	9f03      	ldr	r7, [sp, #12]
 8009f82:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009f86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f8a:	4640      	mov	r0, r8
 8009f8c:	4649      	mov	r1, r9
 8009f8e:	f7f6 fbcd 	bl	800072c <__aeabi_ddiv>
 8009f92:	f7f6 fd51 	bl	8000a38 <__aeabi_d2iz>
 8009f96:	4604      	mov	r4, r0
 8009f98:	f7f6 fa34 	bl	8000404 <__aeabi_i2d>
 8009f9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fa0:	f7f6 fa9a 	bl	80004d8 <__aeabi_dmul>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	4640      	mov	r0, r8
 8009faa:	4649      	mov	r1, r9
 8009fac:	f7f6 f8dc 	bl	8000168 <__aeabi_dsub>
 8009fb0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009fb4:	f807 6b01 	strb.w	r6, [r7], #1
 8009fb8:	9e03      	ldr	r6, [sp, #12]
 8009fba:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009fbe:	1bbe      	subs	r6, r7, r6
 8009fc0:	45b4      	cmp	ip, r6
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	d136      	bne.n	800a036 <_dtoa_r+0x70e>
 8009fc8:	f7f6 f8d0 	bl	800016c <__adddf3>
 8009fcc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fd0:	4680      	mov	r8, r0
 8009fd2:	4689      	mov	r9, r1
 8009fd4:	f7f6 fd10 	bl	80009f8 <__aeabi_dcmpgt>
 8009fd8:	bb58      	cbnz	r0, 800a032 <_dtoa_r+0x70a>
 8009fda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fde:	4640      	mov	r0, r8
 8009fe0:	4649      	mov	r1, r9
 8009fe2:	f7f6 fce1 	bl	80009a8 <__aeabi_dcmpeq>
 8009fe6:	b108      	cbz	r0, 8009fec <_dtoa_r+0x6c4>
 8009fe8:	07e1      	lsls	r1, r4, #31
 8009fea:	d422      	bmi.n	800a032 <_dtoa_r+0x70a>
 8009fec:	4628      	mov	r0, r5
 8009fee:	4659      	mov	r1, fp
 8009ff0:	f000 fe50 	bl	800ac94 <_Bfree>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	703b      	strb	r3, [r7, #0]
 8009ff8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009ffa:	f10a 0001 	add.w	r0, sl, #1
 8009ffe:	6018      	str	r0, [r3, #0]
 800a000:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a002:	2b00      	cmp	r3, #0
 800a004:	f43f acde 	beq.w	80099c4 <_dtoa_r+0x9c>
 800a008:	601f      	str	r7, [r3, #0]
 800a00a:	e4db      	b.n	80099c4 <_dtoa_r+0x9c>
 800a00c:	4627      	mov	r7, r4
 800a00e:	463b      	mov	r3, r7
 800a010:	461f      	mov	r7, r3
 800a012:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a016:	2a39      	cmp	r2, #57	; 0x39
 800a018:	d107      	bne.n	800a02a <_dtoa_r+0x702>
 800a01a:	9a03      	ldr	r2, [sp, #12]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d1f7      	bne.n	800a010 <_dtoa_r+0x6e8>
 800a020:	2230      	movs	r2, #48	; 0x30
 800a022:	9903      	ldr	r1, [sp, #12]
 800a024:	f108 0801 	add.w	r8, r8, #1
 800a028:	700a      	strb	r2, [r1, #0]
 800a02a:	781a      	ldrb	r2, [r3, #0]
 800a02c:	3201      	adds	r2, #1
 800a02e:	701a      	strb	r2, [r3, #0]
 800a030:	e79e      	b.n	8009f70 <_dtoa_r+0x648>
 800a032:	46d0      	mov	r8, sl
 800a034:	e7eb      	b.n	800a00e <_dtoa_r+0x6e6>
 800a036:	2200      	movs	r2, #0
 800a038:	4b6e      	ldr	r3, [pc, #440]	; (800a1f4 <_dtoa_r+0x8cc>)
 800a03a:	f7f6 fa4d 	bl	80004d8 <__aeabi_dmul>
 800a03e:	2200      	movs	r2, #0
 800a040:	2300      	movs	r3, #0
 800a042:	4680      	mov	r8, r0
 800a044:	4689      	mov	r9, r1
 800a046:	f7f6 fcaf 	bl	80009a8 <__aeabi_dcmpeq>
 800a04a:	2800      	cmp	r0, #0
 800a04c:	d09b      	beq.n	8009f86 <_dtoa_r+0x65e>
 800a04e:	e7cd      	b.n	8009fec <_dtoa_r+0x6c4>
 800a050:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a052:	2a00      	cmp	r2, #0
 800a054:	f000 80d0 	beq.w	800a1f8 <_dtoa_r+0x8d0>
 800a058:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a05a:	2a01      	cmp	r2, #1
 800a05c:	f300 80ae 	bgt.w	800a1bc <_dtoa_r+0x894>
 800a060:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a062:	2a00      	cmp	r2, #0
 800a064:	f000 80a6 	beq.w	800a1b4 <_dtoa_r+0x88c>
 800a068:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a06c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a06e:	9f06      	ldr	r7, [sp, #24]
 800a070:	9a06      	ldr	r2, [sp, #24]
 800a072:	2101      	movs	r1, #1
 800a074:	441a      	add	r2, r3
 800a076:	9206      	str	r2, [sp, #24]
 800a078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a07a:	4628      	mov	r0, r5
 800a07c:	441a      	add	r2, r3
 800a07e:	9209      	str	r2, [sp, #36]	; 0x24
 800a080:	f000 ff08 	bl	800ae94 <__i2b>
 800a084:	4606      	mov	r6, r0
 800a086:	2f00      	cmp	r7, #0
 800a088:	dd0c      	ble.n	800a0a4 <_dtoa_r+0x77c>
 800a08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	dd09      	ble.n	800a0a4 <_dtoa_r+0x77c>
 800a090:	42bb      	cmp	r3, r7
 800a092:	bfa8      	it	ge
 800a094:	463b      	movge	r3, r7
 800a096:	9a06      	ldr	r2, [sp, #24]
 800a098:	1aff      	subs	r7, r7, r3
 800a09a:	1ad2      	subs	r2, r2, r3
 800a09c:	9206      	str	r2, [sp, #24]
 800a09e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0a0:	1ad3      	subs	r3, r2, r3
 800a0a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a0a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0a6:	b1f3      	cbz	r3, 800a0e6 <_dtoa_r+0x7be>
 800a0a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	f000 80a8 	beq.w	800a200 <_dtoa_r+0x8d8>
 800a0b0:	2c00      	cmp	r4, #0
 800a0b2:	dd10      	ble.n	800a0d6 <_dtoa_r+0x7ae>
 800a0b4:	4631      	mov	r1, r6
 800a0b6:	4622      	mov	r2, r4
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	f000 ffa9 	bl	800b010 <__pow5mult>
 800a0be:	465a      	mov	r2, fp
 800a0c0:	4601      	mov	r1, r0
 800a0c2:	4606      	mov	r6, r0
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	f000 fefb 	bl	800aec0 <__multiply>
 800a0ca:	4680      	mov	r8, r0
 800a0cc:	4659      	mov	r1, fp
 800a0ce:	4628      	mov	r0, r5
 800a0d0:	f000 fde0 	bl	800ac94 <_Bfree>
 800a0d4:	46c3      	mov	fp, r8
 800a0d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0d8:	1b1a      	subs	r2, r3, r4
 800a0da:	d004      	beq.n	800a0e6 <_dtoa_r+0x7be>
 800a0dc:	4659      	mov	r1, fp
 800a0de:	4628      	mov	r0, r5
 800a0e0:	f000 ff96 	bl	800b010 <__pow5mult>
 800a0e4:	4683      	mov	fp, r0
 800a0e6:	2101      	movs	r1, #1
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	f000 fed3 	bl	800ae94 <__i2b>
 800a0ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0f0:	4604      	mov	r4, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f340 8086 	ble.w	800a204 <_dtoa_r+0x8dc>
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	4601      	mov	r1, r0
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	f000 ff87 	bl	800b010 <__pow5mult>
 800a102:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a104:	4604      	mov	r4, r0
 800a106:	2b01      	cmp	r3, #1
 800a108:	dd7f      	ble.n	800a20a <_dtoa_r+0x8e2>
 800a10a:	f04f 0800 	mov.w	r8, #0
 800a10e:	6923      	ldr	r3, [r4, #16]
 800a110:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a114:	6918      	ldr	r0, [r3, #16]
 800a116:	f000 fe6f 	bl	800adf8 <__hi0bits>
 800a11a:	f1c0 0020 	rsb	r0, r0, #32
 800a11e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a120:	4418      	add	r0, r3
 800a122:	f010 001f 	ands.w	r0, r0, #31
 800a126:	f000 8092 	beq.w	800a24e <_dtoa_r+0x926>
 800a12a:	f1c0 0320 	rsb	r3, r0, #32
 800a12e:	2b04      	cmp	r3, #4
 800a130:	f340 808a 	ble.w	800a248 <_dtoa_r+0x920>
 800a134:	f1c0 001c 	rsb	r0, r0, #28
 800a138:	9b06      	ldr	r3, [sp, #24]
 800a13a:	4407      	add	r7, r0
 800a13c:	4403      	add	r3, r0
 800a13e:	9306      	str	r3, [sp, #24]
 800a140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a142:	4403      	add	r3, r0
 800a144:	9309      	str	r3, [sp, #36]	; 0x24
 800a146:	9b06      	ldr	r3, [sp, #24]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	dd05      	ble.n	800a158 <_dtoa_r+0x830>
 800a14c:	4659      	mov	r1, fp
 800a14e:	461a      	mov	r2, r3
 800a150:	4628      	mov	r0, r5
 800a152:	f000 ffb7 	bl	800b0c4 <__lshift>
 800a156:	4683      	mov	fp, r0
 800a158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	dd05      	ble.n	800a16a <_dtoa_r+0x842>
 800a15e:	4621      	mov	r1, r4
 800a160:	461a      	mov	r2, r3
 800a162:	4628      	mov	r0, r5
 800a164:	f000 ffae 	bl	800b0c4 <__lshift>
 800a168:	4604      	mov	r4, r0
 800a16a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d070      	beq.n	800a252 <_dtoa_r+0x92a>
 800a170:	4621      	mov	r1, r4
 800a172:	4658      	mov	r0, fp
 800a174:	f001 f816 	bl	800b1a4 <__mcmp>
 800a178:	2800      	cmp	r0, #0
 800a17a:	da6a      	bge.n	800a252 <_dtoa_r+0x92a>
 800a17c:	2300      	movs	r3, #0
 800a17e:	4659      	mov	r1, fp
 800a180:	220a      	movs	r2, #10
 800a182:	4628      	mov	r0, r5
 800a184:	f000 fda8 	bl	800acd8 <__multadd>
 800a188:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a18a:	4683      	mov	fp, r0
 800a18c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a190:	2b00      	cmp	r3, #0
 800a192:	f000 8194 	beq.w	800a4be <_dtoa_r+0xb96>
 800a196:	4631      	mov	r1, r6
 800a198:	2300      	movs	r3, #0
 800a19a:	220a      	movs	r2, #10
 800a19c:	4628      	mov	r0, r5
 800a19e:	f000 fd9b 	bl	800acd8 <__multadd>
 800a1a2:	f1b9 0f00 	cmp.w	r9, #0
 800a1a6:	4606      	mov	r6, r0
 800a1a8:	f300 8093 	bgt.w	800a2d2 <_dtoa_r+0x9aa>
 800a1ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a1ae:	2b02      	cmp	r3, #2
 800a1b0:	dc57      	bgt.n	800a262 <_dtoa_r+0x93a>
 800a1b2:	e08e      	b.n	800a2d2 <_dtoa_r+0x9aa>
 800a1b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a1b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a1ba:	e757      	b.n	800a06c <_dtoa_r+0x744>
 800a1bc:	9b08      	ldr	r3, [sp, #32]
 800a1be:	1e5c      	subs	r4, r3, #1
 800a1c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1c2:	42a3      	cmp	r3, r4
 800a1c4:	bfb7      	itett	lt
 800a1c6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a1c8:	1b1c      	subge	r4, r3, r4
 800a1ca:	1ae2      	sublt	r2, r4, r3
 800a1cc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a1ce:	bfbe      	ittt	lt
 800a1d0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a1d2:	189b      	addlt	r3, r3, r2
 800a1d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a1d6:	9b08      	ldr	r3, [sp, #32]
 800a1d8:	bfb8      	it	lt
 800a1da:	2400      	movlt	r4, #0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	bfbb      	ittet	lt
 800a1e0:	9b06      	ldrlt	r3, [sp, #24]
 800a1e2:	9a08      	ldrlt	r2, [sp, #32]
 800a1e4:	9f06      	ldrge	r7, [sp, #24]
 800a1e6:	1a9f      	sublt	r7, r3, r2
 800a1e8:	bfac      	ite	ge
 800a1ea:	9b08      	ldrge	r3, [sp, #32]
 800a1ec:	2300      	movlt	r3, #0
 800a1ee:	e73f      	b.n	800a070 <_dtoa_r+0x748>
 800a1f0:	3fe00000 	.word	0x3fe00000
 800a1f4:	40240000 	.word	0x40240000
 800a1f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a1fa:	9f06      	ldr	r7, [sp, #24]
 800a1fc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a1fe:	e742      	b.n	800a086 <_dtoa_r+0x75e>
 800a200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a202:	e76b      	b.n	800a0dc <_dtoa_r+0x7b4>
 800a204:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a206:	2b01      	cmp	r3, #1
 800a208:	dc19      	bgt.n	800a23e <_dtoa_r+0x916>
 800a20a:	9b04      	ldr	r3, [sp, #16]
 800a20c:	b9bb      	cbnz	r3, 800a23e <_dtoa_r+0x916>
 800a20e:	9b05      	ldr	r3, [sp, #20]
 800a210:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a214:	b99b      	cbnz	r3, 800a23e <_dtoa_r+0x916>
 800a216:	9b05      	ldr	r3, [sp, #20]
 800a218:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a21c:	0d1b      	lsrs	r3, r3, #20
 800a21e:	051b      	lsls	r3, r3, #20
 800a220:	b183      	cbz	r3, 800a244 <_dtoa_r+0x91c>
 800a222:	f04f 0801 	mov.w	r8, #1
 800a226:	9b06      	ldr	r3, [sp, #24]
 800a228:	3301      	adds	r3, #1
 800a22a:	9306      	str	r3, [sp, #24]
 800a22c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a22e:	3301      	adds	r3, #1
 800a230:	9309      	str	r3, [sp, #36]	; 0x24
 800a232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a234:	2b00      	cmp	r3, #0
 800a236:	f47f af6a 	bne.w	800a10e <_dtoa_r+0x7e6>
 800a23a:	2001      	movs	r0, #1
 800a23c:	e76f      	b.n	800a11e <_dtoa_r+0x7f6>
 800a23e:	f04f 0800 	mov.w	r8, #0
 800a242:	e7f6      	b.n	800a232 <_dtoa_r+0x90a>
 800a244:	4698      	mov	r8, r3
 800a246:	e7f4      	b.n	800a232 <_dtoa_r+0x90a>
 800a248:	f43f af7d 	beq.w	800a146 <_dtoa_r+0x81e>
 800a24c:	4618      	mov	r0, r3
 800a24e:	301c      	adds	r0, #28
 800a250:	e772      	b.n	800a138 <_dtoa_r+0x810>
 800a252:	9b08      	ldr	r3, [sp, #32]
 800a254:	2b00      	cmp	r3, #0
 800a256:	dc36      	bgt.n	800a2c6 <_dtoa_r+0x99e>
 800a258:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a25a:	2b02      	cmp	r3, #2
 800a25c:	dd33      	ble.n	800a2c6 <_dtoa_r+0x99e>
 800a25e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a262:	f1b9 0f00 	cmp.w	r9, #0
 800a266:	d10d      	bne.n	800a284 <_dtoa_r+0x95c>
 800a268:	4621      	mov	r1, r4
 800a26a:	464b      	mov	r3, r9
 800a26c:	2205      	movs	r2, #5
 800a26e:	4628      	mov	r0, r5
 800a270:	f000 fd32 	bl	800acd8 <__multadd>
 800a274:	4601      	mov	r1, r0
 800a276:	4604      	mov	r4, r0
 800a278:	4658      	mov	r0, fp
 800a27a:	f000 ff93 	bl	800b1a4 <__mcmp>
 800a27e:	2800      	cmp	r0, #0
 800a280:	f73f adb8 	bgt.w	8009df4 <_dtoa_r+0x4cc>
 800a284:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a286:	9f03      	ldr	r7, [sp, #12]
 800a288:	ea6f 0a03 	mvn.w	sl, r3
 800a28c:	f04f 0800 	mov.w	r8, #0
 800a290:	4621      	mov	r1, r4
 800a292:	4628      	mov	r0, r5
 800a294:	f000 fcfe 	bl	800ac94 <_Bfree>
 800a298:	2e00      	cmp	r6, #0
 800a29a:	f43f aea7 	beq.w	8009fec <_dtoa_r+0x6c4>
 800a29e:	f1b8 0f00 	cmp.w	r8, #0
 800a2a2:	d005      	beq.n	800a2b0 <_dtoa_r+0x988>
 800a2a4:	45b0      	cmp	r8, r6
 800a2a6:	d003      	beq.n	800a2b0 <_dtoa_r+0x988>
 800a2a8:	4641      	mov	r1, r8
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	f000 fcf2 	bl	800ac94 <_Bfree>
 800a2b0:	4631      	mov	r1, r6
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	f000 fcee 	bl	800ac94 <_Bfree>
 800a2b8:	e698      	b.n	8009fec <_dtoa_r+0x6c4>
 800a2ba:	2400      	movs	r4, #0
 800a2bc:	4626      	mov	r6, r4
 800a2be:	e7e1      	b.n	800a284 <_dtoa_r+0x95c>
 800a2c0:	46c2      	mov	sl, r8
 800a2c2:	4626      	mov	r6, r4
 800a2c4:	e596      	b.n	8009df4 <_dtoa_r+0x4cc>
 800a2c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f000 80fd 	beq.w	800a4cc <_dtoa_r+0xba4>
 800a2d2:	2f00      	cmp	r7, #0
 800a2d4:	dd05      	ble.n	800a2e2 <_dtoa_r+0x9ba>
 800a2d6:	4631      	mov	r1, r6
 800a2d8:	463a      	mov	r2, r7
 800a2da:	4628      	mov	r0, r5
 800a2dc:	f000 fef2 	bl	800b0c4 <__lshift>
 800a2e0:	4606      	mov	r6, r0
 800a2e2:	f1b8 0f00 	cmp.w	r8, #0
 800a2e6:	d05c      	beq.n	800a3a2 <_dtoa_r+0xa7a>
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	6871      	ldr	r1, [r6, #4]
 800a2ec:	f000 fc92 	bl	800ac14 <_Balloc>
 800a2f0:	4607      	mov	r7, r0
 800a2f2:	b928      	cbnz	r0, 800a300 <_dtoa_r+0x9d8>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a2fa:	4b7f      	ldr	r3, [pc, #508]	; (800a4f8 <_dtoa_r+0xbd0>)
 800a2fc:	f7ff bb28 	b.w	8009950 <_dtoa_r+0x28>
 800a300:	6932      	ldr	r2, [r6, #16]
 800a302:	f106 010c 	add.w	r1, r6, #12
 800a306:	3202      	adds	r2, #2
 800a308:	0092      	lsls	r2, r2, #2
 800a30a:	300c      	adds	r0, #12
 800a30c:	f7fd fb74 	bl	80079f8 <memcpy>
 800a310:	2201      	movs	r2, #1
 800a312:	4639      	mov	r1, r7
 800a314:	4628      	mov	r0, r5
 800a316:	f000 fed5 	bl	800b0c4 <__lshift>
 800a31a:	46b0      	mov	r8, r6
 800a31c:	4606      	mov	r6, r0
 800a31e:	9b03      	ldr	r3, [sp, #12]
 800a320:	3301      	adds	r3, #1
 800a322:	9308      	str	r3, [sp, #32]
 800a324:	9b03      	ldr	r3, [sp, #12]
 800a326:	444b      	add	r3, r9
 800a328:	930a      	str	r3, [sp, #40]	; 0x28
 800a32a:	9b04      	ldr	r3, [sp, #16]
 800a32c:	f003 0301 	and.w	r3, r3, #1
 800a330:	9309      	str	r3, [sp, #36]	; 0x24
 800a332:	9b08      	ldr	r3, [sp, #32]
 800a334:	4621      	mov	r1, r4
 800a336:	3b01      	subs	r3, #1
 800a338:	4658      	mov	r0, fp
 800a33a:	9304      	str	r3, [sp, #16]
 800a33c:	f7ff fa68 	bl	8009810 <quorem>
 800a340:	4603      	mov	r3, r0
 800a342:	4641      	mov	r1, r8
 800a344:	3330      	adds	r3, #48	; 0x30
 800a346:	9006      	str	r0, [sp, #24]
 800a348:	4658      	mov	r0, fp
 800a34a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a34c:	f000 ff2a 	bl	800b1a4 <__mcmp>
 800a350:	4632      	mov	r2, r6
 800a352:	4681      	mov	r9, r0
 800a354:	4621      	mov	r1, r4
 800a356:	4628      	mov	r0, r5
 800a358:	f000 ff40 	bl	800b1dc <__mdiff>
 800a35c:	68c2      	ldr	r2, [r0, #12]
 800a35e:	4607      	mov	r7, r0
 800a360:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a362:	bb02      	cbnz	r2, 800a3a6 <_dtoa_r+0xa7e>
 800a364:	4601      	mov	r1, r0
 800a366:	4658      	mov	r0, fp
 800a368:	f000 ff1c 	bl	800b1a4 <__mcmp>
 800a36c:	4602      	mov	r2, r0
 800a36e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a370:	4639      	mov	r1, r7
 800a372:	4628      	mov	r0, r5
 800a374:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a378:	f000 fc8c 	bl	800ac94 <_Bfree>
 800a37c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a37e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a380:	9f08      	ldr	r7, [sp, #32]
 800a382:	ea43 0102 	orr.w	r1, r3, r2
 800a386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a388:	430b      	orrs	r3, r1
 800a38a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a38c:	d10d      	bne.n	800a3aa <_dtoa_r+0xa82>
 800a38e:	2b39      	cmp	r3, #57	; 0x39
 800a390:	d029      	beq.n	800a3e6 <_dtoa_r+0xabe>
 800a392:	f1b9 0f00 	cmp.w	r9, #0
 800a396:	dd01      	ble.n	800a39c <_dtoa_r+0xa74>
 800a398:	9b06      	ldr	r3, [sp, #24]
 800a39a:	3331      	adds	r3, #49	; 0x31
 800a39c:	9a04      	ldr	r2, [sp, #16]
 800a39e:	7013      	strb	r3, [r2, #0]
 800a3a0:	e776      	b.n	800a290 <_dtoa_r+0x968>
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	e7b9      	b.n	800a31a <_dtoa_r+0x9f2>
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	e7e2      	b.n	800a370 <_dtoa_r+0xa48>
 800a3aa:	f1b9 0f00 	cmp.w	r9, #0
 800a3ae:	db06      	blt.n	800a3be <_dtoa_r+0xa96>
 800a3b0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a3b2:	ea41 0909 	orr.w	r9, r1, r9
 800a3b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3b8:	ea59 0101 	orrs.w	r1, r9, r1
 800a3bc:	d120      	bne.n	800a400 <_dtoa_r+0xad8>
 800a3be:	2a00      	cmp	r2, #0
 800a3c0:	ddec      	ble.n	800a39c <_dtoa_r+0xa74>
 800a3c2:	4659      	mov	r1, fp
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	9308      	str	r3, [sp, #32]
 800a3ca:	f000 fe7b 	bl	800b0c4 <__lshift>
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	4683      	mov	fp, r0
 800a3d2:	f000 fee7 	bl	800b1a4 <__mcmp>
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	9b08      	ldr	r3, [sp, #32]
 800a3da:	dc02      	bgt.n	800a3e2 <_dtoa_r+0xaba>
 800a3dc:	d1de      	bne.n	800a39c <_dtoa_r+0xa74>
 800a3de:	07da      	lsls	r2, r3, #31
 800a3e0:	d5dc      	bpl.n	800a39c <_dtoa_r+0xa74>
 800a3e2:	2b39      	cmp	r3, #57	; 0x39
 800a3e4:	d1d8      	bne.n	800a398 <_dtoa_r+0xa70>
 800a3e6:	2339      	movs	r3, #57	; 0x39
 800a3e8:	9a04      	ldr	r2, [sp, #16]
 800a3ea:	7013      	strb	r3, [r2, #0]
 800a3ec:	463b      	mov	r3, r7
 800a3ee:	461f      	mov	r7, r3
 800a3f0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	2a39      	cmp	r2, #57	; 0x39
 800a3f8:	d050      	beq.n	800a49c <_dtoa_r+0xb74>
 800a3fa:	3201      	adds	r2, #1
 800a3fc:	701a      	strb	r2, [r3, #0]
 800a3fe:	e747      	b.n	800a290 <_dtoa_r+0x968>
 800a400:	2a00      	cmp	r2, #0
 800a402:	dd03      	ble.n	800a40c <_dtoa_r+0xae4>
 800a404:	2b39      	cmp	r3, #57	; 0x39
 800a406:	d0ee      	beq.n	800a3e6 <_dtoa_r+0xabe>
 800a408:	3301      	adds	r3, #1
 800a40a:	e7c7      	b.n	800a39c <_dtoa_r+0xa74>
 800a40c:	9a08      	ldr	r2, [sp, #32]
 800a40e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a410:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a414:	428a      	cmp	r2, r1
 800a416:	d02a      	beq.n	800a46e <_dtoa_r+0xb46>
 800a418:	4659      	mov	r1, fp
 800a41a:	2300      	movs	r3, #0
 800a41c:	220a      	movs	r2, #10
 800a41e:	4628      	mov	r0, r5
 800a420:	f000 fc5a 	bl	800acd8 <__multadd>
 800a424:	45b0      	cmp	r8, r6
 800a426:	4683      	mov	fp, r0
 800a428:	f04f 0300 	mov.w	r3, #0
 800a42c:	f04f 020a 	mov.w	r2, #10
 800a430:	4641      	mov	r1, r8
 800a432:	4628      	mov	r0, r5
 800a434:	d107      	bne.n	800a446 <_dtoa_r+0xb1e>
 800a436:	f000 fc4f 	bl	800acd8 <__multadd>
 800a43a:	4680      	mov	r8, r0
 800a43c:	4606      	mov	r6, r0
 800a43e:	9b08      	ldr	r3, [sp, #32]
 800a440:	3301      	adds	r3, #1
 800a442:	9308      	str	r3, [sp, #32]
 800a444:	e775      	b.n	800a332 <_dtoa_r+0xa0a>
 800a446:	f000 fc47 	bl	800acd8 <__multadd>
 800a44a:	4631      	mov	r1, r6
 800a44c:	4680      	mov	r8, r0
 800a44e:	2300      	movs	r3, #0
 800a450:	220a      	movs	r2, #10
 800a452:	4628      	mov	r0, r5
 800a454:	f000 fc40 	bl	800acd8 <__multadd>
 800a458:	4606      	mov	r6, r0
 800a45a:	e7f0      	b.n	800a43e <_dtoa_r+0xb16>
 800a45c:	f1b9 0f00 	cmp.w	r9, #0
 800a460:	bfcc      	ite	gt
 800a462:	464f      	movgt	r7, r9
 800a464:	2701      	movle	r7, #1
 800a466:	f04f 0800 	mov.w	r8, #0
 800a46a:	9a03      	ldr	r2, [sp, #12]
 800a46c:	4417      	add	r7, r2
 800a46e:	4659      	mov	r1, fp
 800a470:	2201      	movs	r2, #1
 800a472:	4628      	mov	r0, r5
 800a474:	9308      	str	r3, [sp, #32]
 800a476:	f000 fe25 	bl	800b0c4 <__lshift>
 800a47a:	4621      	mov	r1, r4
 800a47c:	4683      	mov	fp, r0
 800a47e:	f000 fe91 	bl	800b1a4 <__mcmp>
 800a482:	2800      	cmp	r0, #0
 800a484:	dcb2      	bgt.n	800a3ec <_dtoa_r+0xac4>
 800a486:	d102      	bne.n	800a48e <_dtoa_r+0xb66>
 800a488:	9b08      	ldr	r3, [sp, #32]
 800a48a:	07db      	lsls	r3, r3, #31
 800a48c:	d4ae      	bmi.n	800a3ec <_dtoa_r+0xac4>
 800a48e:	463b      	mov	r3, r7
 800a490:	461f      	mov	r7, r3
 800a492:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a496:	2a30      	cmp	r2, #48	; 0x30
 800a498:	d0fa      	beq.n	800a490 <_dtoa_r+0xb68>
 800a49a:	e6f9      	b.n	800a290 <_dtoa_r+0x968>
 800a49c:	9a03      	ldr	r2, [sp, #12]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d1a5      	bne.n	800a3ee <_dtoa_r+0xac6>
 800a4a2:	2331      	movs	r3, #49	; 0x31
 800a4a4:	f10a 0a01 	add.w	sl, sl, #1
 800a4a8:	e779      	b.n	800a39e <_dtoa_r+0xa76>
 800a4aa:	4b14      	ldr	r3, [pc, #80]	; (800a4fc <_dtoa_r+0xbd4>)
 800a4ac:	f7ff baa8 	b.w	8009a00 <_dtoa_r+0xd8>
 800a4b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	f47f aa81 	bne.w	80099ba <_dtoa_r+0x92>
 800a4b8:	4b11      	ldr	r3, [pc, #68]	; (800a500 <_dtoa_r+0xbd8>)
 800a4ba:	f7ff baa1 	b.w	8009a00 <_dtoa_r+0xd8>
 800a4be:	f1b9 0f00 	cmp.w	r9, #0
 800a4c2:	dc03      	bgt.n	800a4cc <_dtoa_r+0xba4>
 800a4c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a4c6:	2b02      	cmp	r3, #2
 800a4c8:	f73f aecb 	bgt.w	800a262 <_dtoa_r+0x93a>
 800a4cc:	9f03      	ldr	r7, [sp, #12]
 800a4ce:	4621      	mov	r1, r4
 800a4d0:	4658      	mov	r0, fp
 800a4d2:	f7ff f99d 	bl	8009810 <quorem>
 800a4d6:	9a03      	ldr	r2, [sp, #12]
 800a4d8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a4dc:	f807 3b01 	strb.w	r3, [r7], #1
 800a4e0:	1aba      	subs	r2, r7, r2
 800a4e2:	4591      	cmp	r9, r2
 800a4e4:	ddba      	ble.n	800a45c <_dtoa_r+0xb34>
 800a4e6:	4659      	mov	r1, fp
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	220a      	movs	r2, #10
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	f000 fbf3 	bl	800acd8 <__multadd>
 800a4f2:	4683      	mov	fp, r0
 800a4f4:	e7eb      	b.n	800a4ce <_dtoa_r+0xba6>
 800a4f6:	bf00      	nop
 800a4f8:	0800c770 	.word	0x0800c770
 800a4fc:	0800c574 	.word	0x0800c574
 800a500:	0800c6f1 	.word	0x0800c6f1

0800a504 <rshift>:
 800a504:	6903      	ldr	r3, [r0, #16]
 800a506:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a50a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a50e:	f100 0414 	add.w	r4, r0, #20
 800a512:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a516:	dd46      	ble.n	800a5a6 <rshift+0xa2>
 800a518:	f011 011f 	ands.w	r1, r1, #31
 800a51c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a520:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a524:	d10c      	bne.n	800a540 <rshift+0x3c>
 800a526:	4629      	mov	r1, r5
 800a528:	f100 0710 	add.w	r7, r0, #16
 800a52c:	42b1      	cmp	r1, r6
 800a52e:	d335      	bcc.n	800a59c <rshift+0x98>
 800a530:	1a9b      	subs	r3, r3, r2
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	1eea      	subs	r2, r5, #3
 800a536:	4296      	cmp	r6, r2
 800a538:	bf38      	it	cc
 800a53a:	2300      	movcc	r3, #0
 800a53c:	4423      	add	r3, r4
 800a53e:	e015      	b.n	800a56c <rshift+0x68>
 800a540:	46a1      	mov	r9, r4
 800a542:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a546:	f1c1 0820 	rsb	r8, r1, #32
 800a54a:	40cf      	lsrs	r7, r1
 800a54c:	f105 0e04 	add.w	lr, r5, #4
 800a550:	4576      	cmp	r6, lr
 800a552:	46f4      	mov	ip, lr
 800a554:	d816      	bhi.n	800a584 <rshift+0x80>
 800a556:	1a9a      	subs	r2, r3, r2
 800a558:	0092      	lsls	r2, r2, #2
 800a55a:	3a04      	subs	r2, #4
 800a55c:	3501      	adds	r5, #1
 800a55e:	42ae      	cmp	r6, r5
 800a560:	bf38      	it	cc
 800a562:	2200      	movcc	r2, #0
 800a564:	18a3      	adds	r3, r4, r2
 800a566:	50a7      	str	r7, [r4, r2]
 800a568:	b107      	cbz	r7, 800a56c <rshift+0x68>
 800a56a:	3304      	adds	r3, #4
 800a56c:	42a3      	cmp	r3, r4
 800a56e:	eba3 0204 	sub.w	r2, r3, r4
 800a572:	bf08      	it	eq
 800a574:	2300      	moveq	r3, #0
 800a576:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a57a:	6102      	str	r2, [r0, #16]
 800a57c:	bf08      	it	eq
 800a57e:	6143      	streq	r3, [r0, #20]
 800a580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a584:	f8dc c000 	ldr.w	ip, [ip]
 800a588:	fa0c fc08 	lsl.w	ip, ip, r8
 800a58c:	ea4c 0707 	orr.w	r7, ip, r7
 800a590:	f849 7b04 	str.w	r7, [r9], #4
 800a594:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a598:	40cf      	lsrs	r7, r1
 800a59a:	e7d9      	b.n	800a550 <rshift+0x4c>
 800a59c:	f851 cb04 	ldr.w	ip, [r1], #4
 800a5a0:	f847 cf04 	str.w	ip, [r7, #4]!
 800a5a4:	e7c2      	b.n	800a52c <rshift+0x28>
 800a5a6:	4623      	mov	r3, r4
 800a5a8:	e7e0      	b.n	800a56c <rshift+0x68>

0800a5aa <__hexdig_fun>:
 800a5aa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a5ae:	2b09      	cmp	r3, #9
 800a5b0:	d802      	bhi.n	800a5b8 <__hexdig_fun+0xe>
 800a5b2:	3820      	subs	r0, #32
 800a5b4:	b2c0      	uxtb	r0, r0
 800a5b6:	4770      	bx	lr
 800a5b8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a5bc:	2b05      	cmp	r3, #5
 800a5be:	d801      	bhi.n	800a5c4 <__hexdig_fun+0x1a>
 800a5c0:	3847      	subs	r0, #71	; 0x47
 800a5c2:	e7f7      	b.n	800a5b4 <__hexdig_fun+0xa>
 800a5c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a5c8:	2b05      	cmp	r3, #5
 800a5ca:	d801      	bhi.n	800a5d0 <__hexdig_fun+0x26>
 800a5cc:	3827      	subs	r0, #39	; 0x27
 800a5ce:	e7f1      	b.n	800a5b4 <__hexdig_fun+0xa>
 800a5d0:	2000      	movs	r0, #0
 800a5d2:	4770      	bx	lr

0800a5d4 <__gethex>:
 800a5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d8:	b08b      	sub	sp, #44	; 0x2c
 800a5da:	9305      	str	r3, [sp, #20]
 800a5dc:	4bb2      	ldr	r3, [pc, #712]	; (800a8a8 <__gethex+0x2d4>)
 800a5de:	9002      	str	r0, [sp, #8]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	468b      	mov	fp, r1
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	4690      	mov	r8, r2
 800a5e8:	9303      	str	r3, [sp, #12]
 800a5ea:	f7f5 fdb1 	bl	8000150 <strlen>
 800a5ee:	4682      	mov	sl, r0
 800a5f0:	9b03      	ldr	r3, [sp, #12]
 800a5f2:	f8db 2000 	ldr.w	r2, [fp]
 800a5f6:	4403      	add	r3, r0
 800a5f8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a5fc:	9306      	str	r3, [sp, #24]
 800a5fe:	1c93      	adds	r3, r2, #2
 800a600:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a604:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a608:	32fe      	adds	r2, #254	; 0xfe
 800a60a:	18d1      	adds	r1, r2, r3
 800a60c:	461f      	mov	r7, r3
 800a60e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a612:	9101      	str	r1, [sp, #4]
 800a614:	2830      	cmp	r0, #48	; 0x30
 800a616:	d0f8      	beq.n	800a60a <__gethex+0x36>
 800a618:	f7ff ffc7 	bl	800a5aa <__hexdig_fun>
 800a61c:	4604      	mov	r4, r0
 800a61e:	2800      	cmp	r0, #0
 800a620:	d13a      	bne.n	800a698 <__gethex+0xc4>
 800a622:	4652      	mov	r2, sl
 800a624:	4638      	mov	r0, r7
 800a626:	9903      	ldr	r1, [sp, #12]
 800a628:	f001 f922 	bl	800b870 <strncmp>
 800a62c:	4605      	mov	r5, r0
 800a62e:	2800      	cmp	r0, #0
 800a630:	d166      	bne.n	800a700 <__gethex+0x12c>
 800a632:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a636:	eb07 060a 	add.w	r6, r7, sl
 800a63a:	f7ff ffb6 	bl	800a5aa <__hexdig_fun>
 800a63e:	2800      	cmp	r0, #0
 800a640:	d060      	beq.n	800a704 <__gethex+0x130>
 800a642:	4633      	mov	r3, r6
 800a644:	7818      	ldrb	r0, [r3, #0]
 800a646:	461f      	mov	r7, r3
 800a648:	2830      	cmp	r0, #48	; 0x30
 800a64a:	f103 0301 	add.w	r3, r3, #1
 800a64e:	d0f9      	beq.n	800a644 <__gethex+0x70>
 800a650:	f7ff ffab 	bl	800a5aa <__hexdig_fun>
 800a654:	2301      	movs	r3, #1
 800a656:	fab0 f480 	clz	r4, r0
 800a65a:	4635      	mov	r5, r6
 800a65c:	0964      	lsrs	r4, r4, #5
 800a65e:	9301      	str	r3, [sp, #4]
 800a660:	463a      	mov	r2, r7
 800a662:	4616      	mov	r6, r2
 800a664:	7830      	ldrb	r0, [r6, #0]
 800a666:	3201      	adds	r2, #1
 800a668:	f7ff ff9f 	bl	800a5aa <__hexdig_fun>
 800a66c:	2800      	cmp	r0, #0
 800a66e:	d1f8      	bne.n	800a662 <__gethex+0x8e>
 800a670:	4652      	mov	r2, sl
 800a672:	4630      	mov	r0, r6
 800a674:	9903      	ldr	r1, [sp, #12]
 800a676:	f001 f8fb 	bl	800b870 <strncmp>
 800a67a:	b980      	cbnz	r0, 800a69e <__gethex+0xca>
 800a67c:	b94d      	cbnz	r5, 800a692 <__gethex+0xbe>
 800a67e:	eb06 050a 	add.w	r5, r6, sl
 800a682:	462a      	mov	r2, r5
 800a684:	4616      	mov	r6, r2
 800a686:	7830      	ldrb	r0, [r6, #0]
 800a688:	3201      	adds	r2, #1
 800a68a:	f7ff ff8e 	bl	800a5aa <__hexdig_fun>
 800a68e:	2800      	cmp	r0, #0
 800a690:	d1f8      	bne.n	800a684 <__gethex+0xb0>
 800a692:	1bad      	subs	r5, r5, r6
 800a694:	00ad      	lsls	r5, r5, #2
 800a696:	e004      	b.n	800a6a2 <__gethex+0xce>
 800a698:	2400      	movs	r4, #0
 800a69a:	4625      	mov	r5, r4
 800a69c:	e7e0      	b.n	800a660 <__gethex+0x8c>
 800a69e:	2d00      	cmp	r5, #0
 800a6a0:	d1f7      	bne.n	800a692 <__gethex+0xbe>
 800a6a2:	7833      	ldrb	r3, [r6, #0]
 800a6a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a6a8:	2b50      	cmp	r3, #80	; 0x50
 800a6aa:	d139      	bne.n	800a720 <__gethex+0x14c>
 800a6ac:	7873      	ldrb	r3, [r6, #1]
 800a6ae:	2b2b      	cmp	r3, #43	; 0x2b
 800a6b0:	d02a      	beq.n	800a708 <__gethex+0x134>
 800a6b2:	2b2d      	cmp	r3, #45	; 0x2d
 800a6b4:	d02c      	beq.n	800a710 <__gethex+0x13c>
 800a6b6:	f04f 0900 	mov.w	r9, #0
 800a6ba:	1c71      	adds	r1, r6, #1
 800a6bc:	7808      	ldrb	r0, [r1, #0]
 800a6be:	f7ff ff74 	bl	800a5aa <__hexdig_fun>
 800a6c2:	1e43      	subs	r3, r0, #1
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	2b18      	cmp	r3, #24
 800a6c8:	d82a      	bhi.n	800a720 <__gethex+0x14c>
 800a6ca:	f1a0 0210 	sub.w	r2, r0, #16
 800a6ce:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a6d2:	f7ff ff6a 	bl	800a5aa <__hexdig_fun>
 800a6d6:	1e43      	subs	r3, r0, #1
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	2b18      	cmp	r3, #24
 800a6dc:	d91b      	bls.n	800a716 <__gethex+0x142>
 800a6de:	f1b9 0f00 	cmp.w	r9, #0
 800a6e2:	d000      	beq.n	800a6e6 <__gethex+0x112>
 800a6e4:	4252      	negs	r2, r2
 800a6e6:	4415      	add	r5, r2
 800a6e8:	f8cb 1000 	str.w	r1, [fp]
 800a6ec:	b1d4      	cbz	r4, 800a724 <__gethex+0x150>
 800a6ee:	9b01      	ldr	r3, [sp, #4]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	bf14      	ite	ne
 800a6f4:	2700      	movne	r7, #0
 800a6f6:	2706      	moveq	r7, #6
 800a6f8:	4638      	mov	r0, r7
 800a6fa:	b00b      	add	sp, #44	; 0x2c
 800a6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a700:	463e      	mov	r6, r7
 800a702:	4625      	mov	r5, r4
 800a704:	2401      	movs	r4, #1
 800a706:	e7cc      	b.n	800a6a2 <__gethex+0xce>
 800a708:	f04f 0900 	mov.w	r9, #0
 800a70c:	1cb1      	adds	r1, r6, #2
 800a70e:	e7d5      	b.n	800a6bc <__gethex+0xe8>
 800a710:	f04f 0901 	mov.w	r9, #1
 800a714:	e7fa      	b.n	800a70c <__gethex+0x138>
 800a716:	230a      	movs	r3, #10
 800a718:	fb03 0202 	mla	r2, r3, r2, r0
 800a71c:	3a10      	subs	r2, #16
 800a71e:	e7d6      	b.n	800a6ce <__gethex+0xfa>
 800a720:	4631      	mov	r1, r6
 800a722:	e7e1      	b.n	800a6e8 <__gethex+0x114>
 800a724:	4621      	mov	r1, r4
 800a726:	1bf3      	subs	r3, r6, r7
 800a728:	3b01      	subs	r3, #1
 800a72a:	2b07      	cmp	r3, #7
 800a72c:	dc0a      	bgt.n	800a744 <__gethex+0x170>
 800a72e:	9802      	ldr	r0, [sp, #8]
 800a730:	f000 fa70 	bl	800ac14 <_Balloc>
 800a734:	4604      	mov	r4, r0
 800a736:	b940      	cbnz	r0, 800a74a <__gethex+0x176>
 800a738:	4602      	mov	r2, r0
 800a73a:	21de      	movs	r1, #222	; 0xde
 800a73c:	4b5b      	ldr	r3, [pc, #364]	; (800a8ac <__gethex+0x2d8>)
 800a73e:	485c      	ldr	r0, [pc, #368]	; (800a8b0 <__gethex+0x2dc>)
 800a740:	f001 f8b8 	bl	800b8b4 <__assert_func>
 800a744:	3101      	adds	r1, #1
 800a746:	105b      	asrs	r3, r3, #1
 800a748:	e7ef      	b.n	800a72a <__gethex+0x156>
 800a74a:	f04f 0b00 	mov.w	fp, #0
 800a74e:	f100 0914 	add.w	r9, r0, #20
 800a752:	f1ca 0301 	rsb	r3, sl, #1
 800a756:	f8cd 9010 	str.w	r9, [sp, #16]
 800a75a:	f8cd b004 	str.w	fp, [sp, #4]
 800a75e:	9308      	str	r3, [sp, #32]
 800a760:	42b7      	cmp	r7, r6
 800a762:	d33f      	bcc.n	800a7e4 <__gethex+0x210>
 800a764:	9f04      	ldr	r7, [sp, #16]
 800a766:	9b01      	ldr	r3, [sp, #4]
 800a768:	f847 3b04 	str.w	r3, [r7], #4
 800a76c:	eba7 0709 	sub.w	r7, r7, r9
 800a770:	10bf      	asrs	r7, r7, #2
 800a772:	6127      	str	r7, [r4, #16]
 800a774:	4618      	mov	r0, r3
 800a776:	f000 fb3f 	bl	800adf8 <__hi0bits>
 800a77a:	017f      	lsls	r7, r7, #5
 800a77c:	f8d8 6000 	ldr.w	r6, [r8]
 800a780:	1a3f      	subs	r7, r7, r0
 800a782:	42b7      	cmp	r7, r6
 800a784:	dd62      	ble.n	800a84c <__gethex+0x278>
 800a786:	1bbf      	subs	r7, r7, r6
 800a788:	4639      	mov	r1, r7
 800a78a:	4620      	mov	r0, r4
 800a78c:	f000 fed9 	bl	800b542 <__any_on>
 800a790:	4682      	mov	sl, r0
 800a792:	b1a8      	cbz	r0, 800a7c0 <__gethex+0x1ec>
 800a794:	f04f 0a01 	mov.w	sl, #1
 800a798:	1e7b      	subs	r3, r7, #1
 800a79a:	1159      	asrs	r1, r3, #5
 800a79c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a7a0:	f003 021f 	and.w	r2, r3, #31
 800a7a4:	fa0a f202 	lsl.w	r2, sl, r2
 800a7a8:	420a      	tst	r2, r1
 800a7aa:	d009      	beq.n	800a7c0 <__gethex+0x1ec>
 800a7ac:	4553      	cmp	r3, sl
 800a7ae:	dd05      	ble.n	800a7bc <__gethex+0x1e8>
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	1eb9      	subs	r1, r7, #2
 800a7b4:	f000 fec5 	bl	800b542 <__any_on>
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	d144      	bne.n	800a846 <__gethex+0x272>
 800a7bc:	f04f 0a02 	mov.w	sl, #2
 800a7c0:	4639      	mov	r1, r7
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f7ff fe9e 	bl	800a504 <rshift>
 800a7c8:	443d      	add	r5, r7
 800a7ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a7ce:	42ab      	cmp	r3, r5
 800a7d0:	da4a      	bge.n	800a868 <__gethex+0x294>
 800a7d2:	4621      	mov	r1, r4
 800a7d4:	9802      	ldr	r0, [sp, #8]
 800a7d6:	f000 fa5d 	bl	800ac94 <_Bfree>
 800a7da:	2300      	movs	r3, #0
 800a7dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7de:	27a3      	movs	r7, #163	; 0xa3
 800a7e0:	6013      	str	r3, [r2, #0]
 800a7e2:	e789      	b.n	800a6f8 <__gethex+0x124>
 800a7e4:	1e73      	subs	r3, r6, #1
 800a7e6:	9a06      	ldr	r2, [sp, #24]
 800a7e8:	9307      	str	r3, [sp, #28]
 800a7ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d019      	beq.n	800a826 <__gethex+0x252>
 800a7f2:	f1bb 0f20 	cmp.w	fp, #32
 800a7f6:	d107      	bne.n	800a808 <__gethex+0x234>
 800a7f8:	9b04      	ldr	r3, [sp, #16]
 800a7fa:	9a01      	ldr	r2, [sp, #4]
 800a7fc:	f843 2b04 	str.w	r2, [r3], #4
 800a800:	9304      	str	r3, [sp, #16]
 800a802:	2300      	movs	r3, #0
 800a804:	469b      	mov	fp, r3
 800a806:	9301      	str	r3, [sp, #4]
 800a808:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a80c:	f7ff fecd 	bl	800a5aa <__hexdig_fun>
 800a810:	9b01      	ldr	r3, [sp, #4]
 800a812:	f000 000f 	and.w	r0, r0, #15
 800a816:	fa00 f00b 	lsl.w	r0, r0, fp
 800a81a:	4303      	orrs	r3, r0
 800a81c:	9301      	str	r3, [sp, #4]
 800a81e:	f10b 0b04 	add.w	fp, fp, #4
 800a822:	9b07      	ldr	r3, [sp, #28]
 800a824:	e00d      	b.n	800a842 <__gethex+0x26e>
 800a826:	9a08      	ldr	r2, [sp, #32]
 800a828:	1e73      	subs	r3, r6, #1
 800a82a:	4413      	add	r3, r2
 800a82c:	42bb      	cmp	r3, r7
 800a82e:	d3e0      	bcc.n	800a7f2 <__gethex+0x21e>
 800a830:	4618      	mov	r0, r3
 800a832:	4652      	mov	r2, sl
 800a834:	9903      	ldr	r1, [sp, #12]
 800a836:	9309      	str	r3, [sp, #36]	; 0x24
 800a838:	f001 f81a 	bl	800b870 <strncmp>
 800a83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a83e:	2800      	cmp	r0, #0
 800a840:	d1d7      	bne.n	800a7f2 <__gethex+0x21e>
 800a842:	461e      	mov	r6, r3
 800a844:	e78c      	b.n	800a760 <__gethex+0x18c>
 800a846:	f04f 0a03 	mov.w	sl, #3
 800a84a:	e7b9      	b.n	800a7c0 <__gethex+0x1ec>
 800a84c:	da09      	bge.n	800a862 <__gethex+0x28e>
 800a84e:	1bf7      	subs	r7, r6, r7
 800a850:	4621      	mov	r1, r4
 800a852:	463a      	mov	r2, r7
 800a854:	9802      	ldr	r0, [sp, #8]
 800a856:	f000 fc35 	bl	800b0c4 <__lshift>
 800a85a:	4604      	mov	r4, r0
 800a85c:	1bed      	subs	r5, r5, r7
 800a85e:	f100 0914 	add.w	r9, r0, #20
 800a862:	f04f 0a00 	mov.w	sl, #0
 800a866:	e7b0      	b.n	800a7ca <__gethex+0x1f6>
 800a868:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a86c:	42a8      	cmp	r0, r5
 800a86e:	dd72      	ble.n	800a956 <__gethex+0x382>
 800a870:	1b45      	subs	r5, r0, r5
 800a872:	42ae      	cmp	r6, r5
 800a874:	dc35      	bgt.n	800a8e2 <__gethex+0x30e>
 800a876:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a87a:	2b02      	cmp	r3, #2
 800a87c:	d029      	beq.n	800a8d2 <__gethex+0x2fe>
 800a87e:	2b03      	cmp	r3, #3
 800a880:	d02b      	beq.n	800a8da <__gethex+0x306>
 800a882:	2b01      	cmp	r3, #1
 800a884:	d11c      	bne.n	800a8c0 <__gethex+0x2ec>
 800a886:	42ae      	cmp	r6, r5
 800a888:	d11a      	bne.n	800a8c0 <__gethex+0x2ec>
 800a88a:	2e01      	cmp	r6, #1
 800a88c:	d112      	bne.n	800a8b4 <__gethex+0x2e0>
 800a88e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a892:	9a05      	ldr	r2, [sp, #20]
 800a894:	2762      	movs	r7, #98	; 0x62
 800a896:	6013      	str	r3, [r2, #0]
 800a898:	2301      	movs	r3, #1
 800a89a:	6123      	str	r3, [r4, #16]
 800a89c:	f8c9 3000 	str.w	r3, [r9]
 800a8a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8a2:	601c      	str	r4, [r3, #0]
 800a8a4:	e728      	b.n	800a6f8 <__gethex+0x124>
 800a8a6:	bf00      	nop
 800a8a8:	0800c7e8 	.word	0x0800c7e8
 800a8ac:	0800c770 	.word	0x0800c770
 800a8b0:	0800c781 	.word	0x0800c781
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	1e71      	subs	r1, r6, #1
 800a8b8:	f000 fe43 	bl	800b542 <__any_on>
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	d1e6      	bne.n	800a88e <__gethex+0x2ba>
 800a8c0:	4621      	mov	r1, r4
 800a8c2:	9802      	ldr	r0, [sp, #8]
 800a8c4:	f000 f9e6 	bl	800ac94 <_Bfree>
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a8cc:	2750      	movs	r7, #80	; 0x50
 800a8ce:	6013      	str	r3, [r2, #0]
 800a8d0:	e712      	b.n	800a6f8 <__gethex+0x124>
 800a8d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d1f3      	bne.n	800a8c0 <__gethex+0x2ec>
 800a8d8:	e7d9      	b.n	800a88e <__gethex+0x2ba>
 800a8da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d1d6      	bne.n	800a88e <__gethex+0x2ba>
 800a8e0:	e7ee      	b.n	800a8c0 <__gethex+0x2ec>
 800a8e2:	1e6f      	subs	r7, r5, #1
 800a8e4:	f1ba 0f00 	cmp.w	sl, #0
 800a8e8:	d132      	bne.n	800a950 <__gethex+0x37c>
 800a8ea:	b127      	cbz	r7, 800a8f6 <__gethex+0x322>
 800a8ec:	4639      	mov	r1, r7
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	f000 fe27 	bl	800b542 <__any_on>
 800a8f4:	4682      	mov	sl, r0
 800a8f6:	2101      	movs	r1, #1
 800a8f8:	117b      	asrs	r3, r7, #5
 800a8fa:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a8fe:	f007 071f 	and.w	r7, r7, #31
 800a902:	fa01 f707 	lsl.w	r7, r1, r7
 800a906:	421f      	tst	r7, r3
 800a908:	f04f 0702 	mov.w	r7, #2
 800a90c:	4629      	mov	r1, r5
 800a90e:	4620      	mov	r0, r4
 800a910:	bf18      	it	ne
 800a912:	f04a 0a02 	orrne.w	sl, sl, #2
 800a916:	1b76      	subs	r6, r6, r5
 800a918:	f7ff fdf4 	bl	800a504 <rshift>
 800a91c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a920:	f1ba 0f00 	cmp.w	sl, #0
 800a924:	d048      	beq.n	800a9b8 <__gethex+0x3e4>
 800a926:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	d015      	beq.n	800a95a <__gethex+0x386>
 800a92e:	2b03      	cmp	r3, #3
 800a930:	d017      	beq.n	800a962 <__gethex+0x38e>
 800a932:	2b01      	cmp	r3, #1
 800a934:	d109      	bne.n	800a94a <__gethex+0x376>
 800a936:	f01a 0f02 	tst.w	sl, #2
 800a93a:	d006      	beq.n	800a94a <__gethex+0x376>
 800a93c:	f8d9 0000 	ldr.w	r0, [r9]
 800a940:	ea4a 0a00 	orr.w	sl, sl, r0
 800a944:	f01a 0f01 	tst.w	sl, #1
 800a948:	d10e      	bne.n	800a968 <__gethex+0x394>
 800a94a:	f047 0710 	orr.w	r7, r7, #16
 800a94e:	e033      	b.n	800a9b8 <__gethex+0x3e4>
 800a950:	f04f 0a01 	mov.w	sl, #1
 800a954:	e7cf      	b.n	800a8f6 <__gethex+0x322>
 800a956:	2701      	movs	r7, #1
 800a958:	e7e2      	b.n	800a920 <__gethex+0x34c>
 800a95a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a95c:	f1c3 0301 	rsb	r3, r3, #1
 800a960:	9315      	str	r3, [sp, #84]	; 0x54
 800a962:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a964:	2b00      	cmp	r3, #0
 800a966:	d0f0      	beq.n	800a94a <__gethex+0x376>
 800a968:	f04f 0c00 	mov.w	ip, #0
 800a96c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a970:	f104 0314 	add.w	r3, r4, #20
 800a974:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a978:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a97c:	4618      	mov	r0, r3
 800a97e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a982:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a986:	d01c      	beq.n	800a9c2 <__gethex+0x3ee>
 800a988:	3201      	adds	r2, #1
 800a98a:	6002      	str	r2, [r0, #0]
 800a98c:	2f02      	cmp	r7, #2
 800a98e:	f104 0314 	add.w	r3, r4, #20
 800a992:	d13d      	bne.n	800aa10 <__gethex+0x43c>
 800a994:	f8d8 2000 	ldr.w	r2, [r8]
 800a998:	3a01      	subs	r2, #1
 800a99a:	42b2      	cmp	r2, r6
 800a99c:	d10a      	bne.n	800a9b4 <__gethex+0x3e0>
 800a99e:	2201      	movs	r2, #1
 800a9a0:	1171      	asrs	r1, r6, #5
 800a9a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a9a6:	f006 061f 	and.w	r6, r6, #31
 800a9aa:	fa02 f606 	lsl.w	r6, r2, r6
 800a9ae:	421e      	tst	r6, r3
 800a9b0:	bf18      	it	ne
 800a9b2:	4617      	movne	r7, r2
 800a9b4:	f047 0720 	orr.w	r7, r7, #32
 800a9b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9ba:	601c      	str	r4, [r3, #0]
 800a9bc:	9b05      	ldr	r3, [sp, #20]
 800a9be:	601d      	str	r5, [r3, #0]
 800a9c0:	e69a      	b.n	800a6f8 <__gethex+0x124>
 800a9c2:	4299      	cmp	r1, r3
 800a9c4:	f843 cc04 	str.w	ip, [r3, #-4]
 800a9c8:	d8d8      	bhi.n	800a97c <__gethex+0x3a8>
 800a9ca:	68a3      	ldr	r3, [r4, #8]
 800a9cc:	459b      	cmp	fp, r3
 800a9ce:	db17      	blt.n	800aa00 <__gethex+0x42c>
 800a9d0:	6861      	ldr	r1, [r4, #4]
 800a9d2:	9802      	ldr	r0, [sp, #8]
 800a9d4:	3101      	adds	r1, #1
 800a9d6:	f000 f91d 	bl	800ac14 <_Balloc>
 800a9da:	4681      	mov	r9, r0
 800a9dc:	b918      	cbnz	r0, 800a9e6 <__gethex+0x412>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	2184      	movs	r1, #132	; 0x84
 800a9e2:	4b19      	ldr	r3, [pc, #100]	; (800aa48 <__gethex+0x474>)
 800a9e4:	e6ab      	b.n	800a73e <__gethex+0x16a>
 800a9e6:	6922      	ldr	r2, [r4, #16]
 800a9e8:	f104 010c 	add.w	r1, r4, #12
 800a9ec:	3202      	adds	r2, #2
 800a9ee:	0092      	lsls	r2, r2, #2
 800a9f0:	300c      	adds	r0, #12
 800a9f2:	f7fd f801 	bl	80079f8 <memcpy>
 800a9f6:	4621      	mov	r1, r4
 800a9f8:	9802      	ldr	r0, [sp, #8]
 800a9fa:	f000 f94b 	bl	800ac94 <_Bfree>
 800a9fe:	464c      	mov	r4, r9
 800aa00:	6923      	ldr	r3, [r4, #16]
 800aa02:	1c5a      	adds	r2, r3, #1
 800aa04:	6122      	str	r2, [r4, #16]
 800aa06:	2201      	movs	r2, #1
 800aa08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa0c:	615a      	str	r2, [r3, #20]
 800aa0e:	e7bd      	b.n	800a98c <__gethex+0x3b8>
 800aa10:	6922      	ldr	r2, [r4, #16]
 800aa12:	455a      	cmp	r2, fp
 800aa14:	dd0b      	ble.n	800aa2e <__gethex+0x45a>
 800aa16:	2101      	movs	r1, #1
 800aa18:	4620      	mov	r0, r4
 800aa1a:	f7ff fd73 	bl	800a504 <rshift>
 800aa1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa22:	3501      	adds	r5, #1
 800aa24:	42ab      	cmp	r3, r5
 800aa26:	f6ff aed4 	blt.w	800a7d2 <__gethex+0x1fe>
 800aa2a:	2701      	movs	r7, #1
 800aa2c:	e7c2      	b.n	800a9b4 <__gethex+0x3e0>
 800aa2e:	f016 061f 	ands.w	r6, r6, #31
 800aa32:	d0fa      	beq.n	800aa2a <__gethex+0x456>
 800aa34:	4453      	add	r3, sl
 800aa36:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aa3a:	f000 f9dd 	bl	800adf8 <__hi0bits>
 800aa3e:	f1c6 0620 	rsb	r6, r6, #32
 800aa42:	42b0      	cmp	r0, r6
 800aa44:	dbe7      	blt.n	800aa16 <__gethex+0x442>
 800aa46:	e7f0      	b.n	800aa2a <__gethex+0x456>
 800aa48:	0800c770 	.word	0x0800c770

0800aa4c <L_shift>:
 800aa4c:	f1c2 0208 	rsb	r2, r2, #8
 800aa50:	0092      	lsls	r2, r2, #2
 800aa52:	b570      	push	{r4, r5, r6, lr}
 800aa54:	f1c2 0620 	rsb	r6, r2, #32
 800aa58:	6843      	ldr	r3, [r0, #4]
 800aa5a:	6804      	ldr	r4, [r0, #0]
 800aa5c:	fa03 f506 	lsl.w	r5, r3, r6
 800aa60:	432c      	orrs	r4, r5
 800aa62:	40d3      	lsrs	r3, r2
 800aa64:	6004      	str	r4, [r0, #0]
 800aa66:	f840 3f04 	str.w	r3, [r0, #4]!
 800aa6a:	4288      	cmp	r0, r1
 800aa6c:	d3f4      	bcc.n	800aa58 <L_shift+0xc>
 800aa6e:	bd70      	pop	{r4, r5, r6, pc}

0800aa70 <__match>:
 800aa70:	b530      	push	{r4, r5, lr}
 800aa72:	6803      	ldr	r3, [r0, #0]
 800aa74:	3301      	adds	r3, #1
 800aa76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa7a:	b914      	cbnz	r4, 800aa82 <__match+0x12>
 800aa7c:	6003      	str	r3, [r0, #0]
 800aa7e:	2001      	movs	r0, #1
 800aa80:	bd30      	pop	{r4, r5, pc}
 800aa82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aa8a:	2d19      	cmp	r5, #25
 800aa8c:	bf98      	it	ls
 800aa8e:	3220      	addls	r2, #32
 800aa90:	42a2      	cmp	r2, r4
 800aa92:	d0f0      	beq.n	800aa76 <__match+0x6>
 800aa94:	2000      	movs	r0, #0
 800aa96:	e7f3      	b.n	800aa80 <__match+0x10>

0800aa98 <__hexnan>:
 800aa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa9c:	2500      	movs	r5, #0
 800aa9e:	680b      	ldr	r3, [r1, #0]
 800aaa0:	4682      	mov	sl, r0
 800aaa2:	115e      	asrs	r6, r3, #5
 800aaa4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aaa8:	f013 031f 	ands.w	r3, r3, #31
 800aaac:	bf18      	it	ne
 800aaae:	3604      	addne	r6, #4
 800aab0:	1f37      	subs	r7, r6, #4
 800aab2:	46b9      	mov	r9, r7
 800aab4:	463c      	mov	r4, r7
 800aab6:	46ab      	mov	fp, r5
 800aab8:	b087      	sub	sp, #28
 800aaba:	4690      	mov	r8, r2
 800aabc:	6802      	ldr	r2, [r0, #0]
 800aabe:	9301      	str	r3, [sp, #4]
 800aac0:	f846 5c04 	str.w	r5, [r6, #-4]
 800aac4:	9502      	str	r5, [sp, #8]
 800aac6:	7851      	ldrb	r1, [r2, #1]
 800aac8:	1c53      	adds	r3, r2, #1
 800aaca:	9303      	str	r3, [sp, #12]
 800aacc:	b341      	cbz	r1, 800ab20 <__hexnan+0x88>
 800aace:	4608      	mov	r0, r1
 800aad0:	9205      	str	r2, [sp, #20]
 800aad2:	9104      	str	r1, [sp, #16]
 800aad4:	f7ff fd69 	bl	800a5aa <__hexdig_fun>
 800aad8:	2800      	cmp	r0, #0
 800aada:	d14f      	bne.n	800ab7c <__hexnan+0xe4>
 800aadc:	9904      	ldr	r1, [sp, #16]
 800aade:	9a05      	ldr	r2, [sp, #20]
 800aae0:	2920      	cmp	r1, #32
 800aae2:	d818      	bhi.n	800ab16 <__hexnan+0x7e>
 800aae4:	9b02      	ldr	r3, [sp, #8]
 800aae6:	459b      	cmp	fp, r3
 800aae8:	dd13      	ble.n	800ab12 <__hexnan+0x7a>
 800aaea:	454c      	cmp	r4, r9
 800aaec:	d206      	bcs.n	800aafc <__hexnan+0x64>
 800aaee:	2d07      	cmp	r5, #7
 800aaf0:	dc04      	bgt.n	800aafc <__hexnan+0x64>
 800aaf2:	462a      	mov	r2, r5
 800aaf4:	4649      	mov	r1, r9
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	f7ff ffa8 	bl	800aa4c <L_shift>
 800aafc:	4544      	cmp	r4, r8
 800aafe:	d950      	bls.n	800aba2 <__hexnan+0x10a>
 800ab00:	2300      	movs	r3, #0
 800ab02:	f1a4 0904 	sub.w	r9, r4, #4
 800ab06:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab0a:	461d      	mov	r5, r3
 800ab0c:	464c      	mov	r4, r9
 800ab0e:	f8cd b008 	str.w	fp, [sp, #8]
 800ab12:	9a03      	ldr	r2, [sp, #12]
 800ab14:	e7d7      	b.n	800aac6 <__hexnan+0x2e>
 800ab16:	2929      	cmp	r1, #41	; 0x29
 800ab18:	d156      	bne.n	800abc8 <__hexnan+0x130>
 800ab1a:	3202      	adds	r2, #2
 800ab1c:	f8ca 2000 	str.w	r2, [sl]
 800ab20:	f1bb 0f00 	cmp.w	fp, #0
 800ab24:	d050      	beq.n	800abc8 <__hexnan+0x130>
 800ab26:	454c      	cmp	r4, r9
 800ab28:	d206      	bcs.n	800ab38 <__hexnan+0xa0>
 800ab2a:	2d07      	cmp	r5, #7
 800ab2c:	dc04      	bgt.n	800ab38 <__hexnan+0xa0>
 800ab2e:	462a      	mov	r2, r5
 800ab30:	4649      	mov	r1, r9
 800ab32:	4620      	mov	r0, r4
 800ab34:	f7ff ff8a 	bl	800aa4c <L_shift>
 800ab38:	4544      	cmp	r4, r8
 800ab3a:	d934      	bls.n	800aba6 <__hexnan+0x10e>
 800ab3c:	4623      	mov	r3, r4
 800ab3e:	f1a8 0204 	sub.w	r2, r8, #4
 800ab42:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab46:	429f      	cmp	r7, r3
 800ab48:	f842 1f04 	str.w	r1, [r2, #4]!
 800ab4c:	d2f9      	bcs.n	800ab42 <__hexnan+0xaa>
 800ab4e:	1b3b      	subs	r3, r7, r4
 800ab50:	f023 0303 	bic.w	r3, r3, #3
 800ab54:	3304      	adds	r3, #4
 800ab56:	3401      	adds	r4, #1
 800ab58:	3e03      	subs	r6, #3
 800ab5a:	42b4      	cmp	r4, r6
 800ab5c:	bf88      	it	hi
 800ab5e:	2304      	movhi	r3, #4
 800ab60:	2200      	movs	r2, #0
 800ab62:	4443      	add	r3, r8
 800ab64:	f843 2b04 	str.w	r2, [r3], #4
 800ab68:	429f      	cmp	r7, r3
 800ab6a:	d2fb      	bcs.n	800ab64 <__hexnan+0xcc>
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	b91b      	cbnz	r3, 800ab78 <__hexnan+0xe0>
 800ab70:	4547      	cmp	r7, r8
 800ab72:	d127      	bne.n	800abc4 <__hexnan+0x12c>
 800ab74:	2301      	movs	r3, #1
 800ab76:	603b      	str	r3, [r7, #0]
 800ab78:	2005      	movs	r0, #5
 800ab7a:	e026      	b.n	800abca <__hexnan+0x132>
 800ab7c:	3501      	adds	r5, #1
 800ab7e:	2d08      	cmp	r5, #8
 800ab80:	f10b 0b01 	add.w	fp, fp, #1
 800ab84:	dd06      	ble.n	800ab94 <__hexnan+0xfc>
 800ab86:	4544      	cmp	r4, r8
 800ab88:	d9c3      	bls.n	800ab12 <__hexnan+0x7a>
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	2501      	movs	r5, #1
 800ab8e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab92:	3c04      	subs	r4, #4
 800ab94:	6822      	ldr	r2, [r4, #0]
 800ab96:	f000 000f 	and.w	r0, r0, #15
 800ab9a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ab9e:	6022      	str	r2, [r4, #0]
 800aba0:	e7b7      	b.n	800ab12 <__hexnan+0x7a>
 800aba2:	2508      	movs	r5, #8
 800aba4:	e7b5      	b.n	800ab12 <__hexnan+0x7a>
 800aba6:	9b01      	ldr	r3, [sp, #4]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d0df      	beq.n	800ab6c <__hexnan+0xd4>
 800abac:	f04f 32ff 	mov.w	r2, #4294967295
 800abb0:	f1c3 0320 	rsb	r3, r3, #32
 800abb4:	fa22 f303 	lsr.w	r3, r2, r3
 800abb8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800abbc:	401a      	ands	r2, r3
 800abbe:	f846 2c04 	str.w	r2, [r6, #-4]
 800abc2:	e7d3      	b.n	800ab6c <__hexnan+0xd4>
 800abc4:	3f04      	subs	r7, #4
 800abc6:	e7d1      	b.n	800ab6c <__hexnan+0xd4>
 800abc8:	2004      	movs	r0, #4
 800abca:	b007      	add	sp, #28
 800abcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abd0 <_localeconv_r>:
 800abd0:	4800      	ldr	r0, [pc, #0]	; (800abd4 <_localeconv_r+0x4>)
 800abd2:	4770      	bx	lr
 800abd4:	200002d4 	.word	0x200002d4

0800abd8 <__ascii_mbtowc>:
 800abd8:	b082      	sub	sp, #8
 800abda:	b901      	cbnz	r1, 800abde <__ascii_mbtowc+0x6>
 800abdc:	a901      	add	r1, sp, #4
 800abde:	b142      	cbz	r2, 800abf2 <__ascii_mbtowc+0x1a>
 800abe0:	b14b      	cbz	r3, 800abf6 <__ascii_mbtowc+0x1e>
 800abe2:	7813      	ldrb	r3, [r2, #0]
 800abe4:	600b      	str	r3, [r1, #0]
 800abe6:	7812      	ldrb	r2, [r2, #0]
 800abe8:	1e10      	subs	r0, r2, #0
 800abea:	bf18      	it	ne
 800abec:	2001      	movne	r0, #1
 800abee:	b002      	add	sp, #8
 800abf0:	4770      	bx	lr
 800abf2:	4610      	mov	r0, r2
 800abf4:	e7fb      	b.n	800abee <__ascii_mbtowc+0x16>
 800abf6:	f06f 0001 	mvn.w	r0, #1
 800abfa:	e7f8      	b.n	800abee <__ascii_mbtowc+0x16>

0800abfc <__malloc_lock>:
 800abfc:	4801      	ldr	r0, [pc, #4]	; (800ac04 <__malloc_lock+0x8>)
 800abfe:	f000 be8a 	b.w	800b916 <__retarget_lock_acquire_recursive>
 800ac02:	bf00      	nop
 800ac04:	200015c0 	.word	0x200015c0

0800ac08 <__malloc_unlock>:
 800ac08:	4801      	ldr	r0, [pc, #4]	; (800ac10 <__malloc_unlock+0x8>)
 800ac0a:	f000 be85 	b.w	800b918 <__retarget_lock_release_recursive>
 800ac0e:	bf00      	nop
 800ac10:	200015c0 	.word	0x200015c0

0800ac14 <_Balloc>:
 800ac14:	b570      	push	{r4, r5, r6, lr}
 800ac16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac18:	4604      	mov	r4, r0
 800ac1a:	460d      	mov	r5, r1
 800ac1c:	b976      	cbnz	r6, 800ac3c <_Balloc+0x28>
 800ac1e:	2010      	movs	r0, #16
 800ac20:	f7fc fecc 	bl	80079bc <malloc>
 800ac24:	4602      	mov	r2, r0
 800ac26:	6260      	str	r0, [r4, #36]	; 0x24
 800ac28:	b920      	cbnz	r0, 800ac34 <_Balloc+0x20>
 800ac2a:	2166      	movs	r1, #102	; 0x66
 800ac2c:	4b17      	ldr	r3, [pc, #92]	; (800ac8c <_Balloc+0x78>)
 800ac2e:	4818      	ldr	r0, [pc, #96]	; (800ac90 <_Balloc+0x7c>)
 800ac30:	f000 fe40 	bl	800b8b4 <__assert_func>
 800ac34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac38:	6006      	str	r6, [r0, #0]
 800ac3a:	60c6      	str	r6, [r0, #12]
 800ac3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ac3e:	68f3      	ldr	r3, [r6, #12]
 800ac40:	b183      	cbz	r3, 800ac64 <_Balloc+0x50>
 800ac42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac4a:	b9b8      	cbnz	r0, 800ac7c <_Balloc+0x68>
 800ac4c:	2101      	movs	r1, #1
 800ac4e:	fa01 f605 	lsl.w	r6, r1, r5
 800ac52:	1d72      	adds	r2, r6, #5
 800ac54:	4620      	mov	r0, r4
 800ac56:	0092      	lsls	r2, r2, #2
 800ac58:	f000 fc94 	bl	800b584 <_calloc_r>
 800ac5c:	b160      	cbz	r0, 800ac78 <_Balloc+0x64>
 800ac5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac62:	e00e      	b.n	800ac82 <_Balloc+0x6e>
 800ac64:	2221      	movs	r2, #33	; 0x21
 800ac66:	2104      	movs	r1, #4
 800ac68:	4620      	mov	r0, r4
 800ac6a:	f000 fc8b 	bl	800b584 <_calloc_r>
 800ac6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac70:	60f0      	str	r0, [r6, #12]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d1e4      	bne.n	800ac42 <_Balloc+0x2e>
 800ac78:	2000      	movs	r0, #0
 800ac7a:	bd70      	pop	{r4, r5, r6, pc}
 800ac7c:	6802      	ldr	r2, [r0, #0]
 800ac7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac82:	2300      	movs	r3, #0
 800ac84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac88:	e7f7      	b.n	800ac7a <_Balloc+0x66>
 800ac8a:	bf00      	nop
 800ac8c:	0800c6fe 	.word	0x0800c6fe
 800ac90:	0800c7fc 	.word	0x0800c7fc

0800ac94 <_Bfree>:
 800ac94:	b570      	push	{r4, r5, r6, lr}
 800ac96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac98:	4605      	mov	r5, r0
 800ac9a:	460c      	mov	r4, r1
 800ac9c:	b976      	cbnz	r6, 800acbc <_Bfree+0x28>
 800ac9e:	2010      	movs	r0, #16
 800aca0:	f7fc fe8c 	bl	80079bc <malloc>
 800aca4:	4602      	mov	r2, r0
 800aca6:	6268      	str	r0, [r5, #36]	; 0x24
 800aca8:	b920      	cbnz	r0, 800acb4 <_Bfree+0x20>
 800acaa:	218a      	movs	r1, #138	; 0x8a
 800acac:	4b08      	ldr	r3, [pc, #32]	; (800acd0 <_Bfree+0x3c>)
 800acae:	4809      	ldr	r0, [pc, #36]	; (800acd4 <_Bfree+0x40>)
 800acb0:	f000 fe00 	bl	800b8b4 <__assert_func>
 800acb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acb8:	6006      	str	r6, [r0, #0]
 800acba:	60c6      	str	r6, [r0, #12]
 800acbc:	b13c      	cbz	r4, 800acce <_Bfree+0x3a>
 800acbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800acc0:	6862      	ldr	r2, [r4, #4]
 800acc2:	68db      	ldr	r3, [r3, #12]
 800acc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800acc8:	6021      	str	r1, [r4, #0]
 800acca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800acce:	bd70      	pop	{r4, r5, r6, pc}
 800acd0:	0800c6fe 	.word	0x0800c6fe
 800acd4:	0800c7fc 	.word	0x0800c7fc

0800acd8 <__multadd>:
 800acd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acdc:	4607      	mov	r7, r0
 800acde:	460c      	mov	r4, r1
 800ace0:	461e      	mov	r6, r3
 800ace2:	2000      	movs	r0, #0
 800ace4:	690d      	ldr	r5, [r1, #16]
 800ace6:	f101 0c14 	add.w	ip, r1, #20
 800acea:	f8dc 3000 	ldr.w	r3, [ip]
 800acee:	3001      	adds	r0, #1
 800acf0:	b299      	uxth	r1, r3
 800acf2:	fb02 6101 	mla	r1, r2, r1, r6
 800acf6:	0c1e      	lsrs	r6, r3, #16
 800acf8:	0c0b      	lsrs	r3, r1, #16
 800acfa:	fb02 3306 	mla	r3, r2, r6, r3
 800acfe:	b289      	uxth	r1, r1
 800ad00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad04:	4285      	cmp	r5, r0
 800ad06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad0a:	f84c 1b04 	str.w	r1, [ip], #4
 800ad0e:	dcec      	bgt.n	800acea <__multadd+0x12>
 800ad10:	b30e      	cbz	r6, 800ad56 <__multadd+0x7e>
 800ad12:	68a3      	ldr	r3, [r4, #8]
 800ad14:	42ab      	cmp	r3, r5
 800ad16:	dc19      	bgt.n	800ad4c <__multadd+0x74>
 800ad18:	6861      	ldr	r1, [r4, #4]
 800ad1a:	4638      	mov	r0, r7
 800ad1c:	3101      	adds	r1, #1
 800ad1e:	f7ff ff79 	bl	800ac14 <_Balloc>
 800ad22:	4680      	mov	r8, r0
 800ad24:	b928      	cbnz	r0, 800ad32 <__multadd+0x5a>
 800ad26:	4602      	mov	r2, r0
 800ad28:	21b5      	movs	r1, #181	; 0xb5
 800ad2a:	4b0c      	ldr	r3, [pc, #48]	; (800ad5c <__multadd+0x84>)
 800ad2c:	480c      	ldr	r0, [pc, #48]	; (800ad60 <__multadd+0x88>)
 800ad2e:	f000 fdc1 	bl	800b8b4 <__assert_func>
 800ad32:	6922      	ldr	r2, [r4, #16]
 800ad34:	f104 010c 	add.w	r1, r4, #12
 800ad38:	3202      	adds	r2, #2
 800ad3a:	0092      	lsls	r2, r2, #2
 800ad3c:	300c      	adds	r0, #12
 800ad3e:	f7fc fe5b 	bl	80079f8 <memcpy>
 800ad42:	4621      	mov	r1, r4
 800ad44:	4638      	mov	r0, r7
 800ad46:	f7ff ffa5 	bl	800ac94 <_Bfree>
 800ad4a:	4644      	mov	r4, r8
 800ad4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad50:	3501      	adds	r5, #1
 800ad52:	615e      	str	r6, [r3, #20]
 800ad54:	6125      	str	r5, [r4, #16]
 800ad56:	4620      	mov	r0, r4
 800ad58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad5c:	0800c770 	.word	0x0800c770
 800ad60:	0800c7fc 	.word	0x0800c7fc

0800ad64 <__s2b>:
 800ad64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad68:	4615      	mov	r5, r2
 800ad6a:	2209      	movs	r2, #9
 800ad6c:	461f      	mov	r7, r3
 800ad6e:	3308      	adds	r3, #8
 800ad70:	460c      	mov	r4, r1
 800ad72:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad76:	4606      	mov	r6, r0
 800ad78:	2201      	movs	r2, #1
 800ad7a:	2100      	movs	r1, #0
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	db09      	blt.n	800ad94 <__s2b+0x30>
 800ad80:	4630      	mov	r0, r6
 800ad82:	f7ff ff47 	bl	800ac14 <_Balloc>
 800ad86:	b940      	cbnz	r0, 800ad9a <__s2b+0x36>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	21ce      	movs	r1, #206	; 0xce
 800ad8c:	4b18      	ldr	r3, [pc, #96]	; (800adf0 <__s2b+0x8c>)
 800ad8e:	4819      	ldr	r0, [pc, #100]	; (800adf4 <__s2b+0x90>)
 800ad90:	f000 fd90 	bl	800b8b4 <__assert_func>
 800ad94:	0052      	lsls	r2, r2, #1
 800ad96:	3101      	adds	r1, #1
 800ad98:	e7f0      	b.n	800ad7c <__s2b+0x18>
 800ad9a:	9b08      	ldr	r3, [sp, #32]
 800ad9c:	2d09      	cmp	r5, #9
 800ad9e:	6143      	str	r3, [r0, #20]
 800ada0:	f04f 0301 	mov.w	r3, #1
 800ada4:	6103      	str	r3, [r0, #16]
 800ada6:	dd16      	ble.n	800add6 <__s2b+0x72>
 800ada8:	f104 0909 	add.w	r9, r4, #9
 800adac:	46c8      	mov	r8, r9
 800adae:	442c      	add	r4, r5
 800adb0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800adb4:	4601      	mov	r1, r0
 800adb6:	220a      	movs	r2, #10
 800adb8:	4630      	mov	r0, r6
 800adba:	3b30      	subs	r3, #48	; 0x30
 800adbc:	f7ff ff8c 	bl	800acd8 <__multadd>
 800adc0:	45a0      	cmp	r8, r4
 800adc2:	d1f5      	bne.n	800adb0 <__s2b+0x4c>
 800adc4:	f1a5 0408 	sub.w	r4, r5, #8
 800adc8:	444c      	add	r4, r9
 800adca:	1b2d      	subs	r5, r5, r4
 800adcc:	1963      	adds	r3, r4, r5
 800adce:	42bb      	cmp	r3, r7
 800add0:	db04      	blt.n	800addc <__s2b+0x78>
 800add2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800add6:	2509      	movs	r5, #9
 800add8:	340a      	adds	r4, #10
 800adda:	e7f6      	b.n	800adca <__s2b+0x66>
 800addc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ade0:	4601      	mov	r1, r0
 800ade2:	220a      	movs	r2, #10
 800ade4:	4630      	mov	r0, r6
 800ade6:	3b30      	subs	r3, #48	; 0x30
 800ade8:	f7ff ff76 	bl	800acd8 <__multadd>
 800adec:	e7ee      	b.n	800adcc <__s2b+0x68>
 800adee:	bf00      	nop
 800adf0:	0800c770 	.word	0x0800c770
 800adf4:	0800c7fc 	.word	0x0800c7fc

0800adf8 <__hi0bits>:
 800adf8:	0c02      	lsrs	r2, r0, #16
 800adfa:	0412      	lsls	r2, r2, #16
 800adfc:	4603      	mov	r3, r0
 800adfe:	b9ca      	cbnz	r2, 800ae34 <__hi0bits+0x3c>
 800ae00:	0403      	lsls	r3, r0, #16
 800ae02:	2010      	movs	r0, #16
 800ae04:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ae08:	bf04      	itt	eq
 800ae0a:	021b      	lsleq	r3, r3, #8
 800ae0c:	3008      	addeq	r0, #8
 800ae0e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ae12:	bf04      	itt	eq
 800ae14:	011b      	lsleq	r3, r3, #4
 800ae16:	3004      	addeq	r0, #4
 800ae18:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ae1c:	bf04      	itt	eq
 800ae1e:	009b      	lsleq	r3, r3, #2
 800ae20:	3002      	addeq	r0, #2
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	db05      	blt.n	800ae32 <__hi0bits+0x3a>
 800ae26:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ae2a:	f100 0001 	add.w	r0, r0, #1
 800ae2e:	bf08      	it	eq
 800ae30:	2020      	moveq	r0, #32
 800ae32:	4770      	bx	lr
 800ae34:	2000      	movs	r0, #0
 800ae36:	e7e5      	b.n	800ae04 <__hi0bits+0xc>

0800ae38 <__lo0bits>:
 800ae38:	6803      	ldr	r3, [r0, #0]
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	f013 0007 	ands.w	r0, r3, #7
 800ae40:	d00b      	beq.n	800ae5a <__lo0bits+0x22>
 800ae42:	07d9      	lsls	r1, r3, #31
 800ae44:	d421      	bmi.n	800ae8a <__lo0bits+0x52>
 800ae46:	0798      	lsls	r0, r3, #30
 800ae48:	bf49      	itett	mi
 800ae4a:	085b      	lsrmi	r3, r3, #1
 800ae4c:	089b      	lsrpl	r3, r3, #2
 800ae4e:	2001      	movmi	r0, #1
 800ae50:	6013      	strmi	r3, [r2, #0]
 800ae52:	bf5c      	itt	pl
 800ae54:	2002      	movpl	r0, #2
 800ae56:	6013      	strpl	r3, [r2, #0]
 800ae58:	4770      	bx	lr
 800ae5a:	b299      	uxth	r1, r3
 800ae5c:	b909      	cbnz	r1, 800ae62 <__lo0bits+0x2a>
 800ae5e:	2010      	movs	r0, #16
 800ae60:	0c1b      	lsrs	r3, r3, #16
 800ae62:	b2d9      	uxtb	r1, r3
 800ae64:	b909      	cbnz	r1, 800ae6a <__lo0bits+0x32>
 800ae66:	3008      	adds	r0, #8
 800ae68:	0a1b      	lsrs	r3, r3, #8
 800ae6a:	0719      	lsls	r1, r3, #28
 800ae6c:	bf04      	itt	eq
 800ae6e:	091b      	lsreq	r3, r3, #4
 800ae70:	3004      	addeq	r0, #4
 800ae72:	0799      	lsls	r1, r3, #30
 800ae74:	bf04      	itt	eq
 800ae76:	089b      	lsreq	r3, r3, #2
 800ae78:	3002      	addeq	r0, #2
 800ae7a:	07d9      	lsls	r1, r3, #31
 800ae7c:	d403      	bmi.n	800ae86 <__lo0bits+0x4e>
 800ae7e:	085b      	lsrs	r3, r3, #1
 800ae80:	f100 0001 	add.w	r0, r0, #1
 800ae84:	d003      	beq.n	800ae8e <__lo0bits+0x56>
 800ae86:	6013      	str	r3, [r2, #0]
 800ae88:	4770      	bx	lr
 800ae8a:	2000      	movs	r0, #0
 800ae8c:	4770      	bx	lr
 800ae8e:	2020      	movs	r0, #32
 800ae90:	4770      	bx	lr
	...

0800ae94 <__i2b>:
 800ae94:	b510      	push	{r4, lr}
 800ae96:	460c      	mov	r4, r1
 800ae98:	2101      	movs	r1, #1
 800ae9a:	f7ff febb 	bl	800ac14 <_Balloc>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	b928      	cbnz	r0, 800aeae <__i2b+0x1a>
 800aea2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aea6:	4b04      	ldr	r3, [pc, #16]	; (800aeb8 <__i2b+0x24>)
 800aea8:	4804      	ldr	r0, [pc, #16]	; (800aebc <__i2b+0x28>)
 800aeaa:	f000 fd03 	bl	800b8b4 <__assert_func>
 800aeae:	2301      	movs	r3, #1
 800aeb0:	6144      	str	r4, [r0, #20]
 800aeb2:	6103      	str	r3, [r0, #16]
 800aeb4:	bd10      	pop	{r4, pc}
 800aeb6:	bf00      	nop
 800aeb8:	0800c770 	.word	0x0800c770
 800aebc:	0800c7fc 	.word	0x0800c7fc

0800aec0 <__multiply>:
 800aec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec4:	4691      	mov	r9, r2
 800aec6:	690a      	ldr	r2, [r1, #16]
 800aec8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aecc:	460c      	mov	r4, r1
 800aece:	429a      	cmp	r2, r3
 800aed0:	bfbe      	ittt	lt
 800aed2:	460b      	movlt	r3, r1
 800aed4:	464c      	movlt	r4, r9
 800aed6:	4699      	movlt	r9, r3
 800aed8:	6927      	ldr	r7, [r4, #16]
 800aeda:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aede:	68a3      	ldr	r3, [r4, #8]
 800aee0:	6861      	ldr	r1, [r4, #4]
 800aee2:	eb07 060a 	add.w	r6, r7, sl
 800aee6:	42b3      	cmp	r3, r6
 800aee8:	b085      	sub	sp, #20
 800aeea:	bfb8      	it	lt
 800aeec:	3101      	addlt	r1, #1
 800aeee:	f7ff fe91 	bl	800ac14 <_Balloc>
 800aef2:	b930      	cbnz	r0, 800af02 <__multiply+0x42>
 800aef4:	4602      	mov	r2, r0
 800aef6:	f240 115d 	movw	r1, #349	; 0x15d
 800aefa:	4b43      	ldr	r3, [pc, #268]	; (800b008 <__multiply+0x148>)
 800aefc:	4843      	ldr	r0, [pc, #268]	; (800b00c <__multiply+0x14c>)
 800aefe:	f000 fcd9 	bl	800b8b4 <__assert_func>
 800af02:	f100 0514 	add.w	r5, r0, #20
 800af06:	462b      	mov	r3, r5
 800af08:	2200      	movs	r2, #0
 800af0a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af0e:	4543      	cmp	r3, r8
 800af10:	d321      	bcc.n	800af56 <__multiply+0x96>
 800af12:	f104 0314 	add.w	r3, r4, #20
 800af16:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800af1a:	f109 0314 	add.w	r3, r9, #20
 800af1e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800af22:	9202      	str	r2, [sp, #8]
 800af24:	1b3a      	subs	r2, r7, r4
 800af26:	3a15      	subs	r2, #21
 800af28:	f022 0203 	bic.w	r2, r2, #3
 800af2c:	3204      	adds	r2, #4
 800af2e:	f104 0115 	add.w	r1, r4, #21
 800af32:	428f      	cmp	r7, r1
 800af34:	bf38      	it	cc
 800af36:	2204      	movcc	r2, #4
 800af38:	9201      	str	r2, [sp, #4]
 800af3a:	9a02      	ldr	r2, [sp, #8]
 800af3c:	9303      	str	r3, [sp, #12]
 800af3e:	429a      	cmp	r2, r3
 800af40:	d80c      	bhi.n	800af5c <__multiply+0x9c>
 800af42:	2e00      	cmp	r6, #0
 800af44:	dd03      	ble.n	800af4e <__multiply+0x8e>
 800af46:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d059      	beq.n	800b002 <__multiply+0x142>
 800af4e:	6106      	str	r6, [r0, #16]
 800af50:	b005      	add	sp, #20
 800af52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af56:	f843 2b04 	str.w	r2, [r3], #4
 800af5a:	e7d8      	b.n	800af0e <__multiply+0x4e>
 800af5c:	f8b3 a000 	ldrh.w	sl, [r3]
 800af60:	f1ba 0f00 	cmp.w	sl, #0
 800af64:	d023      	beq.n	800afae <__multiply+0xee>
 800af66:	46a9      	mov	r9, r5
 800af68:	f04f 0c00 	mov.w	ip, #0
 800af6c:	f104 0e14 	add.w	lr, r4, #20
 800af70:	f85e 2b04 	ldr.w	r2, [lr], #4
 800af74:	f8d9 1000 	ldr.w	r1, [r9]
 800af78:	fa1f fb82 	uxth.w	fp, r2
 800af7c:	b289      	uxth	r1, r1
 800af7e:	fb0a 110b 	mla	r1, sl, fp, r1
 800af82:	4461      	add	r1, ip
 800af84:	f8d9 c000 	ldr.w	ip, [r9]
 800af88:	0c12      	lsrs	r2, r2, #16
 800af8a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800af8e:	fb0a c202 	mla	r2, sl, r2, ip
 800af92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800af96:	b289      	uxth	r1, r1
 800af98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af9c:	4577      	cmp	r7, lr
 800af9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800afa2:	f849 1b04 	str.w	r1, [r9], #4
 800afa6:	d8e3      	bhi.n	800af70 <__multiply+0xb0>
 800afa8:	9a01      	ldr	r2, [sp, #4]
 800afaa:	f845 c002 	str.w	ip, [r5, r2]
 800afae:	9a03      	ldr	r2, [sp, #12]
 800afb0:	3304      	adds	r3, #4
 800afb2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800afb6:	f1b9 0f00 	cmp.w	r9, #0
 800afba:	d020      	beq.n	800affe <__multiply+0x13e>
 800afbc:	46ae      	mov	lr, r5
 800afbe:	f04f 0a00 	mov.w	sl, #0
 800afc2:	6829      	ldr	r1, [r5, #0]
 800afc4:	f104 0c14 	add.w	ip, r4, #20
 800afc8:	f8bc b000 	ldrh.w	fp, [ip]
 800afcc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800afd0:	b289      	uxth	r1, r1
 800afd2:	fb09 220b 	mla	r2, r9, fp, r2
 800afd6:	4492      	add	sl, r2
 800afd8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800afdc:	f84e 1b04 	str.w	r1, [lr], #4
 800afe0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800afe4:	f8be 1000 	ldrh.w	r1, [lr]
 800afe8:	0c12      	lsrs	r2, r2, #16
 800afea:	fb09 1102 	mla	r1, r9, r2, r1
 800afee:	4567      	cmp	r7, ip
 800aff0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aff4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aff8:	d8e6      	bhi.n	800afc8 <__multiply+0x108>
 800affa:	9a01      	ldr	r2, [sp, #4]
 800affc:	50a9      	str	r1, [r5, r2]
 800affe:	3504      	adds	r5, #4
 800b000:	e79b      	b.n	800af3a <__multiply+0x7a>
 800b002:	3e01      	subs	r6, #1
 800b004:	e79d      	b.n	800af42 <__multiply+0x82>
 800b006:	bf00      	nop
 800b008:	0800c770 	.word	0x0800c770
 800b00c:	0800c7fc 	.word	0x0800c7fc

0800b010 <__pow5mult>:
 800b010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b014:	4615      	mov	r5, r2
 800b016:	f012 0203 	ands.w	r2, r2, #3
 800b01a:	4606      	mov	r6, r0
 800b01c:	460f      	mov	r7, r1
 800b01e:	d007      	beq.n	800b030 <__pow5mult+0x20>
 800b020:	4c25      	ldr	r4, [pc, #148]	; (800b0b8 <__pow5mult+0xa8>)
 800b022:	3a01      	subs	r2, #1
 800b024:	2300      	movs	r3, #0
 800b026:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b02a:	f7ff fe55 	bl	800acd8 <__multadd>
 800b02e:	4607      	mov	r7, r0
 800b030:	10ad      	asrs	r5, r5, #2
 800b032:	d03d      	beq.n	800b0b0 <__pow5mult+0xa0>
 800b034:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b036:	b97c      	cbnz	r4, 800b058 <__pow5mult+0x48>
 800b038:	2010      	movs	r0, #16
 800b03a:	f7fc fcbf 	bl	80079bc <malloc>
 800b03e:	4602      	mov	r2, r0
 800b040:	6270      	str	r0, [r6, #36]	; 0x24
 800b042:	b928      	cbnz	r0, 800b050 <__pow5mult+0x40>
 800b044:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b048:	4b1c      	ldr	r3, [pc, #112]	; (800b0bc <__pow5mult+0xac>)
 800b04a:	481d      	ldr	r0, [pc, #116]	; (800b0c0 <__pow5mult+0xb0>)
 800b04c:	f000 fc32 	bl	800b8b4 <__assert_func>
 800b050:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b054:	6004      	str	r4, [r0, #0]
 800b056:	60c4      	str	r4, [r0, #12]
 800b058:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b05c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b060:	b94c      	cbnz	r4, 800b076 <__pow5mult+0x66>
 800b062:	f240 2171 	movw	r1, #625	; 0x271
 800b066:	4630      	mov	r0, r6
 800b068:	f7ff ff14 	bl	800ae94 <__i2b>
 800b06c:	2300      	movs	r3, #0
 800b06e:	4604      	mov	r4, r0
 800b070:	f8c8 0008 	str.w	r0, [r8, #8]
 800b074:	6003      	str	r3, [r0, #0]
 800b076:	f04f 0900 	mov.w	r9, #0
 800b07a:	07eb      	lsls	r3, r5, #31
 800b07c:	d50a      	bpl.n	800b094 <__pow5mult+0x84>
 800b07e:	4639      	mov	r1, r7
 800b080:	4622      	mov	r2, r4
 800b082:	4630      	mov	r0, r6
 800b084:	f7ff ff1c 	bl	800aec0 <__multiply>
 800b088:	4680      	mov	r8, r0
 800b08a:	4639      	mov	r1, r7
 800b08c:	4630      	mov	r0, r6
 800b08e:	f7ff fe01 	bl	800ac94 <_Bfree>
 800b092:	4647      	mov	r7, r8
 800b094:	106d      	asrs	r5, r5, #1
 800b096:	d00b      	beq.n	800b0b0 <__pow5mult+0xa0>
 800b098:	6820      	ldr	r0, [r4, #0]
 800b09a:	b938      	cbnz	r0, 800b0ac <__pow5mult+0x9c>
 800b09c:	4622      	mov	r2, r4
 800b09e:	4621      	mov	r1, r4
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	f7ff ff0d 	bl	800aec0 <__multiply>
 800b0a6:	6020      	str	r0, [r4, #0]
 800b0a8:	f8c0 9000 	str.w	r9, [r0]
 800b0ac:	4604      	mov	r4, r0
 800b0ae:	e7e4      	b.n	800b07a <__pow5mult+0x6a>
 800b0b0:	4638      	mov	r0, r7
 800b0b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0b6:	bf00      	nop
 800b0b8:	0800c948 	.word	0x0800c948
 800b0bc:	0800c6fe 	.word	0x0800c6fe
 800b0c0:	0800c7fc 	.word	0x0800c7fc

0800b0c4 <__lshift>:
 800b0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0c8:	460c      	mov	r4, r1
 800b0ca:	4607      	mov	r7, r0
 800b0cc:	4691      	mov	r9, r2
 800b0ce:	6923      	ldr	r3, [r4, #16]
 800b0d0:	6849      	ldr	r1, [r1, #4]
 800b0d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b0d6:	68a3      	ldr	r3, [r4, #8]
 800b0d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b0dc:	f108 0601 	add.w	r6, r8, #1
 800b0e0:	42b3      	cmp	r3, r6
 800b0e2:	db0b      	blt.n	800b0fc <__lshift+0x38>
 800b0e4:	4638      	mov	r0, r7
 800b0e6:	f7ff fd95 	bl	800ac14 <_Balloc>
 800b0ea:	4605      	mov	r5, r0
 800b0ec:	b948      	cbnz	r0, 800b102 <__lshift+0x3e>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b0f4:	4b29      	ldr	r3, [pc, #164]	; (800b19c <__lshift+0xd8>)
 800b0f6:	482a      	ldr	r0, [pc, #168]	; (800b1a0 <__lshift+0xdc>)
 800b0f8:	f000 fbdc 	bl	800b8b4 <__assert_func>
 800b0fc:	3101      	adds	r1, #1
 800b0fe:	005b      	lsls	r3, r3, #1
 800b100:	e7ee      	b.n	800b0e0 <__lshift+0x1c>
 800b102:	2300      	movs	r3, #0
 800b104:	f100 0114 	add.w	r1, r0, #20
 800b108:	f100 0210 	add.w	r2, r0, #16
 800b10c:	4618      	mov	r0, r3
 800b10e:	4553      	cmp	r3, sl
 800b110:	db37      	blt.n	800b182 <__lshift+0xbe>
 800b112:	6920      	ldr	r0, [r4, #16]
 800b114:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b118:	f104 0314 	add.w	r3, r4, #20
 800b11c:	f019 091f 	ands.w	r9, r9, #31
 800b120:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b124:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b128:	d02f      	beq.n	800b18a <__lshift+0xc6>
 800b12a:	468a      	mov	sl, r1
 800b12c:	f04f 0c00 	mov.w	ip, #0
 800b130:	f1c9 0e20 	rsb	lr, r9, #32
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	fa02 f209 	lsl.w	r2, r2, r9
 800b13a:	ea42 020c 	orr.w	r2, r2, ip
 800b13e:	f84a 2b04 	str.w	r2, [sl], #4
 800b142:	f853 2b04 	ldr.w	r2, [r3], #4
 800b146:	4298      	cmp	r0, r3
 800b148:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b14c:	d8f2      	bhi.n	800b134 <__lshift+0x70>
 800b14e:	1b03      	subs	r3, r0, r4
 800b150:	3b15      	subs	r3, #21
 800b152:	f023 0303 	bic.w	r3, r3, #3
 800b156:	3304      	adds	r3, #4
 800b158:	f104 0215 	add.w	r2, r4, #21
 800b15c:	4290      	cmp	r0, r2
 800b15e:	bf38      	it	cc
 800b160:	2304      	movcc	r3, #4
 800b162:	f841 c003 	str.w	ip, [r1, r3]
 800b166:	f1bc 0f00 	cmp.w	ip, #0
 800b16a:	d001      	beq.n	800b170 <__lshift+0xac>
 800b16c:	f108 0602 	add.w	r6, r8, #2
 800b170:	3e01      	subs	r6, #1
 800b172:	4638      	mov	r0, r7
 800b174:	4621      	mov	r1, r4
 800b176:	612e      	str	r6, [r5, #16]
 800b178:	f7ff fd8c 	bl	800ac94 <_Bfree>
 800b17c:	4628      	mov	r0, r5
 800b17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b182:	f842 0f04 	str.w	r0, [r2, #4]!
 800b186:	3301      	adds	r3, #1
 800b188:	e7c1      	b.n	800b10e <__lshift+0x4a>
 800b18a:	3904      	subs	r1, #4
 800b18c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b190:	4298      	cmp	r0, r3
 800b192:	f841 2f04 	str.w	r2, [r1, #4]!
 800b196:	d8f9      	bhi.n	800b18c <__lshift+0xc8>
 800b198:	e7ea      	b.n	800b170 <__lshift+0xac>
 800b19a:	bf00      	nop
 800b19c:	0800c770 	.word	0x0800c770
 800b1a0:	0800c7fc 	.word	0x0800c7fc

0800b1a4 <__mcmp>:
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	690a      	ldr	r2, [r1, #16]
 800b1a8:	6900      	ldr	r0, [r0, #16]
 800b1aa:	b530      	push	{r4, r5, lr}
 800b1ac:	1a80      	subs	r0, r0, r2
 800b1ae:	d10d      	bne.n	800b1cc <__mcmp+0x28>
 800b1b0:	3314      	adds	r3, #20
 800b1b2:	3114      	adds	r1, #20
 800b1b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b1b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b1bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b1c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b1c4:	4295      	cmp	r5, r2
 800b1c6:	d002      	beq.n	800b1ce <__mcmp+0x2a>
 800b1c8:	d304      	bcc.n	800b1d4 <__mcmp+0x30>
 800b1ca:	2001      	movs	r0, #1
 800b1cc:	bd30      	pop	{r4, r5, pc}
 800b1ce:	42a3      	cmp	r3, r4
 800b1d0:	d3f4      	bcc.n	800b1bc <__mcmp+0x18>
 800b1d2:	e7fb      	b.n	800b1cc <__mcmp+0x28>
 800b1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d8:	e7f8      	b.n	800b1cc <__mcmp+0x28>
	...

0800b1dc <__mdiff>:
 800b1dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e0:	460d      	mov	r5, r1
 800b1e2:	4607      	mov	r7, r0
 800b1e4:	4611      	mov	r1, r2
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	4614      	mov	r4, r2
 800b1ea:	f7ff ffdb 	bl	800b1a4 <__mcmp>
 800b1ee:	1e06      	subs	r6, r0, #0
 800b1f0:	d111      	bne.n	800b216 <__mdiff+0x3a>
 800b1f2:	4631      	mov	r1, r6
 800b1f4:	4638      	mov	r0, r7
 800b1f6:	f7ff fd0d 	bl	800ac14 <_Balloc>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	b928      	cbnz	r0, 800b20a <__mdiff+0x2e>
 800b1fe:	f240 2132 	movw	r1, #562	; 0x232
 800b202:	4b3a      	ldr	r3, [pc, #232]	; (800b2ec <__mdiff+0x110>)
 800b204:	483a      	ldr	r0, [pc, #232]	; (800b2f0 <__mdiff+0x114>)
 800b206:	f000 fb55 	bl	800b8b4 <__assert_func>
 800b20a:	2301      	movs	r3, #1
 800b20c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b210:	4610      	mov	r0, r2
 800b212:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b216:	bfa4      	itt	ge
 800b218:	4623      	movge	r3, r4
 800b21a:	462c      	movge	r4, r5
 800b21c:	4638      	mov	r0, r7
 800b21e:	6861      	ldr	r1, [r4, #4]
 800b220:	bfa6      	itte	ge
 800b222:	461d      	movge	r5, r3
 800b224:	2600      	movge	r6, #0
 800b226:	2601      	movlt	r6, #1
 800b228:	f7ff fcf4 	bl	800ac14 <_Balloc>
 800b22c:	4602      	mov	r2, r0
 800b22e:	b918      	cbnz	r0, 800b238 <__mdiff+0x5c>
 800b230:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b234:	4b2d      	ldr	r3, [pc, #180]	; (800b2ec <__mdiff+0x110>)
 800b236:	e7e5      	b.n	800b204 <__mdiff+0x28>
 800b238:	f102 0814 	add.w	r8, r2, #20
 800b23c:	46c2      	mov	sl, r8
 800b23e:	f04f 0c00 	mov.w	ip, #0
 800b242:	6927      	ldr	r7, [r4, #16]
 800b244:	60c6      	str	r6, [r0, #12]
 800b246:	692e      	ldr	r6, [r5, #16]
 800b248:	f104 0014 	add.w	r0, r4, #20
 800b24c:	f105 0914 	add.w	r9, r5, #20
 800b250:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b254:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b258:	3410      	adds	r4, #16
 800b25a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b25e:	f859 3b04 	ldr.w	r3, [r9], #4
 800b262:	fa1f f18b 	uxth.w	r1, fp
 800b266:	448c      	add	ip, r1
 800b268:	b299      	uxth	r1, r3
 800b26a:	0c1b      	lsrs	r3, r3, #16
 800b26c:	ebac 0101 	sub.w	r1, ip, r1
 800b270:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b274:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b278:	b289      	uxth	r1, r1
 800b27a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b27e:	454e      	cmp	r6, r9
 800b280:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b284:	f84a 3b04 	str.w	r3, [sl], #4
 800b288:	d8e7      	bhi.n	800b25a <__mdiff+0x7e>
 800b28a:	1b73      	subs	r3, r6, r5
 800b28c:	3b15      	subs	r3, #21
 800b28e:	f023 0303 	bic.w	r3, r3, #3
 800b292:	3515      	adds	r5, #21
 800b294:	3304      	adds	r3, #4
 800b296:	42ae      	cmp	r6, r5
 800b298:	bf38      	it	cc
 800b29a:	2304      	movcc	r3, #4
 800b29c:	4418      	add	r0, r3
 800b29e:	4443      	add	r3, r8
 800b2a0:	461e      	mov	r6, r3
 800b2a2:	4605      	mov	r5, r0
 800b2a4:	4575      	cmp	r5, lr
 800b2a6:	d30e      	bcc.n	800b2c6 <__mdiff+0xea>
 800b2a8:	f10e 0103 	add.w	r1, lr, #3
 800b2ac:	1a09      	subs	r1, r1, r0
 800b2ae:	f021 0103 	bic.w	r1, r1, #3
 800b2b2:	3803      	subs	r0, #3
 800b2b4:	4586      	cmp	lr, r0
 800b2b6:	bf38      	it	cc
 800b2b8:	2100      	movcc	r1, #0
 800b2ba:	4419      	add	r1, r3
 800b2bc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b2c0:	b18b      	cbz	r3, 800b2e6 <__mdiff+0x10a>
 800b2c2:	6117      	str	r7, [r2, #16]
 800b2c4:	e7a4      	b.n	800b210 <__mdiff+0x34>
 800b2c6:	f855 8b04 	ldr.w	r8, [r5], #4
 800b2ca:	fa1f f188 	uxth.w	r1, r8
 800b2ce:	4461      	add	r1, ip
 800b2d0:	140c      	asrs	r4, r1, #16
 800b2d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b2d6:	b289      	uxth	r1, r1
 800b2d8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b2dc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b2e0:	f846 1b04 	str.w	r1, [r6], #4
 800b2e4:	e7de      	b.n	800b2a4 <__mdiff+0xc8>
 800b2e6:	3f01      	subs	r7, #1
 800b2e8:	e7e8      	b.n	800b2bc <__mdiff+0xe0>
 800b2ea:	bf00      	nop
 800b2ec:	0800c770 	.word	0x0800c770
 800b2f0:	0800c7fc 	.word	0x0800c7fc

0800b2f4 <__ulp>:
 800b2f4:	4b11      	ldr	r3, [pc, #68]	; (800b33c <__ulp+0x48>)
 800b2f6:	400b      	ands	r3, r1
 800b2f8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	dd02      	ble.n	800b306 <__ulp+0x12>
 800b300:	2000      	movs	r0, #0
 800b302:	4619      	mov	r1, r3
 800b304:	4770      	bx	lr
 800b306:	425b      	negs	r3, r3
 800b308:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b30c:	f04f 0000 	mov.w	r0, #0
 800b310:	f04f 0100 	mov.w	r1, #0
 800b314:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b318:	da04      	bge.n	800b324 <__ulp+0x30>
 800b31a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b31e:	fa43 f102 	asr.w	r1, r3, r2
 800b322:	4770      	bx	lr
 800b324:	f1a2 0314 	sub.w	r3, r2, #20
 800b328:	2b1e      	cmp	r3, #30
 800b32a:	bfd6      	itet	le
 800b32c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b330:	2301      	movgt	r3, #1
 800b332:	fa22 f303 	lsrle.w	r3, r2, r3
 800b336:	4618      	mov	r0, r3
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	7ff00000 	.word	0x7ff00000

0800b340 <__b2d>:
 800b340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b344:	6907      	ldr	r7, [r0, #16]
 800b346:	f100 0914 	add.w	r9, r0, #20
 800b34a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b34e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b352:	f1a7 0804 	sub.w	r8, r7, #4
 800b356:	4630      	mov	r0, r6
 800b358:	f7ff fd4e 	bl	800adf8 <__hi0bits>
 800b35c:	f1c0 0320 	rsb	r3, r0, #32
 800b360:	280a      	cmp	r0, #10
 800b362:	600b      	str	r3, [r1, #0]
 800b364:	491f      	ldr	r1, [pc, #124]	; (800b3e4 <__b2d+0xa4>)
 800b366:	dc17      	bgt.n	800b398 <__b2d+0x58>
 800b368:	45c1      	cmp	r9, r8
 800b36a:	bf28      	it	cs
 800b36c:	2200      	movcs	r2, #0
 800b36e:	f1c0 0c0b 	rsb	ip, r0, #11
 800b372:	fa26 f30c 	lsr.w	r3, r6, ip
 800b376:	bf38      	it	cc
 800b378:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b37c:	ea43 0501 	orr.w	r5, r3, r1
 800b380:	f100 0315 	add.w	r3, r0, #21
 800b384:	fa06 f303 	lsl.w	r3, r6, r3
 800b388:	fa22 f20c 	lsr.w	r2, r2, ip
 800b38c:	ea43 0402 	orr.w	r4, r3, r2
 800b390:	4620      	mov	r0, r4
 800b392:	4629      	mov	r1, r5
 800b394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b398:	45c1      	cmp	r9, r8
 800b39a:	bf2e      	itee	cs
 800b39c:	2200      	movcs	r2, #0
 800b39e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b3a2:	f1a7 0808 	subcc.w	r8, r7, #8
 800b3a6:	f1b0 030b 	subs.w	r3, r0, #11
 800b3aa:	d016      	beq.n	800b3da <__b2d+0x9a>
 800b3ac:	f1c3 0720 	rsb	r7, r3, #32
 800b3b0:	fa22 f107 	lsr.w	r1, r2, r7
 800b3b4:	45c8      	cmp	r8, r9
 800b3b6:	fa06 f603 	lsl.w	r6, r6, r3
 800b3ba:	ea46 0601 	orr.w	r6, r6, r1
 800b3be:	bf94      	ite	ls
 800b3c0:	2100      	movls	r1, #0
 800b3c2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b3c6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800b3ca:	fa02 f003 	lsl.w	r0, r2, r3
 800b3ce:	40f9      	lsrs	r1, r7
 800b3d0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b3d4:	ea40 0401 	orr.w	r4, r0, r1
 800b3d8:	e7da      	b.n	800b390 <__b2d+0x50>
 800b3da:	4614      	mov	r4, r2
 800b3dc:	ea46 0501 	orr.w	r5, r6, r1
 800b3e0:	e7d6      	b.n	800b390 <__b2d+0x50>
 800b3e2:	bf00      	nop
 800b3e4:	3ff00000 	.word	0x3ff00000

0800b3e8 <__d2b>:
 800b3e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b3ec:	2101      	movs	r1, #1
 800b3ee:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b3f2:	4690      	mov	r8, r2
 800b3f4:	461d      	mov	r5, r3
 800b3f6:	f7ff fc0d 	bl	800ac14 <_Balloc>
 800b3fa:	4604      	mov	r4, r0
 800b3fc:	b930      	cbnz	r0, 800b40c <__d2b+0x24>
 800b3fe:	4602      	mov	r2, r0
 800b400:	f240 310a 	movw	r1, #778	; 0x30a
 800b404:	4b24      	ldr	r3, [pc, #144]	; (800b498 <__d2b+0xb0>)
 800b406:	4825      	ldr	r0, [pc, #148]	; (800b49c <__d2b+0xb4>)
 800b408:	f000 fa54 	bl	800b8b4 <__assert_func>
 800b40c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b410:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b414:	bb2d      	cbnz	r5, 800b462 <__d2b+0x7a>
 800b416:	9301      	str	r3, [sp, #4]
 800b418:	f1b8 0300 	subs.w	r3, r8, #0
 800b41c:	d026      	beq.n	800b46c <__d2b+0x84>
 800b41e:	4668      	mov	r0, sp
 800b420:	9300      	str	r3, [sp, #0]
 800b422:	f7ff fd09 	bl	800ae38 <__lo0bits>
 800b426:	9900      	ldr	r1, [sp, #0]
 800b428:	b1f0      	cbz	r0, 800b468 <__d2b+0x80>
 800b42a:	9a01      	ldr	r2, [sp, #4]
 800b42c:	f1c0 0320 	rsb	r3, r0, #32
 800b430:	fa02 f303 	lsl.w	r3, r2, r3
 800b434:	430b      	orrs	r3, r1
 800b436:	40c2      	lsrs	r2, r0
 800b438:	6163      	str	r3, [r4, #20]
 800b43a:	9201      	str	r2, [sp, #4]
 800b43c:	9b01      	ldr	r3, [sp, #4]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	bf14      	ite	ne
 800b442:	2102      	movne	r1, #2
 800b444:	2101      	moveq	r1, #1
 800b446:	61a3      	str	r3, [r4, #24]
 800b448:	6121      	str	r1, [r4, #16]
 800b44a:	b1c5      	cbz	r5, 800b47e <__d2b+0x96>
 800b44c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b450:	4405      	add	r5, r0
 800b452:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b456:	603d      	str	r5, [r7, #0]
 800b458:	6030      	str	r0, [r6, #0]
 800b45a:	4620      	mov	r0, r4
 800b45c:	b002      	add	sp, #8
 800b45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b466:	e7d6      	b.n	800b416 <__d2b+0x2e>
 800b468:	6161      	str	r1, [r4, #20]
 800b46a:	e7e7      	b.n	800b43c <__d2b+0x54>
 800b46c:	a801      	add	r0, sp, #4
 800b46e:	f7ff fce3 	bl	800ae38 <__lo0bits>
 800b472:	2101      	movs	r1, #1
 800b474:	9b01      	ldr	r3, [sp, #4]
 800b476:	6121      	str	r1, [r4, #16]
 800b478:	6163      	str	r3, [r4, #20]
 800b47a:	3020      	adds	r0, #32
 800b47c:	e7e5      	b.n	800b44a <__d2b+0x62>
 800b47e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b482:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b486:	6038      	str	r0, [r7, #0]
 800b488:	6918      	ldr	r0, [r3, #16]
 800b48a:	f7ff fcb5 	bl	800adf8 <__hi0bits>
 800b48e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b492:	6031      	str	r1, [r6, #0]
 800b494:	e7e1      	b.n	800b45a <__d2b+0x72>
 800b496:	bf00      	nop
 800b498:	0800c770 	.word	0x0800c770
 800b49c:	0800c7fc 	.word	0x0800c7fc

0800b4a0 <__ratio>:
 800b4a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a4:	4688      	mov	r8, r1
 800b4a6:	4669      	mov	r1, sp
 800b4a8:	4681      	mov	r9, r0
 800b4aa:	f7ff ff49 	bl	800b340 <__b2d>
 800b4ae:	460f      	mov	r7, r1
 800b4b0:	4604      	mov	r4, r0
 800b4b2:	460d      	mov	r5, r1
 800b4b4:	4640      	mov	r0, r8
 800b4b6:	a901      	add	r1, sp, #4
 800b4b8:	f7ff ff42 	bl	800b340 <__b2d>
 800b4bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b4c0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b4c4:	468b      	mov	fp, r1
 800b4c6:	eba3 0c02 	sub.w	ip, r3, r2
 800b4ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b4ce:	1a9b      	subs	r3, r3, r2
 800b4d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	bfd5      	itete	le
 800b4d8:	460a      	movle	r2, r1
 800b4da:	462a      	movgt	r2, r5
 800b4dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b4e0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b4e4:	bfd8      	it	le
 800b4e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b4ea:	465b      	mov	r3, fp
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	4639      	mov	r1, r7
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	f7f5 f91b 	bl	800072c <__aeabi_ddiv>
 800b4f6:	b003      	add	sp, #12
 800b4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b4fc <__copybits>:
 800b4fc:	3901      	subs	r1, #1
 800b4fe:	b570      	push	{r4, r5, r6, lr}
 800b500:	1149      	asrs	r1, r1, #5
 800b502:	6914      	ldr	r4, [r2, #16]
 800b504:	3101      	adds	r1, #1
 800b506:	f102 0314 	add.w	r3, r2, #20
 800b50a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b50e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b512:	1f05      	subs	r5, r0, #4
 800b514:	42a3      	cmp	r3, r4
 800b516:	d30c      	bcc.n	800b532 <__copybits+0x36>
 800b518:	1aa3      	subs	r3, r4, r2
 800b51a:	3b11      	subs	r3, #17
 800b51c:	f023 0303 	bic.w	r3, r3, #3
 800b520:	3211      	adds	r2, #17
 800b522:	42a2      	cmp	r2, r4
 800b524:	bf88      	it	hi
 800b526:	2300      	movhi	r3, #0
 800b528:	4418      	add	r0, r3
 800b52a:	2300      	movs	r3, #0
 800b52c:	4288      	cmp	r0, r1
 800b52e:	d305      	bcc.n	800b53c <__copybits+0x40>
 800b530:	bd70      	pop	{r4, r5, r6, pc}
 800b532:	f853 6b04 	ldr.w	r6, [r3], #4
 800b536:	f845 6f04 	str.w	r6, [r5, #4]!
 800b53a:	e7eb      	b.n	800b514 <__copybits+0x18>
 800b53c:	f840 3b04 	str.w	r3, [r0], #4
 800b540:	e7f4      	b.n	800b52c <__copybits+0x30>

0800b542 <__any_on>:
 800b542:	f100 0214 	add.w	r2, r0, #20
 800b546:	6900      	ldr	r0, [r0, #16]
 800b548:	114b      	asrs	r3, r1, #5
 800b54a:	4298      	cmp	r0, r3
 800b54c:	b510      	push	{r4, lr}
 800b54e:	db11      	blt.n	800b574 <__any_on+0x32>
 800b550:	dd0a      	ble.n	800b568 <__any_on+0x26>
 800b552:	f011 011f 	ands.w	r1, r1, #31
 800b556:	d007      	beq.n	800b568 <__any_on+0x26>
 800b558:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b55c:	fa24 f001 	lsr.w	r0, r4, r1
 800b560:	fa00 f101 	lsl.w	r1, r0, r1
 800b564:	428c      	cmp	r4, r1
 800b566:	d10b      	bne.n	800b580 <__any_on+0x3e>
 800b568:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d803      	bhi.n	800b578 <__any_on+0x36>
 800b570:	2000      	movs	r0, #0
 800b572:	bd10      	pop	{r4, pc}
 800b574:	4603      	mov	r3, r0
 800b576:	e7f7      	b.n	800b568 <__any_on+0x26>
 800b578:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b57c:	2900      	cmp	r1, #0
 800b57e:	d0f5      	beq.n	800b56c <__any_on+0x2a>
 800b580:	2001      	movs	r0, #1
 800b582:	e7f6      	b.n	800b572 <__any_on+0x30>

0800b584 <_calloc_r>:
 800b584:	b570      	push	{r4, r5, r6, lr}
 800b586:	fba1 5402 	umull	r5, r4, r1, r2
 800b58a:	b934      	cbnz	r4, 800b59a <_calloc_r+0x16>
 800b58c:	4629      	mov	r1, r5
 800b58e:	f7fc facb 	bl	8007b28 <_malloc_r>
 800b592:	4606      	mov	r6, r0
 800b594:	b928      	cbnz	r0, 800b5a2 <_calloc_r+0x1e>
 800b596:	4630      	mov	r0, r6
 800b598:	bd70      	pop	{r4, r5, r6, pc}
 800b59a:	220c      	movs	r2, #12
 800b59c:	2600      	movs	r6, #0
 800b59e:	6002      	str	r2, [r0, #0]
 800b5a0:	e7f9      	b.n	800b596 <_calloc_r+0x12>
 800b5a2:	462a      	mov	r2, r5
 800b5a4:	4621      	mov	r1, r4
 800b5a6:	f7fc fa4f 	bl	8007a48 <memset>
 800b5aa:	e7f4      	b.n	800b596 <_calloc_r+0x12>

0800b5ac <__ssputs_r>:
 800b5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5b0:	688e      	ldr	r6, [r1, #8]
 800b5b2:	4682      	mov	sl, r0
 800b5b4:	429e      	cmp	r6, r3
 800b5b6:	460c      	mov	r4, r1
 800b5b8:	4690      	mov	r8, r2
 800b5ba:	461f      	mov	r7, r3
 800b5bc:	d838      	bhi.n	800b630 <__ssputs_r+0x84>
 800b5be:	898a      	ldrh	r2, [r1, #12]
 800b5c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b5c4:	d032      	beq.n	800b62c <__ssputs_r+0x80>
 800b5c6:	6825      	ldr	r5, [r4, #0]
 800b5c8:	6909      	ldr	r1, [r1, #16]
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	eba5 0901 	sub.w	r9, r5, r1
 800b5d0:	6965      	ldr	r5, [r4, #20]
 800b5d2:	444b      	add	r3, r9
 800b5d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5dc:	106d      	asrs	r5, r5, #1
 800b5de:	429d      	cmp	r5, r3
 800b5e0:	bf38      	it	cc
 800b5e2:	461d      	movcc	r5, r3
 800b5e4:	0553      	lsls	r3, r2, #21
 800b5e6:	d531      	bpl.n	800b64c <__ssputs_r+0xa0>
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	f7fc fa9d 	bl	8007b28 <_malloc_r>
 800b5ee:	4606      	mov	r6, r0
 800b5f0:	b950      	cbnz	r0, 800b608 <__ssputs_r+0x5c>
 800b5f2:	230c      	movs	r3, #12
 800b5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5f8:	f8ca 3000 	str.w	r3, [sl]
 800b5fc:	89a3      	ldrh	r3, [r4, #12]
 800b5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b602:	81a3      	strh	r3, [r4, #12]
 800b604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b608:	464a      	mov	r2, r9
 800b60a:	6921      	ldr	r1, [r4, #16]
 800b60c:	f7fc f9f4 	bl	80079f8 <memcpy>
 800b610:	89a3      	ldrh	r3, [r4, #12]
 800b612:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b61a:	81a3      	strh	r3, [r4, #12]
 800b61c:	6126      	str	r6, [r4, #16]
 800b61e:	444e      	add	r6, r9
 800b620:	6026      	str	r6, [r4, #0]
 800b622:	463e      	mov	r6, r7
 800b624:	6165      	str	r5, [r4, #20]
 800b626:	eba5 0509 	sub.w	r5, r5, r9
 800b62a:	60a5      	str	r5, [r4, #8]
 800b62c:	42be      	cmp	r6, r7
 800b62e:	d900      	bls.n	800b632 <__ssputs_r+0x86>
 800b630:	463e      	mov	r6, r7
 800b632:	4632      	mov	r2, r6
 800b634:	4641      	mov	r1, r8
 800b636:	6820      	ldr	r0, [r4, #0]
 800b638:	f7fc f9ec 	bl	8007a14 <memmove>
 800b63c:	68a3      	ldr	r3, [r4, #8]
 800b63e:	2000      	movs	r0, #0
 800b640:	1b9b      	subs	r3, r3, r6
 800b642:	60a3      	str	r3, [r4, #8]
 800b644:	6823      	ldr	r3, [r4, #0]
 800b646:	4433      	add	r3, r6
 800b648:	6023      	str	r3, [r4, #0]
 800b64a:	e7db      	b.n	800b604 <__ssputs_r+0x58>
 800b64c:	462a      	mov	r2, r5
 800b64e:	f000 f964 	bl	800b91a <_realloc_r>
 800b652:	4606      	mov	r6, r0
 800b654:	2800      	cmp	r0, #0
 800b656:	d1e1      	bne.n	800b61c <__ssputs_r+0x70>
 800b658:	4650      	mov	r0, sl
 800b65a:	6921      	ldr	r1, [r4, #16]
 800b65c:	f7fc f9fc 	bl	8007a58 <_free_r>
 800b660:	e7c7      	b.n	800b5f2 <__ssputs_r+0x46>
	...

0800b664 <_svfiprintf_r>:
 800b664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b668:	4698      	mov	r8, r3
 800b66a:	898b      	ldrh	r3, [r1, #12]
 800b66c:	4607      	mov	r7, r0
 800b66e:	061b      	lsls	r3, r3, #24
 800b670:	460d      	mov	r5, r1
 800b672:	4614      	mov	r4, r2
 800b674:	b09d      	sub	sp, #116	; 0x74
 800b676:	d50e      	bpl.n	800b696 <_svfiprintf_r+0x32>
 800b678:	690b      	ldr	r3, [r1, #16]
 800b67a:	b963      	cbnz	r3, 800b696 <_svfiprintf_r+0x32>
 800b67c:	2140      	movs	r1, #64	; 0x40
 800b67e:	f7fc fa53 	bl	8007b28 <_malloc_r>
 800b682:	6028      	str	r0, [r5, #0]
 800b684:	6128      	str	r0, [r5, #16]
 800b686:	b920      	cbnz	r0, 800b692 <_svfiprintf_r+0x2e>
 800b688:	230c      	movs	r3, #12
 800b68a:	603b      	str	r3, [r7, #0]
 800b68c:	f04f 30ff 	mov.w	r0, #4294967295
 800b690:	e0d1      	b.n	800b836 <_svfiprintf_r+0x1d2>
 800b692:	2340      	movs	r3, #64	; 0x40
 800b694:	616b      	str	r3, [r5, #20]
 800b696:	2300      	movs	r3, #0
 800b698:	9309      	str	r3, [sp, #36]	; 0x24
 800b69a:	2320      	movs	r3, #32
 800b69c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6a0:	2330      	movs	r3, #48	; 0x30
 800b6a2:	f04f 0901 	mov.w	r9, #1
 800b6a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b850 <_svfiprintf_r+0x1ec>
 800b6ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6b2:	4623      	mov	r3, r4
 800b6b4:	469a      	mov	sl, r3
 800b6b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6ba:	b10a      	cbz	r2, 800b6c0 <_svfiprintf_r+0x5c>
 800b6bc:	2a25      	cmp	r2, #37	; 0x25
 800b6be:	d1f9      	bne.n	800b6b4 <_svfiprintf_r+0x50>
 800b6c0:	ebba 0b04 	subs.w	fp, sl, r4
 800b6c4:	d00b      	beq.n	800b6de <_svfiprintf_r+0x7a>
 800b6c6:	465b      	mov	r3, fp
 800b6c8:	4622      	mov	r2, r4
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	4638      	mov	r0, r7
 800b6ce:	f7ff ff6d 	bl	800b5ac <__ssputs_r>
 800b6d2:	3001      	adds	r0, #1
 800b6d4:	f000 80aa 	beq.w	800b82c <_svfiprintf_r+0x1c8>
 800b6d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6da:	445a      	add	r2, fp
 800b6dc:	9209      	str	r2, [sp, #36]	; 0x24
 800b6de:	f89a 3000 	ldrb.w	r3, [sl]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	f000 80a2 	beq.w	800b82c <_svfiprintf_r+0x1c8>
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6f2:	f10a 0a01 	add.w	sl, sl, #1
 800b6f6:	9304      	str	r3, [sp, #16]
 800b6f8:	9307      	str	r3, [sp, #28]
 800b6fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6fe:	931a      	str	r3, [sp, #104]	; 0x68
 800b700:	4654      	mov	r4, sl
 800b702:	2205      	movs	r2, #5
 800b704:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b708:	4851      	ldr	r0, [pc, #324]	; (800b850 <_svfiprintf_r+0x1ec>)
 800b70a:	f7fc f967 	bl	80079dc <memchr>
 800b70e:	9a04      	ldr	r2, [sp, #16]
 800b710:	b9d8      	cbnz	r0, 800b74a <_svfiprintf_r+0xe6>
 800b712:	06d0      	lsls	r0, r2, #27
 800b714:	bf44      	itt	mi
 800b716:	2320      	movmi	r3, #32
 800b718:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b71c:	0711      	lsls	r1, r2, #28
 800b71e:	bf44      	itt	mi
 800b720:	232b      	movmi	r3, #43	; 0x2b
 800b722:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b726:	f89a 3000 	ldrb.w	r3, [sl]
 800b72a:	2b2a      	cmp	r3, #42	; 0x2a
 800b72c:	d015      	beq.n	800b75a <_svfiprintf_r+0xf6>
 800b72e:	4654      	mov	r4, sl
 800b730:	2000      	movs	r0, #0
 800b732:	f04f 0c0a 	mov.w	ip, #10
 800b736:	9a07      	ldr	r2, [sp, #28]
 800b738:	4621      	mov	r1, r4
 800b73a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b73e:	3b30      	subs	r3, #48	; 0x30
 800b740:	2b09      	cmp	r3, #9
 800b742:	d94e      	bls.n	800b7e2 <_svfiprintf_r+0x17e>
 800b744:	b1b0      	cbz	r0, 800b774 <_svfiprintf_r+0x110>
 800b746:	9207      	str	r2, [sp, #28]
 800b748:	e014      	b.n	800b774 <_svfiprintf_r+0x110>
 800b74a:	eba0 0308 	sub.w	r3, r0, r8
 800b74e:	fa09 f303 	lsl.w	r3, r9, r3
 800b752:	4313      	orrs	r3, r2
 800b754:	46a2      	mov	sl, r4
 800b756:	9304      	str	r3, [sp, #16]
 800b758:	e7d2      	b.n	800b700 <_svfiprintf_r+0x9c>
 800b75a:	9b03      	ldr	r3, [sp, #12]
 800b75c:	1d19      	adds	r1, r3, #4
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	9103      	str	r1, [sp, #12]
 800b762:	2b00      	cmp	r3, #0
 800b764:	bfbb      	ittet	lt
 800b766:	425b      	neglt	r3, r3
 800b768:	f042 0202 	orrlt.w	r2, r2, #2
 800b76c:	9307      	strge	r3, [sp, #28]
 800b76e:	9307      	strlt	r3, [sp, #28]
 800b770:	bfb8      	it	lt
 800b772:	9204      	strlt	r2, [sp, #16]
 800b774:	7823      	ldrb	r3, [r4, #0]
 800b776:	2b2e      	cmp	r3, #46	; 0x2e
 800b778:	d10c      	bne.n	800b794 <_svfiprintf_r+0x130>
 800b77a:	7863      	ldrb	r3, [r4, #1]
 800b77c:	2b2a      	cmp	r3, #42	; 0x2a
 800b77e:	d135      	bne.n	800b7ec <_svfiprintf_r+0x188>
 800b780:	9b03      	ldr	r3, [sp, #12]
 800b782:	3402      	adds	r4, #2
 800b784:	1d1a      	adds	r2, r3, #4
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	9203      	str	r2, [sp, #12]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	bfb8      	it	lt
 800b78e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b792:	9305      	str	r3, [sp, #20]
 800b794:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b854 <_svfiprintf_r+0x1f0>
 800b798:	2203      	movs	r2, #3
 800b79a:	4650      	mov	r0, sl
 800b79c:	7821      	ldrb	r1, [r4, #0]
 800b79e:	f7fc f91d 	bl	80079dc <memchr>
 800b7a2:	b140      	cbz	r0, 800b7b6 <_svfiprintf_r+0x152>
 800b7a4:	2340      	movs	r3, #64	; 0x40
 800b7a6:	eba0 000a 	sub.w	r0, r0, sl
 800b7aa:	fa03 f000 	lsl.w	r0, r3, r0
 800b7ae:	9b04      	ldr	r3, [sp, #16]
 800b7b0:	3401      	adds	r4, #1
 800b7b2:	4303      	orrs	r3, r0
 800b7b4:	9304      	str	r3, [sp, #16]
 800b7b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7ba:	2206      	movs	r2, #6
 800b7bc:	4826      	ldr	r0, [pc, #152]	; (800b858 <_svfiprintf_r+0x1f4>)
 800b7be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7c2:	f7fc f90b 	bl	80079dc <memchr>
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	d038      	beq.n	800b83c <_svfiprintf_r+0x1d8>
 800b7ca:	4b24      	ldr	r3, [pc, #144]	; (800b85c <_svfiprintf_r+0x1f8>)
 800b7cc:	bb1b      	cbnz	r3, 800b816 <_svfiprintf_r+0x1b2>
 800b7ce:	9b03      	ldr	r3, [sp, #12]
 800b7d0:	3307      	adds	r3, #7
 800b7d2:	f023 0307 	bic.w	r3, r3, #7
 800b7d6:	3308      	adds	r3, #8
 800b7d8:	9303      	str	r3, [sp, #12]
 800b7da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7dc:	4433      	add	r3, r6
 800b7de:	9309      	str	r3, [sp, #36]	; 0x24
 800b7e0:	e767      	b.n	800b6b2 <_svfiprintf_r+0x4e>
 800b7e2:	460c      	mov	r4, r1
 800b7e4:	2001      	movs	r0, #1
 800b7e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7ea:	e7a5      	b.n	800b738 <_svfiprintf_r+0xd4>
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	f04f 0c0a 	mov.w	ip, #10
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	3401      	adds	r4, #1
 800b7f6:	9305      	str	r3, [sp, #20]
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7fe:	3a30      	subs	r2, #48	; 0x30
 800b800:	2a09      	cmp	r2, #9
 800b802:	d903      	bls.n	800b80c <_svfiprintf_r+0x1a8>
 800b804:	2b00      	cmp	r3, #0
 800b806:	d0c5      	beq.n	800b794 <_svfiprintf_r+0x130>
 800b808:	9105      	str	r1, [sp, #20]
 800b80a:	e7c3      	b.n	800b794 <_svfiprintf_r+0x130>
 800b80c:	4604      	mov	r4, r0
 800b80e:	2301      	movs	r3, #1
 800b810:	fb0c 2101 	mla	r1, ip, r1, r2
 800b814:	e7f0      	b.n	800b7f8 <_svfiprintf_r+0x194>
 800b816:	ab03      	add	r3, sp, #12
 800b818:	9300      	str	r3, [sp, #0]
 800b81a:	462a      	mov	r2, r5
 800b81c:	4638      	mov	r0, r7
 800b81e:	4b10      	ldr	r3, [pc, #64]	; (800b860 <_svfiprintf_r+0x1fc>)
 800b820:	a904      	add	r1, sp, #16
 800b822:	f7fc fa93 	bl	8007d4c <_printf_float>
 800b826:	1c42      	adds	r2, r0, #1
 800b828:	4606      	mov	r6, r0
 800b82a:	d1d6      	bne.n	800b7da <_svfiprintf_r+0x176>
 800b82c:	89ab      	ldrh	r3, [r5, #12]
 800b82e:	065b      	lsls	r3, r3, #25
 800b830:	f53f af2c 	bmi.w	800b68c <_svfiprintf_r+0x28>
 800b834:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b836:	b01d      	add	sp, #116	; 0x74
 800b838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b83c:	ab03      	add	r3, sp, #12
 800b83e:	9300      	str	r3, [sp, #0]
 800b840:	462a      	mov	r2, r5
 800b842:	4638      	mov	r0, r7
 800b844:	4b06      	ldr	r3, [pc, #24]	; (800b860 <_svfiprintf_r+0x1fc>)
 800b846:	a904      	add	r1, sp, #16
 800b848:	f7fc fd1c 	bl	8008284 <_printf_i>
 800b84c:	e7eb      	b.n	800b826 <_svfiprintf_r+0x1c2>
 800b84e:	bf00      	nop
 800b850:	0800c954 	.word	0x0800c954
 800b854:	0800c95a 	.word	0x0800c95a
 800b858:	0800c95e 	.word	0x0800c95e
 800b85c:	08007d4d 	.word	0x08007d4d
 800b860:	0800b5ad 	.word	0x0800b5ad

0800b864 <nan>:
 800b864:	2000      	movs	r0, #0
 800b866:	4901      	ldr	r1, [pc, #4]	; (800b86c <nan+0x8>)
 800b868:	4770      	bx	lr
 800b86a:	bf00      	nop
 800b86c:	7ff80000 	.word	0x7ff80000

0800b870 <strncmp>:
 800b870:	4603      	mov	r3, r0
 800b872:	b510      	push	{r4, lr}
 800b874:	b172      	cbz	r2, 800b894 <strncmp+0x24>
 800b876:	3901      	subs	r1, #1
 800b878:	1884      	adds	r4, r0, r2
 800b87a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b87e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b882:	4290      	cmp	r0, r2
 800b884:	d101      	bne.n	800b88a <strncmp+0x1a>
 800b886:	42a3      	cmp	r3, r4
 800b888:	d101      	bne.n	800b88e <strncmp+0x1e>
 800b88a:	1a80      	subs	r0, r0, r2
 800b88c:	bd10      	pop	{r4, pc}
 800b88e:	2800      	cmp	r0, #0
 800b890:	d1f3      	bne.n	800b87a <strncmp+0xa>
 800b892:	e7fa      	b.n	800b88a <strncmp+0x1a>
 800b894:	4610      	mov	r0, r2
 800b896:	e7f9      	b.n	800b88c <strncmp+0x1c>

0800b898 <__ascii_wctomb>:
 800b898:	4603      	mov	r3, r0
 800b89a:	4608      	mov	r0, r1
 800b89c:	b141      	cbz	r1, 800b8b0 <__ascii_wctomb+0x18>
 800b89e:	2aff      	cmp	r2, #255	; 0xff
 800b8a0:	d904      	bls.n	800b8ac <__ascii_wctomb+0x14>
 800b8a2:	228a      	movs	r2, #138	; 0x8a
 800b8a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8a8:	601a      	str	r2, [r3, #0]
 800b8aa:	4770      	bx	lr
 800b8ac:	2001      	movs	r0, #1
 800b8ae:	700a      	strb	r2, [r1, #0]
 800b8b0:	4770      	bx	lr
	...

0800b8b4 <__assert_func>:
 800b8b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8b6:	4614      	mov	r4, r2
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	4b09      	ldr	r3, [pc, #36]	; (800b8e0 <__assert_func+0x2c>)
 800b8bc:	4605      	mov	r5, r0
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	68d8      	ldr	r0, [r3, #12]
 800b8c2:	b14c      	cbz	r4, 800b8d8 <__assert_func+0x24>
 800b8c4:	4b07      	ldr	r3, [pc, #28]	; (800b8e4 <__assert_func+0x30>)
 800b8c6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b8ca:	9100      	str	r1, [sp, #0]
 800b8cc:	462b      	mov	r3, r5
 800b8ce:	4906      	ldr	r1, [pc, #24]	; (800b8e8 <__assert_func+0x34>)
 800b8d0:	f000 f80e 	bl	800b8f0 <fiprintf>
 800b8d4:	f7fc f840 	bl	8007958 <abort>
 800b8d8:	4b04      	ldr	r3, [pc, #16]	; (800b8ec <__assert_func+0x38>)
 800b8da:	461c      	mov	r4, r3
 800b8dc:	e7f3      	b.n	800b8c6 <__assert_func+0x12>
 800b8de:	bf00      	nop
 800b8e0:	2000017c 	.word	0x2000017c
 800b8e4:	0800c965 	.word	0x0800c965
 800b8e8:	0800c972 	.word	0x0800c972
 800b8ec:	0800c9a0 	.word	0x0800c9a0

0800b8f0 <fiprintf>:
 800b8f0:	b40e      	push	{r1, r2, r3}
 800b8f2:	b503      	push	{r0, r1, lr}
 800b8f4:	4601      	mov	r1, r0
 800b8f6:	ab03      	add	r3, sp, #12
 800b8f8:	4805      	ldr	r0, [pc, #20]	; (800b910 <fiprintf+0x20>)
 800b8fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8fe:	6800      	ldr	r0, [r0, #0]
 800b900:	9301      	str	r3, [sp, #4]
 800b902:	f000 f861 	bl	800b9c8 <_vfiprintf_r>
 800b906:	b002      	add	sp, #8
 800b908:	f85d eb04 	ldr.w	lr, [sp], #4
 800b90c:	b003      	add	sp, #12
 800b90e:	4770      	bx	lr
 800b910:	2000017c 	.word	0x2000017c

0800b914 <__retarget_lock_init_recursive>:
 800b914:	4770      	bx	lr

0800b916 <__retarget_lock_acquire_recursive>:
 800b916:	4770      	bx	lr

0800b918 <__retarget_lock_release_recursive>:
 800b918:	4770      	bx	lr

0800b91a <_realloc_r>:
 800b91a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b91e:	4680      	mov	r8, r0
 800b920:	4614      	mov	r4, r2
 800b922:	460e      	mov	r6, r1
 800b924:	b921      	cbnz	r1, 800b930 <_realloc_r+0x16>
 800b926:	4611      	mov	r1, r2
 800b928:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b92c:	f7fc b8fc 	b.w	8007b28 <_malloc_r>
 800b930:	b92a      	cbnz	r2, 800b93e <_realloc_r+0x24>
 800b932:	f7fc f891 	bl	8007a58 <_free_r>
 800b936:	4625      	mov	r5, r4
 800b938:	4628      	mov	r0, r5
 800b93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b93e:	f000 fc4b 	bl	800c1d8 <_malloc_usable_size_r>
 800b942:	4284      	cmp	r4, r0
 800b944:	4607      	mov	r7, r0
 800b946:	d802      	bhi.n	800b94e <_realloc_r+0x34>
 800b948:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b94c:	d812      	bhi.n	800b974 <_realloc_r+0x5a>
 800b94e:	4621      	mov	r1, r4
 800b950:	4640      	mov	r0, r8
 800b952:	f7fc f8e9 	bl	8007b28 <_malloc_r>
 800b956:	4605      	mov	r5, r0
 800b958:	2800      	cmp	r0, #0
 800b95a:	d0ed      	beq.n	800b938 <_realloc_r+0x1e>
 800b95c:	42bc      	cmp	r4, r7
 800b95e:	4622      	mov	r2, r4
 800b960:	4631      	mov	r1, r6
 800b962:	bf28      	it	cs
 800b964:	463a      	movcs	r2, r7
 800b966:	f7fc f847 	bl	80079f8 <memcpy>
 800b96a:	4631      	mov	r1, r6
 800b96c:	4640      	mov	r0, r8
 800b96e:	f7fc f873 	bl	8007a58 <_free_r>
 800b972:	e7e1      	b.n	800b938 <_realloc_r+0x1e>
 800b974:	4635      	mov	r5, r6
 800b976:	e7df      	b.n	800b938 <_realloc_r+0x1e>

0800b978 <__sfputc_r>:
 800b978:	6893      	ldr	r3, [r2, #8]
 800b97a:	b410      	push	{r4}
 800b97c:	3b01      	subs	r3, #1
 800b97e:	2b00      	cmp	r3, #0
 800b980:	6093      	str	r3, [r2, #8]
 800b982:	da07      	bge.n	800b994 <__sfputc_r+0x1c>
 800b984:	6994      	ldr	r4, [r2, #24]
 800b986:	42a3      	cmp	r3, r4
 800b988:	db01      	blt.n	800b98e <__sfputc_r+0x16>
 800b98a:	290a      	cmp	r1, #10
 800b98c:	d102      	bne.n	800b994 <__sfputc_r+0x1c>
 800b98e:	bc10      	pop	{r4}
 800b990:	f000 b94a 	b.w	800bc28 <__swbuf_r>
 800b994:	6813      	ldr	r3, [r2, #0]
 800b996:	1c58      	adds	r0, r3, #1
 800b998:	6010      	str	r0, [r2, #0]
 800b99a:	7019      	strb	r1, [r3, #0]
 800b99c:	4608      	mov	r0, r1
 800b99e:	bc10      	pop	{r4}
 800b9a0:	4770      	bx	lr

0800b9a2 <__sfputs_r>:
 800b9a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a4:	4606      	mov	r6, r0
 800b9a6:	460f      	mov	r7, r1
 800b9a8:	4614      	mov	r4, r2
 800b9aa:	18d5      	adds	r5, r2, r3
 800b9ac:	42ac      	cmp	r4, r5
 800b9ae:	d101      	bne.n	800b9b4 <__sfputs_r+0x12>
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	e007      	b.n	800b9c4 <__sfputs_r+0x22>
 800b9b4:	463a      	mov	r2, r7
 800b9b6:	4630      	mov	r0, r6
 800b9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9bc:	f7ff ffdc 	bl	800b978 <__sfputc_r>
 800b9c0:	1c43      	adds	r3, r0, #1
 800b9c2:	d1f3      	bne.n	800b9ac <__sfputs_r+0xa>
 800b9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b9c8 <_vfiprintf_r>:
 800b9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9cc:	460d      	mov	r5, r1
 800b9ce:	4614      	mov	r4, r2
 800b9d0:	4698      	mov	r8, r3
 800b9d2:	4606      	mov	r6, r0
 800b9d4:	b09d      	sub	sp, #116	; 0x74
 800b9d6:	b118      	cbz	r0, 800b9e0 <_vfiprintf_r+0x18>
 800b9d8:	6983      	ldr	r3, [r0, #24]
 800b9da:	b90b      	cbnz	r3, 800b9e0 <_vfiprintf_r+0x18>
 800b9dc:	f000 fafa 	bl	800bfd4 <__sinit>
 800b9e0:	4b89      	ldr	r3, [pc, #548]	; (800bc08 <_vfiprintf_r+0x240>)
 800b9e2:	429d      	cmp	r5, r3
 800b9e4:	d11b      	bne.n	800ba1e <_vfiprintf_r+0x56>
 800b9e6:	6875      	ldr	r5, [r6, #4]
 800b9e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9ea:	07d9      	lsls	r1, r3, #31
 800b9ec:	d405      	bmi.n	800b9fa <_vfiprintf_r+0x32>
 800b9ee:	89ab      	ldrh	r3, [r5, #12]
 800b9f0:	059a      	lsls	r2, r3, #22
 800b9f2:	d402      	bmi.n	800b9fa <_vfiprintf_r+0x32>
 800b9f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9f6:	f7ff ff8e 	bl	800b916 <__retarget_lock_acquire_recursive>
 800b9fa:	89ab      	ldrh	r3, [r5, #12]
 800b9fc:	071b      	lsls	r3, r3, #28
 800b9fe:	d501      	bpl.n	800ba04 <_vfiprintf_r+0x3c>
 800ba00:	692b      	ldr	r3, [r5, #16]
 800ba02:	b9eb      	cbnz	r3, 800ba40 <_vfiprintf_r+0x78>
 800ba04:	4629      	mov	r1, r5
 800ba06:	4630      	mov	r0, r6
 800ba08:	f000 f960 	bl	800bccc <__swsetup_r>
 800ba0c:	b1c0      	cbz	r0, 800ba40 <_vfiprintf_r+0x78>
 800ba0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba10:	07dc      	lsls	r4, r3, #31
 800ba12:	d50e      	bpl.n	800ba32 <_vfiprintf_r+0x6a>
 800ba14:	f04f 30ff 	mov.w	r0, #4294967295
 800ba18:	b01d      	add	sp, #116	; 0x74
 800ba1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba1e:	4b7b      	ldr	r3, [pc, #492]	; (800bc0c <_vfiprintf_r+0x244>)
 800ba20:	429d      	cmp	r5, r3
 800ba22:	d101      	bne.n	800ba28 <_vfiprintf_r+0x60>
 800ba24:	68b5      	ldr	r5, [r6, #8]
 800ba26:	e7df      	b.n	800b9e8 <_vfiprintf_r+0x20>
 800ba28:	4b79      	ldr	r3, [pc, #484]	; (800bc10 <_vfiprintf_r+0x248>)
 800ba2a:	429d      	cmp	r5, r3
 800ba2c:	bf08      	it	eq
 800ba2e:	68f5      	ldreq	r5, [r6, #12]
 800ba30:	e7da      	b.n	800b9e8 <_vfiprintf_r+0x20>
 800ba32:	89ab      	ldrh	r3, [r5, #12]
 800ba34:	0598      	lsls	r0, r3, #22
 800ba36:	d4ed      	bmi.n	800ba14 <_vfiprintf_r+0x4c>
 800ba38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba3a:	f7ff ff6d 	bl	800b918 <__retarget_lock_release_recursive>
 800ba3e:	e7e9      	b.n	800ba14 <_vfiprintf_r+0x4c>
 800ba40:	2300      	movs	r3, #0
 800ba42:	9309      	str	r3, [sp, #36]	; 0x24
 800ba44:	2320      	movs	r3, #32
 800ba46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba4a:	2330      	movs	r3, #48	; 0x30
 800ba4c:	f04f 0901 	mov.w	r9, #1
 800ba50:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba54:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bc14 <_vfiprintf_r+0x24c>
 800ba58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba5c:	4623      	mov	r3, r4
 800ba5e:	469a      	mov	sl, r3
 800ba60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba64:	b10a      	cbz	r2, 800ba6a <_vfiprintf_r+0xa2>
 800ba66:	2a25      	cmp	r2, #37	; 0x25
 800ba68:	d1f9      	bne.n	800ba5e <_vfiprintf_r+0x96>
 800ba6a:	ebba 0b04 	subs.w	fp, sl, r4
 800ba6e:	d00b      	beq.n	800ba88 <_vfiprintf_r+0xc0>
 800ba70:	465b      	mov	r3, fp
 800ba72:	4622      	mov	r2, r4
 800ba74:	4629      	mov	r1, r5
 800ba76:	4630      	mov	r0, r6
 800ba78:	f7ff ff93 	bl	800b9a2 <__sfputs_r>
 800ba7c:	3001      	adds	r0, #1
 800ba7e:	f000 80aa 	beq.w	800bbd6 <_vfiprintf_r+0x20e>
 800ba82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba84:	445a      	add	r2, fp
 800ba86:	9209      	str	r2, [sp, #36]	; 0x24
 800ba88:	f89a 3000 	ldrb.w	r3, [sl]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	f000 80a2 	beq.w	800bbd6 <_vfiprintf_r+0x20e>
 800ba92:	2300      	movs	r3, #0
 800ba94:	f04f 32ff 	mov.w	r2, #4294967295
 800ba98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba9c:	f10a 0a01 	add.w	sl, sl, #1
 800baa0:	9304      	str	r3, [sp, #16]
 800baa2:	9307      	str	r3, [sp, #28]
 800baa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800baa8:	931a      	str	r3, [sp, #104]	; 0x68
 800baaa:	4654      	mov	r4, sl
 800baac:	2205      	movs	r2, #5
 800baae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bab2:	4858      	ldr	r0, [pc, #352]	; (800bc14 <_vfiprintf_r+0x24c>)
 800bab4:	f7fb ff92 	bl	80079dc <memchr>
 800bab8:	9a04      	ldr	r2, [sp, #16]
 800baba:	b9d8      	cbnz	r0, 800baf4 <_vfiprintf_r+0x12c>
 800babc:	06d1      	lsls	r1, r2, #27
 800babe:	bf44      	itt	mi
 800bac0:	2320      	movmi	r3, #32
 800bac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bac6:	0713      	lsls	r3, r2, #28
 800bac8:	bf44      	itt	mi
 800baca:	232b      	movmi	r3, #43	; 0x2b
 800bacc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bad0:	f89a 3000 	ldrb.w	r3, [sl]
 800bad4:	2b2a      	cmp	r3, #42	; 0x2a
 800bad6:	d015      	beq.n	800bb04 <_vfiprintf_r+0x13c>
 800bad8:	4654      	mov	r4, sl
 800bada:	2000      	movs	r0, #0
 800badc:	f04f 0c0a 	mov.w	ip, #10
 800bae0:	9a07      	ldr	r2, [sp, #28]
 800bae2:	4621      	mov	r1, r4
 800bae4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bae8:	3b30      	subs	r3, #48	; 0x30
 800baea:	2b09      	cmp	r3, #9
 800baec:	d94e      	bls.n	800bb8c <_vfiprintf_r+0x1c4>
 800baee:	b1b0      	cbz	r0, 800bb1e <_vfiprintf_r+0x156>
 800baf0:	9207      	str	r2, [sp, #28]
 800baf2:	e014      	b.n	800bb1e <_vfiprintf_r+0x156>
 800baf4:	eba0 0308 	sub.w	r3, r0, r8
 800baf8:	fa09 f303 	lsl.w	r3, r9, r3
 800bafc:	4313      	orrs	r3, r2
 800bafe:	46a2      	mov	sl, r4
 800bb00:	9304      	str	r3, [sp, #16]
 800bb02:	e7d2      	b.n	800baaa <_vfiprintf_r+0xe2>
 800bb04:	9b03      	ldr	r3, [sp, #12]
 800bb06:	1d19      	adds	r1, r3, #4
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	9103      	str	r1, [sp, #12]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	bfbb      	ittet	lt
 800bb10:	425b      	neglt	r3, r3
 800bb12:	f042 0202 	orrlt.w	r2, r2, #2
 800bb16:	9307      	strge	r3, [sp, #28]
 800bb18:	9307      	strlt	r3, [sp, #28]
 800bb1a:	bfb8      	it	lt
 800bb1c:	9204      	strlt	r2, [sp, #16]
 800bb1e:	7823      	ldrb	r3, [r4, #0]
 800bb20:	2b2e      	cmp	r3, #46	; 0x2e
 800bb22:	d10c      	bne.n	800bb3e <_vfiprintf_r+0x176>
 800bb24:	7863      	ldrb	r3, [r4, #1]
 800bb26:	2b2a      	cmp	r3, #42	; 0x2a
 800bb28:	d135      	bne.n	800bb96 <_vfiprintf_r+0x1ce>
 800bb2a:	9b03      	ldr	r3, [sp, #12]
 800bb2c:	3402      	adds	r4, #2
 800bb2e:	1d1a      	adds	r2, r3, #4
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	9203      	str	r2, [sp, #12]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	bfb8      	it	lt
 800bb38:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb3c:	9305      	str	r3, [sp, #20]
 800bb3e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800bc18 <_vfiprintf_r+0x250>
 800bb42:	2203      	movs	r2, #3
 800bb44:	4650      	mov	r0, sl
 800bb46:	7821      	ldrb	r1, [r4, #0]
 800bb48:	f7fb ff48 	bl	80079dc <memchr>
 800bb4c:	b140      	cbz	r0, 800bb60 <_vfiprintf_r+0x198>
 800bb4e:	2340      	movs	r3, #64	; 0x40
 800bb50:	eba0 000a 	sub.w	r0, r0, sl
 800bb54:	fa03 f000 	lsl.w	r0, r3, r0
 800bb58:	9b04      	ldr	r3, [sp, #16]
 800bb5a:	3401      	adds	r4, #1
 800bb5c:	4303      	orrs	r3, r0
 800bb5e:	9304      	str	r3, [sp, #16]
 800bb60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb64:	2206      	movs	r2, #6
 800bb66:	482d      	ldr	r0, [pc, #180]	; (800bc1c <_vfiprintf_r+0x254>)
 800bb68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb6c:	f7fb ff36 	bl	80079dc <memchr>
 800bb70:	2800      	cmp	r0, #0
 800bb72:	d03f      	beq.n	800bbf4 <_vfiprintf_r+0x22c>
 800bb74:	4b2a      	ldr	r3, [pc, #168]	; (800bc20 <_vfiprintf_r+0x258>)
 800bb76:	bb1b      	cbnz	r3, 800bbc0 <_vfiprintf_r+0x1f8>
 800bb78:	9b03      	ldr	r3, [sp, #12]
 800bb7a:	3307      	adds	r3, #7
 800bb7c:	f023 0307 	bic.w	r3, r3, #7
 800bb80:	3308      	adds	r3, #8
 800bb82:	9303      	str	r3, [sp, #12]
 800bb84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb86:	443b      	add	r3, r7
 800bb88:	9309      	str	r3, [sp, #36]	; 0x24
 800bb8a:	e767      	b.n	800ba5c <_vfiprintf_r+0x94>
 800bb8c:	460c      	mov	r4, r1
 800bb8e:	2001      	movs	r0, #1
 800bb90:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb94:	e7a5      	b.n	800bae2 <_vfiprintf_r+0x11a>
 800bb96:	2300      	movs	r3, #0
 800bb98:	f04f 0c0a 	mov.w	ip, #10
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	3401      	adds	r4, #1
 800bba0:	9305      	str	r3, [sp, #20]
 800bba2:	4620      	mov	r0, r4
 800bba4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bba8:	3a30      	subs	r2, #48	; 0x30
 800bbaa:	2a09      	cmp	r2, #9
 800bbac:	d903      	bls.n	800bbb6 <_vfiprintf_r+0x1ee>
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d0c5      	beq.n	800bb3e <_vfiprintf_r+0x176>
 800bbb2:	9105      	str	r1, [sp, #20]
 800bbb4:	e7c3      	b.n	800bb3e <_vfiprintf_r+0x176>
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	2301      	movs	r3, #1
 800bbba:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbbe:	e7f0      	b.n	800bba2 <_vfiprintf_r+0x1da>
 800bbc0:	ab03      	add	r3, sp, #12
 800bbc2:	9300      	str	r3, [sp, #0]
 800bbc4:	462a      	mov	r2, r5
 800bbc6:	4630      	mov	r0, r6
 800bbc8:	4b16      	ldr	r3, [pc, #88]	; (800bc24 <_vfiprintf_r+0x25c>)
 800bbca:	a904      	add	r1, sp, #16
 800bbcc:	f7fc f8be 	bl	8007d4c <_printf_float>
 800bbd0:	4607      	mov	r7, r0
 800bbd2:	1c78      	adds	r0, r7, #1
 800bbd4:	d1d6      	bne.n	800bb84 <_vfiprintf_r+0x1bc>
 800bbd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbd8:	07d9      	lsls	r1, r3, #31
 800bbda:	d405      	bmi.n	800bbe8 <_vfiprintf_r+0x220>
 800bbdc:	89ab      	ldrh	r3, [r5, #12]
 800bbde:	059a      	lsls	r2, r3, #22
 800bbe0:	d402      	bmi.n	800bbe8 <_vfiprintf_r+0x220>
 800bbe2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbe4:	f7ff fe98 	bl	800b918 <__retarget_lock_release_recursive>
 800bbe8:	89ab      	ldrh	r3, [r5, #12]
 800bbea:	065b      	lsls	r3, r3, #25
 800bbec:	f53f af12 	bmi.w	800ba14 <_vfiprintf_r+0x4c>
 800bbf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbf2:	e711      	b.n	800ba18 <_vfiprintf_r+0x50>
 800bbf4:	ab03      	add	r3, sp, #12
 800bbf6:	9300      	str	r3, [sp, #0]
 800bbf8:	462a      	mov	r2, r5
 800bbfa:	4630      	mov	r0, r6
 800bbfc:	4b09      	ldr	r3, [pc, #36]	; (800bc24 <_vfiprintf_r+0x25c>)
 800bbfe:	a904      	add	r1, sp, #16
 800bc00:	f7fc fb40 	bl	8008284 <_printf_i>
 800bc04:	e7e4      	b.n	800bbd0 <_vfiprintf_r+0x208>
 800bc06:	bf00      	nop
 800bc08:	0800c9c4 	.word	0x0800c9c4
 800bc0c:	0800c9e4 	.word	0x0800c9e4
 800bc10:	0800c9a4 	.word	0x0800c9a4
 800bc14:	0800c954 	.word	0x0800c954
 800bc18:	0800c95a 	.word	0x0800c95a
 800bc1c:	0800c95e 	.word	0x0800c95e
 800bc20:	08007d4d 	.word	0x08007d4d
 800bc24:	0800b9a3 	.word	0x0800b9a3

0800bc28 <__swbuf_r>:
 800bc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc2a:	460e      	mov	r6, r1
 800bc2c:	4614      	mov	r4, r2
 800bc2e:	4605      	mov	r5, r0
 800bc30:	b118      	cbz	r0, 800bc3a <__swbuf_r+0x12>
 800bc32:	6983      	ldr	r3, [r0, #24]
 800bc34:	b90b      	cbnz	r3, 800bc3a <__swbuf_r+0x12>
 800bc36:	f000 f9cd 	bl	800bfd4 <__sinit>
 800bc3a:	4b21      	ldr	r3, [pc, #132]	; (800bcc0 <__swbuf_r+0x98>)
 800bc3c:	429c      	cmp	r4, r3
 800bc3e:	d12b      	bne.n	800bc98 <__swbuf_r+0x70>
 800bc40:	686c      	ldr	r4, [r5, #4]
 800bc42:	69a3      	ldr	r3, [r4, #24]
 800bc44:	60a3      	str	r3, [r4, #8]
 800bc46:	89a3      	ldrh	r3, [r4, #12]
 800bc48:	071a      	lsls	r2, r3, #28
 800bc4a:	d52f      	bpl.n	800bcac <__swbuf_r+0x84>
 800bc4c:	6923      	ldr	r3, [r4, #16]
 800bc4e:	b36b      	cbz	r3, 800bcac <__swbuf_r+0x84>
 800bc50:	6923      	ldr	r3, [r4, #16]
 800bc52:	6820      	ldr	r0, [r4, #0]
 800bc54:	b2f6      	uxtb	r6, r6
 800bc56:	1ac0      	subs	r0, r0, r3
 800bc58:	6963      	ldr	r3, [r4, #20]
 800bc5a:	4637      	mov	r7, r6
 800bc5c:	4283      	cmp	r3, r0
 800bc5e:	dc04      	bgt.n	800bc6a <__swbuf_r+0x42>
 800bc60:	4621      	mov	r1, r4
 800bc62:	4628      	mov	r0, r5
 800bc64:	f000 f922 	bl	800beac <_fflush_r>
 800bc68:	bb30      	cbnz	r0, 800bcb8 <__swbuf_r+0x90>
 800bc6a:	68a3      	ldr	r3, [r4, #8]
 800bc6c:	3001      	adds	r0, #1
 800bc6e:	3b01      	subs	r3, #1
 800bc70:	60a3      	str	r3, [r4, #8]
 800bc72:	6823      	ldr	r3, [r4, #0]
 800bc74:	1c5a      	adds	r2, r3, #1
 800bc76:	6022      	str	r2, [r4, #0]
 800bc78:	701e      	strb	r6, [r3, #0]
 800bc7a:	6963      	ldr	r3, [r4, #20]
 800bc7c:	4283      	cmp	r3, r0
 800bc7e:	d004      	beq.n	800bc8a <__swbuf_r+0x62>
 800bc80:	89a3      	ldrh	r3, [r4, #12]
 800bc82:	07db      	lsls	r3, r3, #31
 800bc84:	d506      	bpl.n	800bc94 <__swbuf_r+0x6c>
 800bc86:	2e0a      	cmp	r6, #10
 800bc88:	d104      	bne.n	800bc94 <__swbuf_r+0x6c>
 800bc8a:	4621      	mov	r1, r4
 800bc8c:	4628      	mov	r0, r5
 800bc8e:	f000 f90d 	bl	800beac <_fflush_r>
 800bc92:	b988      	cbnz	r0, 800bcb8 <__swbuf_r+0x90>
 800bc94:	4638      	mov	r0, r7
 800bc96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc98:	4b0a      	ldr	r3, [pc, #40]	; (800bcc4 <__swbuf_r+0x9c>)
 800bc9a:	429c      	cmp	r4, r3
 800bc9c:	d101      	bne.n	800bca2 <__swbuf_r+0x7a>
 800bc9e:	68ac      	ldr	r4, [r5, #8]
 800bca0:	e7cf      	b.n	800bc42 <__swbuf_r+0x1a>
 800bca2:	4b09      	ldr	r3, [pc, #36]	; (800bcc8 <__swbuf_r+0xa0>)
 800bca4:	429c      	cmp	r4, r3
 800bca6:	bf08      	it	eq
 800bca8:	68ec      	ldreq	r4, [r5, #12]
 800bcaa:	e7ca      	b.n	800bc42 <__swbuf_r+0x1a>
 800bcac:	4621      	mov	r1, r4
 800bcae:	4628      	mov	r0, r5
 800bcb0:	f000 f80c 	bl	800bccc <__swsetup_r>
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	d0cb      	beq.n	800bc50 <__swbuf_r+0x28>
 800bcb8:	f04f 37ff 	mov.w	r7, #4294967295
 800bcbc:	e7ea      	b.n	800bc94 <__swbuf_r+0x6c>
 800bcbe:	bf00      	nop
 800bcc0:	0800c9c4 	.word	0x0800c9c4
 800bcc4:	0800c9e4 	.word	0x0800c9e4
 800bcc8:	0800c9a4 	.word	0x0800c9a4

0800bccc <__swsetup_r>:
 800bccc:	4b32      	ldr	r3, [pc, #200]	; (800bd98 <__swsetup_r+0xcc>)
 800bcce:	b570      	push	{r4, r5, r6, lr}
 800bcd0:	681d      	ldr	r5, [r3, #0]
 800bcd2:	4606      	mov	r6, r0
 800bcd4:	460c      	mov	r4, r1
 800bcd6:	b125      	cbz	r5, 800bce2 <__swsetup_r+0x16>
 800bcd8:	69ab      	ldr	r3, [r5, #24]
 800bcda:	b913      	cbnz	r3, 800bce2 <__swsetup_r+0x16>
 800bcdc:	4628      	mov	r0, r5
 800bcde:	f000 f979 	bl	800bfd4 <__sinit>
 800bce2:	4b2e      	ldr	r3, [pc, #184]	; (800bd9c <__swsetup_r+0xd0>)
 800bce4:	429c      	cmp	r4, r3
 800bce6:	d10f      	bne.n	800bd08 <__swsetup_r+0x3c>
 800bce8:	686c      	ldr	r4, [r5, #4]
 800bcea:	89a3      	ldrh	r3, [r4, #12]
 800bcec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bcf0:	0719      	lsls	r1, r3, #28
 800bcf2:	d42c      	bmi.n	800bd4e <__swsetup_r+0x82>
 800bcf4:	06dd      	lsls	r5, r3, #27
 800bcf6:	d411      	bmi.n	800bd1c <__swsetup_r+0x50>
 800bcf8:	2309      	movs	r3, #9
 800bcfa:	6033      	str	r3, [r6, #0]
 800bcfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bd00:	f04f 30ff 	mov.w	r0, #4294967295
 800bd04:	81a3      	strh	r3, [r4, #12]
 800bd06:	e03e      	b.n	800bd86 <__swsetup_r+0xba>
 800bd08:	4b25      	ldr	r3, [pc, #148]	; (800bda0 <__swsetup_r+0xd4>)
 800bd0a:	429c      	cmp	r4, r3
 800bd0c:	d101      	bne.n	800bd12 <__swsetup_r+0x46>
 800bd0e:	68ac      	ldr	r4, [r5, #8]
 800bd10:	e7eb      	b.n	800bcea <__swsetup_r+0x1e>
 800bd12:	4b24      	ldr	r3, [pc, #144]	; (800bda4 <__swsetup_r+0xd8>)
 800bd14:	429c      	cmp	r4, r3
 800bd16:	bf08      	it	eq
 800bd18:	68ec      	ldreq	r4, [r5, #12]
 800bd1a:	e7e6      	b.n	800bcea <__swsetup_r+0x1e>
 800bd1c:	0758      	lsls	r0, r3, #29
 800bd1e:	d512      	bpl.n	800bd46 <__swsetup_r+0x7a>
 800bd20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd22:	b141      	cbz	r1, 800bd36 <__swsetup_r+0x6a>
 800bd24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd28:	4299      	cmp	r1, r3
 800bd2a:	d002      	beq.n	800bd32 <__swsetup_r+0x66>
 800bd2c:	4630      	mov	r0, r6
 800bd2e:	f7fb fe93 	bl	8007a58 <_free_r>
 800bd32:	2300      	movs	r3, #0
 800bd34:	6363      	str	r3, [r4, #52]	; 0x34
 800bd36:	89a3      	ldrh	r3, [r4, #12]
 800bd38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd3c:	81a3      	strh	r3, [r4, #12]
 800bd3e:	2300      	movs	r3, #0
 800bd40:	6063      	str	r3, [r4, #4]
 800bd42:	6923      	ldr	r3, [r4, #16]
 800bd44:	6023      	str	r3, [r4, #0]
 800bd46:	89a3      	ldrh	r3, [r4, #12]
 800bd48:	f043 0308 	orr.w	r3, r3, #8
 800bd4c:	81a3      	strh	r3, [r4, #12]
 800bd4e:	6923      	ldr	r3, [r4, #16]
 800bd50:	b94b      	cbnz	r3, 800bd66 <__swsetup_r+0x9a>
 800bd52:	89a3      	ldrh	r3, [r4, #12]
 800bd54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bd58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd5c:	d003      	beq.n	800bd66 <__swsetup_r+0x9a>
 800bd5e:	4621      	mov	r1, r4
 800bd60:	4630      	mov	r0, r6
 800bd62:	f000 f9f9 	bl	800c158 <__smakebuf_r>
 800bd66:	89a0      	ldrh	r0, [r4, #12]
 800bd68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd6c:	f010 0301 	ands.w	r3, r0, #1
 800bd70:	d00a      	beq.n	800bd88 <__swsetup_r+0xbc>
 800bd72:	2300      	movs	r3, #0
 800bd74:	60a3      	str	r3, [r4, #8]
 800bd76:	6963      	ldr	r3, [r4, #20]
 800bd78:	425b      	negs	r3, r3
 800bd7a:	61a3      	str	r3, [r4, #24]
 800bd7c:	6923      	ldr	r3, [r4, #16]
 800bd7e:	b943      	cbnz	r3, 800bd92 <__swsetup_r+0xc6>
 800bd80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bd84:	d1ba      	bne.n	800bcfc <__swsetup_r+0x30>
 800bd86:	bd70      	pop	{r4, r5, r6, pc}
 800bd88:	0781      	lsls	r1, r0, #30
 800bd8a:	bf58      	it	pl
 800bd8c:	6963      	ldrpl	r3, [r4, #20]
 800bd8e:	60a3      	str	r3, [r4, #8]
 800bd90:	e7f4      	b.n	800bd7c <__swsetup_r+0xb0>
 800bd92:	2000      	movs	r0, #0
 800bd94:	e7f7      	b.n	800bd86 <__swsetup_r+0xba>
 800bd96:	bf00      	nop
 800bd98:	2000017c 	.word	0x2000017c
 800bd9c:	0800c9c4 	.word	0x0800c9c4
 800bda0:	0800c9e4 	.word	0x0800c9e4
 800bda4:	0800c9a4 	.word	0x0800c9a4

0800bda8 <__sflush_r>:
 800bda8:	898a      	ldrh	r2, [r1, #12]
 800bdaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdac:	4605      	mov	r5, r0
 800bdae:	0710      	lsls	r0, r2, #28
 800bdb0:	460c      	mov	r4, r1
 800bdb2:	d457      	bmi.n	800be64 <__sflush_r+0xbc>
 800bdb4:	684b      	ldr	r3, [r1, #4]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	dc04      	bgt.n	800bdc4 <__sflush_r+0x1c>
 800bdba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	dc01      	bgt.n	800bdc4 <__sflush_r+0x1c>
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdc6:	2e00      	cmp	r6, #0
 800bdc8:	d0fa      	beq.n	800bdc0 <__sflush_r+0x18>
 800bdca:	2300      	movs	r3, #0
 800bdcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bdd0:	682f      	ldr	r7, [r5, #0]
 800bdd2:	602b      	str	r3, [r5, #0]
 800bdd4:	d032      	beq.n	800be3c <__sflush_r+0x94>
 800bdd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bdd8:	89a3      	ldrh	r3, [r4, #12]
 800bdda:	075a      	lsls	r2, r3, #29
 800bddc:	d505      	bpl.n	800bdea <__sflush_r+0x42>
 800bdde:	6863      	ldr	r3, [r4, #4]
 800bde0:	1ac0      	subs	r0, r0, r3
 800bde2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bde4:	b10b      	cbz	r3, 800bdea <__sflush_r+0x42>
 800bde6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bde8:	1ac0      	subs	r0, r0, r3
 800bdea:	2300      	movs	r3, #0
 800bdec:	4602      	mov	r2, r0
 800bdee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdf0:	4628      	mov	r0, r5
 800bdf2:	6a21      	ldr	r1, [r4, #32]
 800bdf4:	47b0      	blx	r6
 800bdf6:	1c43      	adds	r3, r0, #1
 800bdf8:	89a3      	ldrh	r3, [r4, #12]
 800bdfa:	d106      	bne.n	800be0a <__sflush_r+0x62>
 800bdfc:	6829      	ldr	r1, [r5, #0]
 800bdfe:	291d      	cmp	r1, #29
 800be00:	d82c      	bhi.n	800be5c <__sflush_r+0xb4>
 800be02:	4a29      	ldr	r2, [pc, #164]	; (800bea8 <__sflush_r+0x100>)
 800be04:	40ca      	lsrs	r2, r1
 800be06:	07d6      	lsls	r6, r2, #31
 800be08:	d528      	bpl.n	800be5c <__sflush_r+0xb4>
 800be0a:	2200      	movs	r2, #0
 800be0c:	6062      	str	r2, [r4, #4]
 800be0e:	6922      	ldr	r2, [r4, #16]
 800be10:	04d9      	lsls	r1, r3, #19
 800be12:	6022      	str	r2, [r4, #0]
 800be14:	d504      	bpl.n	800be20 <__sflush_r+0x78>
 800be16:	1c42      	adds	r2, r0, #1
 800be18:	d101      	bne.n	800be1e <__sflush_r+0x76>
 800be1a:	682b      	ldr	r3, [r5, #0]
 800be1c:	b903      	cbnz	r3, 800be20 <__sflush_r+0x78>
 800be1e:	6560      	str	r0, [r4, #84]	; 0x54
 800be20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be22:	602f      	str	r7, [r5, #0]
 800be24:	2900      	cmp	r1, #0
 800be26:	d0cb      	beq.n	800bdc0 <__sflush_r+0x18>
 800be28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be2c:	4299      	cmp	r1, r3
 800be2e:	d002      	beq.n	800be36 <__sflush_r+0x8e>
 800be30:	4628      	mov	r0, r5
 800be32:	f7fb fe11 	bl	8007a58 <_free_r>
 800be36:	2000      	movs	r0, #0
 800be38:	6360      	str	r0, [r4, #52]	; 0x34
 800be3a:	e7c2      	b.n	800bdc2 <__sflush_r+0x1a>
 800be3c:	6a21      	ldr	r1, [r4, #32]
 800be3e:	2301      	movs	r3, #1
 800be40:	4628      	mov	r0, r5
 800be42:	47b0      	blx	r6
 800be44:	1c41      	adds	r1, r0, #1
 800be46:	d1c7      	bne.n	800bdd8 <__sflush_r+0x30>
 800be48:	682b      	ldr	r3, [r5, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d0c4      	beq.n	800bdd8 <__sflush_r+0x30>
 800be4e:	2b1d      	cmp	r3, #29
 800be50:	d001      	beq.n	800be56 <__sflush_r+0xae>
 800be52:	2b16      	cmp	r3, #22
 800be54:	d101      	bne.n	800be5a <__sflush_r+0xb2>
 800be56:	602f      	str	r7, [r5, #0]
 800be58:	e7b2      	b.n	800bdc0 <__sflush_r+0x18>
 800be5a:	89a3      	ldrh	r3, [r4, #12]
 800be5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be60:	81a3      	strh	r3, [r4, #12]
 800be62:	e7ae      	b.n	800bdc2 <__sflush_r+0x1a>
 800be64:	690f      	ldr	r7, [r1, #16]
 800be66:	2f00      	cmp	r7, #0
 800be68:	d0aa      	beq.n	800bdc0 <__sflush_r+0x18>
 800be6a:	0793      	lsls	r3, r2, #30
 800be6c:	bf18      	it	ne
 800be6e:	2300      	movne	r3, #0
 800be70:	680e      	ldr	r6, [r1, #0]
 800be72:	bf08      	it	eq
 800be74:	694b      	ldreq	r3, [r1, #20]
 800be76:	1bf6      	subs	r6, r6, r7
 800be78:	600f      	str	r7, [r1, #0]
 800be7a:	608b      	str	r3, [r1, #8]
 800be7c:	2e00      	cmp	r6, #0
 800be7e:	dd9f      	ble.n	800bdc0 <__sflush_r+0x18>
 800be80:	4633      	mov	r3, r6
 800be82:	463a      	mov	r2, r7
 800be84:	4628      	mov	r0, r5
 800be86:	6a21      	ldr	r1, [r4, #32]
 800be88:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800be8c:	47e0      	blx	ip
 800be8e:	2800      	cmp	r0, #0
 800be90:	dc06      	bgt.n	800bea0 <__sflush_r+0xf8>
 800be92:	89a3      	ldrh	r3, [r4, #12]
 800be94:	f04f 30ff 	mov.w	r0, #4294967295
 800be98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be9c:	81a3      	strh	r3, [r4, #12]
 800be9e:	e790      	b.n	800bdc2 <__sflush_r+0x1a>
 800bea0:	4407      	add	r7, r0
 800bea2:	1a36      	subs	r6, r6, r0
 800bea4:	e7ea      	b.n	800be7c <__sflush_r+0xd4>
 800bea6:	bf00      	nop
 800bea8:	20400001 	.word	0x20400001

0800beac <_fflush_r>:
 800beac:	b538      	push	{r3, r4, r5, lr}
 800beae:	690b      	ldr	r3, [r1, #16]
 800beb0:	4605      	mov	r5, r0
 800beb2:	460c      	mov	r4, r1
 800beb4:	b913      	cbnz	r3, 800bebc <_fflush_r+0x10>
 800beb6:	2500      	movs	r5, #0
 800beb8:	4628      	mov	r0, r5
 800beba:	bd38      	pop	{r3, r4, r5, pc}
 800bebc:	b118      	cbz	r0, 800bec6 <_fflush_r+0x1a>
 800bebe:	6983      	ldr	r3, [r0, #24]
 800bec0:	b90b      	cbnz	r3, 800bec6 <_fflush_r+0x1a>
 800bec2:	f000 f887 	bl	800bfd4 <__sinit>
 800bec6:	4b14      	ldr	r3, [pc, #80]	; (800bf18 <_fflush_r+0x6c>)
 800bec8:	429c      	cmp	r4, r3
 800beca:	d11b      	bne.n	800bf04 <_fflush_r+0x58>
 800becc:	686c      	ldr	r4, [r5, #4]
 800bece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d0ef      	beq.n	800beb6 <_fflush_r+0xa>
 800bed6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bed8:	07d0      	lsls	r0, r2, #31
 800beda:	d404      	bmi.n	800bee6 <_fflush_r+0x3a>
 800bedc:	0599      	lsls	r1, r3, #22
 800bede:	d402      	bmi.n	800bee6 <_fflush_r+0x3a>
 800bee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bee2:	f7ff fd18 	bl	800b916 <__retarget_lock_acquire_recursive>
 800bee6:	4628      	mov	r0, r5
 800bee8:	4621      	mov	r1, r4
 800beea:	f7ff ff5d 	bl	800bda8 <__sflush_r>
 800beee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bef0:	4605      	mov	r5, r0
 800bef2:	07da      	lsls	r2, r3, #31
 800bef4:	d4e0      	bmi.n	800beb8 <_fflush_r+0xc>
 800bef6:	89a3      	ldrh	r3, [r4, #12]
 800bef8:	059b      	lsls	r3, r3, #22
 800befa:	d4dd      	bmi.n	800beb8 <_fflush_r+0xc>
 800befc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800befe:	f7ff fd0b 	bl	800b918 <__retarget_lock_release_recursive>
 800bf02:	e7d9      	b.n	800beb8 <_fflush_r+0xc>
 800bf04:	4b05      	ldr	r3, [pc, #20]	; (800bf1c <_fflush_r+0x70>)
 800bf06:	429c      	cmp	r4, r3
 800bf08:	d101      	bne.n	800bf0e <_fflush_r+0x62>
 800bf0a:	68ac      	ldr	r4, [r5, #8]
 800bf0c:	e7df      	b.n	800bece <_fflush_r+0x22>
 800bf0e:	4b04      	ldr	r3, [pc, #16]	; (800bf20 <_fflush_r+0x74>)
 800bf10:	429c      	cmp	r4, r3
 800bf12:	bf08      	it	eq
 800bf14:	68ec      	ldreq	r4, [r5, #12]
 800bf16:	e7da      	b.n	800bece <_fflush_r+0x22>
 800bf18:	0800c9c4 	.word	0x0800c9c4
 800bf1c:	0800c9e4 	.word	0x0800c9e4
 800bf20:	0800c9a4 	.word	0x0800c9a4

0800bf24 <std>:
 800bf24:	2300      	movs	r3, #0
 800bf26:	b510      	push	{r4, lr}
 800bf28:	4604      	mov	r4, r0
 800bf2a:	e9c0 3300 	strd	r3, r3, [r0]
 800bf2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf32:	6083      	str	r3, [r0, #8]
 800bf34:	8181      	strh	r1, [r0, #12]
 800bf36:	6643      	str	r3, [r0, #100]	; 0x64
 800bf38:	81c2      	strh	r2, [r0, #14]
 800bf3a:	6183      	str	r3, [r0, #24]
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	2208      	movs	r2, #8
 800bf40:	305c      	adds	r0, #92	; 0x5c
 800bf42:	f7fb fd81 	bl	8007a48 <memset>
 800bf46:	4b05      	ldr	r3, [pc, #20]	; (800bf5c <std+0x38>)
 800bf48:	6224      	str	r4, [r4, #32]
 800bf4a:	6263      	str	r3, [r4, #36]	; 0x24
 800bf4c:	4b04      	ldr	r3, [pc, #16]	; (800bf60 <std+0x3c>)
 800bf4e:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf50:	4b04      	ldr	r3, [pc, #16]	; (800bf64 <std+0x40>)
 800bf52:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf54:	4b04      	ldr	r3, [pc, #16]	; (800bf68 <std+0x44>)
 800bf56:	6323      	str	r3, [r4, #48]	; 0x30
 800bf58:	bd10      	pop	{r4, pc}
 800bf5a:	bf00      	nop
 800bf5c:	0800c1e9 	.word	0x0800c1e9
 800bf60:	0800c20b 	.word	0x0800c20b
 800bf64:	0800c243 	.word	0x0800c243
 800bf68:	0800c267 	.word	0x0800c267

0800bf6c <_cleanup_r>:
 800bf6c:	4901      	ldr	r1, [pc, #4]	; (800bf74 <_cleanup_r+0x8>)
 800bf6e:	f000 b8af 	b.w	800c0d0 <_fwalk_reent>
 800bf72:	bf00      	nop
 800bf74:	0800bead 	.word	0x0800bead

0800bf78 <__sfmoreglue>:
 800bf78:	2268      	movs	r2, #104	; 0x68
 800bf7a:	b570      	push	{r4, r5, r6, lr}
 800bf7c:	1e4d      	subs	r5, r1, #1
 800bf7e:	4355      	muls	r5, r2
 800bf80:	460e      	mov	r6, r1
 800bf82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bf86:	f7fb fdcf 	bl	8007b28 <_malloc_r>
 800bf8a:	4604      	mov	r4, r0
 800bf8c:	b140      	cbz	r0, 800bfa0 <__sfmoreglue+0x28>
 800bf8e:	2100      	movs	r1, #0
 800bf90:	e9c0 1600 	strd	r1, r6, [r0]
 800bf94:	300c      	adds	r0, #12
 800bf96:	60a0      	str	r0, [r4, #8]
 800bf98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bf9c:	f7fb fd54 	bl	8007a48 <memset>
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	bd70      	pop	{r4, r5, r6, pc}

0800bfa4 <__sfp_lock_acquire>:
 800bfa4:	4801      	ldr	r0, [pc, #4]	; (800bfac <__sfp_lock_acquire+0x8>)
 800bfa6:	f7ff bcb6 	b.w	800b916 <__retarget_lock_acquire_recursive>
 800bfaa:	bf00      	nop
 800bfac:	200015c1 	.word	0x200015c1

0800bfb0 <__sfp_lock_release>:
 800bfb0:	4801      	ldr	r0, [pc, #4]	; (800bfb8 <__sfp_lock_release+0x8>)
 800bfb2:	f7ff bcb1 	b.w	800b918 <__retarget_lock_release_recursive>
 800bfb6:	bf00      	nop
 800bfb8:	200015c1 	.word	0x200015c1

0800bfbc <__sinit_lock_acquire>:
 800bfbc:	4801      	ldr	r0, [pc, #4]	; (800bfc4 <__sinit_lock_acquire+0x8>)
 800bfbe:	f7ff bcaa 	b.w	800b916 <__retarget_lock_acquire_recursive>
 800bfc2:	bf00      	nop
 800bfc4:	200015c2 	.word	0x200015c2

0800bfc8 <__sinit_lock_release>:
 800bfc8:	4801      	ldr	r0, [pc, #4]	; (800bfd0 <__sinit_lock_release+0x8>)
 800bfca:	f7ff bca5 	b.w	800b918 <__retarget_lock_release_recursive>
 800bfce:	bf00      	nop
 800bfd0:	200015c2 	.word	0x200015c2

0800bfd4 <__sinit>:
 800bfd4:	b510      	push	{r4, lr}
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	f7ff fff0 	bl	800bfbc <__sinit_lock_acquire>
 800bfdc:	69a3      	ldr	r3, [r4, #24]
 800bfde:	b11b      	cbz	r3, 800bfe8 <__sinit+0x14>
 800bfe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfe4:	f7ff bff0 	b.w	800bfc8 <__sinit_lock_release>
 800bfe8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bfec:	6523      	str	r3, [r4, #80]	; 0x50
 800bfee:	4b13      	ldr	r3, [pc, #76]	; (800c03c <__sinit+0x68>)
 800bff0:	4a13      	ldr	r2, [pc, #76]	; (800c040 <__sinit+0x6c>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	62a2      	str	r2, [r4, #40]	; 0x28
 800bff6:	42a3      	cmp	r3, r4
 800bff8:	bf08      	it	eq
 800bffa:	2301      	moveq	r3, #1
 800bffc:	4620      	mov	r0, r4
 800bffe:	bf08      	it	eq
 800c000:	61a3      	streq	r3, [r4, #24]
 800c002:	f000 f81f 	bl	800c044 <__sfp>
 800c006:	6060      	str	r0, [r4, #4]
 800c008:	4620      	mov	r0, r4
 800c00a:	f000 f81b 	bl	800c044 <__sfp>
 800c00e:	60a0      	str	r0, [r4, #8]
 800c010:	4620      	mov	r0, r4
 800c012:	f000 f817 	bl	800c044 <__sfp>
 800c016:	2200      	movs	r2, #0
 800c018:	2104      	movs	r1, #4
 800c01a:	60e0      	str	r0, [r4, #12]
 800c01c:	6860      	ldr	r0, [r4, #4]
 800c01e:	f7ff ff81 	bl	800bf24 <std>
 800c022:	2201      	movs	r2, #1
 800c024:	2109      	movs	r1, #9
 800c026:	68a0      	ldr	r0, [r4, #8]
 800c028:	f7ff ff7c 	bl	800bf24 <std>
 800c02c:	2202      	movs	r2, #2
 800c02e:	2112      	movs	r1, #18
 800c030:	68e0      	ldr	r0, [r4, #12]
 800c032:	f7ff ff77 	bl	800bf24 <std>
 800c036:	2301      	movs	r3, #1
 800c038:	61a3      	str	r3, [r4, #24]
 800c03a:	e7d1      	b.n	800bfe0 <__sinit+0xc>
 800c03c:	0800c560 	.word	0x0800c560
 800c040:	0800bf6d 	.word	0x0800bf6d

0800c044 <__sfp>:
 800c044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c046:	4607      	mov	r7, r0
 800c048:	f7ff ffac 	bl	800bfa4 <__sfp_lock_acquire>
 800c04c:	4b1e      	ldr	r3, [pc, #120]	; (800c0c8 <__sfp+0x84>)
 800c04e:	681e      	ldr	r6, [r3, #0]
 800c050:	69b3      	ldr	r3, [r6, #24]
 800c052:	b913      	cbnz	r3, 800c05a <__sfp+0x16>
 800c054:	4630      	mov	r0, r6
 800c056:	f7ff ffbd 	bl	800bfd4 <__sinit>
 800c05a:	3648      	adds	r6, #72	; 0x48
 800c05c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c060:	3b01      	subs	r3, #1
 800c062:	d503      	bpl.n	800c06c <__sfp+0x28>
 800c064:	6833      	ldr	r3, [r6, #0]
 800c066:	b30b      	cbz	r3, 800c0ac <__sfp+0x68>
 800c068:	6836      	ldr	r6, [r6, #0]
 800c06a:	e7f7      	b.n	800c05c <__sfp+0x18>
 800c06c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c070:	b9d5      	cbnz	r5, 800c0a8 <__sfp+0x64>
 800c072:	4b16      	ldr	r3, [pc, #88]	; (800c0cc <__sfp+0x88>)
 800c074:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c078:	60e3      	str	r3, [r4, #12]
 800c07a:	6665      	str	r5, [r4, #100]	; 0x64
 800c07c:	f7ff fc4a 	bl	800b914 <__retarget_lock_init_recursive>
 800c080:	f7ff ff96 	bl	800bfb0 <__sfp_lock_release>
 800c084:	2208      	movs	r2, #8
 800c086:	4629      	mov	r1, r5
 800c088:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c08c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c090:	6025      	str	r5, [r4, #0]
 800c092:	61a5      	str	r5, [r4, #24]
 800c094:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c098:	f7fb fcd6 	bl	8007a48 <memset>
 800c09c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c0a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0a8:	3468      	adds	r4, #104	; 0x68
 800c0aa:	e7d9      	b.n	800c060 <__sfp+0x1c>
 800c0ac:	2104      	movs	r1, #4
 800c0ae:	4638      	mov	r0, r7
 800c0b0:	f7ff ff62 	bl	800bf78 <__sfmoreglue>
 800c0b4:	4604      	mov	r4, r0
 800c0b6:	6030      	str	r0, [r6, #0]
 800c0b8:	2800      	cmp	r0, #0
 800c0ba:	d1d5      	bne.n	800c068 <__sfp+0x24>
 800c0bc:	f7ff ff78 	bl	800bfb0 <__sfp_lock_release>
 800c0c0:	230c      	movs	r3, #12
 800c0c2:	603b      	str	r3, [r7, #0]
 800c0c4:	e7ee      	b.n	800c0a4 <__sfp+0x60>
 800c0c6:	bf00      	nop
 800c0c8:	0800c560 	.word	0x0800c560
 800c0cc:	ffff0001 	.word	0xffff0001

0800c0d0 <_fwalk_reent>:
 800c0d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0d4:	4606      	mov	r6, r0
 800c0d6:	4688      	mov	r8, r1
 800c0d8:	2700      	movs	r7, #0
 800c0da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c0de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0e2:	f1b9 0901 	subs.w	r9, r9, #1
 800c0e6:	d505      	bpl.n	800c0f4 <_fwalk_reent+0x24>
 800c0e8:	6824      	ldr	r4, [r4, #0]
 800c0ea:	2c00      	cmp	r4, #0
 800c0ec:	d1f7      	bne.n	800c0de <_fwalk_reent+0xe>
 800c0ee:	4638      	mov	r0, r7
 800c0f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0f4:	89ab      	ldrh	r3, [r5, #12]
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d907      	bls.n	800c10a <_fwalk_reent+0x3a>
 800c0fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0fe:	3301      	adds	r3, #1
 800c100:	d003      	beq.n	800c10a <_fwalk_reent+0x3a>
 800c102:	4629      	mov	r1, r5
 800c104:	4630      	mov	r0, r6
 800c106:	47c0      	blx	r8
 800c108:	4307      	orrs	r7, r0
 800c10a:	3568      	adds	r5, #104	; 0x68
 800c10c:	e7e9      	b.n	800c0e2 <_fwalk_reent+0x12>

0800c10e <__swhatbuf_r>:
 800c10e:	b570      	push	{r4, r5, r6, lr}
 800c110:	460e      	mov	r6, r1
 800c112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c116:	4614      	mov	r4, r2
 800c118:	2900      	cmp	r1, #0
 800c11a:	461d      	mov	r5, r3
 800c11c:	b096      	sub	sp, #88	; 0x58
 800c11e:	da08      	bge.n	800c132 <__swhatbuf_r+0x24>
 800c120:	2200      	movs	r2, #0
 800c122:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c126:	602a      	str	r2, [r5, #0]
 800c128:	061a      	lsls	r2, r3, #24
 800c12a:	d410      	bmi.n	800c14e <__swhatbuf_r+0x40>
 800c12c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c130:	e00e      	b.n	800c150 <__swhatbuf_r+0x42>
 800c132:	466a      	mov	r2, sp
 800c134:	f000 f8be 	bl	800c2b4 <_fstat_r>
 800c138:	2800      	cmp	r0, #0
 800c13a:	dbf1      	blt.n	800c120 <__swhatbuf_r+0x12>
 800c13c:	9a01      	ldr	r2, [sp, #4]
 800c13e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c142:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c146:	425a      	negs	r2, r3
 800c148:	415a      	adcs	r2, r3
 800c14a:	602a      	str	r2, [r5, #0]
 800c14c:	e7ee      	b.n	800c12c <__swhatbuf_r+0x1e>
 800c14e:	2340      	movs	r3, #64	; 0x40
 800c150:	2000      	movs	r0, #0
 800c152:	6023      	str	r3, [r4, #0]
 800c154:	b016      	add	sp, #88	; 0x58
 800c156:	bd70      	pop	{r4, r5, r6, pc}

0800c158 <__smakebuf_r>:
 800c158:	898b      	ldrh	r3, [r1, #12]
 800c15a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c15c:	079d      	lsls	r5, r3, #30
 800c15e:	4606      	mov	r6, r0
 800c160:	460c      	mov	r4, r1
 800c162:	d507      	bpl.n	800c174 <__smakebuf_r+0x1c>
 800c164:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c168:	6023      	str	r3, [r4, #0]
 800c16a:	6123      	str	r3, [r4, #16]
 800c16c:	2301      	movs	r3, #1
 800c16e:	6163      	str	r3, [r4, #20]
 800c170:	b002      	add	sp, #8
 800c172:	bd70      	pop	{r4, r5, r6, pc}
 800c174:	466a      	mov	r2, sp
 800c176:	ab01      	add	r3, sp, #4
 800c178:	f7ff ffc9 	bl	800c10e <__swhatbuf_r>
 800c17c:	9900      	ldr	r1, [sp, #0]
 800c17e:	4605      	mov	r5, r0
 800c180:	4630      	mov	r0, r6
 800c182:	f7fb fcd1 	bl	8007b28 <_malloc_r>
 800c186:	b948      	cbnz	r0, 800c19c <__smakebuf_r+0x44>
 800c188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c18c:	059a      	lsls	r2, r3, #22
 800c18e:	d4ef      	bmi.n	800c170 <__smakebuf_r+0x18>
 800c190:	f023 0303 	bic.w	r3, r3, #3
 800c194:	f043 0302 	orr.w	r3, r3, #2
 800c198:	81a3      	strh	r3, [r4, #12]
 800c19a:	e7e3      	b.n	800c164 <__smakebuf_r+0xc>
 800c19c:	4b0d      	ldr	r3, [pc, #52]	; (800c1d4 <__smakebuf_r+0x7c>)
 800c19e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c1a0:	89a3      	ldrh	r3, [r4, #12]
 800c1a2:	6020      	str	r0, [r4, #0]
 800c1a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1a8:	81a3      	strh	r3, [r4, #12]
 800c1aa:	9b00      	ldr	r3, [sp, #0]
 800c1ac:	6120      	str	r0, [r4, #16]
 800c1ae:	6163      	str	r3, [r4, #20]
 800c1b0:	9b01      	ldr	r3, [sp, #4]
 800c1b2:	b15b      	cbz	r3, 800c1cc <__smakebuf_r+0x74>
 800c1b4:	4630      	mov	r0, r6
 800c1b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1ba:	f000 f88d 	bl	800c2d8 <_isatty_r>
 800c1be:	b128      	cbz	r0, 800c1cc <__smakebuf_r+0x74>
 800c1c0:	89a3      	ldrh	r3, [r4, #12]
 800c1c2:	f023 0303 	bic.w	r3, r3, #3
 800c1c6:	f043 0301 	orr.w	r3, r3, #1
 800c1ca:	81a3      	strh	r3, [r4, #12]
 800c1cc:	89a0      	ldrh	r0, [r4, #12]
 800c1ce:	4305      	orrs	r5, r0
 800c1d0:	81a5      	strh	r5, [r4, #12]
 800c1d2:	e7cd      	b.n	800c170 <__smakebuf_r+0x18>
 800c1d4:	0800bf6d 	.word	0x0800bf6d

0800c1d8 <_malloc_usable_size_r>:
 800c1d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1dc:	1f18      	subs	r0, r3, #4
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	bfbc      	itt	lt
 800c1e2:	580b      	ldrlt	r3, [r1, r0]
 800c1e4:	18c0      	addlt	r0, r0, r3
 800c1e6:	4770      	bx	lr

0800c1e8 <__sread>:
 800c1e8:	b510      	push	{r4, lr}
 800c1ea:	460c      	mov	r4, r1
 800c1ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1f0:	f000 f894 	bl	800c31c <_read_r>
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	bfab      	itete	ge
 800c1f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c1fa:	89a3      	ldrhlt	r3, [r4, #12]
 800c1fc:	181b      	addge	r3, r3, r0
 800c1fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c202:	bfac      	ite	ge
 800c204:	6563      	strge	r3, [r4, #84]	; 0x54
 800c206:	81a3      	strhlt	r3, [r4, #12]
 800c208:	bd10      	pop	{r4, pc}

0800c20a <__swrite>:
 800c20a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c20e:	461f      	mov	r7, r3
 800c210:	898b      	ldrh	r3, [r1, #12]
 800c212:	4605      	mov	r5, r0
 800c214:	05db      	lsls	r3, r3, #23
 800c216:	460c      	mov	r4, r1
 800c218:	4616      	mov	r6, r2
 800c21a:	d505      	bpl.n	800c228 <__swrite+0x1e>
 800c21c:	2302      	movs	r3, #2
 800c21e:	2200      	movs	r2, #0
 800c220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c224:	f000 f868 	bl	800c2f8 <_lseek_r>
 800c228:	89a3      	ldrh	r3, [r4, #12]
 800c22a:	4632      	mov	r2, r6
 800c22c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c230:	81a3      	strh	r3, [r4, #12]
 800c232:	4628      	mov	r0, r5
 800c234:	463b      	mov	r3, r7
 800c236:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c23a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c23e:	f000 b817 	b.w	800c270 <_write_r>

0800c242 <__sseek>:
 800c242:	b510      	push	{r4, lr}
 800c244:	460c      	mov	r4, r1
 800c246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c24a:	f000 f855 	bl	800c2f8 <_lseek_r>
 800c24e:	1c43      	adds	r3, r0, #1
 800c250:	89a3      	ldrh	r3, [r4, #12]
 800c252:	bf15      	itete	ne
 800c254:	6560      	strne	r0, [r4, #84]	; 0x54
 800c256:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c25a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c25e:	81a3      	strheq	r3, [r4, #12]
 800c260:	bf18      	it	ne
 800c262:	81a3      	strhne	r3, [r4, #12]
 800c264:	bd10      	pop	{r4, pc}

0800c266 <__sclose>:
 800c266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c26a:	f000 b813 	b.w	800c294 <_close_r>
	...

0800c270 <_write_r>:
 800c270:	b538      	push	{r3, r4, r5, lr}
 800c272:	4604      	mov	r4, r0
 800c274:	4608      	mov	r0, r1
 800c276:	4611      	mov	r1, r2
 800c278:	2200      	movs	r2, #0
 800c27a:	4d05      	ldr	r5, [pc, #20]	; (800c290 <_write_r+0x20>)
 800c27c:	602a      	str	r2, [r5, #0]
 800c27e:	461a      	mov	r2, r3
 800c280:	f7f7 ff34 	bl	80040ec <_write>
 800c284:	1c43      	adds	r3, r0, #1
 800c286:	d102      	bne.n	800c28e <_write_r+0x1e>
 800c288:	682b      	ldr	r3, [r5, #0]
 800c28a:	b103      	cbz	r3, 800c28e <_write_r+0x1e>
 800c28c:	6023      	str	r3, [r4, #0]
 800c28e:	bd38      	pop	{r3, r4, r5, pc}
 800c290:	200015bc 	.word	0x200015bc

0800c294 <_close_r>:
 800c294:	b538      	push	{r3, r4, r5, lr}
 800c296:	2300      	movs	r3, #0
 800c298:	4d05      	ldr	r5, [pc, #20]	; (800c2b0 <_close_r+0x1c>)
 800c29a:	4604      	mov	r4, r0
 800c29c:	4608      	mov	r0, r1
 800c29e:	602b      	str	r3, [r5, #0]
 800c2a0:	f7f7 ff32 	bl	8004108 <_close>
 800c2a4:	1c43      	adds	r3, r0, #1
 800c2a6:	d102      	bne.n	800c2ae <_close_r+0x1a>
 800c2a8:	682b      	ldr	r3, [r5, #0]
 800c2aa:	b103      	cbz	r3, 800c2ae <_close_r+0x1a>
 800c2ac:	6023      	str	r3, [r4, #0]
 800c2ae:	bd38      	pop	{r3, r4, r5, pc}
 800c2b0:	200015bc 	.word	0x200015bc

0800c2b4 <_fstat_r>:
 800c2b4:	b538      	push	{r3, r4, r5, lr}
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	4d06      	ldr	r5, [pc, #24]	; (800c2d4 <_fstat_r+0x20>)
 800c2ba:	4604      	mov	r4, r0
 800c2bc:	4608      	mov	r0, r1
 800c2be:	4611      	mov	r1, r2
 800c2c0:	602b      	str	r3, [r5, #0]
 800c2c2:	f7f7 ff24 	bl	800410e <_fstat>
 800c2c6:	1c43      	adds	r3, r0, #1
 800c2c8:	d102      	bne.n	800c2d0 <_fstat_r+0x1c>
 800c2ca:	682b      	ldr	r3, [r5, #0]
 800c2cc:	b103      	cbz	r3, 800c2d0 <_fstat_r+0x1c>
 800c2ce:	6023      	str	r3, [r4, #0]
 800c2d0:	bd38      	pop	{r3, r4, r5, pc}
 800c2d2:	bf00      	nop
 800c2d4:	200015bc 	.word	0x200015bc

0800c2d8 <_isatty_r>:
 800c2d8:	b538      	push	{r3, r4, r5, lr}
 800c2da:	2300      	movs	r3, #0
 800c2dc:	4d05      	ldr	r5, [pc, #20]	; (800c2f4 <_isatty_r+0x1c>)
 800c2de:	4604      	mov	r4, r0
 800c2e0:	4608      	mov	r0, r1
 800c2e2:	602b      	str	r3, [r5, #0]
 800c2e4:	f7f7 ff18 	bl	8004118 <_isatty>
 800c2e8:	1c43      	adds	r3, r0, #1
 800c2ea:	d102      	bne.n	800c2f2 <_isatty_r+0x1a>
 800c2ec:	682b      	ldr	r3, [r5, #0]
 800c2ee:	b103      	cbz	r3, 800c2f2 <_isatty_r+0x1a>
 800c2f0:	6023      	str	r3, [r4, #0]
 800c2f2:	bd38      	pop	{r3, r4, r5, pc}
 800c2f4:	200015bc 	.word	0x200015bc

0800c2f8 <_lseek_r>:
 800c2f8:	b538      	push	{r3, r4, r5, lr}
 800c2fa:	4604      	mov	r4, r0
 800c2fc:	4608      	mov	r0, r1
 800c2fe:	4611      	mov	r1, r2
 800c300:	2200      	movs	r2, #0
 800c302:	4d05      	ldr	r5, [pc, #20]	; (800c318 <_lseek_r+0x20>)
 800c304:	602a      	str	r2, [r5, #0]
 800c306:	461a      	mov	r2, r3
 800c308:	f7f7 ff08 	bl	800411c <_lseek>
 800c30c:	1c43      	adds	r3, r0, #1
 800c30e:	d102      	bne.n	800c316 <_lseek_r+0x1e>
 800c310:	682b      	ldr	r3, [r5, #0]
 800c312:	b103      	cbz	r3, 800c316 <_lseek_r+0x1e>
 800c314:	6023      	str	r3, [r4, #0]
 800c316:	bd38      	pop	{r3, r4, r5, pc}
 800c318:	200015bc 	.word	0x200015bc

0800c31c <_read_r>:
 800c31c:	b538      	push	{r3, r4, r5, lr}
 800c31e:	4604      	mov	r4, r0
 800c320:	4608      	mov	r0, r1
 800c322:	4611      	mov	r1, r2
 800c324:	2200      	movs	r2, #0
 800c326:	4d05      	ldr	r5, [pc, #20]	; (800c33c <_read_r+0x20>)
 800c328:	602a      	str	r2, [r5, #0]
 800c32a:	461a      	mov	r2, r3
 800c32c:	f7f7 fed0 	bl	80040d0 <_read>
 800c330:	1c43      	adds	r3, r0, #1
 800c332:	d102      	bne.n	800c33a <_read_r+0x1e>
 800c334:	682b      	ldr	r3, [r5, #0]
 800c336:	b103      	cbz	r3, 800c33a <_read_r+0x1e>
 800c338:	6023      	str	r3, [r4, #0]
 800c33a:	bd38      	pop	{r3, r4, r5, pc}
 800c33c:	200015bc 	.word	0x200015bc

0800c340 <_init>:
 800c340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c342:	bf00      	nop
 800c344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c346:	bc08      	pop	{r3}
 800c348:	469e      	mov	lr, r3
 800c34a:	4770      	bx	lr

0800c34c <_fini>:
 800c34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c34e:	bf00      	nop
 800c350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c352:	bc08      	pop	{r3}
 800c354:	469e      	mov	lr, r3
 800c356:	4770      	bx	lr
