
Calculator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b954  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000654  0800ba68  0800ba68  0001ba68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000108  0800c0bc  0800c0bc  0001c0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000358  0800c1c4  0800c1c4  0001c1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c51c  0800c51c  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c51c  0800c51c  0001c51c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800c524  0800c524  0001c524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800c52c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001274  20000350  0800c87c  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015c4  0800c87c  000215c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038a95  00000000  00000000  00020379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ed7  00000000  00000000  00058e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  0005ece8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001da8  00000000  00000000  000602d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f939  00000000  00000000  00062078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b1af  00000000  00000000  000819b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a313b  00000000  00000000  0009cb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013fc9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007864  00000000  00000000  0013fcec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00008cb1  00000000  00000000  00147550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ba4c 	.word	0x0800ba4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	0800ba4c 	.word	0x0800ba4c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2lz>:
 8000a4c:	b538      	push	{r3, r4, r5, lr}
 8000a4e:	4605      	mov	r5, r0
 8000a50:	460c      	mov	r4, r1
 8000a52:	2200      	movs	r2, #0
 8000a54:	2300      	movs	r3, #0
 8000a56:	4628      	mov	r0, r5
 8000a58:	4621      	mov	r1, r4
 8000a5a:	f7ff ffaf 	bl	80009bc <__aeabi_dcmplt>
 8000a5e:	b928      	cbnz	r0, 8000a6c <__aeabi_d2lz+0x20>
 8000a60:	4628      	mov	r0, r5
 8000a62:	4621      	mov	r1, r4
 8000a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a68:	f000 b80a 	b.w	8000a80 <__aeabi_d2ulz>
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000a72:	f000 f805 	bl	8000a80 <__aeabi_d2ulz>
 8000a76:	4240      	negs	r0, r0
 8000a78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a7c:	bd38      	pop	{r3, r4, r5, pc}
 8000a7e:	bf00      	nop

08000a80 <__aeabi_d2ulz>:
 8000a80:	b5d0      	push	{r4, r6, r7, lr}
 8000a82:	2200      	movs	r2, #0
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <__aeabi_d2ulz+0x34>)
 8000a86:	4606      	mov	r6, r0
 8000a88:	460f      	mov	r7, r1
 8000a8a:	f7ff fd25 	bl	80004d8 <__aeabi_dmul>
 8000a8e:	f7ff ffbd 	bl	8000a0c <__aeabi_d2uiz>
 8000a92:	4604      	mov	r4, r0
 8000a94:	f7ff fca6 	bl	80003e4 <__aeabi_ui2d>
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <__aeabi_d2ulz+0x38>)
 8000a9c:	f7ff fd1c 	bl	80004d8 <__aeabi_dmul>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	4630      	mov	r0, r6
 8000aa6:	4639      	mov	r1, r7
 8000aa8:	f7ff fb5e 	bl	8000168 <__aeabi_dsub>
 8000aac:	f7ff ffae 	bl	8000a0c <__aeabi_d2uiz>
 8000ab0:	4621      	mov	r1, r4
 8000ab2:	bdd0      	pop	{r4, r6, r7, pc}
 8000ab4:	3df00000 	.word	0x3df00000
 8000ab8:	41f00000 	.word	0x41f00000

08000abc <selfrel_offset31>:
 8000abc:	6803      	ldr	r3, [r0, #0]
 8000abe:	005a      	lsls	r2, r3, #1
 8000ac0:	bf4c      	ite	mi
 8000ac2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	4418      	add	r0, r3
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <search_EIT_table>:
 8000ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ad4:	b339      	cbz	r1, 8000b26 <search_EIT_table+0x56>
 8000ad6:	1e4f      	subs	r7, r1, #1
 8000ad8:	4604      	mov	r4, r0
 8000ada:	4615      	mov	r5, r2
 8000adc:	463e      	mov	r6, r7
 8000ade:	f04f 0800 	mov.w	r8, #0
 8000ae2:	eb08 0106 	add.w	r1, r8, r6
 8000ae6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000aea:	1049      	asrs	r1, r1, #1
 8000aec:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000af0:	4648      	mov	r0, r9
 8000af2:	f7ff ffe3 	bl	8000abc <selfrel_offset31>
 8000af6:	4603      	mov	r3, r0
 8000af8:	00c8      	lsls	r0, r1, #3
 8000afa:	3008      	adds	r0, #8
 8000afc:	428f      	cmp	r7, r1
 8000afe:	4420      	add	r0, r4
 8000b00:	d00b      	beq.n	8000b1a <search_EIT_table+0x4a>
 8000b02:	42ab      	cmp	r3, r5
 8000b04:	d80b      	bhi.n	8000b1e <search_EIT_table+0x4e>
 8000b06:	f7ff ffd9 	bl	8000abc <selfrel_offset31>
 8000b0a:	3801      	subs	r0, #1
 8000b0c:	42a8      	cmp	r0, r5
 8000b0e:	f101 0801 	add.w	r8, r1, #1
 8000b12:	d3e6      	bcc.n	8000ae2 <search_EIT_table+0x12>
 8000b14:	4648      	mov	r0, r9
 8000b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b1a:	42ab      	cmp	r3, r5
 8000b1c:	d9fa      	bls.n	8000b14 <search_EIT_table+0x44>
 8000b1e:	4588      	cmp	r8, r1
 8000b20:	d001      	beq.n	8000b26 <search_EIT_table+0x56>
 8000b22:	1e4e      	subs	r6, r1, #1
 8000b24:	e7dd      	b.n	8000ae2 <search_EIT_table+0x12>
 8000b26:	f04f 0900 	mov.w	r9, #0
 8000b2a:	4648      	mov	r0, r9
 8000b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000b30 <__gnu_unwind_get_pr_addr>:
 8000b30:	2801      	cmp	r0, #1
 8000b32:	d007      	beq.n	8000b44 <__gnu_unwind_get_pr_addr+0x14>
 8000b34:	2802      	cmp	r0, #2
 8000b36:	d007      	beq.n	8000b48 <__gnu_unwind_get_pr_addr+0x18>
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <__gnu_unwind_get_pr_addr+0x1c>)
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	bf0c      	ite	eq
 8000b3e:	4618      	moveq	r0, r3
 8000b40:	2000      	movne	r0, #0
 8000b42:	4770      	bx	lr
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <__gnu_unwind_get_pr_addr+0x20>)
 8000b46:	4770      	bx	lr
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <__gnu_unwind_get_pr_addr+0x24>)
 8000b4a:	4770      	bx	lr
 8000b4c:	08001221 	.word	0x08001221
 8000b50:	08001225 	.word	0x08001225
 8000b54:	08001229 	.word	0x08001229

08000b58 <get_eit_entry>:
 8000b58:	b530      	push	{r4, r5, lr}
 8000b5a:	4b24      	ldr	r3, [pc, #144]	; (8000bec <get_eit_entry+0x94>)
 8000b5c:	4604      	mov	r4, r0
 8000b5e:	b083      	sub	sp, #12
 8000b60:	1e8d      	subs	r5, r1, #2
 8000b62:	b33b      	cbz	r3, 8000bb4 <get_eit_entry+0x5c>
 8000b64:	4628      	mov	r0, r5
 8000b66:	a901      	add	r1, sp, #4
 8000b68:	f3af 8000 	nop.w
 8000b6c:	b1e8      	cbz	r0, 8000baa <get_eit_entry+0x52>
 8000b6e:	9901      	ldr	r1, [sp, #4]
 8000b70:	462a      	mov	r2, r5
 8000b72:	f7ff ffad 	bl	8000ad0 <search_EIT_table>
 8000b76:	4601      	mov	r1, r0
 8000b78:	b1b8      	cbz	r0, 8000baa <get_eit_entry+0x52>
 8000b7a:	f7ff ff9f 	bl	8000abc <selfrel_offset31>
 8000b7e:	684b      	ldr	r3, [r1, #4]
 8000b80:	64a0      	str	r0, [r4, #72]	; 0x48
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d02e      	beq.n	8000be4 <get_eit_entry+0x8c>
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db27      	blt.n	8000bda <get_eit_entry+0x82>
 8000b8a:	1d08      	adds	r0, r1, #4
 8000b8c:	f7ff ff96 	bl	8000abc <selfrel_offset31>
 8000b90:	2300      	movs	r3, #0
 8000b92:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000b96:	6803      	ldr	r3, [r0, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	db12      	blt.n	8000bc2 <get_eit_entry+0x6a>
 8000b9c:	f7ff ff8e 	bl	8000abc <selfrel_offset31>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	6123      	str	r3, [r4, #16]
 8000ba6:	b003      	add	sp, #12
 8000ba8:	bd30      	pop	{r4, r5, pc}
 8000baa:	2300      	movs	r3, #0
 8000bac:	2009      	movs	r0, #9
 8000bae:	6123      	str	r3, [r4, #16]
 8000bb0:	b003      	add	sp, #12
 8000bb2:	bd30      	pop	{r4, r5, pc}
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <get_eit_entry+0x98>)
 8000bb6:	490f      	ldr	r1, [pc, #60]	; (8000bf4 <get_eit_entry+0x9c>)
 8000bb8:	4618      	mov	r0, r3
 8000bba:	1ac9      	subs	r1, r1, r3
 8000bbc:	10c9      	asrs	r1, r1, #3
 8000bbe:	9101      	str	r1, [sp, #4]
 8000bc0:	e7d6      	b.n	8000b70 <get_eit_entry+0x18>
 8000bc2:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000bc6:	f7ff ffb3 	bl	8000b30 <__gnu_unwind_get_pr_addr>
 8000bca:	2800      	cmp	r0, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	bf14      	ite	ne
 8000bd0:	2000      	movne	r0, #0
 8000bd2:	2009      	moveq	r0, #9
 8000bd4:	6123      	str	r3, [r4, #16]
 8000bd6:	b003      	add	sp, #12
 8000bd8:	bd30      	pop	{r4, r5, pc}
 8000bda:	2301      	movs	r3, #1
 8000bdc:	1d08      	adds	r0, r1, #4
 8000bde:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000be2:	e7d8      	b.n	8000b96 <get_eit_entry+0x3e>
 8000be4:	2300      	movs	r3, #0
 8000be6:	2005      	movs	r0, #5
 8000be8:	6123      	str	r3, [r4, #16]
 8000bea:	e7dc      	b.n	8000ba6 <get_eit_entry+0x4e>
 8000bec:	00000000 	.word	0x00000000
 8000bf0:	0800c1c4 	.word	0x0800c1c4
 8000bf4:	0800c51c 	.word	0x0800c51c

08000bf8 <restore_non_core_regs>:
 8000bf8:	6803      	ldr	r3, [r0, #0]
 8000bfa:	b510      	push	{r4, lr}
 8000bfc:	07da      	lsls	r2, r3, #31
 8000bfe:	4604      	mov	r4, r0
 8000c00:	d406      	bmi.n	8000c10 <restore_non_core_regs+0x18>
 8000c02:	079b      	lsls	r3, r3, #30
 8000c04:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000c08:	d509      	bpl.n	8000c1e <restore_non_core_regs+0x26>
 8000c0a:	f000 fc5d 	bl	80014c8 <__gnu_Unwind_Restore_VFP_D>
 8000c0e:	6823      	ldr	r3, [r4, #0]
 8000c10:	0759      	lsls	r1, r3, #29
 8000c12:	d509      	bpl.n	8000c28 <restore_non_core_regs+0x30>
 8000c14:	071a      	lsls	r2, r3, #28
 8000c16:	d50e      	bpl.n	8000c36 <restore_non_core_regs+0x3e>
 8000c18:	06db      	lsls	r3, r3, #27
 8000c1a:	d513      	bpl.n	8000c44 <restore_non_core_regs+0x4c>
 8000c1c:	bd10      	pop	{r4, pc}
 8000c1e:	f000 fc4b 	bl	80014b8 <__gnu_Unwind_Restore_VFP>
 8000c22:	6823      	ldr	r3, [r4, #0]
 8000c24:	0759      	lsls	r1, r3, #29
 8000c26:	d4f5      	bmi.n	8000c14 <restore_non_core_regs+0x1c>
 8000c28:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000c2c:	f000 fc54 	bl	80014d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000c30:	6823      	ldr	r3, [r4, #0]
 8000c32:	071a      	lsls	r2, r3, #28
 8000c34:	d4f0      	bmi.n	8000c18 <restore_non_core_regs+0x20>
 8000c36:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000c3a:	f000 fc55 	bl	80014e8 <__gnu_Unwind_Restore_WMMXD>
 8000c3e:	6823      	ldr	r3, [r4, #0]
 8000c40:	06db      	lsls	r3, r3, #27
 8000c42:	d4eb      	bmi.n	8000c1c <restore_non_core_regs+0x24>
 8000c44:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c4c:	f000 bc90 	b.w	8001570 <__gnu_Unwind_Restore_WMMXC>

08000c50 <__gnu_unwind_24bit.constprop.0>:
 8000c50:	2009      	movs	r0, #9
 8000c52:	4770      	bx	lr

08000c54 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8000c54:	4603      	mov	r3, r0
 8000c56:	6800      	ldr	r0, [r0, #0]
 8000c58:	b100      	cbz	r0, 8000c5c <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8000c5a:	4418      	add	r0, r3
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop

08000c60 <_Unwind_DebugHook>:
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <unwind_phase2>:
 8000c64:	b570      	push	{r4, r5, r6, lr}
 8000c66:	4604      	mov	r4, r0
 8000c68:	460e      	mov	r6, r1
 8000c6a:	4620      	mov	r0, r4
 8000c6c:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000c6e:	f7ff ff73 	bl	8000b58 <get_eit_entry>
 8000c72:	4605      	mov	r5, r0
 8000c74:	b998      	cbnz	r0, 8000c9e <unwind_phase2+0x3a>
 8000c76:	f8d6 c040 	ldr.w	ip, [r6, #64]	; 0x40
 8000c7a:	4632      	mov	r2, r6
 8000c7c:	4621      	mov	r1, r4
 8000c7e:	2001      	movs	r0, #1
 8000c80:	6923      	ldr	r3, [r4, #16]
 8000c82:	f8c4 c014 	str.w	ip, [r4, #20]
 8000c86:	4798      	blx	r3
 8000c88:	2808      	cmp	r0, #8
 8000c8a:	d0ee      	beq.n	8000c6a <unwind_phase2+0x6>
 8000c8c:	2807      	cmp	r0, #7
 8000c8e:	d106      	bne.n	8000c9e <unwind_phase2+0x3a>
 8000c90:	4628      	mov	r0, r5
 8000c92:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000c94:	f7ff ffe4 	bl	8000c60 <_Unwind_DebugHook>
 8000c98:	1d30      	adds	r0, r6, #4
 8000c9a:	f000 fc01 	bl	80014a0 <__restore_core_regs>
 8000c9e:	f007 fe23 	bl	80088e8 <abort>
 8000ca2:	bf00      	nop

08000ca4 <unwind_phase2_forced>:
 8000ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca8:	f04f 0a00 	mov.w	sl, #0
 8000cac:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000cb0:	f10d 0e0c 	add.w	lr, sp, #12
 8000cb4:	f101 0c04 	add.w	ip, r1, #4
 8000cb8:	68c7      	ldr	r7, [r0, #12]
 8000cba:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	4614      	mov	r4, r2
 8000cc2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000cc6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000cca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000cce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000cd2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000cd6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000cda:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000cde:	ad02      	add	r5, sp, #8
 8000ce0:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000ce4:	f8c5 a000 	str.w	sl, [r5]
 8000ce8:	e021      	b.n	8000d2e <unwind_phase2_forced+0x8a>
 8000cea:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000cec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000cf0:	4629      	mov	r1, r5
 8000cf2:	6173      	str	r3, [r6, #20]
 8000cf4:	a87a      	add	r0, sp, #488	; 0x1e8
 8000cf6:	f007 fe47 	bl	8008988 <memcpy>
 8000cfa:	4631      	mov	r1, r6
 8000cfc:	4650      	mov	r0, sl
 8000cfe:	6933      	ldr	r3, [r6, #16]
 8000d00:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000d02:	4798      	blx	r3
 8000d04:	9c88      	ldr	r4, [sp, #544]	; 0x220
 8000d06:	4682      	mov	sl, r0
 8000d08:	646c      	str	r4, [r5, #68]	; 0x44
 8000d0a:	4633      	mov	r3, r6
 8000d0c:	4632      	mov	r2, r6
 8000d0e:	4649      	mov	r1, r9
 8000d10:	2001      	movs	r0, #1
 8000d12:	e9cd 5800 	strd	r5, r8, [sp]
 8000d16:	47b8      	blx	r7
 8000d18:	4604      	mov	r4, r0
 8000d1a:	b9f0      	cbnz	r0, 8000d5a <unwind_phase2_forced+0xb6>
 8000d1c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000d20:	4628      	mov	r0, r5
 8000d22:	a97a      	add	r1, sp, #488	; 0x1e8
 8000d24:	f007 fe30 	bl	8008988 <memcpy>
 8000d28:	f1ba 0f08 	cmp.w	sl, #8
 8000d2c:	d11b      	bne.n	8000d66 <unwind_phase2_forced+0xc2>
 8000d2e:	4630      	mov	r0, r6
 8000d30:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000d32:	f7ff ff11 	bl	8000b58 <get_eit_entry>
 8000d36:	f104 0909 	add.w	r9, r4, #9
 8000d3a:	fa5f fa89 	uxtb.w	sl, r9
 8000d3e:	4604      	mov	r4, r0
 8000d40:	2800      	cmp	r0, #0
 8000d42:	d0d2      	beq.n	8000cea <unwind_phase2_forced+0x46>
 8000d44:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8000d46:	4633      	mov	r3, r6
 8000d48:	6469      	str	r1, [r5, #68]	; 0x44
 8000d4a:	4632      	mov	r2, r6
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	e9cd 5800 	strd	r5, r8, [sp]
 8000d52:	f04a 0110 	orr.w	r1, sl, #16
 8000d56:	47b8      	blx	r7
 8000d58:	b100      	cbz	r0, 8000d5c <unwind_phase2_forced+0xb8>
 8000d5a:	2409      	movs	r4, #9
 8000d5c:	4620      	mov	r0, r4
 8000d5e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	f1ba 0f07 	cmp.w	sl, #7
 8000d6a:	d1f6      	bne.n	8000d5a <unwind_phase2_forced+0xb6>
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000d70:	f7ff ff76 	bl	8000c60 <_Unwind_DebugHook>
 8000d74:	a803      	add	r0, sp, #12
 8000d76:	f000 fb93 	bl	80014a0 <__restore_core_regs>
 8000d7a:	bf00      	nop

08000d7c <_Unwind_GetCFA>:
 8000d7c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000d7e:	4770      	bx	lr

08000d80 <__gnu_Unwind_RaiseException>:
 8000d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d82:	f04f 37ff 	mov.w	r7, #4294967295
 8000d86:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000d88:	b0f9      	sub	sp, #484	; 0x1e4
 8000d8a:	640b      	str	r3, [r1, #64]	; 0x40
 8000d8c:	ac01      	add	r4, sp, #4
 8000d8e:	f101 0c04 	add.w	ip, r1, #4
 8000d92:	460e      	mov	r6, r1
 8000d94:	4605      	mov	r5, r0
 8000d96:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000da0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da8:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000db0:	9700      	str	r7, [sp, #0]
 8000db2:	e006      	b.n	8000dc2 <__gnu_Unwind_RaiseException+0x42>
 8000db4:	466a      	mov	r2, sp
 8000db6:	4629      	mov	r1, r5
 8000db8:	692b      	ldr	r3, [r5, #16]
 8000dba:	4798      	blx	r3
 8000dbc:	2808      	cmp	r0, #8
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	d108      	bne.n	8000dd4 <__gnu_Unwind_RaiseException+0x54>
 8000dc2:	4628      	mov	r0, r5
 8000dc4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000dc6:	f7ff fec7 	bl	8000b58 <get_eit_entry>
 8000dca:	2800      	cmp	r0, #0
 8000dcc:	d0f2      	beq.n	8000db4 <__gnu_Unwind_RaiseException+0x34>
 8000dce:	2009      	movs	r0, #9
 8000dd0:	b079      	add	sp, #484	; 0x1e4
 8000dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dd4:	4668      	mov	r0, sp
 8000dd6:	f7ff ff0f 	bl	8000bf8 <restore_non_core_regs>
 8000dda:	2c06      	cmp	r4, #6
 8000ddc:	d1f7      	bne.n	8000dce <__gnu_Unwind_RaiseException+0x4e>
 8000dde:	4631      	mov	r1, r6
 8000de0:	4628      	mov	r0, r5
 8000de2:	f7ff ff3f 	bl	8000c64 <unwind_phase2>
 8000de6:	bf00      	nop

08000de8 <__gnu_Unwind_ForcedUnwind>:
 8000de8:	b410      	push	{r4}
 8000dea:	4614      	mov	r4, r2
 8000dec:	6184      	str	r4, [r0, #24]
 8000dee:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8000df0:	60c1      	str	r1, [r0, #12]
 8000df2:	2200      	movs	r2, #0
 8000df4:	641c      	str	r4, [r3, #64]	; 0x40
 8000df6:	4619      	mov	r1, r3
 8000df8:	bc10      	pop	{r4}
 8000dfa:	e753      	b.n	8000ca4 <unwind_phase2_forced>

08000dfc <__gnu_Unwind_Resume>:
 8000dfc:	b570      	push	{r4, r5, r6, lr}
 8000dfe:	6943      	ldr	r3, [r0, #20]
 8000e00:	68c6      	ldr	r6, [r0, #12]
 8000e02:	640b      	str	r3, [r1, #64]	; 0x40
 8000e04:	b9ae      	cbnz	r6, 8000e32 <__gnu_Unwind_Resume+0x36>
 8000e06:	460a      	mov	r2, r1
 8000e08:	6903      	ldr	r3, [r0, #16]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	460d      	mov	r5, r1
 8000e0e:	4601      	mov	r1, r0
 8000e10:	2002      	movs	r0, #2
 8000e12:	4798      	blx	r3
 8000e14:	2807      	cmp	r0, #7
 8000e16:	d005      	beq.n	8000e24 <__gnu_Unwind_Resume+0x28>
 8000e18:	2808      	cmp	r0, #8
 8000e1a:	d10f      	bne.n	8000e3c <__gnu_Unwind_Resume+0x40>
 8000e1c:	4629      	mov	r1, r5
 8000e1e:	4620      	mov	r0, r4
 8000e20:	f7ff ff20 	bl	8000c64 <unwind_phase2>
 8000e24:	4630      	mov	r0, r6
 8000e26:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000e28:	f7ff ff1a 	bl	8000c60 <_Unwind_DebugHook>
 8000e2c:	1d28      	adds	r0, r5, #4
 8000e2e:	f000 fb37 	bl	80014a0 <__restore_core_regs>
 8000e32:	2201      	movs	r2, #1
 8000e34:	f7ff ff36 	bl	8000ca4 <unwind_phase2_forced>
 8000e38:	f007 fd56 	bl	80088e8 <abort>
 8000e3c:	f007 fd54 	bl	80088e8 <abort>

08000e40 <__gnu_Unwind_Resume_or_Rethrow>:
 8000e40:	68c2      	ldr	r2, [r0, #12]
 8000e42:	b12a      	cbz	r2, 8000e50 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8000e44:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
 8000e4e:	e729      	b.n	8000ca4 <unwind_phase2_forced>
 8000e50:	e796      	b.n	8000d80 <__gnu_Unwind_RaiseException>
 8000e52:	bf00      	nop

08000e54 <_Unwind_Complete>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <_Unwind_DeleteException>:
 8000e58:	6883      	ldr	r3, [r0, #8]
 8000e5a:	4601      	mov	r1, r0
 8000e5c:	b10b      	cbz	r3, 8000e62 <_Unwind_DeleteException+0xa>
 8000e5e:	2001      	movs	r0, #1
 8000e60:	4718      	bx	r3
 8000e62:	4770      	bx	lr

08000e64 <_Unwind_VRS_Get>:
 8000e64:	2901      	cmp	r1, #1
 8000e66:	d012      	beq.n	8000e8e <_Unwind_VRS_Get+0x2a>
 8000e68:	d809      	bhi.n	8000e7e <_Unwind_VRS_Get+0x1a>
 8000e6a:	b973      	cbnz	r3, 8000e8a <_Unwind_VRS_Get+0x26>
 8000e6c:	2a0f      	cmp	r2, #15
 8000e6e:	d80c      	bhi.n	8000e8a <_Unwind_VRS_Get+0x26>
 8000e70:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8000e74:	6842      	ldr	r2, [r0, #4]
 8000e76:	4618      	mov	r0, r3
 8000e78:	9b00      	ldr	r3, [sp, #0]
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	4770      	bx	lr
 8000e7e:	3903      	subs	r1, #3
 8000e80:	2901      	cmp	r1, #1
 8000e82:	bf94      	ite	ls
 8000e84:	2001      	movls	r0, #1
 8000e86:	2002      	movhi	r0, #2
 8000e88:	4770      	bx	lr
 8000e8a:	2002      	movs	r0, #2
 8000e8c:	4770      	bx	lr
 8000e8e:	4608      	mov	r0, r1
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <_Unwind_GetGR>:
 8000e94:	2300      	movs	r3, #0
 8000e96:	b500      	push	{lr}
 8000e98:	b085      	sub	sp, #20
 8000e9a:	460a      	mov	r2, r1
 8000e9c:	a903      	add	r1, sp, #12
 8000e9e:	9100      	str	r1, [sp, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f7ff ffdf 	bl	8000e64 <_Unwind_VRS_Get>
 8000ea6:	9803      	ldr	r0, [sp, #12]
 8000ea8:	b005      	add	sp, #20
 8000eaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8000eae:	bf00      	nop

08000eb0 <_Unwind_VRS_Set>:
 8000eb0:	2901      	cmp	r1, #1
 8000eb2:	d012      	beq.n	8000eda <_Unwind_VRS_Set+0x2a>
 8000eb4:	d809      	bhi.n	8000eca <_Unwind_VRS_Set+0x1a>
 8000eb6:	b973      	cbnz	r3, 8000ed6 <_Unwind_VRS_Set+0x26>
 8000eb8:	2a0f      	cmp	r2, #15
 8000eba:	d80c      	bhi.n	8000ed6 <_Unwind_VRS_Set+0x26>
 8000ebc:	9900      	ldr	r1, [sp, #0]
 8000ebe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000ec2:	6809      	ldr	r1, [r1, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	6051      	str	r1, [r2, #4]
 8000ec8:	4770      	bx	lr
 8000eca:	3903      	subs	r1, #3
 8000ecc:	2901      	cmp	r1, #1
 8000ece:	bf94      	ite	ls
 8000ed0:	2001      	movls	r0, #1
 8000ed2:	2002      	movhi	r0, #2
 8000ed4:	4770      	bx	lr
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	4770      	bx	lr
 8000eda:	4608      	mov	r0, r1
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <_Unwind_SetGR>:
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	b510      	push	{r4, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	ac03      	add	r4, sp, #12
 8000ee8:	9203      	str	r2, [sp, #12]
 8000eea:	9400      	str	r4, [sp, #0]
 8000eec:	460a      	mov	r2, r1
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f7ff ffde 	bl	8000eb0 <_Unwind_VRS_Set>
 8000ef4:	b004      	add	sp, #16
 8000ef6:	bd10      	pop	{r4, pc}

08000ef8 <__gnu_Unwind_Backtrace>:
 8000ef8:	b570      	push	{r4, r5, r6, lr}
 8000efa:	f04f 36ff 	mov.w	r6, #4294967295
 8000efe:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000f00:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 8000f0a:	f102 0c04 	add.w	ip, r2, #4
 8000f0e:	4605      	mov	r5, r0
 8000f10:	460c      	mov	r4, r1
 8000f12:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000f16:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000f1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000f1e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000f22:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000f26:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000f2a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000f2e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000f32:	9616      	str	r6, [sp, #88]	; 0x58
 8000f34:	e012      	b.n	8000f5c <__gnu_Unwind_Backtrace+0x64>
 8000f36:	210c      	movs	r1, #12
 8000f38:	a816      	add	r0, sp, #88	; 0x58
 8000f3a:	466a      	mov	r2, sp
 8000f3c:	f7ff ffd0 	bl	8000ee0 <_Unwind_SetGR>
 8000f40:	4621      	mov	r1, r4
 8000f42:	a816      	add	r0, sp, #88	; 0x58
 8000f44:	47a8      	blx	r5
 8000f46:	b978      	cbnz	r0, 8000f68 <__gnu_Unwind_Backtrace+0x70>
 8000f48:	4669      	mov	r1, sp
 8000f4a:	2008      	movs	r0, #8
 8000f4c:	9b04      	ldr	r3, [sp, #16]
 8000f4e:	aa16      	add	r2, sp, #88	; 0x58
 8000f50:	4798      	blx	r3
 8000f52:	2805      	cmp	r0, #5
 8000f54:	4606      	mov	r6, r0
 8000f56:	d008      	beq.n	8000f6a <__gnu_Unwind_Backtrace+0x72>
 8000f58:	2809      	cmp	r0, #9
 8000f5a:	d005      	beq.n	8000f68 <__gnu_Unwind_Backtrace+0x70>
 8000f5c:	4668      	mov	r0, sp
 8000f5e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000f60:	f7ff fdfa 	bl	8000b58 <get_eit_entry>
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__gnu_Unwind_Backtrace+0x3e>
 8000f68:	2609      	movs	r6, #9
 8000f6a:	a816      	add	r0, sp, #88	; 0x58
 8000f6c:	f7ff fe44 	bl	8000bf8 <restore_non_core_regs>
 8000f70:	4630      	mov	r0, r6
 8000f72:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8000f76:	bd70      	pop	{r4, r5, r6, pc}

08000f78 <__gnu_unwind_pr_common>:
 8000f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f7c:	461e      	mov	r6, r3
 8000f7e:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000f80:	b089      	sub	sp, #36	; 0x24
 8000f82:	f854 3b04 	ldr.w	r3, [r4], #4
 8000f86:	460d      	mov	r5, r1
 8000f88:	4617      	mov	r7, r2
 8000f8a:	f000 0803 	and.w	r8, r0, #3
 8000f8e:	9406      	str	r4, [sp, #24]
 8000f90:	2e00      	cmp	r6, #0
 8000f92:	d079      	beq.n	8001088 <__gnu_unwind_pr_common+0x110>
 8000f94:	2202      	movs	r2, #2
 8000f96:	f88d 201c 	strb.w	r2, [sp, #28]
 8000f9a:	0c1a      	lsrs	r2, r3, #16
 8000f9c:	f88d 201d 	strb.w	r2, [sp, #29]
 8000fa0:	041b      	lsls	r3, r3, #16
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	9305      	str	r3, [sp, #20]
 8000fa6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000faa:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000fac:	f1b8 0f02 	cmp.w	r8, #2
 8000fb0:	bf08      	it	eq
 8000fb2:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000fb4:	f013 0301 	ands.w	r3, r3, #1
 8000fb8:	d00c      	beq.n	8000fd4 <__gnu_unwind_pr_common+0x5c>
 8000fba:	4638      	mov	r0, r7
 8000fbc:	a905      	add	r1, sp, #20
 8000fbe:	f000 fb71 	bl	80016a4 <__gnu_unwind_execute>
 8000fc2:	b918      	cbnz	r0, 8000fcc <__gnu_unwind_pr_common+0x54>
 8000fc4:	2008      	movs	r0, #8
 8000fc6:	b009      	add	sp, #36	; 0x24
 8000fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fcc:	2009      	movs	r0, #9
 8000fce:	b009      	add	sp, #36	; 0x24
 8000fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fd4:	f8d4 a000 	ldr.w	sl, [r4]
 8000fd8:	f1ba 0f00 	cmp.w	sl, #0
 8000fdc:	d0ed      	beq.n	8000fba <__gnu_unwind_pr_common+0x42>
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	f000 0308 	and.w	r3, r0, #8
 8000fe4:	9302      	str	r3, [sp, #8]
 8000fe6:	2e02      	cmp	r6, #2
 8000fe8:	d04a      	beq.n	8001080 <__gnu_unwind_pr_common+0x108>
 8000fea:	f8b4 a000 	ldrh.w	sl, [r4]
 8000fee:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000ff2:	3404      	adds	r4, #4
 8000ff4:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8000ff6:	210f      	movs	r1, #15
 8000ff8:	4638      	mov	r0, r7
 8000ffa:	f029 0b01 	bic.w	fp, r9, #1
 8000ffe:	4493      	add	fp, r2
 8001000:	f7ff ff48 	bl	8000e94 <_Unwind_GetGR>
 8001004:	4583      	cmp	fp, r0
 8001006:	d839      	bhi.n	800107c <__gnu_unwind_pr_common+0x104>
 8001008:	f02a 0201 	bic.w	r2, sl, #1
 800100c:	445a      	add	r2, fp
 800100e:	4282      	cmp	r2, r0
 8001010:	bf94      	ite	ls
 8001012:	2000      	movls	r0, #0
 8001014:	2001      	movhi	r0, #1
 8001016:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	f00a 0a01 	and.w	sl, sl, #1
 8001022:	ea43 030a 	orr.w	r3, r3, sl
 8001026:	2b01      	cmp	r3, #1
 8001028:	d049      	beq.n	80010be <__gnu_unwind_pr_common+0x146>
 800102a:	2b02      	cmp	r3, #2
 800102c:	d032      	beq.n	8001094 <__gnu_unwind_pr_common+0x11c>
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1cc      	bne.n	8000fcc <__gnu_unwind_pr_common+0x54>
 8001032:	f1b8 0f00 	cmp.w	r8, #0
 8001036:	d002      	beq.n	800103e <__gnu_unwind_pr_common+0xc6>
 8001038:	2800      	cmp	r0, #0
 800103a:	f040 80ce 	bne.w	80011da <__gnu_unwind_pr_common+0x262>
 800103e:	3404      	adds	r4, #4
 8001040:	f8d4 a000 	ldr.w	sl, [r4]
 8001044:	f1ba 0f00 	cmp.w	sl, #0
 8001048:	d1cd      	bne.n	8000fe6 <__gnu_unwind_pr_common+0x6e>
 800104a:	4638      	mov	r0, r7
 800104c:	a905      	add	r1, sp, #20
 800104e:	f000 fb29 	bl	80016a4 <__gnu_unwind_execute>
 8001052:	2800      	cmp	r0, #0
 8001054:	d1ba      	bne.n	8000fcc <__gnu_unwind_pr_common+0x54>
 8001056:	9b01      	ldr	r3, [sp, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0b3      	beq.n	8000fc4 <__gnu_unwind_pr_common+0x4c>
 800105c:	210f      	movs	r1, #15
 800105e:	4638      	mov	r0, r7
 8001060:	f7ff ff18 	bl	8000e94 <_Unwind_GetGR>
 8001064:	210e      	movs	r1, #14
 8001066:	4602      	mov	r2, r0
 8001068:	4638      	mov	r0, r7
 800106a:	f7ff ff39 	bl	8000ee0 <_Unwind_SetGR>
 800106e:	4638      	mov	r0, r7
 8001070:	210f      	movs	r1, #15
 8001072:	4a6a      	ldr	r2, [pc, #424]	; (800121c <__gnu_unwind_pr_common+0x2a4>)
 8001074:	f7ff ff34 	bl	8000ee0 <_Unwind_SetGR>
 8001078:	2007      	movs	r0, #7
 800107a:	e7a8      	b.n	8000fce <__gnu_unwind_pr_common+0x56>
 800107c:	2000      	movs	r0, #0
 800107e:	e7ca      	b.n	8001016 <__gnu_unwind_pr_common+0x9e>
 8001080:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8001084:	3408      	adds	r4, #8
 8001086:	e7b5      	b.n	8000ff4 <__gnu_unwind_pr_common+0x7c>
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	9305      	str	r3, [sp, #20]
 800108c:	2303      	movs	r3, #3
 800108e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8001092:	e78a      	b.n	8000faa <__gnu_unwind_pr_common+0x32>
 8001094:	6823      	ldr	r3, [r4, #0]
 8001096:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800109a:	f1b8 0f00 	cmp.w	r8, #0
 800109e:	d145      	bne.n	800112c <__gnu_unwind_pr_common+0x1b4>
 80010a0:	b128      	cbz	r0, 80010ae <__gnu_unwind_pr_common+0x136>
 80010a2:	9a02      	ldr	r2, [sp, #8]
 80010a4:	2a00      	cmp	r2, #0
 80010a6:	d05c      	beq.n	8001162 <__gnu_unwind_pr_common+0x1ea>
 80010a8:	f1bb 0f00 	cmp.w	fp, #0
 80010ac:	d074      	beq.n	8001198 <__gnu_unwind_pr_common+0x220>
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	da00      	bge.n	80010b4 <__gnu_unwind_pr_common+0x13c>
 80010b2:	3404      	adds	r4, #4
 80010b4:	f10b 0b01 	add.w	fp, fp, #1
 80010b8:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 80010bc:	e7c0      	b.n	8001040 <__gnu_unwind_pr_common+0xc8>
 80010be:	f1b8 0f00 	cmp.w	r8, #0
 80010c2:	d119      	bne.n	80010f8 <__gnu_unwind_pr_common+0x180>
 80010c4:	b1b0      	cbz	r0, 80010f4 <__gnu_unwind_pr_common+0x17c>
 80010c6:	6863      	ldr	r3, [r4, #4]
 80010c8:	6822      	ldr	r2, [r4, #0]
 80010ca:	1c99      	adds	r1, r3, #2
 80010cc:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80010d0:	f43f af7c 	beq.w	8000fcc <__gnu_unwind_pr_common+0x54>
 80010d4:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80010d8:	3301      	adds	r3, #1
 80010da:	9104      	str	r1, [sp, #16]
 80010dc:	f000 8091 	beq.w	8001202 <__gnu_unwind_pr_common+0x28a>
 80010e0:	1d20      	adds	r0, r4, #4
 80010e2:	f7ff fdb7 	bl	8000c54 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80010e6:	ab04      	add	r3, sp, #16
 80010e8:	4601      	mov	r1, r0
 80010ea:	4628      	mov	r0, r5
 80010ec:	f3af 8000 	nop.w
 80010f0:	2800      	cmp	r0, #0
 80010f2:	d15c      	bne.n	80011ae <__gnu_unwind_pr_common+0x236>
 80010f4:	3408      	adds	r4, #8
 80010f6:	e7a3      	b.n	8001040 <__gnu_unwind_pr_common+0xc8>
 80010f8:	210d      	movs	r1, #13
 80010fa:	4638      	mov	r0, r7
 80010fc:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8001100:	f7ff fec8 	bl	8000e94 <_Unwind_GetGR>
 8001104:	4581      	cmp	r9, r0
 8001106:	d1f5      	bne.n	80010f4 <__gnu_unwind_pr_common+0x17c>
 8001108:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800110a:	429c      	cmp	r4, r3
 800110c:	d1f2      	bne.n	80010f4 <__gnu_unwind_pr_common+0x17c>
 800110e:	4620      	mov	r0, r4
 8001110:	f7ff fcd4 	bl	8000abc <selfrel_offset31>
 8001114:	210f      	movs	r1, #15
 8001116:	4602      	mov	r2, r0
 8001118:	4638      	mov	r0, r7
 800111a:	f7ff fee1 	bl	8000ee0 <_Unwind_SetGR>
 800111e:	4638      	mov	r0, r7
 8001120:	462a      	mov	r2, r5
 8001122:	2100      	movs	r1, #0
 8001124:	f7ff fedc 	bl	8000ee0 <_Unwind_SetGR>
 8001128:	2007      	movs	r0, #7
 800112a:	e750      	b.n	8000fce <__gnu_unwind_pr_common+0x56>
 800112c:	210d      	movs	r1, #13
 800112e:	4638      	mov	r0, r7
 8001130:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8001134:	f7ff feae 	bl	8000e94 <_Unwind_GetGR>
 8001138:	4581      	cmp	r9, r0
 800113a:	d001      	beq.n	8001140 <__gnu_unwind_pr_common+0x1c8>
 800113c:	6823      	ldr	r3, [r4, #0]
 800113e:	e7b6      	b.n	80010ae <__gnu_unwind_pr_common+0x136>
 8001140:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001142:	429c      	cmp	r4, r3
 8001144:	d1fa      	bne.n	800113c <__gnu_unwind_pr_common+0x1c4>
 8001146:	2304      	movs	r3, #4
 8001148:	2200      	movs	r2, #0
 800114a:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 800114e:	18e3      	adds	r3, r4, r3
 8001150:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8001154:	636b      	str	r3, [r5, #52]	; 0x34
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db5a      	blt.n	8001212 <__gnu_unwind_pr_common+0x29a>
 800115c:	2301      	movs	r3, #1
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	e7a8      	b.n	80010b4 <__gnu_unwind_pr_common+0x13c>
 8001162:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8001166:	f8cd 800c 	str.w	r8, [sp, #12]
 800116a:	4691      	mov	r9, r2
 800116c:	46b0      	mov	r8, r6
 800116e:	f104 0a04 	add.w	sl, r4, #4
 8001172:	461e      	mov	r6, r3
 8001174:	e00e      	b.n	8001194 <__gnu_unwind_pr_common+0x21c>
 8001176:	4650      	mov	r0, sl
 8001178:	9604      	str	r6, [sp, #16]
 800117a:	f7ff fd6b 	bl	8000c54 <_Unwind_decode_typeinfo_ptr.constprop.0>
 800117e:	2200      	movs	r2, #0
 8001180:	4601      	mov	r1, r0
 8001182:	ab04      	add	r3, sp, #16
 8001184:	4628      	mov	r0, r5
 8001186:	f109 0901 	add.w	r9, r9, #1
 800118a:	f10a 0a04 	add.w	sl, sl, #4
 800118e:	f3af 8000 	nop.w
 8001192:	b9e8      	cbnz	r0, 80011d0 <__gnu_unwind_pr_common+0x258>
 8001194:	45d9      	cmp	r9, fp
 8001196:	d1ee      	bne.n	8001176 <__gnu_unwind_pr_common+0x1fe>
 8001198:	210d      	movs	r1, #13
 800119a:	4638      	mov	r0, r7
 800119c:	f7ff fe7a 	bl	8000e94 <_Unwind_GetGR>
 80011a0:	4603      	mov	r3, r0
 80011a2:	9a04      	ldr	r2, [sp, #16]
 80011a4:	2006      	movs	r0, #6
 80011a6:	e9c5 2409 	strd	r2, r4, [r5, #36]	; 0x24
 80011aa:	622b      	str	r3, [r5, #32]
 80011ac:	e70f      	b.n	8000fce <__gnu_unwind_pr_common+0x56>
 80011ae:	4681      	mov	r9, r0
 80011b0:	210d      	movs	r1, #13
 80011b2:	4638      	mov	r0, r7
 80011b4:	f7ff fe6e 	bl	8000e94 <_Unwind_GetGR>
 80011b8:	f1b9 0f02 	cmp.w	r9, #2
 80011bc:	6228      	str	r0, [r5, #32]
 80011be:	d125      	bne.n	800120c <__gnu_unwind_pr_common+0x294>
 80011c0:	462b      	mov	r3, r5
 80011c2:	9a04      	ldr	r2, [sp, #16]
 80011c4:	f843 2f2c 	str.w	r2, [r3, #44]!
 80011c8:	626b      	str	r3, [r5, #36]	; 0x24
 80011ca:	2006      	movs	r0, #6
 80011cc:	62ac      	str	r4, [r5, #40]	; 0x28
 80011ce:	e6fe      	b.n	8000fce <__gnu_unwind_pr_common+0x56>
 80011d0:	4646      	mov	r6, r8
 80011d2:	6823      	ldr	r3, [r4, #0]
 80011d4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80011d8:	e769      	b.n	80010ae <__gnu_unwind_pr_common+0x136>
 80011da:	4620      	mov	r0, r4
 80011dc:	f7ff fc6e 	bl	8000abc <selfrel_offset31>
 80011e0:	4602      	mov	r2, r0
 80011e2:	3404      	adds	r4, #4
 80011e4:	63ac      	str	r4, [r5, #56]	; 0x38
 80011e6:	4628      	mov	r0, r5
 80011e8:	4614      	mov	r4, r2
 80011ea:	f3af 8000 	nop.w
 80011ee:	2800      	cmp	r0, #0
 80011f0:	f43f aeec 	beq.w	8000fcc <__gnu_unwind_pr_common+0x54>
 80011f4:	4638      	mov	r0, r7
 80011f6:	4622      	mov	r2, r4
 80011f8:	210f      	movs	r1, #15
 80011fa:	f7ff fe71 	bl	8000ee0 <_Unwind_SetGR>
 80011fe:	2007      	movs	r0, #7
 8001200:	e6e5      	b.n	8000fce <__gnu_unwind_pr_common+0x56>
 8001202:	210d      	movs	r1, #13
 8001204:	4638      	mov	r0, r7
 8001206:	f7ff fe45 	bl	8000e94 <_Unwind_GetGR>
 800120a:	6228      	str	r0, [r5, #32]
 800120c:	9b04      	ldr	r3, [sp, #16]
 800120e:	626b      	str	r3, [r5, #36]	; 0x24
 8001210:	e7db      	b.n	80011ca <__gnu_unwind_pr_common+0x252>
 8001212:	f10b 0001 	add.w	r0, fp, #1
 8001216:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800121a:	e779      	b.n	8001110 <__gnu_unwind_pr_common+0x198>
 800121c:	00000000 	.word	0x00000000

08001220 <__aeabi_unwind_cpp_pr0>:
 8001220:	2300      	movs	r3, #0
 8001222:	e6a9      	b.n	8000f78 <__gnu_unwind_pr_common>

08001224 <__aeabi_unwind_cpp_pr1>:
 8001224:	2301      	movs	r3, #1
 8001226:	e6a7      	b.n	8000f78 <__gnu_unwind_pr_common>

08001228 <__aeabi_unwind_cpp_pr2>:
 8001228:	2302      	movs	r3, #2
 800122a:	e6a5      	b.n	8000f78 <__gnu_unwind_pr_common>

0800122c <_Unwind_VRS_Pop>:
 800122c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001230:	4606      	mov	r6, r0
 8001232:	4615      	mov	r5, r2
 8001234:	461c      	mov	r4, r3
 8001236:	b0c3      	sub	sp, #268	; 0x10c
 8001238:	2904      	cmp	r1, #4
 800123a:	f200 80b8 	bhi.w	80013ae <_Unwind_VRS_Pop+0x182>
 800123e:	e8df f001 	tbb	[pc, r1]
 8001242:	569c      	.short	0x569c
 8001244:	2db6      	.short	0x2db6
 8001246:	03          	.byte	0x03
 8001247:	00          	.byte	0x00
 8001248:	2c00      	cmp	r4, #0
 800124a:	f040 80b0 	bne.w	80013ae <_Unwind_VRS_Pop+0x182>
 800124e:	2a10      	cmp	r2, #16
 8001250:	f200 80ad 	bhi.w	80013ae <_Unwind_VRS_Pop+0x182>
 8001254:	6803      	ldr	r3, [r0, #0]
 8001256:	06d8      	lsls	r0, r3, #27
 8001258:	f100 80f1 	bmi.w	800143e <_Unwind_VRS_Pop+0x212>
 800125c:	af20      	add	r7, sp, #128	; 0x80
 800125e:	4638      	mov	r0, r7
 8001260:	f000 f990 	bl	8001584 <__gnu_Unwind_Save_WMMXC>
 8001264:	2401      	movs	r4, #1
 8001266:	4638      	mov	r0, r7
 8001268:	2300      	movs	r3, #0
 800126a:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 800126c:	fa04 f203 	lsl.w	r2, r4, r3
 8001270:	422a      	tst	r2, r5
 8001272:	f103 0301 	add.w	r3, r3, #1
 8001276:	d005      	beq.n	8001284 <_Unwind_VRS_Pop+0x58>
 8001278:	460a      	mov	r2, r1
 800127a:	f852 cb04 	ldr.w	ip, [r2], #4
 800127e:	4611      	mov	r1, r2
 8001280:	f8c0 c000 	str.w	ip, [r0]
 8001284:	2b04      	cmp	r3, #4
 8001286:	f100 0004 	add.w	r0, r0, #4
 800128a:	d1ef      	bne.n	800126c <_Unwind_VRS_Pop+0x40>
 800128c:	4638      	mov	r0, r7
 800128e:	63b1      	str	r1, [r6, #56]	; 0x38
 8001290:	f000 f96e 	bl	8001570 <__gnu_Unwind_Restore_WMMXC>
 8001294:	2000      	movs	r0, #0
 8001296:	b043      	add	sp, #268	; 0x10c
 8001298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800129c:	2c03      	cmp	r4, #3
 800129e:	f040 8086 	bne.w	80013ae <_Unwind_VRS_Pop+0x182>
 80012a2:	b294      	uxth	r4, r2
 80012a4:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 80012a8:	2b10      	cmp	r3, #16
 80012aa:	ea4f 4512 	mov.w	r5, r2, lsr #16
 80012ae:	d87e      	bhi.n	80013ae <_Unwind_VRS_Pop+0x182>
 80012b0:	6803      	ldr	r3, [r0, #0]
 80012b2:	071f      	lsls	r7, r3, #28
 80012b4:	f100 80cb 	bmi.w	800144e <_Unwind_VRS_Pop+0x222>
 80012b8:	af20      	add	r7, sp, #128	; 0x80
 80012ba:	4638      	mov	r0, r7
 80012bc:	f000 f936 	bl	800152c <__gnu_Unwind_Save_WMMXD>
 80012c0:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80012c2:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 80012c6:	b154      	cbz	r4, 80012de <_Unwind_VRS_Pop+0xb2>
 80012c8:	460b      	mov	r3, r1
 80012ca:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80012ce:	1ad0      	subs	r0, r2, r3
 80012d0:	00e4      	lsls	r4, r4, #3
 80012d2:	581d      	ldr	r5, [r3, r0]
 80012d4:	f843 5b04 	str.w	r5, [r3], #4
 80012d8:	428b      	cmp	r3, r1
 80012da:	d1fa      	bne.n	80012d2 <_Unwind_VRS_Pop+0xa6>
 80012dc:	4422      	add	r2, r4
 80012de:	4638      	mov	r0, r7
 80012e0:	63b2      	str	r2, [r6, #56]	; 0x38
 80012e2:	f000 f901 	bl	80014e8 <__gnu_Unwind_Restore_WMMXD>
 80012e6:	2000      	movs	r0, #0
 80012e8:	b043      	add	sp, #268	; 0x10c
 80012ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012ee:	2c01      	cmp	r4, #1
 80012f0:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80012f4:	b295      	uxth	r5, r2
 80012f6:	d056      	beq.n	80013a6 <_Unwind_VRS_Pop+0x17a>
 80012f8:	2c05      	cmp	r4, #5
 80012fa:	d158      	bne.n	80013ae <_Unwind_VRS_Pop+0x182>
 80012fc:	eb08 0905 	add.w	r9, r8, r5
 8001300:	f1b9 0f20 	cmp.w	r9, #32
 8001304:	d853      	bhi.n	80013ae <_Unwind_VRS_Pop+0x182>
 8001306:	f1b8 0f0f 	cmp.w	r8, #15
 800130a:	d973      	bls.n	80013f4 <_Unwind_VRS_Pop+0x1c8>
 800130c:	46a9      	mov	r9, r5
 800130e:	2d00      	cmp	r5, #0
 8001310:	f040 8084 	bne.w	800141c <_Unwind_VRS_Pop+0x1f0>
 8001314:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001316:	b365      	cbz	r5, 8001372 <_Unwind_VRS_Pop+0x146>
 8001318:	af20      	add	r7, sp, #128	; 0x80
 800131a:	f04f 0900 	mov.w	r9, #0
 800131e:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8001322:	3f04      	subs	r7, #4
 8001324:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8001328:	f853 1b04 	ldr.w	r1, [r3], #4
 800132c:	42ab      	cmp	r3, r5
 800132e:	f847 1f04 	str.w	r1, [r7, #4]!
 8001332:	d1f9      	bne.n	8001328 <_Unwind_VRS_Pop+0xfc>
 8001334:	f1b9 0f00 	cmp.w	r9, #0
 8001338:	d00f      	beq.n	800135a <_Unwind_VRS_Pop+0x12e>
 800133a:	466f      	mov	r7, sp
 800133c:	4641      	mov	r1, r8
 800133e:	2910      	cmp	r1, #16
 8001340:	bf38      	it	cc
 8001342:	2110      	movcc	r1, #16
 8001344:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8001348:	3984      	subs	r1, #132	; 0x84
 800134a:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 800134e:	f853 0b04 	ldr.w	r0, [r3], #4
 8001352:	42ab      	cmp	r3, r5
 8001354:	f841 0f04 	str.w	r0, [r1, #4]!
 8001358:	d1f9      	bne.n	800134e <_Unwind_VRS_Pop+0x122>
 800135a:	2c01      	cmp	r4, #1
 800135c:	d07f      	beq.n	800145e <_Unwind_VRS_Pop+0x232>
 800135e:	f1b8 0f0f 	cmp.w	r8, #15
 8001362:	63b5      	str	r5, [r6, #56]	; 0x38
 8001364:	d942      	bls.n	80013ec <_Unwind_VRS_Pop+0x1c0>
 8001366:	f1b9 0f00 	cmp.w	r9, #0
 800136a:	d002      	beq.n	8001372 <_Unwind_VRS_Pop+0x146>
 800136c:	4668      	mov	r0, sp
 800136e:	f000 f8b3 	bl	80014d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001372:	2000      	movs	r0, #0
 8001374:	b043      	add	sp, #268	; 0x10c
 8001376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800137a:	b9c4      	cbnz	r4, 80013ae <_Unwind_VRS_Pop+0x182>
 800137c:	4623      	mov	r3, r4
 800137e:	2401      	movs	r4, #1
 8001380:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001382:	1d37      	adds	r7, r6, #4
 8001384:	b2a8      	uxth	r0, r5
 8001386:	fa04 f103 	lsl.w	r1, r4, r3
 800138a:	4201      	tst	r1, r0
 800138c:	bf1c      	itt	ne
 800138e:	f852 1b04 	ldrne.w	r1, [r2], #4
 8001392:	f847 1023 	strne.w	r1, [r7, r3, lsl #2]
 8001396:	3301      	adds	r3, #1
 8001398:	2b10      	cmp	r3, #16
 800139a:	d1f4      	bne.n	8001386 <_Unwind_VRS_Pop+0x15a>
 800139c:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 80013a0:	d1e7      	bne.n	8001372 <_Unwind_VRS_Pop+0x146>
 80013a2:	63b2      	str	r2, [r6, #56]	; 0x38
 80013a4:	e004      	b.n	80013b0 <_Unwind_VRS_Pop+0x184>
 80013a6:	eb08 0305 	add.w	r3, r8, r5
 80013aa:	2b10      	cmp	r3, #16
 80013ac:	d903      	bls.n	80013b6 <_Unwind_VRS_Pop+0x18a>
 80013ae:	2002      	movs	r0, #2
 80013b0:	b043      	add	sp, #268	; 0x10c
 80013b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013b6:	f1b8 0f0f 	cmp.w	r8, #15
 80013ba:	d8f8      	bhi.n	80013ae <_Unwind_VRS_Pop+0x182>
 80013bc:	6833      	ldr	r3, [r6, #0]
 80013be:	07da      	lsls	r2, r3, #31
 80013c0:	d506      	bpl.n	80013d0 <_Unwind_VRS_Pop+0x1a4>
 80013c2:	4630      	mov	r0, r6
 80013c4:	f023 0303 	bic.w	r3, r3, #3
 80013c8:	f840 3b48 	str.w	r3, [r0], #72
 80013cc:	f000 f878 	bl	80014c0 <__gnu_Unwind_Save_VFP>
 80013d0:	af20      	add	r7, sp, #128	; 0x80
 80013d2:	4638      	mov	r0, r7
 80013d4:	f000 f874 	bl	80014c0 <__gnu_Unwind_Save_VFP>
 80013d8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80013da:	2d00      	cmp	r5, #0
 80013dc:	d19d      	bne.n	800131a <_Unwind_VRS_Pop+0xee>
 80013de:	461d      	mov	r5, r3
 80013e0:	3504      	adds	r5, #4
 80013e2:	4638      	mov	r0, r7
 80013e4:	63b5      	str	r5, [r6, #56]	; 0x38
 80013e6:	f000 f867 	bl	80014b8 <__gnu_Unwind_Restore_VFP>
 80013ea:	e7c2      	b.n	8001372 <_Unwind_VRS_Pop+0x146>
 80013ec:	a820      	add	r0, sp, #128	; 0x80
 80013ee:	f000 f86b 	bl	80014c8 <__gnu_Unwind_Restore_VFP_D>
 80013f2:	e7b8      	b.n	8001366 <_Unwind_VRS_Pop+0x13a>
 80013f4:	f1b9 0f10 	cmp.w	r9, #16
 80013f8:	d93f      	bls.n	800147a <_Unwind_VRS_Pop+0x24e>
 80013fa:	f1a9 0910 	sub.w	r9, r9, #16
 80013fe:	6833      	ldr	r3, [r6, #0]
 8001400:	07d9      	lsls	r1, r3, #31
 8001402:	d508      	bpl.n	8001416 <_Unwind_VRS_Pop+0x1ea>
 8001404:	4630      	mov	r0, r6
 8001406:	f023 0301 	bic.w	r3, r3, #1
 800140a:	f043 0302 	orr.w	r3, r3, #2
 800140e:	f840 3b48 	str.w	r3, [r0], #72
 8001412:	f000 f85d 	bl	80014d0 <__gnu_Unwind_Save_VFP_D>
 8001416:	f1b9 0f00 	cmp.w	r9, #0
 800141a:	d031      	beq.n	8001480 <_Unwind_VRS_Pop+0x254>
 800141c:	6833      	ldr	r3, [r6, #0]
 800141e:	075a      	lsls	r2, r3, #29
 8001420:	d41f      	bmi.n	8001462 <_Unwind_VRS_Pop+0x236>
 8001422:	f1b8 0f0f 	cmp.w	r8, #15
 8001426:	d924      	bls.n	8001472 <_Unwind_VRS_Pop+0x246>
 8001428:	466f      	mov	r7, sp
 800142a:	f1c8 0510 	rsb	r5, r8, #16
 800142e:	4638      	mov	r0, r7
 8001430:	f000 f856 	bl	80014e0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001434:	2d00      	cmp	r5, #0
 8001436:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001438:	dd80      	ble.n	800133c <_Unwind_VRS_Pop+0x110>
 800143a:	af20      	add	r7, sp, #128	; 0x80
 800143c:	e76f      	b.n	800131e <_Unwind_VRS_Pop+0xf2>
 800143e:	f023 0310 	bic.w	r3, r3, #16
 8001442:	6033      	str	r3, [r6, #0]
 8001444:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8001448:	f000 f89c 	bl	8001584 <__gnu_Unwind_Save_WMMXC>
 800144c:	e706      	b.n	800125c <_Unwind_VRS_Pop+0x30>
 800144e:	f023 0308 	bic.w	r3, r3, #8
 8001452:	6003      	str	r3, [r0, #0]
 8001454:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8001458:	f000 f868 	bl	800152c <__gnu_Unwind_Save_WMMXD>
 800145c:	e72c      	b.n	80012b8 <_Unwind_VRS_Pop+0x8c>
 800145e:	af20      	add	r7, sp, #128	; 0x80
 8001460:	e7be      	b.n	80013e0 <_Unwind_VRS_Pop+0x1b4>
 8001462:	4630      	mov	r0, r6
 8001464:	f023 0304 	bic.w	r3, r3, #4
 8001468:	f840 3bd0 	str.w	r3, [r0], #208
 800146c:	f000 f838 	bl	80014e0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001470:	e7d7      	b.n	8001422 <_Unwind_VRS_Pop+0x1f6>
 8001472:	a820      	add	r0, sp, #128	; 0x80
 8001474:	f000 f82c 	bl	80014d0 <__gnu_Unwind_Save_VFP_D>
 8001478:	e7d6      	b.n	8001428 <_Unwind_VRS_Pop+0x1fc>
 800147a:	f04f 0900 	mov.w	r9, #0
 800147e:	e7be      	b.n	80013fe <_Unwind_VRS_Pop+0x1d2>
 8001480:	f1b8 0f0f 	cmp.w	r8, #15
 8001484:	f63f af46 	bhi.w	8001314 <_Unwind_VRS_Pop+0xe8>
 8001488:	af20      	add	r7, sp, #128	; 0x80
 800148a:	4638      	mov	r0, r7
 800148c:	f000 f820 	bl	80014d0 <__gnu_Unwind_Save_VFP_D>
 8001490:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001492:	2d00      	cmp	r5, #0
 8001494:	f47f af41 	bne.w	800131a <_Unwind_VRS_Pop+0xee>
 8001498:	4638      	mov	r0, r7
 800149a:	f000 f815 	bl	80014c8 <__gnu_Unwind_Restore_VFP_D>
 800149e:	e768      	b.n	8001372 <_Unwind_VRS_Pop+0x146>

080014a0 <__restore_core_regs>:
 80014a0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80014a4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80014a8:	469c      	mov	ip, r3
 80014aa:	46a6      	mov	lr, r4
 80014ac:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80014b0:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80014b4:	46e5      	mov	sp, ip
 80014b6:	bd00      	pop	{pc}

080014b8 <__gnu_Unwind_Restore_VFP>:
 80014b8:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop

080014c0 <__gnu_Unwind_Save_VFP>:
 80014c0:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop

080014c8 <__gnu_Unwind_Restore_VFP_D>:
 80014c8:	ec90 0b20 	vldmia	r0, {d0-d15}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop

080014d0 <__gnu_Unwind_Save_VFP_D>:
 80014d0:	ec80 0b20 	vstmia	r0, {d0-d15}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop

080014d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80014d8:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop

080014e0 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80014e0:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop

080014e8 <__gnu_Unwind_Restore_WMMXD>:
 80014e8:	ecf0 0102 	ldfe	f0, [r0], #8
 80014ec:	ecf0 1102 	ldfe	f1, [r0], #8
 80014f0:	ecf0 2102 	ldfe	f2, [r0], #8
 80014f4:	ecf0 3102 	ldfe	f3, [r0], #8
 80014f8:	ecf0 4102 	ldfe	f4, [r0], #8
 80014fc:	ecf0 5102 	ldfe	f5, [r0], #8
 8001500:	ecf0 6102 	ldfe	f6, [r0], #8
 8001504:	ecf0 7102 	ldfe	f7, [r0], #8
 8001508:	ecf0 8102 	ldfp	f0, [r0], #8
 800150c:	ecf0 9102 	ldfp	f1, [r0], #8
 8001510:	ecf0 a102 	ldfp	f2, [r0], #8
 8001514:	ecf0 b102 	ldfp	f3, [r0], #8
 8001518:	ecf0 c102 	ldfp	f4, [r0], #8
 800151c:	ecf0 d102 	ldfp	f5, [r0], #8
 8001520:	ecf0 e102 	ldfp	f6, [r0], #8
 8001524:	ecf0 f102 	ldfp	f7, [r0], #8
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop

0800152c <__gnu_Unwind_Save_WMMXD>:
 800152c:	ece0 0102 	stfe	f0, [r0], #8
 8001530:	ece0 1102 	stfe	f1, [r0], #8
 8001534:	ece0 2102 	stfe	f2, [r0], #8
 8001538:	ece0 3102 	stfe	f3, [r0], #8
 800153c:	ece0 4102 	stfe	f4, [r0], #8
 8001540:	ece0 5102 	stfe	f5, [r0], #8
 8001544:	ece0 6102 	stfe	f6, [r0], #8
 8001548:	ece0 7102 	stfe	f7, [r0], #8
 800154c:	ece0 8102 	stfp	f0, [r0], #8
 8001550:	ece0 9102 	stfp	f1, [r0], #8
 8001554:	ece0 a102 	stfp	f2, [r0], #8
 8001558:	ece0 b102 	stfp	f3, [r0], #8
 800155c:	ece0 c102 	stfp	f4, [r0], #8
 8001560:	ece0 d102 	stfp	f5, [r0], #8
 8001564:	ece0 e102 	stfp	f6, [r0], #8
 8001568:	ece0 f102 	stfp	f7, [r0], #8
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop

08001570 <__gnu_Unwind_Restore_WMMXC>:
 8001570:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001574:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001578:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 800157c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop

08001584 <__gnu_Unwind_Save_WMMXC>:
 8001584:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001588:	fca0 9101 	stc2	1, cr9, [r0], #4
 800158c:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001590:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop

08001598 <_Unwind_RaiseException>:
 8001598:	46ec      	mov	ip, sp
 800159a:	b500      	push	{lr}
 800159c:	e92d 5000 	stmdb	sp!, {ip, lr}
 80015a0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80015ac:	a901      	add	r1, sp, #4
 80015ae:	f7ff fbe7 	bl	8000d80 <__gnu_Unwind_RaiseException>
 80015b2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80015b6:	b012      	add	sp, #72	; 0x48
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop

080015bc <_Unwind_Resume>:
 80015bc:	46ec      	mov	ip, sp
 80015be:	b500      	push	{lr}
 80015c0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80015c4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80015c8:	f04f 0300 	mov.w	r3, #0
 80015cc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80015d0:	a901      	add	r1, sp, #4
 80015d2:	f7ff fc13 	bl	8000dfc <__gnu_Unwind_Resume>
 80015d6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80015da:	b012      	add	sp, #72	; 0x48
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop

080015e0 <_Unwind_Resume_or_Rethrow>:
 80015e0:	46ec      	mov	ip, sp
 80015e2:	b500      	push	{lr}
 80015e4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80015e8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80015f4:	a901      	add	r1, sp, #4
 80015f6:	f7ff fc23 	bl	8000e40 <__gnu_Unwind_Resume_or_Rethrow>
 80015fa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80015fe:	b012      	add	sp, #72	; 0x48
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop

08001604 <_Unwind_ForcedUnwind>:
 8001604:	46ec      	mov	ip, sp
 8001606:	b500      	push	{lr}
 8001608:	e92d 5000 	stmdb	sp!, {ip, lr}
 800160c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001618:	ab01      	add	r3, sp, #4
 800161a:	f7ff fbe5 	bl	8000de8 <__gnu_Unwind_ForcedUnwind>
 800161e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001622:	b012      	add	sp, #72	; 0x48
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop

08001628 <_Unwind_Backtrace>:
 8001628:	46ec      	mov	ip, sp
 800162a:	b500      	push	{lr}
 800162c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001630:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	e92d 000c 	stmdb	sp!, {r2, r3}
 800163c:	aa01      	add	r2, sp, #4
 800163e:	f7ff fc5b 	bl	8000ef8 <__gnu_Unwind_Backtrace>
 8001642:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001646:	b012      	add	sp, #72	; 0x48
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop

0800164c <next_unwind_byte>:
 800164c:	7a02      	ldrb	r2, [r0, #8]
 800164e:	4603      	mov	r3, r0
 8001650:	b97a      	cbnz	r2, 8001672 <next_unwind_byte+0x26>
 8001652:	7a42      	ldrb	r2, [r0, #9]
 8001654:	b1a2      	cbz	r2, 8001680 <next_unwind_byte+0x34>
 8001656:	f04f 0c03 	mov.w	ip, #3
 800165a:	6841      	ldr	r1, [r0, #4]
 800165c:	3a01      	subs	r2, #1
 800165e:	7242      	strb	r2, [r0, #9]
 8001660:	6808      	ldr	r0, [r1, #0]
 8001662:	1d0a      	adds	r2, r1, #4
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	0202      	lsls	r2, r0, #8
 8001668:	f883 c008 	strb.w	ip, [r3, #8]
 800166c:	0e00      	lsrs	r0, r0, #24
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	4770      	bx	lr
 8001672:	6800      	ldr	r0, [r0, #0]
 8001674:	3a01      	subs	r2, #1
 8001676:	721a      	strb	r2, [r3, #8]
 8001678:	0202      	lsls	r2, r0, #8
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	0e00      	lsrs	r0, r0, #24
 800167e:	4770      	bx	lr
 8001680:	20b0      	movs	r0, #176	; 0xb0
 8001682:	4770      	bx	lr

08001684 <_Unwind_GetGR.constprop.0>:
 8001684:	2300      	movs	r3, #0
 8001686:	b500      	push	{lr}
 8001688:	b085      	sub	sp, #20
 800168a:	a903      	add	r1, sp, #12
 800168c:	9100      	str	r1, [sp, #0]
 800168e:	220c      	movs	r2, #12
 8001690:	4619      	mov	r1, r3
 8001692:	f7ff fbe7 	bl	8000e64 <_Unwind_VRS_Get>
 8001696:	9803      	ldr	r0, [sp, #12]
 8001698:	b005      	add	sp, #20
 800169a:	f85d fb04 	ldr.w	pc, [sp], #4
 800169e:	bf00      	nop

080016a0 <unwind_UCB_from_context>:
 80016a0:	e7f0      	b.n	8001684 <_Unwind_GetGR.constprop.0>
 80016a2:	bf00      	nop

080016a4 <__gnu_unwind_execute>:
 80016a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016a8:	f04f 0800 	mov.w	r8, #0
 80016ac:	4605      	mov	r5, r0
 80016ae:	460e      	mov	r6, r1
 80016b0:	b085      	sub	sp, #20
 80016b2:	4630      	mov	r0, r6
 80016b4:	f7ff ffca 	bl	800164c <next_unwind_byte>
 80016b8:	28b0      	cmp	r0, #176	; 0xb0
 80016ba:	4604      	mov	r4, r0
 80016bc:	f000 80ba 	beq.w	8001834 <__gnu_unwind_execute+0x190>
 80016c0:	0607      	lsls	r7, r0, #24
 80016c2:	d520      	bpl.n	8001706 <__gnu_unwind_execute+0x62>
 80016c4:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80016c8:	2b80      	cmp	r3, #128	; 0x80
 80016ca:	d04d      	beq.n	8001768 <__gnu_unwind_execute+0xc4>
 80016cc:	2b90      	cmp	r3, #144	; 0x90
 80016ce:	d036      	beq.n	800173e <__gnu_unwind_execute+0x9a>
 80016d0:	2ba0      	cmp	r3, #160	; 0xa0
 80016d2:	d060      	beq.n	8001796 <__gnu_unwind_execute+0xf2>
 80016d4:	2bb0      	cmp	r3, #176	; 0xb0
 80016d6:	d073      	beq.n	80017c0 <__gnu_unwind_execute+0x11c>
 80016d8:	2bc0      	cmp	r3, #192	; 0xc0
 80016da:	f000 808a 	beq.w	80017f2 <__gnu_unwind_execute+0x14e>
 80016de:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80016e2:	2bd0      	cmp	r3, #208	; 0xd0
 80016e4:	d10b      	bne.n	80016fe <__gnu_unwind_execute+0x5a>
 80016e6:	f000 0207 	and.w	r2, r0, #7
 80016ea:	3201      	adds	r2, #1
 80016ec:	2305      	movs	r3, #5
 80016ee:	2101      	movs	r1, #1
 80016f0:	4628      	mov	r0, r5
 80016f2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80016f6:	f7ff fd99 	bl	800122c <_Unwind_VRS_Pop>
 80016fa:	2800      	cmp	r0, #0
 80016fc:	d0d9      	beq.n	80016b2 <__gnu_unwind_execute+0xe>
 80016fe:	2009      	movs	r0, #9
 8001700:	b005      	add	sp, #20
 8001702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001706:	0083      	lsls	r3, r0, #2
 8001708:	b2db      	uxtb	r3, r3
 800170a:	1d1f      	adds	r7, r3, #4
 800170c:	2300      	movs	r3, #0
 800170e:	f10d 090c 	add.w	r9, sp, #12
 8001712:	4619      	mov	r1, r3
 8001714:	220d      	movs	r2, #13
 8001716:	4628      	mov	r0, r5
 8001718:	f8cd 9000 	str.w	r9, [sp]
 800171c:	f7ff fba2 	bl	8000e64 <_Unwind_VRS_Get>
 8001720:	9b03      	ldr	r3, [sp, #12]
 8001722:	0660      	lsls	r0, r4, #25
 8001724:	bf4c      	ite	mi
 8001726:	1bdf      	submi	r7, r3, r7
 8001728:	18ff      	addpl	r7, r7, r3
 800172a:	2300      	movs	r3, #0
 800172c:	220d      	movs	r2, #13
 800172e:	4628      	mov	r0, r5
 8001730:	4619      	mov	r1, r3
 8001732:	f8cd 9000 	str.w	r9, [sp]
 8001736:	9703      	str	r7, [sp, #12]
 8001738:	f7ff fbba 	bl	8000eb0 <_Unwind_VRS_Set>
 800173c:	e7b9      	b.n	80016b2 <__gnu_unwind_execute+0xe>
 800173e:	f000 030d 	and.w	r3, r0, #13
 8001742:	2b0d      	cmp	r3, #13
 8001744:	d0db      	beq.n	80016fe <__gnu_unwind_execute+0x5a>
 8001746:	2300      	movs	r3, #0
 8001748:	af03      	add	r7, sp, #12
 800174a:	4619      	mov	r1, r3
 800174c:	f000 020f 	and.w	r2, r0, #15
 8001750:	9700      	str	r7, [sp, #0]
 8001752:	4628      	mov	r0, r5
 8001754:	f7ff fb86 	bl	8000e64 <_Unwind_VRS_Get>
 8001758:	2300      	movs	r3, #0
 800175a:	220d      	movs	r2, #13
 800175c:	4628      	mov	r0, r5
 800175e:	4619      	mov	r1, r3
 8001760:	9700      	str	r7, [sp, #0]
 8001762:	f7ff fba5 	bl	8000eb0 <_Unwind_VRS_Set>
 8001766:	e7a4      	b.n	80016b2 <__gnu_unwind_execute+0xe>
 8001768:	4630      	mov	r0, r6
 800176a:	f7ff ff6f 	bl	800164c <next_unwind_byte>
 800176e:	0224      	lsls	r4, r4, #8
 8001770:	4320      	orrs	r0, r4
 8001772:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001776:	d0c2      	beq.n	80016fe <__gnu_unwind_execute+0x5a>
 8001778:	2300      	movs	r3, #0
 800177a:	0104      	lsls	r4, r0, #4
 800177c:	4619      	mov	r1, r3
 800177e:	4628      	mov	r0, r5
 8001780:	b2a2      	uxth	r2, r4
 8001782:	f7ff fd53 	bl	800122c <_Unwind_VRS_Pop>
 8001786:	2800      	cmp	r0, #0
 8001788:	d1b9      	bne.n	80016fe <__gnu_unwind_execute+0x5a>
 800178a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800178e:	bf18      	it	ne
 8001790:	f04f 0801 	movne.w	r8, #1
 8001794:	e78d      	b.n	80016b2 <__gnu_unwind_execute+0xe>
 8001796:	43c3      	mvns	r3, r0
 8001798:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	411a      	asrs	r2, r3
 80017a2:	2300      	movs	r3, #0
 80017a4:	0701      	lsls	r1, r0, #28
 80017a6:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80017aa:	bf48      	it	mi
 80017ac:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80017b0:	4628      	mov	r0, r5
 80017b2:	4619      	mov	r1, r3
 80017b4:	f7ff fd3a 	bl	800122c <_Unwind_VRS_Pop>
 80017b8:	2800      	cmp	r0, #0
 80017ba:	f43f af7a 	beq.w	80016b2 <__gnu_unwind_execute+0xe>
 80017be:	e79e      	b.n	80016fe <__gnu_unwind_execute+0x5a>
 80017c0:	28b1      	cmp	r0, #177	; 0xb1
 80017c2:	d03c      	beq.n	800183e <__gnu_unwind_execute+0x19a>
 80017c4:	28b2      	cmp	r0, #178	; 0xb2
 80017c6:	f000 80b0 	beq.w	800192a <__gnu_unwind_execute+0x286>
 80017ca:	28b3      	cmp	r0, #179	; 0xb3
 80017cc:	d04a      	beq.n	8001864 <__gnu_unwind_execute+0x1c0>
 80017ce:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80017d2:	2bb4      	cmp	r3, #180	; 0xb4
 80017d4:	d093      	beq.n	80016fe <__gnu_unwind_execute+0x5a>
 80017d6:	2301      	movs	r3, #1
 80017d8:	f000 0207 	and.w	r2, r0, #7
 80017dc:	441a      	add	r2, r3
 80017de:	4628      	mov	r0, r5
 80017e0:	4619      	mov	r1, r3
 80017e2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80017e6:	f7ff fd21 	bl	800122c <_Unwind_VRS_Pop>
 80017ea:	2800      	cmp	r0, #0
 80017ec:	f43f af61 	beq.w	80016b2 <__gnu_unwind_execute+0xe>
 80017f0:	e785      	b.n	80016fe <__gnu_unwind_execute+0x5a>
 80017f2:	28c6      	cmp	r0, #198	; 0xc6
 80017f4:	d04f      	beq.n	8001896 <__gnu_unwind_execute+0x1f2>
 80017f6:	28c7      	cmp	r0, #199	; 0xc7
 80017f8:	d061      	beq.n	80018be <__gnu_unwind_execute+0x21a>
 80017fa:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80017fe:	2bc0      	cmp	r3, #192	; 0xc0
 8001800:	d070      	beq.n	80018e4 <__gnu_unwind_execute+0x240>
 8001802:	28c8      	cmp	r0, #200	; 0xc8
 8001804:	d07c      	beq.n	8001900 <__gnu_unwind_execute+0x25c>
 8001806:	28c9      	cmp	r0, #201	; 0xc9
 8001808:	f47f af79 	bne.w	80016fe <__gnu_unwind_execute+0x5a>
 800180c:	4630      	mov	r0, r6
 800180e:	f7ff ff1d 	bl	800164c <next_unwind_byte>
 8001812:	2305      	movs	r3, #5
 8001814:	4602      	mov	r2, r0
 8001816:	2101      	movs	r1, #1
 8001818:	4628      	mov	r0, r5
 800181a:	0314      	lsls	r4, r2, #12
 800181c:	f002 020f 	and.w	r2, r2, #15
 8001820:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8001824:	440a      	add	r2, r1
 8001826:	4322      	orrs	r2, r4
 8001828:	f7ff fd00 	bl	800122c <_Unwind_VRS_Pop>
 800182c:	2800      	cmp	r0, #0
 800182e:	f43f af40 	beq.w	80016b2 <__gnu_unwind_execute+0xe>
 8001832:	e764      	b.n	80016fe <__gnu_unwind_execute+0x5a>
 8001834:	f1b8 0f00 	cmp.w	r8, #0
 8001838:	d01c      	beq.n	8001874 <__gnu_unwind_execute+0x1d0>
 800183a:	2000      	movs	r0, #0
 800183c:	e760      	b.n	8001700 <__gnu_unwind_execute+0x5c>
 800183e:	4630      	mov	r0, r6
 8001840:	f7ff ff04 	bl	800164c <next_unwind_byte>
 8001844:	4602      	mov	r2, r0
 8001846:	2800      	cmp	r0, #0
 8001848:	f43f af59 	beq.w	80016fe <__gnu_unwind_execute+0x5a>
 800184c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001850:	f47f af55 	bne.w	80016fe <__gnu_unwind_execute+0x5a>
 8001854:	4619      	mov	r1, r3
 8001856:	4628      	mov	r0, r5
 8001858:	f7ff fce8 	bl	800122c <_Unwind_VRS_Pop>
 800185c:	2800      	cmp	r0, #0
 800185e:	f43f af28 	beq.w	80016b2 <__gnu_unwind_execute+0xe>
 8001862:	e74c      	b.n	80016fe <__gnu_unwind_execute+0x5a>
 8001864:	4630      	mov	r0, r6
 8001866:	f7ff fef1 	bl	800164c <next_unwind_byte>
 800186a:	2301      	movs	r3, #1
 800186c:	4602      	mov	r2, r0
 800186e:	4619      	mov	r1, r3
 8001870:	4628      	mov	r0, r5
 8001872:	e7d2      	b.n	800181a <__gnu_unwind_execute+0x176>
 8001874:	ac03      	add	r4, sp, #12
 8001876:	4643      	mov	r3, r8
 8001878:	220e      	movs	r2, #14
 800187a:	4641      	mov	r1, r8
 800187c:	4628      	mov	r0, r5
 800187e:	9400      	str	r4, [sp, #0]
 8001880:	f7ff faf0 	bl	8000e64 <_Unwind_VRS_Get>
 8001884:	4643      	mov	r3, r8
 8001886:	220f      	movs	r2, #15
 8001888:	4628      	mov	r0, r5
 800188a:	4641      	mov	r1, r8
 800188c:	9400      	str	r4, [sp, #0]
 800188e:	f7ff fb0f 	bl	8000eb0 <_Unwind_VRS_Set>
 8001892:	4640      	mov	r0, r8
 8001894:	e734      	b.n	8001700 <__gnu_unwind_execute+0x5c>
 8001896:	4630      	mov	r0, r6
 8001898:	f7ff fed8 	bl	800164c <next_unwind_byte>
 800189c:	4602      	mov	r2, r0
 800189e:	2303      	movs	r3, #3
 80018a0:	0314      	lsls	r4, r2, #12
 80018a2:	f002 020f 	and.w	r2, r2, #15
 80018a6:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 80018aa:	3201      	adds	r2, #1
 80018ac:	4628      	mov	r0, r5
 80018ae:	4619      	mov	r1, r3
 80018b0:	4322      	orrs	r2, r4
 80018b2:	f7ff fcbb 	bl	800122c <_Unwind_VRS_Pop>
 80018b6:	2800      	cmp	r0, #0
 80018b8:	f43f aefb 	beq.w	80016b2 <__gnu_unwind_execute+0xe>
 80018bc:	e71f      	b.n	80016fe <__gnu_unwind_execute+0x5a>
 80018be:	4630      	mov	r0, r6
 80018c0:	f7ff fec4 	bl	800164c <next_unwind_byte>
 80018c4:	4602      	mov	r2, r0
 80018c6:	2800      	cmp	r0, #0
 80018c8:	f43f af19 	beq.w	80016fe <__gnu_unwind_execute+0x5a>
 80018cc:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80018d0:	f47f af15 	bne.w	80016fe <__gnu_unwind_execute+0x5a>
 80018d4:	2104      	movs	r1, #4
 80018d6:	4628      	mov	r0, r5
 80018d8:	f7ff fca8 	bl	800122c <_Unwind_VRS_Pop>
 80018dc:	2800      	cmp	r0, #0
 80018de:	f43f aee8 	beq.w	80016b2 <__gnu_unwind_execute+0xe>
 80018e2:	e70c      	b.n	80016fe <__gnu_unwind_execute+0x5a>
 80018e4:	2303      	movs	r3, #3
 80018e6:	f000 020f 	and.w	r2, r0, #15
 80018ea:	3201      	adds	r2, #1
 80018ec:	4628      	mov	r0, r5
 80018ee:	4619      	mov	r1, r3
 80018f0:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80018f4:	f7ff fc9a 	bl	800122c <_Unwind_VRS_Pop>
 80018f8:	2800      	cmp	r0, #0
 80018fa:	f43f aeda 	beq.w	80016b2 <__gnu_unwind_execute+0xe>
 80018fe:	e6fe      	b.n	80016fe <__gnu_unwind_execute+0x5a>
 8001900:	4630      	mov	r0, r6
 8001902:	f7ff fea3 	bl	800164c <next_unwind_byte>
 8001906:	4602      	mov	r2, r0
 8001908:	2101      	movs	r1, #1
 800190a:	f002 04f0 	and.w	r4, r2, #240	; 0xf0
 800190e:	f002 020f 	and.w	r2, r2, #15
 8001912:	3410      	adds	r4, #16
 8001914:	440a      	add	r2, r1
 8001916:	2305      	movs	r3, #5
 8001918:	4628      	mov	r0, r5
 800191a:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 800191e:	f7ff fc85 	bl	800122c <_Unwind_VRS_Pop>
 8001922:	2800      	cmp	r0, #0
 8001924:	f43f aec5 	beq.w	80016b2 <__gnu_unwind_execute+0xe>
 8001928:	e6e9      	b.n	80016fe <__gnu_unwind_execute+0x5a>
 800192a:	2300      	movs	r3, #0
 800192c:	f10d 090c 	add.w	r9, sp, #12
 8001930:	220d      	movs	r2, #13
 8001932:	4619      	mov	r1, r3
 8001934:	4628      	mov	r0, r5
 8001936:	f8cd 9000 	str.w	r9, [sp]
 800193a:	f7ff fa93 	bl	8000e64 <_Unwind_VRS_Get>
 800193e:	4630      	mov	r0, r6
 8001940:	f7ff fe84 	bl	800164c <next_unwind_byte>
 8001944:	0602      	lsls	r2, r0, #24
 8001946:	f04f 0402 	mov.w	r4, #2
 800194a:	d50c      	bpl.n	8001966 <__gnu_unwind_execute+0x2c2>
 800194c:	9b03      	ldr	r3, [sp, #12]
 800194e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001952:	40a0      	lsls	r0, r4
 8001954:	4418      	add	r0, r3
 8001956:	9003      	str	r0, [sp, #12]
 8001958:	4630      	mov	r0, r6
 800195a:	f7ff fe77 	bl	800164c <next_unwind_byte>
 800195e:	0603      	lsls	r3, r0, #24
 8001960:	f104 0407 	add.w	r4, r4, #7
 8001964:	d4f2      	bmi.n	800194c <__gnu_unwind_execute+0x2a8>
 8001966:	9b03      	ldr	r3, [sp, #12]
 8001968:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800196c:	40a2      	lsls	r2, r4
 800196e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001972:	441a      	add	r2, r3
 8001974:	2300      	movs	r3, #0
 8001976:	9203      	str	r2, [sp, #12]
 8001978:	4628      	mov	r0, r5
 800197a:	220d      	movs	r2, #13
 800197c:	4619      	mov	r1, r3
 800197e:	f8cd 9000 	str.w	r9, [sp]
 8001982:	f7ff fa95 	bl	8000eb0 <_Unwind_VRS_Set>
 8001986:	e694      	b.n	80016b2 <__gnu_unwind_execute+0xe>

08001988 <__gnu_unwind_frame>:
 8001988:	460b      	mov	r3, r1
 800198a:	f04f 0c03 	mov.w	ip, #3
 800198e:	b500      	push	{lr}
 8001990:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001992:	4618      	mov	r0, r3
 8001994:	6853      	ldr	r3, [r2, #4]
 8001996:	b085      	sub	sp, #20
 8001998:	3208      	adds	r2, #8
 800199a:	9202      	str	r2, [sp, #8]
 800199c:	a901      	add	r1, sp, #4
 800199e:	0e1a      	lsrs	r2, r3, #24
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	f88d c00c 	strb.w	ip, [sp, #12]
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	f88d 200d 	strb.w	r2, [sp, #13]
 80019ac:	f7ff fe7a 	bl	80016a4 <__gnu_unwind_execute>
 80019b0:	b005      	add	sp, #20
 80019b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80019b6:	bf00      	nop

080019b8 <_Unwind_GetRegionStart>:
 80019b8:	b508      	push	{r3, lr}
 80019ba:	f7ff fe71 	bl	80016a0 <unwind_UCB_from_context>
 80019be:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80019c0:	bd08      	pop	{r3, pc}
 80019c2:	bf00      	nop

080019c4 <_Unwind_GetLanguageSpecificData>:
 80019c4:	b508      	push	{r3, lr}
 80019c6:	f7ff fe6b 	bl	80016a0 <unwind_UCB_from_context>
 80019ca:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80019cc:	79c3      	ldrb	r3, [r0, #7]
 80019ce:	3302      	adds	r3, #2
 80019d0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80019d4:	bd08      	pop	{r3, pc}
 80019d6:	bf00      	nop

080019d8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr

080019ee <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019fc:	d205      	bcs.n	8001a0a <_ZSt16__deque_buf_sizej+0x1c>
 80019fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a08:	e000      	b.n	8001a0c <_ZSt16__deque_buf_sizej+0x1e>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
	...

08001a18 <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>:
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); }
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f006 fed5 	bl	80087d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	4905      	ldr	r1, [pc, #20]	; (8001a44 <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj+0x2c>)
 8001a2e:	4806      	ldr	r0, [pc, #24]	; (8001a48 <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj+0x30>)
 8001a30:	f000 fb56 	bl	80020e0 <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	0800ba68 	.word	0x0800ba68
 8001a48:	08009861 	.word	0x08009861

08001a4c <_ZNSt7__cxx119to_stringEd>:
					   "%f", __val);
  }

  inline string
  to_string(double __val)
  {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af02      	add	r7, sp, #8
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	e9c7 2300 	strd	r2, r3, [r7]
    const int __n = 
 8001a58:	f44f 73a4 	mov.w	r3, #328	; 0x148
 8001a5c:	617b      	str	r3, [r7, #20]
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
					   "%f", __val);
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a64:	e9cd 2300 	strd	r2, r3, [sp]
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <_ZNSt7__cxx119to_stringEd+0x30>)
 8001a6a:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8001a6e:	4904      	ldr	r1, [pc, #16]	; (8001a80 <_ZNSt7__cxx119to_stringEd+0x34>)
 8001a70:	f000 fb82 	bl	8002178 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
  }
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	0800ba70 	.word	0x0800ba70
 8001a80:	080098d1 	.word	0x080098d1

08001a84 <_ZN9CALCULATE9Calculate11addToSuffixERc>:

#include <calculate.hpp>

namespace CALCULATE{

void Calculate::addToSuffix(char& c) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
    suffix += c;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	f006 fdda 	bl	8008654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
    suffix += ' ';
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3350      	adds	r3, #80	; 0x50
 8001aa4:	2120      	movs	r1, #32
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f006 fdd4 	bl	8008654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_ZN9CALCULATE9Calculate11addToSuffixERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Calculate::addToSuffix(std::string& str) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
    suffix += str;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3350      	adds	r3, #80	; 0x50
 8001ac2:	6839      	ldr	r1, [r7, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f006 fe80 	bl	80087ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
    suffix += ' ';
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3350      	adds	r3, #80	; 0x50
 8001ace:	2120      	movs	r1, #32
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f006 fdbf 	bl	8008654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <_ZN9CALCULATE9Calculate16getNumStackValueEv>:

double Calculate::getNumStackValue(){
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b084      	sub	sp, #16
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
	double n = numStack.top();
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3328      	adds	r3, #40	; 0x28
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 fb7b 	bl	80021e6 <_ZNSt5stackIdSt5dequeIdSaIdEEE3topEv>
 8001af0:	4603      	mov	r3, r0
 8001af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	numStack.pop();
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3328      	adds	r3, #40	; 0x28
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 fb7e 	bl	8002200 <_ZNSt5stackIdSt5dequeIdSaIdEEE3popEv>
	return n;
 8001b04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <_ZN9CALCULATE9Calculate8clrStackEv>:

void Calculate::clrStack(){
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
	while (!optStack.empty())
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 fb7b 	bl	8002218 <_ZNKSt5stackIcSt5dequeIcSaIcEEE5emptyEv>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f083 0301 	eor.w	r3, r3, #1
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d004      	beq.n	8001b38 <_ZN9CALCULATE9Calculate8clrStackEv+0x26>
		optStack.pop();
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 fb7e 	bl	8002232 <_ZNSt5stackIcSt5dequeIcSaIcEEE3popEv>
	while (!optStack.empty())
 8001b36:	e7f0      	b.n	8001b1a <_ZN9CALCULATE9Calculate8clrStackEv+0x8>
	while (!numStack.empty())
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3328      	adds	r3, #40	; 0x28
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 fb84 	bl	800224a <_ZNKSt5stackIdSt5dequeIdSaIdEEE5emptyEv>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f083 0301 	eor.w	r3, r3, #1
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d005      	beq.n	8001b5a <_ZN9CALCULATE9Calculate8clrStackEv+0x48>
		numStack.pop();
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3328      	adds	r3, #40	; 0x28
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 fb54 	bl	8002200 <_ZNSt5stackIdSt5dequeIdSaIdEEE3popEv>
	while (!numStack.empty())
 8001b58:	e7ee      	b.n	8001b38 <_ZN9CALCULATE9Calculate8clrStackEv+0x26>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <_ZN9CALCULATE9Calculate8isNumberERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool Calculate::isNumber(std::string& str){
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
	for (char c : str) {
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	6978      	ldr	r0, [r7, #20]
 8001b72:	f006 fd49 	bl	8008608 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 8001b76:	4603      	mov	r3, r0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	6978      	ldr	r0, [r7, #20]
 8001b7c:	f006 fd46 	bl	800860c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 8001b80:	4603      	mov	r3, r0
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	f107 0208 	add.w	r2, r7, #8
 8001b88:	f107 030c 	add.w	r3, r7, #12
 8001b8c:	4611      	mov	r1, r2
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 fb68 	bl	8002264 <_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d013      	beq.n	8001bc2 <_ZN9CALCULATE9Calculate8isNumberERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x60>
 8001b9a:	f107 030c 	add.w	r3, r7, #12
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 fb87 	bl	80022b2 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	74fb      	strb	r3, [r7, #19]
	    if (!std::isdigit(c)){
 8001baa:	7cfb      	ldrb	r3, [r7, #19]
 8001bac:	3b30      	subs	r3, #48	; 0x30
 8001bae:	2b09      	cmp	r3, #9
 8001bb0:	d901      	bls.n	8001bb6 <_ZN9CALCULATE9Calculate8isNumberERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54>
	    	return false;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e006      	b.n	8001bc4 <_ZN9CALCULATE9Calculate8isNumberERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
	for (char c : str) {
 8001bb6:	f107 030c 	add.w	r3, r7, #12
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 fb6a 	bl	8002294 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 8001bc0:	e7e0      	b.n	8001b84 <_ZN9CALCULATE9Calculate8isNumberERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22>
	    }
	}
	return true;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <_ZNK9CALCULATE9Calculate8getLevelERc>:

int Calculate::getLevel(char& opt) const{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
	switch (opt) {
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	3b28      	subs	r3, #40	; 0x28
 8001bdc:	2b07      	cmp	r3, #7
 8001bde:	d81b      	bhi.n	8001c18 <_ZNK9CALCULATE9Calculate8getLevelERc+0x4c>
 8001be0:	a201      	add	r2, pc, #4	; (adr r2, 8001be8 <_ZNK9CALCULATE9Calculate8getLevelERc+0x1c>)
 8001be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be6:	bf00      	nop
 8001be8:	08001c09 	.word	0x08001c09
 8001bec:	08001c15 	.word	0x08001c15
 8001bf0:	08001c11 	.word	0x08001c11
 8001bf4:	08001c0d 	.word	0x08001c0d
 8001bf8:	08001c19 	.word	0x08001c19
 8001bfc:	08001c0d 	.word	0x08001c0d
 8001c00:	08001c19 	.word	0x08001c19
 8001c04:	08001c11 	.word	0x08001c11
	case '(':
		return 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	e007      	b.n	8001c1c <_ZNK9CALCULATE9Calculate8getLevelERc+0x50>
	case '+':
	case '-':
		return 1;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e005      	b.n	8001c1c <_ZNK9CALCULATE9Calculate8getLevelERc+0x50>
	case '*':
	case '/':
		return 2;
 8001c10:	2302      	movs	r3, #2
 8001c12:	e003      	b.n	8001c1c <_ZNK9CALCULATE9Calculate8getLevelERc+0x50>
	case ')':
		return 3;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e001      	b.n	8001c1c <_ZNK9CALCULATE9Calculate8getLevelERc+0x50>
	}
	return -1;
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop

08001c28 <_ZN9CALCULATE9Calculate7doCalcuEv>:

bool Calculate::doCalcu(){
 8001c28:	b5b0      	push	{r4, r5, r7, lr}
 8001c2a:	b0b2      	sub	sp, #200	; 0xc8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	2400      	movs	r4, #0
	clrStack();
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ff6d 	bl	8001b12 <_ZN9CALCULATE9Calculate8clrStackEv>

	Log::addMsg(suffix);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8001c3e:	f107 0320 	add.w	r3, r7, #32
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f006 fddd 	bl	8008804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001c4a:	f107 0320 	add.w	r3, r7, #32
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f001 ffb4 	bl	8003bbc <_ZN3Log6addMsgENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001c54:	f107 0320 	add.w	r3, r7, #32
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f006 fca7 	bl	80085ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	size_t startPos = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	size_t spacePos = suffix.find(' ', startPos);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3350      	adds	r3, #80	; 0x50
 8001c68:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001c6c:	2120      	movs	r1, #32
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f006 fdb1 	bl	80087d6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 8001c74:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
	while (spacePos != std::string::npos) {
 8001c78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c80:	f000 811a 	beq.w	8001eb8 <_ZN9CALCULATE9Calculate7doCalcuEv+0x290>
		std::string word = suffix.substr(startPos, spacePos - startPos);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8001c8a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001c8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f107 0008 	add.w	r0, r7, #8
 8001c98:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001c9c:	f006 fe06 	bl	80088ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
		if (isNumber(word)){
 8001ca0:	f107 0308 	add.w	r3, r7, #8
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff ff5b 	bl	8001b62 <_ZN9CALCULATE9Calculate8isNumberERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d013      	beq.n	8001cda <_ZN9CALCULATE9Calculate7doCalcuEv+0xb2>
			numStack.push(std::stod(word));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff feaa 	bl	8001a18 <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001ccc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4628      	mov	r0, r5
 8001cd4:	f000 faf8 	bl	80022c8 <_ZNSt5stackIdSt5dequeIdSaIdEEE4pushEOd>
 8001cd8:	e0d6      	b.n	8001e88 <_ZN9CALCULATE9Calculate7doCalcuEv+0x260>
		}
		else {
			char opt = word[0];
 8001cda:	f107 0308 	add.w	r3, r7, #8
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f006 fc97 	bl	8008614 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
			switch(opt) {
 8001cee:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001cf2:	3b2a      	subs	r3, #42	; 0x2a
 8001cf4:	2b05      	cmp	r3, #5
 8001cf6:	f200 80c7 	bhi.w	8001e88 <_ZN9CALCULATE9Calculate7doCalcuEv+0x260>
 8001cfa:	a201      	add	r2, pc, #4	; (adr r2, 8001d00 <_ZN9CALCULATE9Calculate7doCalcuEv+0xd8>)
 8001cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d00:	08001dd1 	.word	0x08001dd1
 8001d04:	08001d19 	.word	0x08001d19
 8001d08:	08001e89 	.word	0x08001e89
 8001d0c:	08001d75 	.word	0x08001d75
 8001d10:	08001e89 	.word	0x08001e89
 8001d14:	08001e2d 	.word	0x08001e2d
			case '+': {
				if (numStack.size() >= 2) {
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3328      	adds	r3, #40	; 0x28
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 fae5 	bl	80022ec <_ZNKSt5stackIdSt5dequeIdSaIdEEE4sizeEv>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	bf8c      	ite	hi
 8001d28:	2301      	movhi	r3, #1
 8001d2a:	2300      	movls	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d01d      	beq.n	8001d6e <_ZN9CALCULATE9Calculate7doCalcuEv+0x146>
					double n2 = getNumStackValue();
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff fed3 	bl	8001ade <_ZN9CALCULATE9Calculate16getNumStackValueEv>
 8001d38:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
					double n1 = getNumStackValue();
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff fece 	bl	8001ade <_ZN9CALCULATE9Calculate16getNumStackValueEv>
 8001d42:	e9c7 0122 	strd	r0, r1, [r7, #136]	; 0x88
					numStack.push(n1 + n2);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8001d4c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001d50:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001d54:	f7fe fa0a 	bl	800016c <__adddf3>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001d60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d64:	4619      	mov	r1, r3
 8001d66:	4628      	mov	r0, r5
 8001d68:	f000 faae 	bl	80022c8 <_ZNSt5stackIdSt5dequeIdSaIdEEE4pushEOd>
				}
				else {
					return false;
				}
				break;
 8001d6c:	e08c      	b.n	8001e88 <_ZN9CALCULATE9Calculate7doCalcuEv+0x260>
					return false;
 8001d6e:	2400      	movs	r4, #0
 8001d70:	2500      	movs	r5, #0
 8001d72:	e099      	b.n	8001ea8 <_ZN9CALCULATE9Calculate7doCalcuEv+0x280>
			}
			case '-': {
				if (numStack.size() >= 2) {
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3328      	adds	r3, #40	; 0x28
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 fab7 	bl	80022ec <_ZNKSt5stackIdSt5dequeIdSaIdEEE4sizeEv>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	bf8c      	ite	hi
 8001d84:	2301      	movhi	r3, #1
 8001d86:	2300      	movls	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d01d      	beq.n	8001dca <_ZN9CALCULATE9Calculate7doCalcuEv+0x1a2>
					double n2 = getNumStackValue();
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff fea5 	bl	8001ade <_ZN9CALCULATE9Calculate16getNumStackValueEv>
 8001d94:	e9c7 0128 	strd	r0, r1, [r7, #160]	; 0xa0
					double n1 = getNumStackValue();
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff fea0 	bl	8001ade <_ZN9CALCULATE9Calculate16getNumStackValueEv>
 8001d9e:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
					numStack.push(n1 - n2);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8001da8:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001dac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001db0:	f7fe f9da 	bl	8000168 <__aeabi_dsub>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001dbc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4628      	mov	r0, r5
 8001dc4:	f000 fa80 	bl	80022c8 <_ZNSt5stackIdSt5dequeIdSaIdEEE4pushEOd>
				}
				else {
					return false;
				}
				break;
 8001dc8:	e05e      	b.n	8001e88 <_ZN9CALCULATE9Calculate7doCalcuEv+0x260>
					return false;
 8001dca:	2400      	movs	r4, #0
 8001dcc:	2500      	movs	r5, #0
 8001dce:	e06b      	b.n	8001ea8 <_ZN9CALCULATE9Calculate7doCalcuEv+0x280>
			}
			case '*': {
				if (numStack.size() >= 2) {
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3328      	adds	r3, #40	; 0x28
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 fa89 	bl	80022ec <_ZNKSt5stackIdSt5dequeIdSaIdEEE4sizeEv>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	bf8c      	ite	hi
 8001de0:	2301      	movhi	r3, #1
 8001de2:	2300      	movls	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d01d      	beq.n	8001e26 <_ZN9CALCULATE9Calculate7doCalcuEv+0x1fe>
					double n2 = getNumStackValue();
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff fe77 	bl	8001ade <_ZN9CALCULATE9Calculate16getNumStackValueEv>
 8001df0:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
					double n1 = getNumStackValue();
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff fe72 	bl	8001ade <_ZN9CALCULATE9Calculate16getNumStackValueEv>
 8001dfa:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
					numStack.push(n1 * n2);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8001e04:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001e08:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001e0c:	f7fe fb64 	bl	80004d8 <__aeabi_dmul>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001e18:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4628      	mov	r0, r5
 8001e20:	f000 fa52 	bl	80022c8 <_ZNSt5stackIdSt5dequeIdSaIdEEE4pushEOd>
				}
				else {
					return false;
				}
				break;
 8001e24:	e030      	b.n	8001e88 <_ZN9CALCULATE9Calculate7doCalcuEv+0x260>
					return false;
 8001e26:	2400      	movs	r4, #0
 8001e28:	2500      	movs	r5, #0
 8001e2a:	e03d      	b.n	8001ea8 <_ZN9CALCULATE9Calculate7doCalcuEv+0x280>
			}
			case '/': {
				if (numStack.size() >= 2) {
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3328      	adds	r3, #40	; 0x28
 8001e30:	4618      	mov	r0, r3
 8001e32:	f000 fa5b 	bl	80022ec <_ZNKSt5stackIdSt5dequeIdSaIdEEE4sizeEv>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	bf8c      	ite	hi
 8001e3c:	2301      	movhi	r3, #1
 8001e3e:	2300      	movls	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d01d      	beq.n	8001e82 <_ZN9CALCULATE9Calculate7doCalcuEv+0x25a>
					double n2 = getNumStackValue();
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff fe49 	bl	8001ade <_ZN9CALCULATE9Calculate16getNumStackValueEv>
 8001e4c:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
					double n1 = getNumStackValue();
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff fe44 	bl	8001ade <_ZN9CALCULATE9Calculate16getNumStackValueEv>
 8001e56:	e9c7 012a 	strd	r0, r1, [r7, #168]	; 0xa8
					numStack.push(n1 / n2);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8001e60:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001e64:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001e68:	f7fe fc60 	bl	800072c <__aeabi_ddiv>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001e74:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4628      	mov	r0, r5
 8001e7c:	f000 fa24 	bl	80022c8 <_ZNSt5stackIdSt5dequeIdSaIdEEE4pushEOd>
				}
				else {
					return false;
				}
				break;
 8001e80:	e002      	b.n	8001e88 <_ZN9CALCULATE9Calculate7doCalcuEv+0x260>
					return false;
 8001e82:	2400      	movs	r4, #0
 8001e84:	2500      	movs	r5, #0
 8001e86:	e00f      	b.n	8001ea8 <_ZN9CALCULATE9Calculate7doCalcuEv+0x280>
			}
			}
		}
		startPos = spacePos + 1;
 8001e88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		spacePos = suffix.find(' ', startPos);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3350      	adds	r3, #80	; 0x50
 8001e96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001e9a:	2120      	movs	r1, #32
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f006 fc9a 	bl	80087d6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 8001ea2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8001ea6:	2501      	movs	r5, #1
 8001ea8:	f107 0308 	add.w	r3, r7, #8
 8001eac:	4618      	mov	r0, r3
 8001eae:	f006 fb7d 	bl	80085ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001eb2:	2d01      	cmp	r5, #1
 8001eb4:	d12e      	bne.n	8001f14 <_ZN9CALCULATE9Calculate7doCalcuEv+0x2ec>
	while (spacePos != std::string::npos) {
 8001eb6:	e6df      	b.n	8001c78 <_ZN9CALCULATE9Calculate7doCalcuEv+0x50>
	}
	if(numStack.size() == 1){
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3328      	adds	r3, #40	; 0x28
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 fa15 	bl	80022ec <_ZNKSt5stackIdSt5dequeIdSaIdEEE4sizeEv>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2301      	moveq	r3, #1
 8001eca:	2300      	movne	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d01f      	beq.n	8001f12 <_ZN9CALCULATE9Calculate7doCalcuEv+0x2ea>
		operand = std::to_string(numStack.top());
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3328      	adds	r3, #40	; 0x28
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 f982 	bl	80021e6 <_ZNSt5stackIdSt5dequeIdSaIdEEE3topEv>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001eec:	4608      	mov	r0, r1
 8001eee:	f7ff fdad 	bl	8001a4c <_ZNSt7__cxx119to_stringEd>
 8001ef2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4620      	mov	r0, r4
 8001efa:	f006 fb5d 	bl	80085b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001efe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f02:	4618      	mov	r0, r3
 8001f04:	f006 fb52 	bl	80085ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		clrStack();
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff fe02 	bl	8001b12 <_ZN9CALCULATE9Calculate8clrStackEv>
		return true;
 8001f0e:	2401      	movs	r4, #1
 8001f10:	e000      	b.n	8001f14 <_ZN9CALCULATE9Calculate7doCalcuEv+0x2ec>
	}
	return false;
 8001f12:	2400      	movs	r4, #0
}
 8001f14:	4623      	mov	r3, r4
 8001f16:	4618      	mov	r0, r3
 8001f18:	37c8      	adds	r7, #200	; 0xc8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f1e:	bf00      	nop

08001f20 <_ZN9CALCULATE9Calculate8getInputEc>:

void Calculate::getInput(char opt){
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	70fb      	strb	r3, [r7, #3]
	//若输入字符是未完成的状态将其写入数字缓存区
	if(std::isdigit(opt)){
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	3b30      	subs	r3, #48	; 0x30
 8001f30:	2b09      	cmp	r3, #9
 8001f32:	bf94      	ite	ls
 8001f34:	2301      	movls	r3, #1
 8001f36:	2300      	movhi	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d007      	beq.n	8001f4e <_ZN9CALCULATE9Calculate8getInputEc+0x2e>
		operand += opt;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3368      	adds	r3, #104	; 0x68
 8001f42:	78fa      	ldrb	r2, [r7, #3]
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f006 fb84 	bl	8008654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
 8001f4c:	e06f      	b.n	800202e <_ZN9CALCULATE9Calculate8getInputEc+0x10e>
	}
	else{
		//若不是数字说明上一个操作数输入完毕
		addToSuffix(operand);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3368      	adds	r3, #104	; 0x68
 8001f52:	4619      	mov	r1, r3
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff fdad 	bl	8001ab4 <_ZN9CALCULATE9Calculate11addToSuffixERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
		operand = "";
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3368      	adds	r3, #104	; 0x68
 8001f5e:	4942      	ldr	r1, [pc, #264]	; (8002068 <_ZN9CALCULATE9Calculate8getInputEc+0x148>)
 8001f60:	4618      	mov	r0, r3
 8001f62:	f006 fc08 	bl	8008776 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
		//若为等号开始计算
		if(opt == '='){
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	2b3d      	cmp	r3, #61	; 0x3d
 8001f6a:	d103      	bne.n	8001f74 <_ZN9CALCULATE9Calculate8getInputEc+0x54>
			doCalcu();
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff fe5b 	bl	8001c28 <_ZN9CALCULATE9Calculate7doCalcuEv>
 8001f72:	e05c      	b.n	800202e <_ZN9CALCULATE9Calculate8getInputEc+0x10e>
		}
		//左括号直接入栈
		else if(opt == '('){
 8001f74:	78fb      	ldrb	r3, [r7, #3]
 8001f76:	2b28      	cmp	r3, #40	; 0x28
 8001f78:	d106      	bne.n	8001f88 <_ZN9CALCULATE9Calculate8getInputEc+0x68>
			optStack.push(opt);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	1cfa      	adds	r2, r7, #3
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 f9c0 	bl	8002306 <_ZNSt5stackIcSt5dequeIcSaIcEEE4pushERKc>
 8001f86:	e052      	b.n	800202e <_ZN9CALCULATE9Calculate8getInputEc+0x10e>
		}
		//右括号出栈至左括号
		else if(opt == ')'){
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	2b29      	cmp	r3, #41	; 0x29
 8001f8c:	d11a      	bne.n	8001fc4 <_ZN9CALCULATE9Calculate8getInputEc+0xa4>
			while (optStack.top() != '(') {
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 f9c6 	bl	8002322 <_ZNSt5stackIcSt5dequeIcSaIcEEE3topEv>
 8001f96:	4603      	mov	r3, r0
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b28      	cmp	r3, #40	; 0x28
 8001f9c:	bf14      	ite	ne
 8001f9e:	2301      	movne	r3, #1
 8001fa0:	2300      	moveq	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d042      	beq.n	800202e <_ZN9CALCULATE9Calculate8getInputEc+0x10e>
				addToSuffix(optStack.top());
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f9b9 	bl	8002322 <_ZNSt5stackIcSt5dequeIcSaIcEEE3topEv>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff fd65 	bl	8001a84 <_ZN9CALCULATE9Calculate11addToSuffixERc>
				optStack.pop();
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 f938 	bl	8002232 <_ZNSt5stackIcSt5dequeIcSaIcEEE3popEv>
			while (optStack.top() != '(') {
 8001fc2:	e7e4      	b.n	8001f8e <_ZN9CALCULATE9Calculate8getInputEc+0x6e>
			}
		}
		//若为操作符
		else{
			while (!optStack.empty() && getLevel(opt) <= getLevel(optStack.top())) {
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 f926 	bl	8002218 <_ZNKSt5stackIcSt5dequeIcSaIcEEE5emptyEv>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f083 0301 	eor.w	r3, r3, #1
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d013      	beq.n	8002000 <_ZN9CALCULATE9Calculate8getInputEc+0xe0>
 8001fd8:	1cfb      	adds	r3, r7, #3
 8001fda:	4619      	mov	r1, r3
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff fdf5 	bl	8001bcc <_ZNK9CALCULATE9Calculate8getLevelERc>
 8001fe2:	4604      	mov	r4, r0
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 f99b 	bl	8002322 <_ZNSt5stackIcSt5dequeIcSaIcEEE3topEv>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4619      	mov	r1, r3
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff fdeb 	bl	8001bcc <_ZNK9CALCULATE9Calculate8getLevelERc>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	429c      	cmp	r4, r3
 8001ffa:	dc01      	bgt.n	8002000 <_ZN9CALCULATE9Calculate8getInputEc+0xe0>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <_ZN9CALCULATE9Calculate8getInputEc+0xe2>
 8002000:	2300      	movs	r3, #0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00d      	beq.n	8002022 <_ZN9CALCULATE9Calculate8getInputEc+0x102>
				addToSuffix(optStack.top());
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4618      	mov	r0, r3
 800200a:	f000 f98a 	bl	8002322 <_ZNSt5stackIcSt5dequeIcSaIcEEE3topEv>
 800200e:	4603      	mov	r3, r0
 8002010:	4619      	mov	r1, r3
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff fd36 	bl	8001a84 <_ZN9CALCULATE9Calculate11addToSuffixERc>
				optStack.pop();
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4618      	mov	r0, r3
 800201c:	f000 f909 	bl	8002232 <_ZNSt5stackIcSt5dequeIcSaIcEEE3popEv>
			while (!optStack.empty() && getLevel(opt) <= getLevel(optStack.top())) {
 8002020:	e7d0      	b.n	8001fc4 <_ZN9CALCULATE9Calculate8getInputEc+0xa4>
			}
			optStack.push(opt);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	1cfa      	adds	r2, r7, #3
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f000 f96c 	bl	8002306 <_ZNSt5stackIcSt5dequeIcSaIcEEE4pushERKc>
		}
	}
	while (!optStack.empty()) {
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4618      	mov	r0, r3
 8002032:	f000 f8f1 	bl	8002218 <_ZNKSt5stackIcSt5dequeIcSaIcEEE5emptyEv>
 8002036:	4603      	mov	r3, r0
 8002038:	f083 0301 	eor.w	r3, r3, #1
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00d      	beq.n	800205e <_ZN9CALCULATE9Calculate8getInputEc+0x13e>
		addToSuffix(optStack.top());
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4618      	mov	r0, r3
 8002046:	f000 f96c 	bl	8002322 <_ZNSt5stackIcSt5dequeIcSaIcEEE3topEv>
 800204a:	4603      	mov	r3, r0
 800204c:	4619      	mov	r1, r3
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff fd18 	bl	8001a84 <_ZN9CALCULATE9Calculate11addToSuffixERc>
		optStack.pop();
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4618      	mov	r0, r3
 8002058:	f000 f8eb 	bl	8002232 <_ZNSt5stackIcSt5dequeIcSaIcEEE3popEv>
	while (!optStack.empty()) {
 800205c:	e7e7      	b.n	800202e <_ZN9CALCULATE9Calculate8getInputEc+0x10e>
	}
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	bd90      	pop	{r4, r7, pc}
 8002066:	bf00      	nop
 8002068:	0800ba74 	.word	0x0800ba74

0800206c <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	f006 fc40 	bl	80088f8 <__errno>
 8002078:	4603      	mov	r3, r0
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	f006 fc3a 	bl	80088f8 <__errno>
 8002084:	4603      	mov	r3, r0
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	f006 fc2c 	bl	80088f8 <__errno>
 80020a0:	4603      	mov	r3, r0
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf0c      	ite	eq
 80020a8:	2301      	moveq	r3, #1
 80020aa:	2300      	movne	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d005      	beq.n	80020be <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 80020b2:	f006 fc21 	bl	80088f8 <__errno>
 80020b6:	4602      	mov	r2, r0
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEdSt17integral_constantIbLb0EE>:
	int _M_errno;
      } const __save_errno;

      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80020d2:	713a      	strb	r2, [r7, #4]
 80020d4:	2300      	movs	r3, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 80020e0:	b5b0      	push	{r4, r5, r7, lr}
 80020e2:	b08c      	sub	sp, #48	; 0x30
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 80020ee:	f107 0314 	add.w	r3, r7, #20
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff ffba 	bl	800206c <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
	  }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 80020f8:	f107 0218 	add.w	r2, r7, #24
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4611      	mov	r1, r2
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	4798      	blx	r3
 8002104:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28

      if (__endptr == __str)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	429a      	cmp	r2, r3
 800210e:	d102      	bne.n	8002116 <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x36>
	std::__throw_invalid_argument(__name);
 8002110:	68b8      	ldr	r0, [r7, #8]
 8002112:	f006 f8ae 	bl	8008272 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8002116:	f006 fbef 	bl	80088f8 <__errno>
 800211a:	4603      	mov	r3, r0
 800211c:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 800211e:	2b22      	cmp	r3, #34	; 0x22
 8002120:	d007      	beq.n	8002132 <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8002122:	4622      	mov	r2, r4
 8002124:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002128:	f7ff ffce 	bl	80020c8 <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEdSt17integral_constantIbLb0EE>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x56>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x58>
 8002136:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x62>
	std::__throw_out_of_range(__name);
 800213c:	68b8      	ldr	r0, [r7, #8]
 800213e:	f006 f89e 	bl	800827e <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 8002142:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002146:	e9c7 2308 	strd	r2, r3, [r7, #32]

      if (__idx)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x7c>
	*__idx = __endptr - __str;
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	461a      	mov	r2, r3
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	601a      	str	r2, [r3, #0]

      return __ret;
 800215c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
      } const __save_errno;
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff95 	bl	8002094 <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 800216a:	4622      	mov	r2, r4
 800216c:	462b      	mov	r3, r5
    }
 800216e:	4610      	mov	r0, r2
 8002170:	4619      	mov	r1, r3
 8002172:	3730      	adds	r7, #48	; 0x30
 8002174:	46bd      	mov	sp, r7
 8002176:	bdb0      	pop	{r4, r5, r7, pc}

08002178 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8002178:	b408      	push	{r3}
 800217a:	b590      	push	{r4, r7, lr}
 800217c:	b088      	sub	sp, #32
 800217e:	af00      	add	r7, sp, #0
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3307      	adds	r3, #7
 800218a:	08db      	lsrs	r3, r3, #3
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	ebad 0d03 	sub.w	sp, sp, r3
 8002192:	466b      	mov	r3, sp
 8002194:	3307      	adds	r3, #7
 8002196:	08db      	lsrs	r3, r3, #3
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 800219c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021a0:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 80021a2:	68bc      	ldr	r4, [r7, #8]
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	69f8      	ldr	r0, [r7, #28]
 80021ac:	47a0      	blx	r4
 80021ae:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	18d4      	adds	r4, r2, r3
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	4618      	mov	r0, r3
 80021bc:	f006 f851 	bl	8008262 <_ZNSaIcEC1Ev>
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	4622      	mov	r2, r4
 80021c6:	69f9      	ldr	r1, [r7, #28]
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 f8b7 	bl	800233c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 80021ce:	f107 0314 	add.w	r3, r7, #20
 80021d2:	4618      	mov	r0, r3
 80021d4:	f006 f846 	bl	8008264 <_ZNSaIcED1Ev>
    }
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	3720      	adds	r7, #32
 80021dc:	46bd      	mov	sp, r7
 80021de:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80021e2:	b001      	add	sp, #4
 80021e4:	4770      	bx	lr

080021e6 <_ZNSt5stackIdSt5dequeIdSaIdEEE3topEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %stack.
       */
      reference
      top()
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return c.back();
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 f8cd 	bl	8002390 <_ZNSt5dequeIdSaIdEE4backEv>
 80021f6:	4603      	mov	r3, r0
      }
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <_ZNSt5stackIdSt5dequeIdSaIdEEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_back();
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4618      	mov	r0, r3
 800220c:	f000 f8d9 	bl	80023c2 <_ZNSt5dequeIdSaIdEE8pop_backEv>
      }
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <_ZNKSt5stackIcSt5dequeIcSaIcEEE5emptyEv>:
      empty() const
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f8f0 	bl	8002408 <_ZNKSt5dequeIcSaIcEE5emptyEv>
 8002228:	4603      	mov	r3, r0
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <_ZNSt5stackIcSt5dequeIcSaIcEEE3popEv>:
      pop()
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
	c.pop_back();
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4618      	mov	r0, r3
 800223e:	f000 f8f5 	bl	800242c <_ZNSt5dequeIcSaIcEE8pop_backEv>
      }
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <_ZNKSt5stackIdSt5dequeIdSaIdEEE5emptyEv>:
      empty() const
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4618      	mov	r0, r3
 8002256:	f000 f90b 	bl	8002470 <_ZNKSt5dequeIdSaIdEE5emptyEv>
 800225a:	4603      	mov	r3, r0
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f910 	bl	8002494 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8002274:	4603      	mov	r3, r0
 8002276:	681c      	ldr	r4, [r3, #0]
 8002278:	6838      	ldr	r0, [r7, #0]
 800227a:	f000 f90b 	bl	8002494 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800227e:	4603      	mov	r3, r0
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	429c      	cmp	r4, r3
 8002284:	bf14      	ite	ne
 8002286:	2301      	movne	r3, #1
 8002288:	2300      	moveq	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	4618      	mov	r0, r3
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	bd90      	pop	{r4, r7, pc}

08002294 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	601a      	str	r2, [r3, #0]
	return *this;
 80022a6:	687b      	ldr	r3, [r7, #4]
      }
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr

080022b2 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <_ZNSt5stackIdSt5dequeIdSaIdEEE4pushEOd>:
      push(value_type&& __x)
 80022c8:	b590      	push	{r4, r7, lr}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 80022d2:	687c      	ldr	r4, [r7, #4]
 80022d4:	6838      	ldr	r0, [r7, #0]
 80022d6:	f000 f8e7 	bl	80024a8 <_ZSt4moveIRdEONSt16remove_referenceIT_E4typeEOS2_>
 80022da:	4603      	mov	r3, r0
 80022dc:	4619      	mov	r1, r3
 80022de:	4620      	mov	r0, r4
 80022e0:	f000 f8ec 	bl	80024bc <_ZNSt5dequeIdSaIdEE9push_backEOd>
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd90      	pop	{r4, r7, pc}

080022ec <_ZNKSt5stackIdSt5dequeIdSaIdEEE4sizeEv>:
      size() const
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
      { return c.size(); }
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f8f1 	bl	80024de <_ZNKSt5dequeIdSaIdEE4sizeEv>
 80022fc:	4603      	mov	r3, r0
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <_ZNSt5stackIcSt5dequeIcSaIcEEE4pushERKc>:
      push(const value_type& __x)
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6839      	ldr	r1, [r7, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f000 f8f4 	bl	8002502 <_ZNSt5dequeIcSaIcEE9push_backERKc>
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <_ZNSt5stackIcSt5dequeIcSaIcEEE3topEv>:
      top()
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
	return c.back();
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4618      	mov	r0, r3
 800232e:	f000 f909 	bl	8002544 <_ZNSt5dequeIcSaIcEE4backEv>
 8002332:	4603      	mov	r3, r0
      }
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 800233c:	b590      	push	{r4, r7, lr}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
 8002348:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 800234a:	68fc      	ldr	r4, [r7, #12]
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f006 f858 	bl	8008402 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8002352:	4603      	mov	r3, r0
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	4619      	mov	r1, r3
 8002358:	4620      	mov	r0, r4
 800235a:	f006 fa51 	bl	8008800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68b9      	ldr	r1, [r7, #8]
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 f805 	bl	8002372 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4618      	mov	r0, r3
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	bd90      	pop	{r4, r7, pc}

08002372 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 f8f7 	bl	8002576 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8002388:	bf00      	nop
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <_ZNSt5dequeIdSaIdEE4backEv>:
      /**
       *  Returns a read/write reference to the data at the last element of the
       *  %deque.
       */
      reference
      back() _GLIBCXX_NOEXCEPT
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	iterator __tmp = end();
 8002398:	f107 0308 	add.w	r3, r7, #8
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 f8fa 	bl	8002598 <_ZNSt5dequeIdSaIdEE3endEv>
	--__tmp;
 80023a4:	f107 0308 	add.w	r3, r7, #8
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 f91f 	bl	80025ec <_ZNSt15_Deque_iteratorIdRdPdEmmEv>
	return *__tmp;
 80023ae:	f107 0308 	add.w	r3, r7, #8
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 f93a 	bl	800262c <_ZNKSt15_Deque_iteratorIdRdPdEdeEv>
 80023b8:	4603      	mov	r3, r0
      }
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <_ZNSt5dequeIdSaIdEE8pop_backEv>:
       *
       *  Note that no data is returned, and if the last element's data is
       *  needed, it should be retrieved before pop_back() is called.
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_finish._M_cur
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_first)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
	if (this->_M_impl._M_finish._M_cur
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d011      	beq.n	80023fa <_ZNSt5dequeIdSaIdEE8pop_backEv+0x38>
	  {
	    --this->_M_impl._M_finish._M_cur;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	f1a3 0208 	sub.w	r2, r3, #8
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	619a      	str	r2, [r3, #24]
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 f92c 	bl	8002642 <_ZNSt11_Deque_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80023ea:	4602      	mov	r2, r0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	4619      	mov	r1, r3
 80023f2:	4610      	mov	r0, r2
 80023f4:	f000 f92f 	bl	8002656 <_ZNSt16allocator_traitsISaIdEE7destroyIdEEvRS0_PT_>
				   this->_M_impl._M_finish._M_cur);
	  }
	else
	  _M_pop_back_aux();
      }
 80023f8:	e002      	b.n	8002400 <_ZNSt5dequeIdSaIdEE8pop_backEv+0x3e>
	  _M_pop_back_aux();
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f938 	bl	8002670 <_ZNSt5dequeIdSaIdEE15_M_pop_back_auxEv>
      }
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <_ZNKSt5dequeIcSaIcEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f103 0218 	add.w	r2, r3, #24
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3308      	adds	r3, #8
 800241a:	4619      	mov	r1, r3
 800241c:	4610      	mov	r0, r2
 800241e:	f000 f951 	bl	80026c4 <_ZSteqRKSt15_Deque_iteratorIcRcPcES4_>
 8002422:	4603      	mov	r3, r0
 8002424:	4618      	mov	r0, r3
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <_ZNSt5dequeIcSaIcEE8pop_backEv>:
      pop_back() _GLIBCXX_NOEXCEPT
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_finish._M_cur
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_first)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69db      	ldr	r3, [r3, #28]
	if (this->_M_impl._M_finish._M_cur
 800243c:	429a      	cmp	r2, r3
 800243e:	d010      	beq.n	8002462 <_ZNSt5dequeIcSaIcEE8pop_backEv+0x36>
	    --this->_M_impl._M_finish._M_cur;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	1e5a      	subs	r2, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	619a      	str	r2, [r3, #24]
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4618      	mov	r0, r3
 800244e:	f000 f94c 	bl	80026ea <_ZNSt11_Deque_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8002452:	4602      	mov	r2, r0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	4619      	mov	r1, r3
 800245a:	4610      	mov	r0, r2
 800245c:	f000 f94f 	bl	80026fe <_ZNSt16allocator_traitsISaIcEE7destroyIcEEvRS0_PT_>
      }
 8002460:	e002      	b.n	8002468 <_ZNSt5dequeIcSaIcEE8pop_backEv+0x3c>
	  _M_pop_back_aux();
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f958 	bl	8002718 <_ZNSt5dequeIcSaIcEE15_M_pop_back_auxEv>
      }
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <_ZNKSt5dequeIdSaIdEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f103 0218 	add.w	r2, r3, #24
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3308      	adds	r3, #8
 8002482:	4619      	mov	r1, r3
 8002484:	4610      	mov	r0, r2
 8002486:	f000 f970 	bl	800276a <_ZSteqRKSt15_Deque_iteratorIdRdPdES4_>
 800248a:	4603      	mov	r3, r0
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <_ZSt4moveIRdEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4618      	mov	r0, r3
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <_ZNSt5dequeIdSaIdEE9push_backEOd>:
      push_back(value_type&& __x)
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80024c6:	6838      	ldr	r0, [r7, #0]
 80024c8:	f7ff ffee 	bl	80024a8 <_ZSt4moveIRdEONSt16remove_referenceIT_E4typeEOS2_>
 80024cc:	4603      	mov	r3, r0
 80024ce:	4619      	mov	r1, r3
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f95d 	bl	8002790 <_ZNSt5dequeIdSaIdEE12emplace_backIJdEEEvDpOT_>
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <_ZNKSt5dequeIdSaIdEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f103 0218 	add.w	r2, r3, #24
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3308      	adds	r3, #8
 80024f0:	4619      	mov	r1, r3
 80024f2:	4610      	mov	r0, r2
 80024f4:	f000 f977 	bl	80027e6 <_ZStmiRKSt15_Deque_iteratorIdRdPdES4_>
 80024f8:	4603      	mov	r3, r0
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <_ZNSt5dequeIcSaIcEE9push_backERKc>:
      push_back(const value_type& __x)
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	3b01      	subs	r3, #1
	if (this->_M_impl._M_finish._M_cur
 8002516:	429a      	cmp	r2, r3
 8002518:	d00c      	beq.n	8002534 <_ZNSt5dequeIcSaIcEE9push_backERKc+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	4619      	mov	r1, r3
 8002524:	f000 f9a1 	bl	800286a <_ZNSt16allocator_traitsISaIcEE9constructIcJRKcEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	619a      	str	r2, [r3, #24]
      }
 8002532:	e003      	b.n	800253c <_ZNSt5dequeIcSaIcEE9push_backERKc+0x3a>
	  _M_push_back_aux(__x);
 8002534:	6839      	ldr	r1, [r7, #0]
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f9aa 	bl	8002890 <_ZNSt5dequeIcSaIcEE16_M_push_back_auxIJRKcEEEvDpOT_>
      }
 800253c:	bf00      	nop
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <_ZNSt5dequeIcSaIcEE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	iterator __tmp = end();
 800254c:	f107 0308 	add.w	r3, r7, #8
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f9e0 	bl	8002918 <_ZNSt5dequeIcSaIcEE3endEv>
	--__tmp;
 8002558:	f107 0308 	add.w	r3, r7, #8
 800255c:	4618      	mov	r0, r3
 800255e:	f000 fa05 	bl	800296c <_ZNSt15_Deque_iteratorIcRcPcEmmEv>
	return *__tmp;
 8002562:	f107 0308 	add.w	r3, r7, #8
 8002566:	4618      	mov	r0, r3
 8002568:	f000 fa1f 	bl	80029aa <_ZNKSt15_Deque_iteratorIcRcPcEdeEv>
 800256c:	4603      	mov	r3, r0
      }
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8002576:	b590      	push	{r4, r7, lr}
 8002578:	b087      	sub	sp, #28
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8002584:	4623      	mov	r3, r4
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 fa18 	bl	80029c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8002590:	bf00      	nop
 8002592:	371c      	adds	r7, #28
 8002594:	46bd      	mov	sp, r7
 8002596:	bd90      	pop	{r4, r7, pc}

08002598 <_ZNSt5dequeIdSaIdEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	3318      	adds	r3, #24
 80025a6:	4619      	mov	r1, r3
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f804 	bl	80025b6 <_ZNSt15_Deque_iteratorIdRdPdEC1ERKS2_>
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <_ZNSt15_Deque_iteratorIdRdPdEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	605a      	str	r2, [r3, #4]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	60da      	str	r2, [r3, #12]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <_ZNSt15_Deque_iteratorIdRdPdEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	if (_M_cur == _M_first)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d10a      	bne.n	8002616 <_ZNSt15_Deque_iteratorIdRdPdEmmEv+0x2a>
	    _M_set_node(_M_node - 1);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	3b04      	subs	r3, #4
 8002606:	4619      	mov	r1, r3
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 fa21 	bl	8002a50 <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>
	    _M_cur = _M_last;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	601a      	str	r2, [r3, #0]
	--_M_cur;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f1a3 0208 	sub.w	r2, r3, #8
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	601a      	str	r2, [r3, #0]
	return *this;
 8002622:	687b      	ldr	r3, [r7, #4]
      }
 8002624:	4618      	mov	r0, r3
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <_ZNKSt15_Deque_iteratorIdRdPdEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr

08002642 <_ZNSt11_Deque_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <_ZNSt16allocator_traitsISaIdEE7destroyIdEEvRS0_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8002660:	6839      	ldr	r1, [r7, #0]
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fa0d 	bl	8002a82 <_ZN9__gnu_cxx13new_allocatorIdE7destroyIdEEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <_ZNSt5dequeIdSaIdEE15_M_pop_back_auxEv>:
	  }
      }

  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_first.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
    _M_pop_back_aux()
    {
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	4619      	mov	r1, r3
 8002680:	4610      	mov	r0, r2
 8002682:	f000 fa08 	bl	8002a96 <_ZNSt11_Deque_baseIdSaIdEE18_M_deallocate_nodeEPd>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f103 0218 	add.w	r2, r3, #24
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	3b04      	subs	r3, #4
 8002692:	4619      	mov	r1, r3
 8002694:	4610      	mov	r0, r2
 8002696:	f000 f9db 	bl	8002a50 <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	f1a3 0208 	sub.w	r2, r3, #8
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	619a      	str	r2, [r3, #24]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ffca 	bl	8002642 <_ZNSt11_Deque_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80026ae:	4602      	mov	r2, r0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	4619      	mov	r1, r3
 80026b6:	4610      	mov	r0, r2
 80026b8:	f7ff ffcd 	bl	8002656 <_ZNSt16allocator_traitsISaIdEE7destroyIdEEvRS0_PT_>
			     this->_M_impl._M_finish._M_cur);
    }
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <_ZSteqRKSt15_Deque_iteratorIcRcPcES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	bf0c      	ite	eq
 80026da:	2301      	moveq	r3, #1
 80026dc:	2300      	movne	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	4618      	mov	r0, r3
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr

080026ea <_ZNSt11_Deque_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <_ZNSt16allocator_traitsISaIcEE7destroyIcEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8002708:	6839      	ldr	r1, [r7, #0]
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f9d6 	bl	8002abc <_ZN9__gnu_cxx13new_allocatorIcE7destroyIcEEvPT_>
	}
 8002710:	bf00      	nop
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <_ZNSt5dequeIcSaIcEE15_M_pop_back_auxEv>:
    void deque<_Tp, _Alloc>::
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	4619      	mov	r1, r3
 8002728:	4610      	mov	r0, r2
 800272a:	f000 f9d1 	bl	8002ad0 <_ZNSt11_Deque_baseIcSaIcEE18_M_deallocate_nodeEPc>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f103 0218 	add.w	r2, r3, #24
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	3b04      	subs	r3, #4
 800273a:	4619      	mov	r1, r3
 800273c:	4610      	mov	r0, r2
 800273e:	f000 f9da 	bl	8002af6 <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	1e5a      	subs	r2, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	619a      	str	r2, [r3, #24]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff ffcb 	bl	80026ea <_ZNSt11_Deque_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8002754:	4602      	mov	r2, r0
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	4619      	mov	r1, r3
 800275c:	4610      	mov	r0, r2
 800275e:	f7ff ffce 	bl	80026fe <_ZNSt16allocator_traitsISaIcEE7destroyIcEEvRS0_PT_>
    }
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <_ZSteqRKSt15_Deque_iteratorIdRdPdES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
 8002772:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	bf0c      	ite	eq
 8002780:	2301      	moveq	r3, #1
 8002782:	2300      	movne	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	4618      	mov	r0, r3
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <_ZNSt5dequeIdSaIdEE12emplace_backIJdEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8002790:	b5b0      	push	{r4, r5, r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	3b08      	subs	r3, #8
	if (this->_M_impl._M_finish._M_cur
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d012      	beq.n	80027ce <_ZNSt5dequeIdSaIdEE12emplace_backIJdEEEvDpOT_+0x3e>
	    _Alloc_traits::construct(this->_M_impl,
 80027a8:	687c      	ldr	r4, [r7, #4]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699d      	ldr	r5, [r3, #24]
 80027ae:	6838      	ldr	r0, [r7, #0]
 80027b0:	f000 f9b9 	bl	8002b26 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 80027b4:	4603      	mov	r3, r0
 80027b6:	461a      	mov	r2, r3
 80027b8:	4629      	mov	r1, r5
 80027ba:	4620      	mov	r0, r4
 80027bc:	f000 f9bd 	bl	8002b3a <_ZNSt16allocator_traitsISaIdEE9constructIdJdEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f103 0208 	add.w	r2, r3, #8
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	619a      	str	r2, [r3, #24]
      }
 80027cc:	e007      	b.n	80027de <_ZNSt5dequeIdSaIdEE12emplace_backIJdEEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 80027ce:	6838      	ldr	r0, [r7, #0]
 80027d0:	f000 f9a9 	bl	8002b26 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4619      	mov	r1, r3
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f9c1 	bl	8002b60 <_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJdEEEvDpOT_>
      }
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bdb0      	pop	{r4, r5, r7, pc}

080027e6 <_ZStmiRKSt15_Deque_iteratorIdRdPdES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 80027f0:	f000 f9fa 	bl	8002be8 <_ZNSt15_Deque_iteratorIdRdPdE14_S_buffer_sizeEv>
 80027f4:	4603      	mov	r3, r0
 80027f6:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	109b      	asrs	r3, r3, #2
 8002804:	3b01      	subs	r3, #1
 8002806:	fb01 f303 	mul.w	r3, r1, r3
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6811      	ldr	r1, [r2, #0]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6852      	ldr	r2, [r2, #4]
 8002812:	1a8a      	subs	r2, r1, r2
 8002814:	10d2      	asrs	r2, r2, #3
 8002816:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	6891      	ldr	r1, [r2, #8]
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	1a8a      	subs	r2, r1, r2
 8002822:	10d2      	asrs	r2, r2, #3
 8002824:	4413      	add	r3, r2
      }
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 f9da 	bl	8002bf8 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>
 8002844:	bf00      	nop
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002856:	2200      	movs	r2, #0
 8002858:	6839      	ldr	r1, [r7, #0]
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f9da 	bl	8002c14 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>
 8002860:	4603      	mov	r3, r0
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <_ZNSt16allocator_traitsISaIcEE9constructIcJRKcEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800286a:	b580      	push	{r7, lr}
 800286c:	b084      	sub	sp, #16
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f9e8 	bl	8002c4c <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
 800287c:	4603      	mov	r3, r0
 800287e:	461a      	mov	r2, r3
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 f9ec 	bl	8002c60 <_ZN9__gnu_cxx13new_allocatorIcE9constructIcJRKcEEEvPT_DpOT0_>
	}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <_ZNSt5dequeIcSaIcEE16_M_push_back_auxIJRKcEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8002890:	b5b0      	push	{r4, r5, r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f9f7 	bl	8002c8e <_ZNKSt5dequeIcSaIcEE4sizeEv>
 80028a0:	4604      	mov	r4, r0
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fa05 	bl	8002cb2 <_ZNKSt5dequeIcSaIcEE8max_sizeEv>
 80028a8:	4603      	mov	r3, r0
 80028aa:	429c      	cmp	r4, r3
 80028ac:	bf0c      	ite	eq
 80028ae:	2301      	moveq	r3, #1
 80028b0:	2300      	movne	r3, #0
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <_ZNSt5dequeIcSaIcEE16_M_push_back_auxIJRKcEEEvDpOT_+0x2e>
	  __throw_length_error(
 80028b8:	4816      	ldr	r0, [pc, #88]	; (8002914 <_ZNSt5dequeIcSaIcEE16_M_push_back_auxIJRKcEEEvDpOT_+0x84>)
 80028ba:	f005 fcdd 	bl	8008278 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 80028be:	2101      	movs	r1, #1
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 fa07 	bl	8002cd4 <_ZNSt5dequeIcSaIcEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	1d1c      	adds	r4, r3, #4
 80028ce:	4610      	mov	r0, r2
 80028d0:	f000 fa1b 	bl	8002d0a <_ZNSt11_Deque_baseIcSaIcEE16_M_allocate_nodeEv>
 80028d4:	4603      	mov	r3, r0
 80028d6:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 80028d8:	687c      	ldr	r4, [r7, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699d      	ldr	r5, [r3, #24]
 80028de:	6838      	ldr	r0, [r7, #0]
 80028e0:	f000 f9b4 	bl	8002c4c <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
 80028e4:	4603      	mov	r3, r0
 80028e6:	461a      	mov	r2, r3
 80028e8:	4629      	mov	r1, r5
 80028ea:	4620      	mov	r0, r4
 80028ec:	f7ff ffbd 	bl	800286a <_ZNSt16allocator_traitsISaIcEE9constructIcJRKcEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f103 0218 	add.w	r2, r3, #24
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	3304      	adds	r3, #4
 80028fc:	4619      	mov	r1, r3
 80028fe:	4610      	mov	r0, r2
 8002900:	f000 f8f9 	bl	8002af6 <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69da      	ldr	r2, [r3, #28]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	619a      	str	r2, [r3, #24]
      }
 800290c:	bf00      	nop
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bdb0      	pop	{r4, r5, r7, pc}
 8002914:	0800ba78 	.word	0x0800ba78

08002918 <_ZNSt5dequeIcSaIcEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	3318      	adds	r3, #24
 8002926:	4619      	mov	r1, r3
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f804 	bl	8002936 <_ZNSt15_Deque_iteratorIcRcPcEC1ERKS2_>
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <_ZNSt15_Deque_iteratorIcRcPcEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	605a      	str	r2, [r3, #4]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	60da      	str	r2, [r3, #12]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4618      	mov	r0, r3
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <_ZNSt15_Deque_iteratorIcRcPcEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
	if (_M_cur == _M_first)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	429a      	cmp	r2, r3
 800297e:	d10a      	bne.n	8002996 <_ZNSt15_Deque_iteratorIcRcPcEmmEv+0x2a>
	    _M_set_node(_M_node - 1);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	3b04      	subs	r3, #4
 8002986:	4619      	mov	r1, r3
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f8b4 	bl	8002af6 <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>
	    _M_cur = _M_last;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	601a      	str	r2, [r3, #0]
	--_M_cur;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	1e5a      	subs	r2, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	601a      	str	r2, [r3, #0]
	return *this;
 80029a0:	687b      	ldr	r3, [r7, #4]
      }
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <_ZNKSt15_Deque_iteratorIcRcPcEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
 80029cc:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 80029ce:	68b8      	ldr	r0, [r7, #8]
 80029d0:	f000 f9ad 	bl	8002d2e <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d005      	beq.n	80029e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d001      	beq.n	80029e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 80029e6:	2300      	movs	r3, #0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 80029ec:	4817      	ldr	r0, [pc, #92]	; (8002a4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 80029ee:	f005 fc3d 	bl	800826c <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	68b8      	ldr	r0, [r7, #8]
 80029f6:	f000 f9a9 	bl	8002d4c <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 80029fa:	4603      	mov	r3, r0
 80029fc:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2b0f      	cmp	r3, #15
 8002a02:	d910      	bls.n	8002a26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	2200      	movs	r2, #0
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f005 fd01 	bl	8008414 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8002a12:	4603      	mov	r3, r0
 8002a14:	4619      	mov	r1, r3
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f005 fcef 	bl	80083fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	4619      	mov	r1, r3
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f005 fcf0 	bl	8008406 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f005 fce9 	bl	80083fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f005 fd54 	bl	80084e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f005 fce4 	bl	800840a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8002a42:	bf00      	nop
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	0800baa8 	.word	0x0800baa8

08002a50 <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685c      	ldr	r4, [r3, #4]
 8002a6c:	f000 f8bc 	bl	8002be8 <_ZNSt15_Deque_iteratorIdRdPdE14_S_buffer_sizeEv>
 8002a70:	4603      	mov	r3, r0
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	18e2      	adds	r2, r4, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	609a      	str	r2, [r3, #8]
      }
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd90      	pop	{r4, r7, pc}

08002a82 <_ZN9__gnu_cxx13new_allocatorIdE7destroyIdEEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr

08002a96 <_ZNSt11_Deque_baseIdSaIdEE18_M_deallocate_nodeEPd>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8002a96:	b590      	push	{r4, r7, lr}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8002aa0:	687c      	ldr	r4, [r7, #4]
 8002aa2:	2008      	movs	r0, #8
 8002aa4:	f7fe ffa3 	bl	80019ee <_ZSt16__deque_buf_sizej>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	461a      	mov	r2, r3
 8002aac:	6839      	ldr	r1, [r7, #0]
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f000 f960 	bl	8002d74 <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>
      }
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd90      	pop	{r4, r7, pc}

08002abc <_ZN9__gnu_cxx13new_allocatorIcE7destroyIcEEvPT_>:
	destroy(_Up* __p)
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <_ZNSt11_Deque_baseIcSaIcEE18_M_deallocate_nodeEPc>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8002ad0:	b590      	push	{r4, r7, lr}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8002ada:	687c      	ldr	r4, [r7, #4]
 8002adc:	2001      	movs	r0, #1
 8002ade:	f7fe ff86 	bl	80019ee <_ZSt16__deque_buf_sizej>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	6839      	ldr	r1, [r7, #0]
 8002ae8:	4620      	mov	r0, r4
 8002aea:	f7ff fea0 	bl	800282e <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>
      }
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd90      	pop	{r4, r7, pc}

08002af6 <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8002af6:	b590      	push	{r4, r7, lr}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685c      	ldr	r4, [r3, #4]
 8002b12:	f000 f93e 	bl	8002d92 <_ZNSt15_Deque_iteratorIcRcPcE14_S_buffer_sizeEv>
 8002b16:	4603      	mov	r3, r0
 8002b18:	18e2      	adds	r2, r4, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	609a      	str	r2, [r3, #8]
      }
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd90      	pop	{r4, r7, pc}

08002b26 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr

08002b3a <_ZNSt16allocator_traitsISaIdEE9constructIdJdEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff ffed 	bl	8002b26 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f925 	bl	8002da2 <_ZN9__gnu_cxx13new_allocatorIdE9constructIdJdEEEvPT_DpOT0_>
	}
 8002b58:	bf00      	nop
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJdEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8002b60:	b5b0      	push	{r4, r5, r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff fcb7 	bl	80024de <_ZNKSt5dequeIdSaIdEE4sizeEv>
 8002b70:	4604      	mov	r4, r0
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f92d 	bl	8002dd2 <_ZNKSt5dequeIdSaIdEE8max_sizeEv>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	429c      	cmp	r4, r3
 8002b7c:	bf0c      	ite	eq
 8002b7e:	2301      	moveq	r3, #1
 8002b80:	2300      	movne	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJdEEEvDpOT_+0x2e>
	  __throw_length_error(
 8002b88:	4816      	ldr	r0, [pc, #88]	; (8002be4 <_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJdEEEvDpOT_+0x84>)
 8002b8a:	f005 fb75 	bl	8008278 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8002b8e:	2101      	movs	r1, #1
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f92f 	bl	8002df4 <_ZNSt5dequeIdSaIdEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	1d1c      	adds	r4, r3, #4
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	f000 f943 	bl	8002e2a <_ZNSt11_Deque_baseIdSaIdEE16_M_allocate_nodeEv>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8002ba8:	687c      	ldr	r4, [r7, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699d      	ldr	r5, [r3, #24]
 8002bae:	6838      	ldr	r0, [r7, #0]
 8002bb0:	f7ff ffb9 	bl	8002b26 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	4629      	mov	r1, r5
 8002bba:	4620      	mov	r0, r4
 8002bbc:	f7ff ffbd 	bl	8002b3a <_ZNSt16allocator_traitsISaIdEE9constructIdJdEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f103 0218 	add.w	r2, r3, #24
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	3304      	adds	r3, #4
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4610      	mov	r0, r2
 8002bd0:	f7ff ff3e 	bl	8002a50 <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69da      	ldr	r2, [r3, #28]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	619a      	str	r2, [r3, #24]
      }
 8002bdc:	bf00      	nop
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bdb0      	pop	{r4, r5, r7, pc}
 8002be4:	0800ba78 	.word	0x0800ba78

08002be8 <_ZNSt15_Deque_iteratorIdRdPdE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8002bec:	2008      	movs	r0, #8
 8002bee:	f7fe fefe 	bl	80019ee <_ZSt16__deque_buf_sizej>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>:
      deallocate(_Tp* __p, size_type __t)
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	68b8      	ldr	r0, [r7, #8]
 8002c08:	f005 fb18 	bl	800823c <_ZdlPvj>
      }
 8002c0c:	bf00      	nop
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 f914 	bl	8002e4e <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>
 8002c26:	4602      	mov	r2, r0
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	bf8c      	ite	hi
 8002c2e:	2301      	movhi	r3, #1
 8002c30:	2300      	movls	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002c38:	f005 fb15 	bl	8008266 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002c3c:	68b8      	ldr	r0, [r7, #8]
 8002c3e:	f005 faff 	bl	8008240 <_Znwj>
 8002c42:	4603      	mov	r3, r0
      }
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <_ZN9__gnu_cxx13new_allocatorIcE9constructIcJRKcEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002c60:	b590      	push	{r4, r7, lr}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7ff ffed 	bl	8002c4c <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
 8002c72:	4603      	mov	r3, r0
 8002c74:	781c      	ldrb	r4, [r3, #0]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	f7fe feac 	bl	80019d8 <_ZnwjPv>
 8002c80:	4603      	mov	r3, r0
 8002c82:	4622      	mov	r2, r4
 8002c84:	701a      	strb	r2, [r3, #0]
 8002c86:	bf00      	nop
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd90      	pop	{r4, r7, pc}

08002c8e <_ZNKSt5dequeIcSaIcEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f103 0218 	add.w	r2, r3, #24
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3308      	adds	r3, #8
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	f000 f8de 	bl	8002e64 <_ZStmiRKSt15_Deque_iteratorIcRcPcES4_>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <_ZNKSt5dequeIcSaIcEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 f90d 	bl	8002edc <_ZNKSt11_Deque_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 f8ef 	bl	8002ea8 <_ZNSt5dequeIcSaIcEE11_S_max_sizeERKS0_>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <_ZNSt5dequeIcSaIcEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	6809      	ldr	r1, [r1, #0]
 8002cee:	1a41      	subs	r1, r0, r1
 8002cf0:	1089      	asrs	r1, r1, #2
 8002cf2:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d904      	bls.n	8002d02 <_ZNSt5dequeIcSaIcEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	6839      	ldr	r1, [r7, #0]
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f8f7 	bl	8002ef0 <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb>
      }
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <_ZNSt11_Deque_baseIcSaIcEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8002d0a:	b590      	push	{r4, r7, lr}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8002d12:	687c      	ldr	r4, [r7, #4]
 8002d14:	2001      	movs	r0, #1
 8002d16:	f7fe fe6a 	bl	80019ee <_ZSt16__deque_buf_sizej>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4620      	mov	r0, r4
 8002d20:	f7ff fd94 	bl	800284c <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>
 8002d24:	4603      	mov	r3, r0
      }
 8002d26:	4618      	mov	r0, r3
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd90      	pop	{r4, r7, pc}

08002d2e <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	bf0c      	ite	eq
 8002d3c:	2301      	moveq	r3, #1
 8002d3e:	2300      	movne	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	4618      	mov	r0, r3
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8002d4c:	b5b0      	push	{r4, r5, r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8002d56:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8002d58:	1d3b      	adds	r3, r7, #4
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 f962 	bl	8003024 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 8002d60:	462a      	mov	r2, r5
 8002d62:	6839      	ldr	r1, [r7, #0]
 8002d64:	4620      	mov	r0, r4
 8002d66:	f000 f967 	bl	8003038 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8002d6a:	4603      	mov	r3, r0
    }
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bdb0      	pop	{r4, r5, r7, pc}

08002d74 <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	68b9      	ldr	r1, [r7, #8]
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f965 	bl	8003054 <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>
 8002d8a:	bf00      	nop
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <_ZNSt15_Deque_iteratorIcRcPcE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8002d92:	b580      	push	{r7, lr}
 8002d94:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8002d96:	2001      	movs	r0, #1
 8002d98:	f7fe fe29 	bl	80019ee <_ZSt16__deque_buf_sizej>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <_ZN9__gnu_cxx13new_allocatorIdE9constructIdJdEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002da2:	b5b0      	push	{r4, r5, r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff feb9 	bl	8002b26 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 8002db4:	4603      	mov	r3, r0
 8002db6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	2008      	movs	r0, #8
 8002dc0:	f7fe fe0a 	bl	80019d8 <_ZnwjPv>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	e9c3 4500 	strd	r4, r5, [r3]
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bdb0      	pop	{r4, r5, r7, pc}

08002dd2 <_ZNKSt5dequeIdSaIdEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 f963 	bl	80030a8 <_ZNKSt11_Deque_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 f945 	bl	8003074 <_ZNSt5dequeIdSaIdEE11_S_max_sizeERKS0_>
 8002dea:	4603      	mov	r3, r0
 8002dec:	4618      	mov	r0, r3
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <_ZNSt5dequeIdSaIdEE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	6809      	ldr	r1, [r1, #0]
 8002e0e:	1a41      	subs	r1, r0, r1
 8002e10:	1089      	asrs	r1, r1, #2
 8002e12:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d904      	bls.n	8002e22 <_ZNSt5dequeIdSaIdEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	6839      	ldr	r1, [r7, #0]
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f94d 	bl	80030bc <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb>
      }
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <_ZNSt11_Deque_baseIdSaIdEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8002e2a:	b590      	push	{r4, r7, lr}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8002e32:	687c      	ldr	r4, [r7, #4]
 8002e34:	2008      	movs	r0, #8
 8002e36:	f7fe fdda 	bl	80019ee <_ZSt16__deque_buf_sizej>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4620      	mov	r0, r4
 8002e40:	f000 f9d6 	bl	80031f0 <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>
 8002e44:	4603      	mov	r3, r0
      }
 8002e46:	4618      	mov	r0, r3
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd90      	pop	{r4, r7, pc}

08002e4e <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002e56:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr

08002e64 <_ZStmiRKSt15_Deque_iteratorIcRcPcES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8002e6e:	f7ff ff90 	bl	8002d92 <_ZNSt15_Deque_iteratorIcRcPcE14_S_buffer_sizeEv>
 8002e72:	4603      	mov	r3, r0
 8002e74:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	109b      	asrs	r3, r3, #2
 8002e82:	3b01      	subs	r3, #1
 8002e84:	fb03 f201 	mul.w	r2, r3, r1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6819      	ldr	r1, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	1acb      	subs	r3, r1, r3
 8002e92:	441a      	add	r2, r3
	  + (__y._M_last - __y._M_cur);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	6899      	ldr	r1, [r3, #8]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	1acb      	subs	r3, r1, r3
 8002e9e:	4413      	add	r3, r2
      }
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <_ZNSt5dequeIcSaIcEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8002eb0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002eb4:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f9a9 	bl	800320e <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002ec0:	f107 0208 	add.w	r2, r7, #8
 8002ec4:	f107 030c 	add.w	r3, r7, #12
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 f9ab 	bl	8003226 <_ZSt3minIjERKT_S2_S2_>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	681b      	ldr	r3, [r3, #0]
      }
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <_ZNKSt11_Deque_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b08b      	sub	sp, #44	; 0x2c
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	4613      	mov	r3, r2
 8002efc:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	109b      	asrs	r3, r3, #2
 8002f0a:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8002f0c:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	6a3a      	ldr	r2, [r7, #32]
 8002f12:	4413      	add	r3, r2
 8002f14:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d92d      	bls.n	8002f7e <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	1acb      	subs	r3, r1, r3
 8002f2e:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002f30:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb+0x4e>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	e000      	b.n	8002f40 <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb+0x50>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002f42:	4413      	add	r3, r2
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d209      	bcs.n	8002f64 <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8002f58:	3304      	adds	r3, #4
 8002f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f000 f975 	bl	800324c <_ZSt4copyIPPcS1_ET0_T_S3_S2_>
 8002f62:	e048      	b.n	8002ff6 <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002f6c:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f74:	4413      	add	r3, r2
 8002f76:	461a      	mov	r2, r3
 8002f78:	f000 f980 	bl	800327c <_ZSt13copy_backwardIPPcS1_ET0_T_S3_S2_>
 8002f7c:	e03b      	b.n	8002ff6 <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	3304      	adds	r3, #4
 8002f86:	f107 0208 	add.w	r2, r7, #8
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 f98d 	bl	80032ac <_ZSt3maxIjERKT_S2_S2_>
 8002f92:	4603      	mov	r3, r0
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8002f98:	3302      	adds	r3, #2
 8002f9a:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	69b9      	ldr	r1, [r7, #24]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 f996 	bl	80032d2 <_ZNSt11_Deque_baseIcSaIcEE15_M_allocate_mapEj>
 8002fa6:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	085b      	lsrs	r3, r3, #1
 8002fb0:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb+0xce>
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	e000      	b.n	8002fc0 <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb+0xd0>
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	f000 f939 	bl	800324c <_ZSt4copyIPPcS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6819      	ldr	r1, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	f000 f991 	bl	800330c <_ZNSt11_Deque_baseIcSaIcEE17_M_deallocate_mapEPPcj>

	  this->_M_impl._M_map = __new_map;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	3308      	adds	r3, #8
 8002ffa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fd7a 	bl	8002af6 <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f103 0018 	add.w	r0, r3, #24
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800300e:	3b01      	subs	r3, #1
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003014:	4413      	add	r3, r2
 8003016:	4619      	mov	r1, r3
 8003018:	f7ff fd6d 	bl	8002af6 <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>
    }
 800301c:	bf00      	nop
 800301e:	372c      	adds	r7, #44	; 0x2c
 8003020:	46bd      	mov	sp, r7
 8003022:	bd90      	pop	{r4, r7, pc}

08003024 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800302c:	bf00      	nop
 800302e:	4618      	mov	r0, r3
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr

08003038 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	1ad3      	subs	r3, r2, r3
    }
 800304a:	4618      	mov	r0, r3
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>:
      deallocate(_Tp* __p, size_type __t)
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4619      	mov	r1, r3
 8003066:	68b8      	ldr	r0, [r7, #8]
 8003068:	f005 f8e8 	bl	800823c <_ZdlPvj>
      }
 800306c:	bf00      	nop
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <_ZNSt5dequeIdSaIdEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 800307c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003080:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f95e 	bl	8003344 <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>
 8003088:	4603      	mov	r3, r0
 800308a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800308c:	f107 0208 	add.w	r2, r7, #8
 8003090:	f107 030c 	add.w	r3, r7, #12
 8003094:	4611      	mov	r1, r2
 8003096:	4618      	mov	r0, r3
 8003098:	f000 f8c5 	bl	8003226 <_ZSt3minIjERKT_S2_S2_>
 800309c:	4603      	mov	r3, r0
 800309e:	681b      	ldr	r3, [r3, #0]
      }
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <_ZNKSt11_Deque_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4618      	mov	r0, r3
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 80030bc:	b590      	push	{r4, r7, lr}
 80030be:	b08b      	sub	sp, #44	; 0x2c
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	4613      	mov	r3, r2
 80030c8:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	109b      	asrs	r3, r3, #2
 80030d6:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 80030d8:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	6a3a      	ldr	r2, [r7, #32]
 80030de:	4413      	add	r3, r2
 80030e0:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d92d      	bls.n	800314a <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	1acb      	subs	r3, r1, r3
 80030fa:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80030fc:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb+0x4e>
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	e000      	b.n	800310c <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb+0x50>
 800310a:	2300      	movs	r3, #0
 800310c:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800310e:	4413      	add	r3, r2
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003118:	429a      	cmp	r2, r3
 800311a:	d209      	bcs.n	8003130 <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8003124:	3304      	adds	r3, #4
 8003126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003128:	4619      	mov	r1, r3
 800312a:	f000 f917 	bl	800335c <_ZSt4copyIPPdS1_ET0_T_S3_S2_>
 800312e:	e048      	b.n	80031c2 <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8003138:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800313e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003140:	4413      	add	r3, r2
 8003142:	461a      	mov	r2, r3
 8003144:	f000 f922 	bl	800338c <_ZSt13copy_backwardIPPdS1_ET0_T_S3_S2_>
 8003148:	e03b      	b.n	80031c2 <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	3304      	adds	r3, #4
 8003152:	f107 0208 	add.w	r2, r7, #8
 8003156:	4611      	mov	r1, r2
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f8a7 	bl	80032ac <_ZSt3maxIjERKT_S2_S2_>
 800315e:	4603      	mov	r3, r0
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8003164:	3302      	adds	r3, #2
 8003166:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	69b9      	ldr	r1, [r7, #24]
 800316c:	4618      	mov	r0, r3
 800316e:	f000 f925 	bl	80033bc <_ZNSt11_Deque_baseIdSaIdEE15_M_allocate_mapEj>
 8003172:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	085b      	lsrs	r3, r3, #1
 800317c:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb+0xce>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	e000      	b.n	800318c <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb+0xd0>
 800318a:	2300      	movs	r3, #0
 800318c:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4413      	add	r3, r2
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800319c:	3304      	adds	r3, #4
 800319e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a0:	4619      	mov	r1, r3
 80031a2:	f000 f8db 	bl	800335c <_ZSt4copyIPPdS1_ET0_T_S3_S2_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6819      	ldr	r1, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	461a      	mov	r2, r3
 80031b2:	f000 f920 	bl	80033f6 <_ZNSt11_Deque_baseIdSaIdEE17_M_deallocate_mapEPPdj>
	  this->_M_impl._M_map = __new_map;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	3308      	adds	r3, #8
 80031c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fc41 	bl	8002a50 <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f103 0018 	add.w	r0, r3, #24
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031da:	3b01      	subs	r3, #1
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e0:	4413      	add	r3, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	f7ff fc34 	bl	8002a50 <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>
    }
 80031e8:	bf00      	nop
 80031ea:	372c      	adds	r7, #44	; 0x2c
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd90      	pop	{r4, r7, pc}

080031f0 <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80031fa:	2200      	movs	r2, #0
 80031fc:	6839      	ldr	r1, [r7, #0]
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f915 	bl	800342e <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>
 8003204:	4603      	mov	r3, r0
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus <= 201703L
	return __a.max_size();
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f927 	bl	800346a <_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv>
 800321c:	4603      	mov	r3, r0
#else
	return size_t(-1) / sizeof(value_type);
#endif
      }
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d201      	bcs.n	8003240 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	e000      	b.n	8003242 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8003240:	687b      	ldr	r3, [r7, #4]
    }
 8003242:	4618      	mov	r0, r3
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr

0800324c <_ZSt4copyIPPcS1_ET0_T_S3_S2_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800324c:	b590      	push	{r4, r7, lr}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 f912 	bl	8003482 <_ZSt12__miter_baseIPPcET_S2_>
 800325e:	4604      	mov	r4, r0
 8003260:	68b8      	ldr	r0, [r7, #8]
 8003262:	f000 f90e 	bl	8003482 <_ZSt12__miter_baseIPPcET_S2_>
 8003266:	4603      	mov	r3, r0
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	4619      	mov	r1, r3
 800326c:	4620      	mov	r0, r4
 800326e:	f000 f912 	bl	8003496 <_ZSt13__copy_move_aILb0EPPcS1_ET1_T0_S3_S2_>
 8003272:	4603      	mov	r3, r0
    }
 8003274:	4618      	mov	r0, r3
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	bd90      	pop	{r4, r7, pc}

0800327c <_ZSt13copy_backwardIPPcS1_ET0_T_S3_S2_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800327c:	b590      	push	{r4, r7, lr}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 f8fa 	bl	8003482 <_ZSt12__miter_baseIPPcET_S2_>
 800328e:	4604      	mov	r4, r0
 8003290:	68b8      	ldr	r0, [r7, #8]
 8003292:	f000 f8f6 	bl	8003482 <_ZSt12__miter_baseIPPcET_S2_>
 8003296:	4603      	mov	r3, r0
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	4619      	mov	r1, r3
 800329c:	4620      	mov	r0, r4
 800329e:	f000 f91d 	bl	80034dc <_ZSt22__copy_move_backward_aILb0EPPcS1_ET1_T0_S3_S2_>
 80032a2:	4603      	mov	r3, r0
    }
 80032a4:	4618      	mov	r0, r3
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd90      	pop	{r4, r7, pc}

080032ac <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d201      	bcs.n	80032c6 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	e000      	b.n	80032c8 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80032c6:	687b      	ldr	r3, [r7, #4]
    }
 80032c8:	4618      	mov	r0, r3
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <_ZNSt11_Deque_baseIcSaIcEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80032d2:	b590      	push	{r4, r7, lr}
 80032d4:	b085      	sub	sp, #20
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80032dc:	f107 030c 	add.w	r3, r7, #12
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 f91d 	bl	8003522 <_ZNKSt11_Deque_baseIcSaIcEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80032e8:	f107 030c 	add.w	r3, r7, #12
 80032ec:	6839      	ldr	r1, [r7, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 f934 	bl	800355c <_ZNSt16allocator_traitsISaIPcEE8allocateERS1_j>
 80032f4:	4604      	mov	r4, r0
 80032f6:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80032f8:	f107 030c 	add.w	r3, r7, #12
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 f921 	bl	8003544 <_ZNSaIPcED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003302:	4623      	mov	r3, r4
      }
 8003304:	4618      	mov	r0, r3
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	bd90      	pop	{r4, r7, pc}

0800330c <_ZNSt11_Deque_baseIcSaIcEE17_M_deallocate_mapEPPcj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003318:	f107 0314 	add.w	r3, r7, #20
 800331c:	68f9      	ldr	r1, [r7, #12]
 800331e:	4618      	mov	r0, r3
 8003320:	f000 f8ff 	bl	8003522 <_ZNKSt11_Deque_baseIcSaIcEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8003324:	f107 0314 	add.w	r3, r7, #20
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	68b9      	ldr	r1, [r7, #8]
 800332c:	4618      	mov	r0, r3
 800332e:	f000 f924 	bl	800357a <_ZNSt16allocator_traitsISaIPcEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003332:	f107 0314 	add.w	r3, r7, #20
 8003336:	4618      	mov	r0, r3
 8003338:	f000 f904 	bl	8003544 <_ZNSaIPcED1Ev>
      }
 800333c:	bf00      	nop
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f923 	bl	8003598 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 8003352:	4603      	mov	r3, r0
      }
 8003354:	4618      	mov	r0, r3
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <_ZSt4copyIPPdS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 800335c:	b590      	push	{r4, r7, lr}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 f921 	bl	80035b0 <_ZSt12__miter_baseIPPdET_S2_>
 800336e:	4604      	mov	r4, r0
 8003370:	68b8      	ldr	r0, [r7, #8]
 8003372:	f000 f91d 	bl	80035b0 <_ZSt12__miter_baseIPPdET_S2_>
 8003376:	4603      	mov	r3, r0
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	4619      	mov	r1, r3
 800337c:	4620      	mov	r0, r4
 800337e:	f000 f921 	bl	80035c4 <_ZSt13__copy_move_aILb0EPPdS1_ET1_T0_S3_S2_>
 8003382:	4603      	mov	r3, r0
    }
 8003384:	4618      	mov	r0, r3
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	bd90      	pop	{r4, r7, pc}

0800338c <_ZSt13copy_backwardIPPdS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800338c:	b590      	push	{r4, r7, lr}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f909 	bl	80035b0 <_ZSt12__miter_baseIPPdET_S2_>
 800339e:	4604      	mov	r4, r0
 80033a0:	68b8      	ldr	r0, [r7, #8]
 80033a2:	f000 f905 	bl	80035b0 <_ZSt12__miter_baseIPPdET_S2_>
 80033a6:	4603      	mov	r3, r0
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	4619      	mov	r1, r3
 80033ac:	4620      	mov	r0, r4
 80033ae:	f000 f92c 	bl	800360a <_ZSt22__copy_move_backward_aILb0EPPdS1_ET1_T0_S3_S2_>
 80033b2:	4603      	mov	r3, r0
    }
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd90      	pop	{r4, r7, pc}

080033bc <_ZNSt11_Deque_baseIdSaIdEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80033bc:	b590      	push	{r4, r7, lr}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80033c6:	f107 030c 	add.w	r3, r7, #12
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 f93f 	bl	8003650 <_ZNKSt11_Deque_baseIdSaIdEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80033d2:	f107 030c 	add.w	r3, r7, #12
 80033d6:	6839      	ldr	r1, [r7, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 f956 	bl	800368a <_ZNSt16allocator_traitsISaIPdEE8allocateERS1_j>
 80033de:	4604      	mov	r4, r0
 80033e0:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80033e2:	f107 030c 	add.w	r3, r7, #12
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 f943 	bl	8003672 <_ZNSaIPdED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80033ec:	4623      	mov	r3, r4
      }
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd90      	pop	{r4, r7, pc}

080033f6 <_ZNSt11_Deque_baseIdSaIdEE17_M_deallocate_mapEPPdj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003402:	f107 0314 	add.w	r3, r7, #20
 8003406:	68f9      	ldr	r1, [r7, #12]
 8003408:	4618      	mov	r0, r3
 800340a:	f000 f921 	bl	8003650 <_ZNKSt11_Deque_baseIdSaIdEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 800340e:	f107 0314 	add.w	r3, r7, #20
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	68b9      	ldr	r1, [r7, #8]
 8003416:	4618      	mov	r0, r3
 8003418:	f000 f946 	bl	80036a8 <_ZNSt16allocator_traitsISaIPdEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800341c:	f107 0314 	add.w	r3, r7, #20
 8003420:	4618      	mov	r0, r3
 8003422:	f000 f926 	bl	8003672 <_ZNSaIPdED1Ev>
      }
 8003426:	bf00      	nop
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800342e:	b580      	push	{r7, lr}
 8003430:	b084      	sub	sp, #16
 8003432:	af00      	add	r7, sp, #0
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 f943 	bl	80036c6 <_ZNK9__gnu_cxx13new_allocatorIdE11_M_max_sizeEv>
 8003440:	4602      	mov	r2, r0
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	4293      	cmp	r3, r2
 8003446:	bf8c      	ite	hi
 8003448:	2301      	movhi	r3, #1
 800344a:	2300      	movls	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003452:	f004 ff08 	bl	8008266 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4618      	mov	r0, r3
 800345c:	f004 fef0 	bl	8008240 <_Znwj>
 8003460:	4603      	mov	r3, r0
      }
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800346a:	b580      	push	{r7, lr}
 800346c:	b082      	sub	sp, #8
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff fceb 	bl	8002e4e <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>
 8003478:	4603      	mov	r3, r0
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <_ZSt12__miter_baseIPPcET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
    { return __it; }
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4618      	mov	r0, r3
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr

08003496 <_ZSt13__copy_move_aILb0EPPcS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003496:	b5b0      	push	{r4, r5, r7, lr}
 8003498:	b084      	sub	sp, #16
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 f91a 	bl	80036dc <_ZSt12__niter_baseIPPcET_S2_>
 80034a8:	4604      	mov	r4, r0
 80034aa:	68b8      	ldr	r0, [r7, #8]
 80034ac:	f000 f916 	bl	80036dc <_ZSt12__niter_baseIPPcET_S2_>
 80034b0:	4605      	mov	r5, r0
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 f911 	bl	80036dc <_ZSt12__niter_baseIPPcET_S2_>
 80034ba:	4603      	mov	r3, r0
 80034bc:	461a      	mov	r2, r3
 80034be:	4629      	mov	r1, r5
 80034c0:	4620      	mov	r0, r4
 80034c2:	f000 f915 	bl	80036f0 <_ZSt14__copy_move_a1ILb0EPPcS1_ET1_T0_S3_S2_>
 80034c6:	4602      	mov	r2, r0
 80034c8:	1d3b      	adds	r3, r7, #4
 80034ca:	4611      	mov	r1, r2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 f91f 	bl	8003710 <_ZSt12__niter_wrapIPPcET_RKS2_S2_>
 80034d2:	4603      	mov	r3, r0
    }
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bdb0      	pop	{r4, r5, r7, pc}

080034dc <_ZSt22__copy_move_backward_aILb0EPPcS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80034dc:	b5b0      	push	{r4, r5, r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f8f7 	bl	80036dc <_ZSt12__niter_baseIPPcET_S2_>
 80034ee:	4604      	mov	r4, r0
 80034f0:	68b8      	ldr	r0, [r7, #8]
 80034f2:	f000 f8f3 	bl	80036dc <_ZSt12__niter_baseIPPcET_S2_>
 80034f6:	4605      	mov	r5, r0
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 f8ee 	bl	80036dc <_ZSt12__niter_baseIPPcET_S2_>
 8003500:	4603      	mov	r3, r0
 8003502:	461a      	mov	r2, r3
 8003504:	4629      	mov	r1, r5
 8003506:	4620      	mov	r0, r4
 8003508:	f000 f90d 	bl	8003726 <_ZSt23__copy_move_backward_a1ILb0EPPcS1_ET1_T0_S3_S2_>
 800350c:	4602      	mov	r2, r0
 800350e:	1d3b      	adds	r3, r7, #4
 8003510:	4611      	mov	r1, r2
 8003512:	4618      	mov	r0, r3
 8003514:	f000 f8fc 	bl	8003710 <_ZSt12__niter_wrapIPPcET_RKS2_S2_>
 8003518:	4603      	mov	r3, r0
    }
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bdb0      	pop	{r4, r5, r7, pc}

08003522 <_ZNKSt11_Deque_baseIcSaIcEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 800352c:	6838      	ldr	r0, [r7, #0]
 800352e:	f7ff fcd5 	bl	8002edc <_ZNKSt11_Deque_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8003532:	4603      	mov	r3, r0
 8003534:	4619      	mov	r1, r3
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f905 	bl	8003746 <_ZNSaIPcEC1IcEERKSaIT_E>
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <_ZNSaIPcED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f907 	bl	8003760 <_ZN9__gnu_cxx13new_allocatorIPcED1Ev>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4618      	mov	r0, r3
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <_ZNSt16allocator_traitsISaIPcEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003566:	2200      	movs	r2, #0
 8003568:	6839      	ldr	r1, [r7, #0]
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f902 	bl	8003774 <_ZN9__gnu_cxx13new_allocatorIPcE8allocateEjPKv>
 8003570:	4603      	mov	r3, r0
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <_ZNSt16allocator_traitsISaIPcEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800357a:	b580      	push	{r7, lr}
 800357c:	b084      	sub	sp, #16
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	68b9      	ldr	r1, [r7, #8]
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 f910 	bl	80037b0 <_ZN9__gnu_cxx13new_allocatorIPcE10deallocateEPS1_j>
 8003590:	bf00      	nop
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f890 	bl	80036c6 <_ZNK9__gnu_cxx13new_allocatorIdE11_M_max_sizeEv>
 80035a6:	4603      	mov	r3, r0
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <_ZSt12__miter_baseIPPdET_S2_>:
    __miter_base(_Iterator __it)
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
    { return __it; }
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4618      	mov	r0, r3
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr

080035c4 <_ZSt13__copy_move_aILb0EPPdS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80035c4:	b5b0      	push	{r4, r5, r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f8fd 	bl	80037d0 <_ZSt12__niter_baseIPPdET_S2_>
 80035d6:	4604      	mov	r4, r0
 80035d8:	68b8      	ldr	r0, [r7, #8]
 80035da:	f000 f8f9 	bl	80037d0 <_ZSt12__niter_baseIPPdET_S2_>
 80035de:	4605      	mov	r5, r0
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 f8f4 	bl	80037d0 <_ZSt12__niter_baseIPPdET_S2_>
 80035e8:	4603      	mov	r3, r0
 80035ea:	461a      	mov	r2, r3
 80035ec:	4629      	mov	r1, r5
 80035ee:	4620      	mov	r0, r4
 80035f0:	f000 f8f8 	bl	80037e4 <_ZSt14__copy_move_a1ILb0EPPdS1_ET1_T0_S3_S2_>
 80035f4:	4602      	mov	r2, r0
 80035f6:	1d3b      	adds	r3, r7, #4
 80035f8:	4611      	mov	r1, r2
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 f902 	bl	8003804 <_ZSt12__niter_wrapIPPdET_RKS2_S2_>
 8003600:	4603      	mov	r3, r0
    }
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bdb0      	pop	{r4, r5, r7, pc}

0800360a <_ZSt22__copy_move_backward_aILb0EPPdS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800360a:	b5b0      	push	{r4, r5, r7, lr}
 800360c:	b084      	sub	sp, #16
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f8da 	bl	80037d0 <_ZSt12__niter_baseIPPdET_S2_>
 800361c:	4604      	mov	r4, r0
 800361e:	68b8      	ldr	r0, [r7, #8]
 8003620:	f000 f8d6 	bl	80037d0 <_ZSt12__niter_baseIPPdET_S2_>
 8003624:	4605      	mov	r5, r0
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4618      	mov	r0, r3
 800362a:	f000 f8d1 	bl	80037d0 <_ZSt12__niter_baseIPPdET_S2_>
 800362e:	4603      	mov	r3, r0
 8003630:	461a      	mov	r2, r3
 8003632:	4629      	mov	r1, r5
 8003634:	4620      	mov	r0, r4
 8003636:	f000 f8f0 	bl	800381a <_ZSt23__copy_move_backward_a1ILb0EPPdS1_ET1_T0_S3_S2_>
 800363a:	4602      	mov	r2, r0
 800363c:	1d3b      	adds	r3, r7, #4
 800363e:	4611      	mov	r1, r2
 8003640:	4618      	mov	r0, r3
 8003642:	f000 f8df 	bl	8003804 <_ZSt12__niter_wrapIPPdET_RKS2_S2_>
 8003646:	4603      	mov	r3, r0
    }
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bdb0      	pop	{r4, r5, r7, pc}

08003650 <_ZNKSt11_Deque_baseIdSaIdEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 800365a:	6838      	ldr	r0, [r7, #0]
 800365c:	f7ff fd24 	bl	80030a8 <_ZNKSt11_Deque_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8003660:	4603      	mov	r3, r0
 8003662:	4619      	mov	r1, r3
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f8e8 	bl	800383a <_ZNSaIPdEC1IdEERKSaIT_E>
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <_ZNSaIPdED1Ev>:
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f8ea 	bl	8003854 <_ZN9__gnu_cxx13new_allocatorIPdED1Ev>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <_ZNSt16allocator_traitsISaIPdEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003694:	2200      	movs	r2, #0
 8003696:	6839      	ldr	r1, [r7, #0]
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f8e5 	bl	8003868 <_ZN9__gnu_cxx13new_allocatorIPdE8allocateEjPKv>
 800369e:	4603      	mov	r3, r0
 80036a0:	4618      	mov	r0, r3
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <_ZNSt16allocator_traitsISaIPdEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	68b9      	ldr	r1, [r7, #8]
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 f8f3 	bl	80038a4 <_ZN9__gnu_cxx13new_allocatorIPdE10deallocateEPS1_j>
 80036be:	bf00      	nop
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <_ZNK9__gnu_cxx13new_allocatorIdE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80036ce:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 80036d2:	4618      	mov	r0, r3
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr

080036dc <_ZSt12__niter_baseIPPcET_S2_>:
    __niter_base(_Iterator __it)
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4618      	mov	r0, r3
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <_ZSt14__copy_move_a1ILb0EPPcS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	68b9      	ldr	r1, [r7, #8]
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 f8df 	bl	80038c4 <_ZSt14__copy_move_a2ILb0EPPcS1_ET1_T0_S3_S2_>
 8003706:	4603      	mov	r3, r0
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <_ZSt12__niter_wrapIPPcET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
    { return __res; }
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr

08003726 <_ZSt23__copy_move_backward_a1ILb0EPPcS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f8d4 	bl	80038e4 <_ZSt23__copy_move_backward_a2ILb0EPPcS1_ET1_T0_S3_S2_>
 800373c:	4603      	mov	r3, r0
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <_ZNSaIPcEC1IcEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	6039      	str	r1, [r7, #0]
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f8d7 	bl	8003904 <_ZN9__gnu_cxx13new_allocatorIPcEC1Ev>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4618      	mov	r0, r3
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <_ZN9__gnu_cxx13new_allocatorIPcED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4618      	mov	r0, r3
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr

08003774 <_ZN9__gnu_cxx13new_allocatorIPcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f8c9 	bl	8003918 <_ZNK9__gnu_cxx13new_allocatorIPcE11_M_max_sizeEv>
 8003786:	4602      	mov	r2, r0
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	4293      	cmp	r3, r2
 800378c:	bf8c      	ite	hi
 800378e:	2301      	movhi	r3, #1
 8003790:	2300      	movls	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <_ZN9__gnu_cxx13new_allocatorIPcE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003798:	f004 fd65 	bl	8008266 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4618      	mov	r0, r3
 80037a2:	f004 fd4d 	bl	8008240 <_Znwj>
 80037a6:	4603      	mov	r3, r0
      }
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <_ZN9__gnu_cxx13new_allocatorIPcE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4619      	mov	r1, r3
 80037c2:	68b8      	ldr	r0, [r7, #8]
 80037c4:	f004 fd3a 	bl	800823c <_ZdlPvj>
      }
 80037c8:	bf00      	nop
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <_ZSt12__niter_baseIPPdET_S2_>:
    __niter_base(_Iterator __it)
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
    { return __it; }
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4618      	mov	r0, r3
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr

080037e4 <_ZSt14__copy_move_a1ILb0EPPdS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	68b9      	ldr	r1, [r7, #8]
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 f89a 	bl	800392e <_ZSt14__copy_move_a2ILb0EPPdS1_ET1_T0_S3_S2_>
 80037fa:	4603      	mov	r3, r0
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <_ZSt12__niter_wrapIPPdET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
    { return __res; }
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr

0800381a <_ZSt23__copy_move_backward_a1ILb0EPPdS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	68b9      	ldr	r1, [r7, #8]
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f88f 	bl	800394e <_ZSt23__copy_move_backward_a2ILb0EPPdS1_ET1_T0_S3_S2_>
 8003830:	4603      	mov	r3, r0
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <_ZNSaIPdEC1IdEERKSaIT_E>:
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	6039      	str	r1, [r7, #0]
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f892 	bl	800396e <_ZN9__gnu_cxx13new_allocatorIPdEC1Ev>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <_ZN9__gnu_cxx13new_allocatorIPdED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4618      	mov	r0, r3
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr

08003868 <_ZN9__gnu_cxx13new_allocatorIPdE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 f884 	bl	8003982 <_ZNK9__gnu_cxx13new_allocatorIPdE11_M_max_sizeEv>
 800387a:	4602      	mov	r2, r0
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	4293      	cmp	r3, r2
 8003880:	bf8c      	ite	hi
 8003882:	2301      	movhi	r3, #1
 8003884:	2300      	movls	r3, #0
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <_ZN9__gnu_cxx13new_allocatorIPdE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800388c:	f004 fceb 	bl	8008266 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4618      	mov	r0, r3
 8003896:	f004 fcd3 	bl	8008240 <_Znwj>
 800389a:	4603      	mov	r3, r0
      }
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <_ZN9__gnu_cxx13new_allocatorIPdE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4619      	mov	r1, r3
 80038b6:	68b8      	ldr	r0, [r7, #8]
 80038b8:	f004 fcc0 	bl	800823c <_ZdlPvj>
      }
 80038bc:	bf00      	nop
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <_ZSt14__copy_move_a2ILb0EPPcS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	68b9      	ldr	r1, [r7, #8]
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 f85f 	bl	8003998 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPcEEPT_PKS4_S7_S5_>
 80038da:	4603      	mov	r3, r0
    }
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <_ZSt23__copy_move_backward_a2ILb0EPPcS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f86c 	bl	80039d2 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPcEEPT_PKS4_S7_S5_>
 80038fa:	4603      	mov	r3, r0
    }
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <_ZN9__gnu_cxx13new_allocatorIPcEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr

08003918 <_ZNK9__gnu_cxx13new_allocatorIPcE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003920:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8003924:	4618      	mov	r0, r3
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr

0800392e <_ZSt14__copy_move_a2ILb0EPPdS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800392e:	b580      	push	{r7, lr}
 8003930:	b084      	sub	sp, #16
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f869 	bl	8003a16 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPdEEPT_PKS4_S7_S5_>
 8003944:	4603      	mov	r3, r0
    }
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <_ZSt23__copy_move_backward_a2ILb0EPPdS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800394e:	b580      	push	{r7, lr}
 8003950:	b084      	sub	sp, #16
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f876 	bl	8003a50 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPdEEPT_PKS4_S7_S5_>
 8003964:	4603      	mov	r3, r0
    }
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <_ZN9__gnu_cxx13new_allocatorIPdEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr

08003982 <_ZNK9__gnu_cxx13new_allocatorIPdE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800398a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800398e:	4618      	mov	r0, r3
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPcEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	109b      	asrs	r3, r3, #2
 80039ac:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d006      	beq.n	80039c2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPcEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	461a      	mov	r2, r3
 80039ba:	68f9      	ldr	r1, [r7, #12]
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f004 fff1 	bl	80089a4 <memmove>
	  return __result + _Num;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	4413      	add	r3, r2
	}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPcEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b086      	sub	sp, #24
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	109b      	asrs	r3, r3, #2
 80039e6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPcEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	425b      	negs	r3, r3
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	18d0      	adds	r0, r2, r3
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	461a      	mov	r2, r3
 80039fe:	68f9      	ldr	r1, [r7, #12]
 8003a00:	f004 ffd0 	bl	80089a4 <memmove>
	  return __result - _Num;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	425b      	negs	r3, r3
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	4413      	add	r3, r2
	}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPdEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b086      	sub	sp, #24
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	109b      	asrs	r3, r3, #2
 8003a2a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d006      	beq.n	8003a40 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPdEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	461a      	mov	r2, r3
 8003a38:	68f9      	ldr	r1, [r7, #12]
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f004 ffb2 	bl	80089a4 <memmove>
	  return __result + _Num;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	4413      	add	r3, r2
	}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPdEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	109b      	asrs	r3, r3, #2
 8003a64:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPdEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	425b      	negs	r3, r3
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	18d0      	adds	r0, r2, r3
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	68f9      	ldr	r1, [r7, #12]
 8003a7e:	f004 ff91 	bl	80089a4 <memmove>
	  return __result - _Num;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	425b      	negs	r3, r3
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	4413      	add	r3, r2
	}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <delayUSecs>:

#ifdef __cplusplus
extern "C" {
#endif

void delayUSecs(uint32_t us){
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
	SysTick->CTRL = 0;
 8003a9c:	4b12      	ldr	r3, [pc, #72]	; (8003ae8 <delayUSecs+0x54>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = SYSTEMCLOCKS_PER_SEC / 1000000 * us - 1;
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4a0e      	ldr	r2, [pc, #56]	; (8003ae8 <delayUSecs+0x54>)
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8003ab2:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <delayUSecs+0x54>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <delayUSecs+0x54>)
 8003aba:	2205      	movs	r2, #5
 8003abc:	601a      	str	r2, [r3, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8003abe:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <delayUSecs+0x54>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	bf0c      	ite	eq
 8003aca:	2301      	moveq	r3, #1
 8003acc:	2300      	movne	r3, #0
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d000      	beq.n	8003ad6 <delayUSecs+0x42>
 8003ad4:	e7f3      	b.n	8003abe <delayUSecs+0x2a>
	SysTick->CTRL = 0;
 8003ad6:	4b04      	ldr	r3, [pc, #16]	; (8003ae8 <delayUSecs+0x54>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	e000e010 	.word	0xe000e010

08003aec <delaySecs>:
	SysTick->CTRL = 5;
	while((SysTick->CTRL & 0x00010000) == 0);
	SysTick->CTRL = 0;
}

void delaySecs(uint32_t s){
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
	SysTick->CTRL = 0;
 8003af4:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <delaySecs+0x50>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = SYSTEMCLOCKS_PER_SEC * s - 1;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a10      	ldr	r2, [pc, #64]	; (8003b40 <delaySecs+0x54>)
 8003afe:	fb02 f303 	mul.w	r3, r2, r3
 8003b02:	4a0e      	ldr	r2, [pc, #56]	; (8003b3c <delaySecs+0x50>)
 8003b04:	3b01      	subs	r3, #1
 8003b06:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8003b08:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <delaySecs+0x50>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <delaySecs+0x50>)
 8003b10:	2205      	movs	r2, #5
 8003b12:	601a      	str	r2, [r3, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8003b14:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <delaySecs+0x50>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf0c      	ite	eq
 8003b20:	2301      	moveq	r3, #1
 8003b22:	2300      	movne	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d000      	beq.n	8003b2c <delaySecs+0x40>
 8003b2a:	e7f3      	b.n	8003b14 <delaySecs+0x28>
	SysTick->CTRL = 0;
 8003b2c:	4b03      	ldr	r3, [pc, #12]	; (8003b3c <delaySecs+0x50>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr
 8003b3c:	e000e010 	.word	0xe000e010
 8003b40:	044aa200 	.word	0x044aa200

08003b44 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f87d 	bl	8003c4c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4618      	mov	r0, r3
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 f860 	bl	8003c2c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff ffeb 	bl	8003b5c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <_ZN3Log16sendStringViaCDCERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
}
#endif

std::vector<std::string> Log::msgBuffer;

void Log::sendStringViaCDC(const std::string& message) {
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
    const char* cMessage = message.c_str();
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f004 fe1a 	bl	80087d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8003b9e:	60f8      	str	r0, [r7, #12]
    uint16_t len = strlen(cMessage);
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f7fc fad5 	bl	8000150 <strlen>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	817b      	strh	r3, [r7, #10]
    CDC_Transmit_FS((uint8_t*)cMessage, len);
 8003baa:	897b      	ldrh	r3, [r7, #10]
 8003bac:	4619      	mov	r1, r3
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f004 f9a2 	bl	8007ef8 <CDC_Transmit_FS>
}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <_ZN3Log6addMsgENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Log::addMsg(std::string msg){
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	msgBuffer.push_back(msg);
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	4803      	ldr	r0, [pc, #12]	; (8003bd4 <_ZN3Log6addMsgENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x18>)
 8003bc8:	f000 f86a 	bl	8003ca0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>
}
 8003bcc:	bf00      	nop
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	2000036c 	.word	0x2000036c

08003bd8 <_ZN3Log10DisplayMsgEv>:
void Log::clrMsg(char flag){
	if(flag == 'a')
		msgBuffer.clear();
}

void Log::DisplayMsg(){
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
	for (auto it = msgBuffer.begin(); it != msgBuffer.end(); ++it) {
 8003bde:	4812      	ldr	r0, [pc, #72]	; (8003c28 <_ZN3Log10DisplayMsgEv+0x50>)
 8003be0:	f000 f884 	bl	8003cec <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8003be4:	4603      	mov	r3, r0
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	480f      	ldr	r0, [pc, #60]	; (8003c28 <_ZN3Log10DisplayMsgEv+0x50>)
 8003bea:	f000 f88f 	bl	8003d0c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	607b      	str	r3, [r7, #4]
 8003bf2:	1d3a      	adds	r2, r7, #4
 8003bf4:	463b      	mov	r3, r7
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 f898 	bl	8003d2e <_ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESG_>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00c      	beq.n	8003c1e <_ZN3Log10DisplayMsgEv+0x46>
		sendStringViaCDC(*it);
 8003c04:	463b      	mov	r3, r7
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 f8b9 	bl	8003d7e <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEdeEv>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff ffbe 	bl	8003b90 <_ZN3Log16sendStringViaCDCERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
	for (auto it = msgBuffer.begin(); it != msgBuffer.end(); ++it) {
 8003c14:	463b      	mov	r3, r7
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 f8a1 	bl	8003d5e <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEppEv>
 8003c1c:	e7e4      	b.n	8003be8 <_ZN3Log10DisplayMsgEv+0x10>
	}
}
 8003c1e:	bf00      	nop
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	2000036c 	.word	0x2000036c

08003c2c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f8ad 	bl	8003d94 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 f8b5 	bl	8003dac <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataC1Ev>
	{ }
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4618      	mov	r0, r3
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f8bc 	bl	8003dd2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	10db      	asrs	r3, r3, #3
 8003c7c:	4a07      	ldr	r2, [pc, #28]	; (8003c9c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x38>)
 8003c7e:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8003c82:	461a      	mov	r2, r3
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f8ae 	bl	8003de6 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      }
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff ff59 	bl	8003b44 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4618      	mov	r0, r3
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	aaaaaaab 	.word	0xaaaaaaab

08003ca0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d00d      	beq.n	8003cd2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	f000 f8a4 	bl	8003e0c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f103 0218 	add.w	r2, r3, #24
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8003cd0:	e008      	b.n	8003ce4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x44>
	  _M_realloc_insert(end(), __x);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f81a 	bl	8003d0c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	4619      	mov	r1, r3
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f8bc 	bl	8003e5c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 8003ce4:	bf00      	nop
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	f107 030c 	add.w	r3, r7, #12
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 f975 	bl	8003fec <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	1d1a      	adds	r2, r3, #4
 8003d18:	f107 030c 	add.w	r3, r7, #12
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 f964 	bl	8003fec <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <_ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESG_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003d2e:	b590      	push	{r4, r7, lr}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f966 	bl	800400a <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	681c      	ldr	r4, [r3, #0]
 8003d42:	6838      	ldr	r0, [r7, #0]
 8003d44:	f000 f961 	bl	800400a <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	429c      	cmp	r4, r3
 8003d4e:	bf14      	ite	ne
 8003d50:	2301      	movne	r3, #1
 8003d52:	2300      	moveq	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	4618      	mov	r0, r3
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd90      	pop	{r4, r7, pc}

08003d5e <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
	++_M_current;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f103 0218 	add.w	r2, r3, #24
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	601a      	str	r2, [r3, #0]
	return *this;
 8003d72:	687b      	ldr	r3, [r7, #4]
      }
 8003d74:	4618      	mov	r0, r3
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr

08003d7e <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc80      	pop	{r7}
 8003d92:	4770      	bx	lr

08003d94 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f93e 	bl	800401e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	605a      	str	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	609a      	str	r2, [r3, #8]
	{ }
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr

08003dd2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr

08003de6 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b084      	sub	sp, #16
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	60f8      	str	r0, [r7, #12]
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	607a      	str	r2, [r7, #4]
	if (__p)
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d005      	beq.n	8003e04 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 f917 	bl	8004032 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 8003e04:	bf00      	nop
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f919 	bl	8004050 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	461a      	mov	r2, r3
 8003e22:	68b9      	ldr	r1, [r7, #8]
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 f91d 	bl	8004064 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>
	}
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 f805 	bl	8003e48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8003e3e:	4603      	mov	r3, r0
      }
 8003e40:	4618      	mov	r0, r3
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8003e50:	2301      	movs	r3, #1
      }
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bc80      	pop	{r7}
 8003e5a:	4770      	bx	lr

08003e5c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8003e5c:	b5b0      	push	{r4, r5, r7, lr}
 8003e5e:	b08c      	sub	sp, #48	; 0x30
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8003e68:	4a5e      	ldr	r2, [pc, #376]	; (8003fe4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x188>)
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 f911 	bl	8004094 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 8003e72:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f7ff ff33 	bl	8003cec <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8003e86:	4603      	mov	r3, r0
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	f107 0214 	add.w	r2, r7, #20
 8003e8e:	f107 0308 	add.w	r3, r7, #8
 8003e92:	4611      	mov	r1, r2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 f945 	bl	8004124 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 f958 	bl	8004158 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 8003ea8:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8003eae:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8003eb0:	69fa      	ldr	r2, [r7, #28]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	4413      	add	r3, r2
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	189d      	adds	r5, r3, r2
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f8c5 	bl	8004050 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	461a      	mov	r2, r3
 8003eca:	4629      	mov	r1, r5
 8003ecc:	4620      	mov	r0, r4
 8003ece:	f7ff ff9d 	bl	8003e0c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8003ed6:	f7ff ffac 	bl	8003e32 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_S_use_relocateEv>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d027      	beq.n	8003f30 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0xd4>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003ee0:	f107 0308 	add.w	r3, r7, #8
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 f890 	bl	800400a <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8003eea:	4603      	mov	r3, r0
 8003eec:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 f959 	bl	80041a8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8003ef6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4621      	mov	r1, r4
 8003efc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003efe:	f000 f93f 	bl	8004180 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>
 8003f02:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8003f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f06:	3318      	adds	r3, #24
 8003f08:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003f0a:	f107 0308 	add.w	r3, r7, #8
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 f87b 	bl	800400a <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8003f14:	4603      	mov	r3, r0
 8003f16:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 f944 	bl	80041a8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8003f20:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f24:	6a39      	ldr	r1, [r7, #32]
 8003f26:	4620      	mov	r0, r4
 8003f28:	f000 f92a 	bl	8004180 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>
 8003f2c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003f2e:	e026      	b.n	8003f7e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x122>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8003f30:	f107 0308 	add.w	r3, r7, #8
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 f868 	bl	800400a <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 f931 	bl	80041a8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8003f46:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f4e:	f000 f935 	bl	80041bc <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8003f52:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8003f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f56:	3318      	adds	r3, #24
 8003f58:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8003f5a:	f107 0308 	add.w	r3, r7, #8
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 f853 	bl	800400a <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8003f64:	4603      	mov	r3, r0
 8003f66:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 f91c 	bl	80041a8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8003f70:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8003f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f74:	6a39      	ldr	r1, [r7, #32]
 8003f76:	4620      	mov	r0, r4
 8003f78:	f000 f920 	bl	80041bc <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8003f7c:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8003f7e:	f7ff ff58 	bl	8003e32 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_S_use_relocateEv>
 8003f82:	4603      	mov	r3, r0
 8003f84:	f083 0301 	eor.w	r3, r3, #1
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d009      	beq.n	8003fa2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x146>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 f909 	bl	80041a8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8003f96:	4603      	mov	r3, r0
 8003f98:	461a      	mov	r2, r3
 8003f9a:	6a39      	ldr	r1, [r7, #32]
 8003f9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f9e:	f000 f933 	bl	8004208 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8003fa2:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	10db      	asrs	r3, r3, #3
 8003fae:	4a0e      	ldr	r2, [pc, #56]	; (8003fe8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x18c>)
 8003fb0:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fb8:	f7ff ff15 	bl	8003de6 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fc6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fca:	4613      	mov	r3, r2
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	4413      	add	r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	441a      	add	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	609a      	str	r2, [r3, #8]
    }
 8003fdc:	bf00      	nop
 8003fde:	3730      	adds	r7, #48	; 0x30
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bdb0      	pop	{r4, r5, r7, pc}
 8003fe4:	0800bad4 	.word	0x0800bad4
 8003fe8:	aaaaaaab 	.word	0xaaaaaaab

08003fec <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4618      	mov	r0, r3
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr

0800400a <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4618      	mov	r0, r3
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr

0800401e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4618      	mov	r0, r3
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	bc80      	pop	{r7}
 8004030:	4770      	bx	lr

08004032 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004032:	b580      	push	{r7, lr}
 8004034:	b084      	sub	sp, #16
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 f8ee 	bl	8004224 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 8004048:	bf00      	nop
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4618      	mov	r0, r3
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr

08004064 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004064:	b590      	push	{r4, r7, lr}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff ffed 	bl	8004050 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8004076:	4604      	mov	r4, r0
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	4619      	mov	r1, r3
 800407c:	2018      	movs	r0, #24
 800407e:	f7fd fcab 	bl	80019d8 <_ZnwjPv>
 8004082:	4603      	mov	r3, r0
 8004084:	4621      	mov	r1, r4
 8004086:	4618      	mov	r0, r3
 8004088:	f004 fbbc 	bl	8008804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800408c:	bf00      	nop
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	bd90      	pop	{r4, r7, pc}

08004094 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8004094:	b590      	push	{r4, r7, lr}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 f8d2 	bl	800424a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 80040a6:	4604      	mov	r4, r0
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f8df 	bl	800426c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 80040ae:	4603      	mov	r3, r0
 80040b0:	1ae2      	subs	r2, r4, r3
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	bf34      	ite	cc
 80040b8:	2301      	movcc	r3, #1
 80040ba:	2300      	movcs	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f004 f8d8 	bl	8008278 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 f8cf 	bl	800426c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 80040ce:	4604      	mov	r4, r0
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f8cb 	bl	800426c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 80040d6:	4603      	mov	r3, r0
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	f107 0208 	add.w	r2, r7, #8
 80040de:	f107 0310 	add.w	r3, r7, #16
 80040e2:	4611      	mov	r1, r2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff f8e1 	bl	80032ac <_ZSt3maxIjERKT_S2_S2_>
 80040ea:	4603      	mov	r3, r0
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4423      	add	r3, r4
 80040f0:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 f8ba 	bl	800426c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 80040f8:	4602      	mov	r2, r0
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d306      	bcc.n	800410e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7a>
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 f8a2 	bl	800424a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8004106:	4602      	mov	r2, r0
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	4293      	cmp	r3, r2
 800410c:	d904      	bls.n	8004118 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x84>
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 f89b 	bl	800424a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8004114:	4603      	mov	r3, r0
 8004116:	e000      	b.n	800411a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 8004118:	697b      	ldr	r3, [r7, #20]
      }
 800411a:	4618      	mov	r0, r3
 800411c:	371c      	adds	r7, #28
 800411e:	46bd      	mov	sp, r7
 8004120:	bd90      	pop	{r4, r7, pc}
	...

08004124 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8004124:	b590      	push	{r4, r7, lr}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff ff6b 	bl	800400a <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8004134:	4603      	mov	r3, r0
 8004136:	681c      	ldr	r4, [r3, #0]
 8004138:	6838      	ldr	r0, [r7, #0]
 800413a:	f7ff ff66 	bl	800400a <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800413e:	4603      	mov	r3, r0
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	1ae3      	subs	r3, r4, r3
 8004144:	10db      	asrs	r3, r3, #3
 8004146:	4a03      	ldr	r2, [pc, #12]	; (8004154 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x30>)
 8004148:	fb02 f303 	mul.w	r3, r2, r3
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	bd90      	pop	{r4, r7, pc}
 8004154:	aaaaaaab 	.word	0xaaaaaaab

08004158 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d006      	beq.n	8004176 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6839      	ldr	r1, [r7, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f000 f891 	bl	8004294 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 8004172:	4603      	mov	r3, r0
 8004174:	e000      	b.n	8004178 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 8004176:	2300      	movs	r3, #0
      }
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8004180:	b590      	push	{r4, r7, lr}
 8004182:	b087      	sub	sp, #28
 8004184:	af02      	add	r7, sp, #8
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800418e:	f88d 4000 	strb.w	r4, [sp]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	68b9      	ldr	r1, [r7, #8]
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f88a 	bl	80042b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_do_relocateEPS5_S8_S8_RS6_St17integral_constantIbLb1EE>
 800419e:	4603      	mov	r3, r0
      }
 80041a0:	4618      	mov	r0, r3
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd90      	pop	{r4, r7, pc}

080041a8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4618      	mov	r0, r3
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr

080041bc <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80041bc:	b590      	push	{r4, r7, lr}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f883 	bl	80042d6 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 80041d0:	4604      	mov	r4, r0
 80041d2:	68b8      	ldr	r0, [r7, #8]
 80041d4:	f000 f87f 	bl	80042d6 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 80041d8:	4601      	mov	r1, r0
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	4620      	mov	r0, r4
 80041e0:	f000 f888 	bl	80042f4 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>
 80041e4:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd90      	pop	{r4, r7, pc}

080041ee <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b082      	sub	sp, #8
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 80041f8:	6839      	ldr	r1, [r7, #0]
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f88b 	bl	8004316 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_>
	}
 8004200:	bf00      	nop
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8004214:	68b9      	ldr	r1, [r7, #8]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 f889 	bl	800432e <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 800421c:	bf00      	nop
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __t)
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	4613      	mov	r3, r2
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	4413      	add	r3, r2
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	4619      	mov	r1, r3
 800423c:	68b8      	ldr	r0, [r7, #8]
 800423e:	f003 fffd 	bl	800823c <_ZdlPvj>
      }
 8004242:	bf00      	nop
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800424a:	b580      	push	{r7, lr}
 800424c:	b082      	sub	sp, #8
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4618      	mov	r0, r3
 8004256:	f000 f893 	bl	8004380 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800425a:	4603      	mov	r3, r0
 800425c:	4618      	mov	r0, r3
 800425e:	f000 f873 	bl	8004348 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>
 8004262:	4603      	mov	r3, r0
 8004264:	4618      	mov	r0, r3
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	10db      	asrs	r3, r3, #3
 8004280:	4a03      	ldr	r2, [pc, #12]	; (8004290 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x24>)
 8004282:	fb02 f303 	mul.w	r3, r2, r3
 8004286:	4618      	mov	r0, r3
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr
 8004290:	aaaaaaab 	.word	0xaaaaaaab

08004294 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800429e:	2200      	movs	r2, #0
 80042a0:	6839      	ldr	r1, [r7, #0]
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f876 	bl	8004394 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 80042a8:	4603      	mov	r3, r0
 80042aa:	4618      	mov	r0, r3
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_do_relocateEPS5_S8_S8_RS6_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b084      	sub	sp, #16
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	60f8      	str	r0, [r7, #12]
 80042ba:	60b9      	str	r1, [r7, #8]
 80042bc:	607a      	str	r2, [r7, #4]
 80042be:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	68b9      	ldr	r1, [r7, #8]
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 f885 	bl	80043d6 <_ZSt12__relocate_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 80042cc:	4603      	mov	r3, r0
      }
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b084      	sub	sp, #16
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80042de:	f107 030c 	add.w	r3, r7, #12
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 f893 	bl	8004410 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	68b9      	ldr	r1, [r7, #8]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 f894 	bl	8004434 <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 800430c:	4603      	mov	r3, r0
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_>:
	destroy(_Up* __p)
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8004320:	6838      	ldr	r0, [r7, #0]
 8004322:	f004 f943 	bl	80085ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004326:	bf00      	nop
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800432e:	b580      	push	{r7, lr}
 8004330:	b082      	sub	sp, #8
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8004338:	6839      	ldr	r1, [r7, #0]
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f88c 	bl	8004458 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 8004340:	bf00      	nop
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8004350:	4b0a      	ldr	r3, [pc, #40]	; (800437c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_+0x34>)
 8004352:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f897 	bl	8004488 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 800435a:	4603      	mov	r3, r0
 800435c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800435e:	f107 0208 	add.w	r2, r7, #8
 8004362:	f107 030c 	add.w	r3, r7, #12
 8004366:	4611      	mov	r1, r2
 8004368:	4618      	mov	r0, r3
 800436a:	f7fe ff5c 	bl	8003226 <_ZSt3minIjERKT_S2_S2_>
 800436e:	4603      	mov	r3, r0
 8004370:	681b      	ldr	r3, [r3, #0]
      }
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	05555555 	.word	0x05555555

08004380 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4618      	mov	r0, r3
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr

08004394 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 f87d 	bl	80044a0 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>
 80043a6:	4602      	mov	r2, r0
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4293      	cmp	r3, r2
 80043ac:	bf8c      	ite	hi
 80043ae:	2301      	movhi	r3, #1
 80043b0:	2300      	movls	r3, #0
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80043b8:	f003 ff55 	bl	8008266 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	4613      	mov	r3, r2
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	4413      	add	r3, r2
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	4618      	mov	r0, r3
 80043c8:	f003 ff3a 	bl	8008240 <_Znwj>
 80043cc:	4603      	mov	r3, r0
      }
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <_ZSt12__relocate_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80043d6:	b5b0      	push	{r4, r5, r7, lr}
 80043d8:	b084      	sub	sp, #16
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	607a      	str	r2, [r7, #4]
 80043e2:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f867 	bl	80044b8 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 80043ea:	4604      	mov	r4, r0
 80043ec:	68b8      	ldr	r0, [r7, #8]
 80043ee:	f000 f863 	bl	80044b8 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 80043f2:	4605      	mov	r5, r0
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f85f 	bl	80044b8 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 80043fa:	4602      	mov	r2, r0
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	4629      	mov	r1, r5
 8004400:	4620      	mov	r0, r4
 8004402:	f000 f863 	bl	80044cc <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8004406:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bdb0      	pop	{r4, r5, r7, pc}

08004410 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>:
      move_iterator(iterator_type __i)
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 800441a:	463b      	mov	r3, r7
 800441c:	4618      	mov	r0, r3
 800441e:	f000 f87b 	bl	8004518 <_ZSt4moveIRPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS9_>
 8004422:	4603      	mov	r3, r0
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004440:	2301      	movs	r3, #1
 8004442:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	68b9      	ldr	r1, [r7, #8]
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 f86f 	bl	800452c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>
 800444e:	4603      	mov	r3, r0
    }
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d00a      	beq.n	8004480 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f88d 	bl	800458a <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8004470:	4603      	mov	r3, r0
 8004472:	4618      	mov	r0, r3
 8004474:	f000 f893 	bl	800459e <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	3318      	adds	r3, #24
 800447c:	607b      	str	r3, [r7, #4]
 800447e:	e7f0      	b.n	8004462 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 8004480:	bf00      	nop
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f88f 	bl	80045b4 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 8004496:	4603      	mov	r3, r0
      }
 8004498:	4618      	mov	r0, r3
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80044a8:	4b02      	ldr	r3, [pc, #8]	; (80044b4 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv+0x14>)
      }
 80044aa:	4618      	mov	r0, r3
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr
 80044b4:	05555555 	.word	0x05555555

080044b8 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>:
    __niter_base(_Iterator __it)
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
    { return __it; }
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4618      	mov	r0, r3
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr

080044cc <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 80044cc:	b590      	push	{r4, r7, lr}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d013      	beq.n	800450e <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 80044e6:	6978      	ldr	r0, [r7, #20]
 80044e8:	f000 f84f 	bl	800458a <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 80044ec:	4604      	mov	r4, r0
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 f84b 	bl	800458a <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 80044f4:	4603      	mov	r3, r0
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	4619      	mov	r1, r3
 80044fa:	4620      	mov	r0, r4
 80044fc:	f000 f866 	bl	80045cc <_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3318      	adds	r3, #24
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	3318      	adds	r3, #24
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	e7e7      	b.n	80044de <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_+0x12>
      return __cur;
 800450e:	697b      	ldr	r3, [r7, #20]
    }
 8004510:	4618      	mov	r0, r3
 8004512:	371c      	adds	r7, #28
 8004514:	46bd      	mov	sp, r7
 8004516:	bd90      	pop	{r4, r7, pc}

08004518 <_ZSt4moveIRPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4618      	mov	r0, r3
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr

0800452c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800452c:	b590      	push	{r4, r7, lr}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800453c:	f107 0208 	add.w	r2, r7, #8
 8004540:	f107 030c 	add.w	r3, r7, #12
 8004544:	4611      	mov	r1, r2
 8004546:	4618      	mov	r0, r3
 8004548:	f000 f85b 	bl	8004602 <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d016      	beq.n	8004580 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8004552:	6978      	ldr	r0, [r7, #20]
 8004554:	f000 f819 	bl	800458a <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8004558:	4604      	mov	r4, r0
 800455a:	f107 030c 	add.w	r3, r7, #12
 800455e:	4618      	mov	r0, r3
 8004560:	f000 f870 	bl	8004644 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 8004564:	4603      	mov	r3, r0
 8004566:	4619      	mov	r1, r3
 8004568:	4620      	mov	r0, r4
 800456a:	f000 f876 	bl	800465a <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800456e:	f107 030c 	add.w	r3, r7, #12
 8004572:	4618      	mov	r0, r3
 8004574:	f000 f856 	bl	8004624 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	3318      	adds	r3, #24
 800457c:	617b      	str	r3, [r7, #20]
 800457e:	e7dd      	b.n	800453c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x10>
	      return __cur;
 8004580:	697b      	ldr	r3, [r7, #20]
	}
 8004582:	4618      	mov	r0, r3
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	bd90      	pop	{r4, r7, pc}

0800458a <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4618      	mov	r0, r3
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr

0800459e <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f004 f800 	bl	80085ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 80045ac:	bf00      	nop
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff ff6f 	bl	80044a0 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>
 80045c2:	4603      	mov	r3, r0
 80045c4:	4618      	mov	r0, r3
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 80045d8:	68b8      	ldr	r0, [r7, #8]
 80045da:	f000 f855 	bl	8004688 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80045de:	4603      	mov	r3, r0
 80045e0:	461a      	mov	r2, r3
 80045e2:	68f9      	ldr	r1, [r7, #12]
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f859 	bl	800469c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 80045ea:	68b8      	ldr	r0, [r7, #8]
 80045ec:	f7ff ffcd 	bl	800458a <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 80045f0:	4603      	mov	r3, r0
 80045f2:	4619      	mov	r1, r3
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7ff fdfa 	bl	80041ee <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>
    }
 80045fa:	bf00      	nop
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8004602:	b580      	push	{r7, lr}
 8004604:	b082      	sub	sp, #8
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800460c:	6839      	ldr	r1, [r7, #0]
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f857 	bl	80046c2 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 8004614:	4603      	mov	r3, r0
 8004616:	f083 0301 	eor.w	r3, r3, #1
 800461a:	b2db      	uxtb	r3, r3
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++()
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f103 0218 	add.w	r2, r3, #24
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	601a      	str	r2, [r3, #0]
	return *this;
 8004638:	687b      	ldr	r3, [r7, #4]
      }
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr

08004644 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr

0800465a <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800465a:	b590      	push	{r4, r7, lr}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 8004664:	6838      	ldr	r0, [r7, #0]
 8004666:	f000 f842 	bl	80046ee <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800466a:	4604      	mov	r4, r0
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4619      	mov	r1, r3
 8004670:	2018      	movs	r0, #24
 8004672:	f7fd f9b1 	bl	80019d8 <_ZnwjPv>
 8004676:	4603      	mov	r3, r0
 8004678:	4621      	mov	r1, r4
 800467a:	4618      	mov	r0, r3
 800467c:	f003 ff7c 	bl	8008578 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	bd90      	pop	{r4, r7, pc}

08004688 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4618      	mov	r0, r3
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	bc80      	pop	{r7}
 800469a:	4770      	bx	lr

0800469c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f820 	bl	80046ee <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80046ae:	4603      	mov	r3, r0
 80046b0:	461a      	mov	r2, r3
 80046b2:	68b9      	ldr	r1, [r7, #8]
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f824 	bl	8004702 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>
	}
 80046ba:	bf00      	nop
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator==(const move_iterator<_Iterator>& __x,
 80046c2:	b590      	push	{r4, r7, lr}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f830 	bl	8004732 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80046d2:	4604      	mov	r4, r0
 80046d4:	6838      	ldr	r0, [r7, #0]
 80046d6:	f000 f82c 	bl	8004732 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80046da:	4603      	mov	r3, r0
 80046dc:	429c      	cmp	r4, r3
 80046de:	bf0c      	ite	eq
 80046e0:	2301      	moveq	r3, #1
 80046e2:	2300      	movne	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	4618      	mov	r0, r3
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd90      	pop	{r4, r7, pc}

080046ee <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4618      	mov	r0, r3
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bc80      	pop	{r7}
 8004700:	4770      	bx	lr

08004702 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004702:	b590      	push	{r4, r7, lr}
 8004704:	b085      	sub	sp, #20
 8004706:	af00      	add	r7, sp, #0
 8004708:	60f8      	str	r0, [r7, #12]
 800470a:	60b9      	str	r1, [r7, #8]
 800470c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7ff ffed 	bl	80046ee <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8004714:	4604      	mov	r4, r0
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	4619      	mov	r1, r3
 800471a:	2018      	movs	r0, #24
 800471c:	f7fd f95c 	bl	80019d8 <_ZnwjPv>
 8004720:	4603      	mov	r3, r0
 8004722:	4621      	mov	r1, r4
 8004724:	4618      	mov	r0, r3
 8004726:	f003 ff27 	bl	8008578 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800472a:	bf00      	nop
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	bd90      	pop	{r4, r7, pc}

08004732 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	4770      	bx	lr

08004748 <_Z41__static_initialization_and_destruction_0ii>:
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d107      	bne.n	8004768 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800475e:	4293      	cmp	r3, r2
 8004760:	d102      	bne.n	8004768 <_Z41__static_initialization_and_destruction_0ii+0x20>
std::vector<std::string> Log::msgBuffer;
 8004762:	4809      	ldr	r0, [pc, #36]	; (8004788 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004764:	f7ff fa07 	bl	8003b76 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d107      	bne.n	800477e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004774:	4293      	cmp	r3, r2
 8004776:	d102      	bne.n	800477e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004778:	4803      	ldr	r0, [pc, #12]	; (8004788 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800477a:	f000 f807 	bl	800478c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
}
 800477e:	bf00      	nop
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	2000036c 	.word	0x2000036c

0800478c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800478c:	b5b0      	push	{r4, r5, r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681c      	ldr	r4, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff fd02 	bl	80041a8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 80047a4:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80047a6:	461a      	mov	r2, r3
 80047a8:	4629      	mov	r1, r5
 80047aa:	4620      	mov	r0, r4
 80047ac:	f7ff fd2c 	bl	8004208 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      }
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff fa56 	bl	8003c64 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bdb0      	pop	{r4, r5, r7, pc}

080047c2 <_GLOBAL__sub_I_delayUSecs>:
 80047c2:	b580      	push	{r7, lr}
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80047ca:	2001      	movs	r0, #1
 80047cc:	f7ff ffbc 	bl	8004748 <_Z41__static_initialization_and_destruction_0ii>
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <_GLOBAL__sub_D_delayUSecs>:
 80047d2:	b580      	push	{r7, lr}
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80047da:	2000      	movs	r0, #0
 80047dc:	f7ff ffb4 	bl	8004748 <_Z41__static_initialization_and_destruction_0ii>
 80047e0:	bd80      	pop	{r7, pc}
	...

080047e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80047e4:	b510      	push	{r4, lr}
 80047e6:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e8:	2210      	movs	r2, #16
 80047ea:	2100      	movs	r1, #0
 80047ec:	a802      	add	r0, sp, #8
 80047ee:	f004 f8f3 	bl	80089d8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80047f2:	4b13      	ldr	r3, [pc, #76]	; (8004840 <MX_GPIO_Init+0x5c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80047f4:	4c13      	ldr	r4, [pc, #76]	; (8004844 <MX_GPIO_Init+0x60>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80047f6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80047f8:	4620      	mov	r0, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80047fa:	f042 0220 	orr.w	r2, r2, #32
 80047fe:	619a      	str	r2, [r3, #24]
 8004800:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8004802:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004804:	f002 0220 	and.w	r2, r2, #32
 8004808:	9200      	str	r2, [sp, #0]
 800480a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800480c:	699a      	ldr	r2, [r3, #24]
 800480e:	f042 0204 	orr.w	r2, r2, #4
 8004812:	619a      	str	r2, [r3, #24]
 8004814:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8004816:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	9301      	str	r3, [sp, #4]
 800481e:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8004820:	f000 fdea 	bl	80053f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004824:	2240      	movs	r2, #64	; 0x40
 8004826:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004828:	2100      	movs	r1, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800482a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800482e:	2302      	movs	r3, #2
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8004830:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004832:	e9cd 1304 	strd	r1, r3, [sp, #16]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8004836:	a902      	add	r1, sp, #8
 8004838:	f000 fd04 	bl	8005244 <HAL_GPIO_Init>

}
 800483c:	b006      	add	sp, #24
 800483e:	bd10      	pop	{r4, pc}
 8004840:	40021000 	.word	0x40021000
 8004844:	40010800 	.word	0x40010800

08004848 <_ZN9CALCULATE9CalculateC1Ev>:
#include <string>
#include "common.h"

namespace CALCULATE{

class Calculate{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4618      	mov	r0, r3
 8004854:	f000 f8ed 	bl	8004a32 <_ZNSt5stackIcSt5dequeIcSaIcEEEC1IS2_vEEv>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3328      	adds	r3, #40	; 0x28
 800485c:	4618      	mov	r0, r3
 800485e:	f000 f909 	bl	8004a74 <_ZNSt5stackIdSt5dequeIdSaIdEEEC1IS2_vEEv>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3350      	adds	r3, #80	; 0x50
 8004866:	4618      	mov	r0, r3
 8004868:	f003 fe7f 	bl	800856a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3368      	adds	r3, #104	; 0x68
 8004870:	4618      	mov	r0, r3
 8004872:	f003 fe7a 	bl	800856a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b0a2      	sub	sp, #136	; 0x88
 8004884:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004886:	f000 fc53 	bl	8005130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800488a:	f000 f856 	bl	800493a <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800488e:	f7ff ffa9 	bl	80047e4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8004892:	f003 fae3 	bl	8007e5c <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8004896:	f000 fb2b 	bl	8004ef0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MAX7219 Max7219;
  CALCULATE::Calculate Calcu;
 800489a:	1d3b      	adds	r3, r7, #4
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff ffd3 	bl	8004848 <_ZN9CALCULATE9CalculateC1Ev>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Max7219.max7219Init();
 80048a2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fad6 	bl	8004e58 <_ZN7MAX721911max7219InitEv>
  //2*(3+5)+7/1-4
  Calcu.getInput('2');
 80048ac:	1d3b      	adds	r3, r7, #4
 80048ae:	2132      	movs	r1, #50	; 0x32
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7fd fb35 	bl	8001f20 <_ZN9CALCULATE9Calculate8getInputEc>
  Calcu.getInput('*');
 80048b6:	1d3b      	adds	r3, r7, #4
 80048b8:	212a      	movs	r1, #42	; 0x2a
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fd fb30 	bl	8001f20 <_ZN9CALCULATE9Calculate8getInputEc>
  Calcu.getInput('(');
 80048c0:	1d3b      	adds	r3, r7, #4
 80048c2:	2128      	movs	r1, #40	; 0x28
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fd fb2b 	bl	8001f20 <_ZN9CALCULATE9Calculate8getInputEc>
  Calcu.getInput('3');
 80048ca:	1d3b      	adds	r3, r7, #4
 80048cc:	2133      	movs	r1, #51	; 0x33
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fd fb26 	bl	8001f20 <_ZN9CALCULATE9Calculate8getInputEc>
  Calcu.getInput('+');
 80048d4:	1d3b      	adds	r3, r7, #4
 80048d6:	212b      	movs	r1, #43	; 0x2b
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fd fb21 	bl	8001f20 <_ZN9CALCULATE9Calculate8getInputEc>
  Calcu.getInput('5');
 80048de:	1d3b      	adds	r3, r7, #4
 80048e0:	2135      	movs	r1, #53	; 0x35
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fd fb1c 	bl	8001f20 <_ZN9CALCULATE9Calculate8getInputEc>
  Calcu.getInput(')');
 80048e8:	1d3b      	adds	r3, r7, #4
 80048ea:	2129      	movs	r1, #41	; 0x29
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7fd fb17 	bl	8001f20 <_ZN9CALCULATE9Calculate8getInputEc>
  Calcu.getInput('+');
 80048f2:	1d3b      	adds	r3, r7, #4
 80048f4:	212b      	movs	r1, #43	; 0x2b
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fd fb12 	bl	8001f20 <_ZN9CALCULATE9Calculate8getInputEc>
  Calcu.getInput('7');
 80048fc:	1d3b      	adds	r3, r7, #4
 80048fe:	2137      	movs	r1, #55	; 0x37
 8004900:	4618      	mov	r0, r3
 8004902:	f7fd fb0d 	bl	8001f20 <_ZN9CALCULATE9Calculate8getInputEc>
  Calcu.getInput('/');
 8004906:	1d3b      	adds	r3, r7, #4
 8004908:	212f      	movs	r1, #47	; 0x2f
 800490a:	4618      	mov	r0, r3
 800490c:	f7fd fb08 	bl	8001f20 <_ZN9CALCULATE9Calculate8getInputEc>
  Calcu.getInput('1');
 8004910:	1d3b      	adds	r3, r7, #4
 8004912:	2131      	movs	r1, #49	; 0x31
 8004914:	4618      	mov	r0, r3
 8004916:	f7fd fb03 	bl	8001f20 <_ZN9CALCULATE9Calculate8getInputEc>
  Calcu.getInput('-');
 800491a:	1d3b      	adds	r3, r7, #4
 800491c:	212d      	movs	r1, #45	; 0x2d
 800491e:	4618      	mov	r0, r3
 8004920:	f7fd fafe 	bl	8001f20 <_ZN9CALCULATE9Calculate8getInputEc>
  Calcu.getInput('4');
 8004924:	1d3b      	adds	r3, r7, #4
 8004926:	2134      	movs	r1, #52	; 0x34
 8004928:	4618      	mov	r0, r3
 800492a:	f7fd faf9 	bl	8001f20 <_ZN9CALCULATE9Calculate8getInputEc>

  while (1)
  {
	  Log::DisplayMsg();
 800492e:	f7ff f953 	bl	8003bd8 <_ZN3Log10DisplayMsgEv>
	  delaySecs(100);
 8004932:	2064      	movs	r0, #100	; 0x64
 8004934:	f7ff f8da 	bl	8003aec <delaySecs>
	  Log::DisplayMsg();
 8004938:	e7f9      	b.n	800492e <main+0xae>

0800493a <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b094      	sub	sp, #80	; 0x50
 800493e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004940:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004944:	2228      	movs	r2, #40	; 0x28
 8004946:	2100      	movs	r1, #0
 8004948:	4618      	mov	r0, r3
 800494a:	f004 f845 	bl	80089d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800494e:	f107 0314 	add.w	r3, r7, #20
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	605a      	str	r2, [r3, #4]
 8004958:	609a      	str	r2, [r3, #8]
 800495a:	60da      	str	r2, [r3, #12]
 800495c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800495e:	1d3b      	adds	r3, r7, #4
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	605a      	str	r2, [r3, #4]
 8004966:	609a      	str	r2, [r3, #8]
 8004968:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800496a:	2301      	movs	r3, #1
 800496c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800496e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004972:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004974:	2300      	movs	r3, #0
 8004976:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004978:	2301      	movs	r3, #1
 800497a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800497c:	2302      	movs	r3, #2
 800497e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004980:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004984:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8004986:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800498a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800498c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004990:	4618      	mov	r0, r3
 8004992:	f001 fbc7 	bl	8006124 <HAL_RCC_OscConfig>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	bf14      	ite	ne
 800499c:	2301      	movne	r3, #1
 800499e:	2300      	moveq	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 80049a6:	f000 f832 	bl	8004a0e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049aa:	230f      	movs	r3, #15
 80049ac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049ae:	2302      	movs	r3, #2
 80049b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80049b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80049bc:	2300      	movs	r3, #0
 80049be:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80049c0:	f107 0314 	add.w	r3, r7, #20
 80049c4:	2101      	movs	r1, #1
 80049c6:	4618      	mov	r0, r3
 80049c8:	f001 fd6e 	bl	80064a8 <HAL_RCC_ClockConfig>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	bf14      	ite	ne
 80049d2:	2301      	movne	r3, #1
 80049d4:	2300      	moveq	r3, #0
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80049dc:	f000 f817 	bl	8004a0e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80049e0:	2310      	movs	r3, #16
 80049e2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80049e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80049e8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049ea:	1d3b      	adds	r3, r7, #4
 80049ec:	4618      	mov	r0, r3
 80049ee:	f001 fdf7 	bl	80065e0 <HAL_RCCEx_PeriphCLKConfig>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	bf14      	ite	ne
 80049f8:	2301      	movne	r3, #1
 80049fa:	2300      	moveq	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 8004a02:	f000 f804 	bl	8004a0e <Error_Handler>
  }
}
 8004a06:	bf00      	nop
 8004a08:	3750      	adds	r7, #80	; 0x50
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a12:	b672      	cpsid	i
}
 8004a14:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a16:	e7fe      	b.n	8004a16 <Error_Handler+0x8>

08004a18 <_ZNSt5dequeIcSaIcEEC1Ev>:
      deque() = default;
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 f83a 	bl	8004a9c <_ZNSt11_Deque_baseIcSaIcEEC1Ev>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <_ZNSt5stackIcSt5dequeIcSaIcEEEC1IS2_vEEv>:
	stack()
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b082      	sub	sp, #8
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
	: c() { }
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	2328      	movs	r3, #40	; 0x28
 8004a40:	461a      	mov	r2, r3
 8004a42:	2100      	movs	r1, #0
 8004a44:	f003 ffc8 	bl	80089d8 <memset>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff ffe4 	bl	8004a18 <_ZNSt5dequeIcSaIcEEC1Ev>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <_ZNSt5dequeIdSaIdEEC1Ev>:
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b082      	sub	sp, #8
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 f82a 	bl	8004abe <_ZNSt11_Deque_baseIdSaIdEEC1Ev>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <_ZNSt5stackIdSt5dequeIdSaIdEEEC1IS2_vEEv>:
	stack()
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
	: c() { }
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	2328      	movs	r3, #40	; 0x28
 8004a82:	461a      	mov	r2, r3
 8004a84:	2100      	movs	r1, #0
 8004a86:	f003 ffa7 	bl	80089d8 <memset>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7ff ffe4 	bl	8004a5a <_ZNSt5dequeIdSaIdEEC1Ev>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4618      	mov	r0, r3
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <_ZNSt11_Deque_baseIcSaIcEEC1Ev>:
      _Deque_base()
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 f81a 	bl	8004ae0 <_ZNSt11_Deque_baseIcSaIcEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8004aac:	2100      	movs	r1, #0
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f826 	bl	8004b00 <_ZNSt11_Deque_baseIcSaIcEE17_M_initialize_mapEj>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <_ZNSt11_Deque_baseIdSaIdEEC1Ev>:
      _Deque_base()
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b082      	sub	sp, #8
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 f87b 	bl	8004bc4 <_ZNSt11_Deque_baseIdSaIdEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8004ace:	2100      	movs	r1, #0
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f887 	bl	8004be4 <_ZNSt11_Deque_baseIdSaIdEE17_M_initialize_mapEj>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <_ZNSt11_Deque_baseIcSaIcEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f003 fbba 	bl	8008262 <_ZNSaIcEC1Ev>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 f8da 	bl	8004caa <_ZNSt11_Deque_baseIcSaIcEE16_Deque_impl_dataC1Ev>
	{ }
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4618      	mov	r0, r3
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <_ZNSt11_Deque_baseIcSaIcEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8004b00:	b590      	push	{r4, r7, lr}
 8004b02:	b089      	sub	sp, #36	; 0x24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8004b0a:	2001      	movs	r0, #1
 8004b0c:	f7fc ff6f 	bl	80019ee <_ZSt16__deque_buf_sizej>
 8004b10:	4602      	mov	r2, r0
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b18:	3301      	adds	r3, #1
 8004b1a:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8004b1c:	2308      	movs	r3, #8
 8004b1e:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	3302      	adds	r3, #2
 8004b24:	613b      	str	r3, [r7, #16]
 8004b26:	f107 0210 	add.w	r2, r7, #16
 8004b2a:	f107 030c 	add.w	r3, r7, #12
 8004b2e:	4611      	mov	r1, r2
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fe fbbb 	bl	80032ac <_ZSt3maxIjERKT_S2_S2_>
 8004b36:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	4619      	mov	r1, r3
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7fe fbc4 	bl	80032d2 <_ZNSt11_Deque_baseIcSaIcEE15_M_allocate_mapEj>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6859      	ldr	r1, [r3, #4]
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	1acb      	subs	r3, r1, r3
 8004b5c:	085b      	lsrs	r3, r3, #1
 8004b5e:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8004b60:	4413      	add	r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	69b9      	ldr	r1, [r7, #24]
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f8b2 	bl	8004cdc <_ZNSt11_Deque_baseIcSaIcEE15_M_create_nodesEPPcS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	69b9      	ldr	r1, [r7, #24]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fd ffb9 	bl	8002af6 <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f103 0218 	add.w	r2, r3, #24
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	3b04      	subs	r3, #4
 8004b8e:	4619      	mov	r1, r3
 8004b90:	4610      	mov	r0, r2
 8004b92:	f7fd ffb0 	bl	8002af6 <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8004ba2:	2001      	movs	r0, #1
 8004ba4:	f7fc ff23 	bl	80019ee <_ZSt16__deque_buf_sizej>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	fbb3 f1f2 	udiv	r1, r3, r2
 8004bb0:	fb01 f202 	mul.w	r2, r1, r2
 8004bb4:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8004bb6:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	619a      	str	r2, [r3, #24]
    }
 8004bbc:	bf00      	nop
 8004bbe:	3724      	adds	r7, #36	; 0x24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd90      	pop	{r4, r7, pc}

08004bc4 <_ZNSt11_Deque_baseIdSaIdEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f89f 	bl	8004d10 <_ZNSaIdEC1Ev>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 f8a7 	bl	8004d28 <_ZNSt11_Deque_baseIdSaIdEE16_Deque_impl_dataC1Ev>
	{ }
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <_ZNSt11_Deque_baseIdSaIdEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8004be4:	b590      	push	{r4, r7, lr}
 8004be6:	b089      	sub	sp, #36	; 0x24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8004bee:	2008      	movs	r0, #8
 8004bf0:	f7fc fefd 	bl	80019ee <_ZSt16__deque_buf_sizej>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8004c00:	2308      	movs	r3, #8
 8004c02:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	3302      	adds	r3, #2
 8004c08:	613b      	str	r3, [r7, #16]
 8004c0a:	f107 0210 	add.w	r2, r7, #16
 8004c0e:	f107 030c 	add.w	r3, r7, #12
 8004c12:	4611      	mov	r1, r2
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fe fb49 	bl	80032ac <_ZSt3maxIjERKT_S2_S2_>
 8004c1a:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	4619      	mov	r1, r3
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7fe fbc7 	bl	80033bc <_ZNSt11_Deque_baseIdSaIdEE15_M_allocate_mapEj>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6859      	ldr	r1, [r3, #4]
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	1acb      	subs	r3, r1, r3
 8004c40:	085b      	lsrs	r3, r3, #1
 8004c42:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8004c44:	4413      	add	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	4413      	add	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	69b9      	ldr	r1, [r7, #24]
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f87f 	bl	8004d5a <_ZNSt11_Deque_baseIdSaIdEE15_M_create_nodesEPPdS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3308      	adds	r3, #8
 8004c60:	69b9      	ldr	r1, [r7, #24]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fd fef4 	bl	8002a50 <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f103 0218 	add.w	r2, r3, #24
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	3b04      	subs	r3, #4
 8004c72:	4619      	mov	r1, r3
 8004c74:	4610      	mov	r0, r2
 8004c76:	f7fd feeb 	bl	8002a50 <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8004c86:	2008      	movs	r0, #8
 8004c88:	f7fc feb1 	bl	80019ee <_ZSt16__deque_buf_sizej>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c94:	fb01 f202 	mul.w	r2, r1, r2
 8004c98:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	619a      	str	r2, [r3, #24]
    }
 8004ca2:	bf00      	nop
 8004ca4:	3724      	adds	r7, #36	; 0x24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd90      	pop	{r4, r7, pc}

08004caa <_ZNSt11_Deque_baseIcSaIcEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b082      	sub	sp, #8
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	605a      	str	r2, [r3, #4]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3308      	adds	r3, #8
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 f863 	bl	8004d8e <_ZNSt15_Deque_iteratorIcRcPcEC1Ev>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3318      	adds	r3, #24
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 f85e 	bl	8004d8e <_ZNSt15_Deque_iteratorIcRcPcEC1Ev>
	{ }
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <_ZNSt11_Deque_baseIcSaIcEE15_M_create_nodesEPPcS3_>:
    _Deque_base<_Tp, _Alloc>::
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d209      	bcs.n	8004d08 <_ZNSt11_Deque_baseIcSaIcEE15_M_create_nodesEPPcS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f7fe f808 	bl	8002d0a <_ZNSt11_Deque_baseIcSaIcEE16_M_allocate_nodeEv>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	3304      	adds	r3, #4
 8004d04:	617b      	str	r3, [r7, #20]
 8004d06:	e7f1      	b.n	8004cec <_ZNSt11_Deque_baseIcSaIcEE15_M_create_nodesEPPcS3_+0x10>
    }
 8004d08:	bf00      	nop
 8004d0a:	3718      	adds	r7, #24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <_ZNSaIdEC1Ev>:
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 f84e 	bl	8004dba <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <_ZNSt11_Deque_baseIdSaIdEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	605a      	str	r2, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3308      	adds	r3, #8
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 f844 	bl	8004dce <_ZNSt15_Deque_iteratorIdRdPdEC1Ev>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	3318      	adds	r3, #24
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 f83f 	bl	8004dce <_ZNSt15_Deque_iteratorIdRdPdEC1Ev>
	{ }
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <_ZNSt11_Deque_baseIdSaIdEE15_M_create_nodesEPPdS3_>:
    _Deque_base<_Tp, _Alloc>::
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b086      	sub	sp, #24
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d209      	bcs.n	8004d86 <_ZNSt11_Deque_baseIdSaIdEE15_M_create_nodesEPPdS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f7fe f859 	bl	8002e2a <_ZNSt11_Deque_baseIdSaIdEE16_M_allocate_nodeEv>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	3304      	adds	r3, #4
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	e7f1      	b.n	8004d6a <_ZNSt11_Deque_baseIdSaIdEE15_M_create_nodesEPPdS3_+0x10>
    }
 8004d86:	bf00      	nop
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <_ZNSt15_Deque_iteratorIcRcPcEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	605a      	str	r2, [r3, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	609a      	str	r2, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	60da      	str	r2, [r3, #12]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4618      	mov	r0, r3
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bc80      	pop	{r7}
 8004db8:	4770      	bx	lr

08004dba <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004dba:	b480      	push	{r7}
 8004dbc:	b083      	sub	sp, #12
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bc80      	pop	{r7}
 8004dcc:	4770      	bx	lr

08004dce <_ZNSt15_Deque_iteratorIdRdPdEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	605a      	str	r2, [r3, #4]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	609a      	str	r2, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	60da      	str	r2, [r3, #12]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4618      	mov	r0, r3
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bc80      	pop	{r7}
 8004df8:	4770      	bx	lr
	...

08004dfc <_ZN7MAX721911max7219SendEhh>:
 *  Created on: Nov 16, 2023
 *      Author: zhiyuan
 */
# include "max7219.hpp"

void MAX7219::max7219Send(uint8_t address,uint8_t data){
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	460b      	mov	r3, r1
 8004e06:	70fb      	strb	r3, [r7, #3]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	70bb      	strb	r3, [r7, #2]

	uint16_t Transmit_buf = (0x00ff&data)|(0xff00&(address<<8));
 8004e0c:	78bb      	ldrb	r3, [r7, #2]
 8004e0e:	b21a      	sxth	r2, r3
 8004e10:	78fb      	ldrb	r3, [r7, #3]
 8004e12:	021b      	lsls	r3, r3, #8
 8004e14:	b21b      	sxth	r3, r3
 8004e16:	4313      	orrs	r3, r2
 8004e18:	b21b      	sxth	r3, r3
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8004e1e:	2200      	movs	r2, #0
 8004e20:	2140      	movs	r1, #64	; 0x40
 8004e22:	480b      	ldr	r0, [pc, #44]	; (8004e50 <_ZN7MAX721911max7219SendEhh+0x54>)
 8004e24:	f000 fae8 	bl	80053f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&MAX7219_SPI,(uint8_t*)&Transmit_buf,1,TRANSMIT_OVERTIME);
 8004e28:	f107 010e 	add.w	r1, r7, #14
 8004e2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e30:	2201      	movs	r2, #1
 8004e32:	4808      	ldr	r0, [pc, #32]	; (8004e54 <_ZN7MAX721911max7219SendEhh+0x58>)
 8004e34:	f001 fd0a 	bl	800684c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8004e38:	2201      	movs	r2, #1
 8004e3a:	2140      	movs	r1, #64	; 0x40
 8004e3c:	4804      	ldr	r0, [pc, #16]	; (8004e50 <_ZN7MAX721911max7219SendEhh+0x54>)
 8004e3e:	f000 fadb 	bl	80053f8 <HAL_GPIO_WritePin>
	delayUSecs(100);
 8004e42:	2064      	movs	r0, #100	; 0x64
 8004e44:	f7fe fe26 	bl	8003a94 <delayUSecs>
}
 8004e48:	bf00      	nop
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	40010800 	.word	0x40010800
 8004e54:	20000378 	.word	0x20000378

08004e58 <_ZN7MAX721911max7219InitEv>:

void MAX7219::max7219Init(){
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
	//进入正常工作模式
	setWorkMode(true);
 8004e60:	2101      	movs	r1, #1
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f80c 	bl	8004e80 <_ZN7MAX721911setWorkModeEb>
	//七位全扫描模式
	setScanMode(0x07);
 8004e68:	2107      	movs	r1, #7
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f830 	bl	8004ed0 <_ZN7MAX721911setScanModeEh>
	//打开译码模式
	setDecodeMode(DECODE_D0_D7);
 8004e70:	21ff      	movs	r1, #255	; 0xff
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f81c 	bl	8004eb0 <_ZN7MAX721913setDecodeModeEh>
}
 8004e78:	bf00      	nop
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <_ZN7MAX721911setWorkModeEb>:
		max7219Send(DISPLAY_TEST, 0x01);
	else
		max7219Send(DISPLAY_TEST, 0x00);
}

void MAX7219::setWorkMode(bool status){
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	70fb      	strb	r3, [r7, #3]
	if(status)
 8004e8c:	78fb      	ldrb	r3, [r7, #3]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d005      	beq.n	8004e9e <_ZN7MAX721911setWorkModeEb+0x1e>
		max7219Send(SHUT_DOWN, 1);
 8004e92:	2201      	movs	r2, #1
 8004e94:	210c      	movs	r1, #12
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7ff ffb0 	bl	8004dfc <_ZN7MAX721911max7219SendEhh>
	else
		max7219Send(SHUT_DOWN, 0);
}
 8004e9c:	e004      	b.n	8004ea8 <_ZN7MAX721911setWorkModeEb+0x28>
		max7219Send(SHUT_DOWN, 0);
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	210c      	movs	r1, #12
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7ff ffaa 	bl	8004dfc <_ZN7MAX721911max7219SendEhh>
}
 8004ea8:	bf00      	nop
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <_ZN7MAX721913setDecodeModeEh>:

void MAX7219::setDecodeMode(uint8_t mode){
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	460b      	mov	r3, r1
 8004eba:	70fb      	strb	r3, [r7, #3]
	max7219Send(DECODE_MODE, mode);
 8004ebc:	78fb      	ldrb	r3, [r7, #3]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	2109      	movs	r1, #9
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7ff ff9a 	bl	8004dfc <_ZN7MAX721911max7219SendEhh>
}
 8004ec8:	bf00      	nop
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <_ZN7MAX721911setScanModeEh>:

void MAX7219::setScanMode(uint8_t mode){
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	70fb      	strb	r3, [r7, #3]
	max7219Send(SCAN_LIMIT, mode);
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	210b      	movs	r1, #11
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7ff ff8a 	bl	8004dfc <_ZN7MAX721911max7219SendEhh>
}
 8004ee8:	bf00      	nop
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004ef0:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004ef2:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 8004ef6:	480e      	ldr	r0, [pc, #56]	; (8004f30 <MX_SPI1_Init+0x40>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004ef8:	4a0e      	ldr	r2, [pc, #56]	; (8004f34 <MX_SPI1_Init+0x44>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004efa:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004efe:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8004f02:	2300      	movs	r3, #0
 8004f04:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f08:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8004f0c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f10:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004f14:	2210      	movs	r2, #16
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f16:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004f18:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004f1a:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8004f1e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004f20:	f001 fc3c 	bl	800679c <HAL_SPI_Init>
 8004f24:	b118      	cbz	r0, 8004f2e <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004f26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004f2a:	f7ff bd70 	b.w	8004a0e <Error_Handler>
}
 8004f2e:	bd08      	pop	{r3, pc}
 8004f30:	20000378 	.word	0x20000378
 8004f34:	40013000 	.word	0x40013000

08004f38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004f38:	b510      	push	{r4, lr}
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f3e:	2210      	movs	r2, #16
 8004f40:	2100      	movs	r1, #0
 8004f42:	a802      	add	r0, sp, #8
 8004f44:	f003 fd48 	bl	80089d8 <memset>
  if(spiHandle->Instance==SPI1)
 8004f48:	6822      	ldr	r2, [r4, #0]
 8004f4a:	4b11      	ldr	r3, [pc, #68]	; (8004f90 <HAL_SPI_MspInit+0x58>)
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d11d      	bne.n	8004f8c <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f50:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8004f54:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f56:	480f      	ldr	r0, [pc, #60]	; (8004f94 <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f5c:	619a      	str	r2, [r3, #24]
 8004f5e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f60:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f62:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004f66:	9200      	str	r2, [sp, #0]
 8004f68:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f6a:	699a      	ldr	r2, [r3, #24]
 8004f6c:	f042 0204 	orr.w	r2, r2, #4
 8004f70:	619a      	str	r2, [r3, #24]
 8004f72:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f74:	22a0      	movs	r2, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	9301      	str	r3, [sp, #4]
 8004f7c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f84:	2303      	movs	r3, #3
 8004f86:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f88:	f000 f95c 	bl	8005244 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004f8c:	b006      	add	sp, #24
 8004f8e:	bd10      	pop	{r4, pc}
 8004f90:	40013000 	.word	0x40013000
 8004f94:	40010800 	.word	0x40010800

08004f98 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004f98:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <HAL_MspInit+0x2c>)
{
 8004f9a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004f9c:	699a      	ldr	r2, [r3, #24]
 8004f9e:	f042 0201 	orr.w	r2, r2, #1
 8004fa2:	619a      	str	r2, [r3, #24]
 8004fa4:	699a      	ldr	r2, [r3, #24]
 8004fa6:	f002 0201 	and.w	r2, r2, #1
 8004faa:	9200      	str	r2, [sp, #0]
 8004fac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fae:	69da      	ldr	r2, [r3, #28]
 8004fb0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004fb4:	61da      	str	r2, [r3, #28]
 8004fb6:	69db      	ldr	r3, [r3, #28]
 8004fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fbc:	9301      	str	r3, [sp, #4]
 8004fbe:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004fc0:	b002      	add	sp, #8
 8004fc2:	4770      	bx	lr
 8004fc4:	40021000 	.word	0x40021000

08004fc8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004fc8:	e7fe      	b.n	8004fc8 <NMI_Handler>

08004fca <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004fca:	e7fe      	b.n	8004fca <HardFault_Handler>

08004fcc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004fcc:	e7fe      	b.n	8004fcc <MemManage_Handler>

08004fce <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004fce:	e7fe      	b.n	8004fce <BusFault_Handler>

08004fd0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fd0:	e7fe      	b.n	8004fd0 <UsageFault_Handler>

08004fd2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004fd2:	4770      	bx	lr

08004fd4 <DebugMon_Handler>:
 8004fd4:	4770      	bx	lr

08004fd6 <PendSV_Handler>:
 8004fd6:	4770      	bx	lr

08004fd8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004fd8:	f000 b8bc 	b.w	8005154 <HAL_IncTick>

08004fdc <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004fdc:	4801      	ldr	r0, [pc, #4]	; (8004fe4 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8004fde:	f000 bab5 	b.w	800554c <HAL_PCD_IRQHandler>
 8004fe2:	bf00      	nop
 8004fe4:	200010a0 	.word	0x200010a0

08004fe8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8004fe8:	2001      	movs	r0, #1
 8004fea:	4770      	bx	lr

08004fec <_kill>:

int _kill(int pid, int sig)
{
 8004fec:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004fee:	f003 fc83 	bl	80088f8 <__errno>
 8004ff2:	2316      	movs	r3, #22
 8004ff4:	6003      	str	r3, [r0, #0]
  return -1;
}
 8004ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffa:	bd08      	pop	{r3, pc}

08004ffc <_exit>:

void _exit (int status)
{
 8004ffc:	b508      	push	{r3, lr}
  errno = EINVAL;
 8004ffe:	f003 fc7b 	bl	80088f8 <__errno>
 8005002:	2316      	movs	r3, #22
 8005004:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8005006:	e7fe      	b.n	8005006 <_exit+0xa>

08005008 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005008:	b570      	push	{r4, r5, r6, lr}
 800500a:	460d      	mov	r5, r1
 800500c:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800500e:	460e      	mov	r6, r1
 8005010:	1b73      	subs	r3, r6, r5
 8005012:	429c      	cmp	r4, r3
 8005014:	dc01      	bgt.n	800501a <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8005016:	4620      	mov	r0, r4
 8005018:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800501a:	f3af 8000 	nop.w
 800501e:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005022:	e7f5      	b.n	8005010 <_read+0x8>

08005024 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005024:	b570      	push	{r4, r5, r6, lr}
 8005026:	460d      	mov	r5, r1
 8005028:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800502a:	460e      	mov	r6, r1
 800502c:	1b73      	subs	r3, r6, r5
 800502e:	429c      	cmp	r4, r3
 8005030:	dc01      	bgt.n	8005036 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8005032:	4620      	mov	r0, r4
 8005034:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8005036:	f816 0b01 	ldrb.w	r0, [r6], #1
 800503a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800503e:	e7f5      	b.n	800502c <_write+0x8>

08005040 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8005040:	f04f 30ff 	mov.w	r0, #4294967295
 8005044:	4770      	bx	lr

08005046 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8005046:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 800504a:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 800504c:	604b      	str	r3, [r1, #4]
}
 800504e:	4770      	bx	lr

08005050 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8005050:	2001      	movs	r0, #1
 8005052:	4770      	bx	lr

08005054 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8005054:	2000      	movs	r0, #0
 8005056:	4770      	bx	lr

08005058 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005058:	4a0b      	ldr	r2, [pc, #44]	; (8005088 <_sbrk+0x30>)
{
 800505a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800505c:	6811      	ldr	r1, [r2, #0]
{
 800505e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8005060:	b909      	cbnz	r1, 8005066 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8005062:	490a      	ldr	r1, [pc, #40]	; (800508c <_sbrk+0x34>)
 8005064:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005066:	6810      	ldr	r0, [r2, #0]
 8005068:	4909      	ldr	r1, [pc, #36]	; (8005090 <_sbrk+0x38>)
 800506a:	4c0a      	ldr	r4, [pc, #40]	; (8005094 <_sbrk+0x3c>)
 800506c:	4403      	add	r3, r0
 800506e:	1b09      	subs	r1, r1, r4
 8005070:	428b      	cmp	r3, r1
 8005072:	d906      	bls.n	8005082 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8005074:	f003 fc40 	bl	80088f8 <__errno>
 8005078:	230c      	movs	r3, #12
 800507a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800507c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8005080:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8005082:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8005084:	e7fc      	b.n	8005080 <_sbrk+0x28>
 8005086:	bf00      	nop
 8005088:	200003d0 	.word	0x200003d0
 800508c:	200015c8 	.word	0x200015c8
 8005090:	20005000 	.word	0x20005000
 8005094:	00000400 	.word	0x00000400

08005098 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005098:	4770      	bx	lr
	...

0800509c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800509c:	f7ff fffc 	bl	8005098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050a0:	480b      	ldr	r0, [pc, #44]	; (80050d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80050a2:	490c      	ldr	r1, [pc, #48]	; (80050d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80050a4:	4a0c      	ldr	r2, [pc, #48]	; (80050d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80050a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050a8:	e002      	b.n	80050b0 <LoopCopyDataInit>

080050aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050ae:	3304      	adds	r3, #4

080050b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050b4:	d3f9      	bcc.n	80050aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050b6:	4a09      	ldr	r2, [pc, #36]	; (80050dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80050b8:	4c09      	ldr	r4, [pc, #36]	; (80050e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80050ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050bc:	e001      	b.n	80050c2 <LoopFillZerobss>

080050be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050c0:	3204      	adds	r2, #4

080050c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050c4:	d3fb      	bcc.n	80050be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80050c6:	f003 fc1d 	bl	8008904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80050ca:	f7ff fbd9 	bl	8004880 <main>
  bx lr
 80050ce:	4770      	bx	lr
  ldr r0, =_sdata
 80050d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050d4:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 80050d8:	0800c52c 	.word	0x0800c52c
  ldr r2, =_sbss
 80050dc:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 80050e0:	200015c4 	.word	0x200015c4

080050e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80050e4:	e7fe      	b.n	80050e4 <ADC1_2_IRQHandler>
	...

080050e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050e8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80050ea:	4b0e      	ldr	r3, [pc, #56]	; (8005124 <HAL_InitTick+0x3c>)
{
 80050ec:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80050ee:	7818      	ldrb	r0, [r3, #0]
 80050f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050f4:	fbb3 f3f0 	udiv	r3, r3, r0
 80050f8:	4a0b      	ldr	r2, [pc, #44]	; (8005128 <HAL_InitTick+0x40>)
 80050fa:	6810      	ldr	r0, [r2, #0]
 80050fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8005100:	f000 f88c 	bl	800521c <HAL_SYSTICK_Config>
 8005104:	4604      	mov	r4, r0
 8005106:	b958      	cbnz	r0, 8005120 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005108:	2d0f      	cmp	r5, #15
 800510a:	d809      	bhi.n	8005120 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800510c:	4602      	mov	r2, r0
 800510e:	4629      	mov	r1, r5
 8005110:	f04f 30ff 	mov.w	r0, #4294967295
 8005114:	f000 f842 	bl	800519c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005118:	4620      	mov	r0, r4
 800511a:	4b04      	ldr	r3, [pc, #16]	; (800512c <HAL_InitTick+0x44>)
 800511c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800511e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005120:	2001      	movs	r0, #1
 8005122:	e7fc      	b.n	800511e <HAL_InitTick+0x36>
 8005124:	20000004 	.word	0x20000004
 8005128:	20000000 	.word	0x20000000
 800512c:	20000008 	.word	0x20000008

08005130 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005130:	4a07      	ldr	r2, [pc, #28]	; (8005150 <HAL_Init+0x20>)
{
 8005132:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005134:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005136:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005138:	f043 0310 	orr.w	r3, r3, #16
 800513c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800513e:	f000 f81b 	bl	8005178 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8005142:	200f      	movs	r0, #15
 8005144:	f7ff ffd0 	bl	80050e8 <HAL_InitTick>
  HAL_MspInit();
 8005148:	f7ff ff26 	bl	8004f98 <HAL_MspInit>
}
 800514c:	2000      	movs	r0, #0
 800514e:	bd08      	pop	{r3, pc}
 8005150:	40022000 	.word	0x40022000

08005154 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005154:	4a03      	ldr	r2, [pc, #12]	; (8005164 <HAL_IncTick+0x10>)
 8005156:	4b04      	ldr	r3, [pc, #16]	; (8005168 <HAL_IncTick+0x14>)
 8005158:	6811      	ldr	r1, [r2, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	440b      	add	r3, r1
 800515e:	6013      	str	r3, [r2, #0]
}
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	200003d4 	.word	0x200003d4
 8005168:	20000004 	.word	0x20000004

0800516c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800516c:	4b01      	ldr	r3, [pc, #4]	; (8005174 <HAL_GetTick+0x8>)
 800516e:	6818      	ldr	r0, [r3, #0]
}
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	200003d4 	.word	0x200003d4

08005178 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005178:	4907      	ldr	r1, [pc, #28]	; (8005198 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800517a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800517c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800517e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005182:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005186:	0412      	lsls	r2, r2, #16
 8005188:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800518a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800518c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005194:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005196:	4770      	bx	lr
 8005198:	e000ed00 	.word	0xe000ed00

0800519c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800519c:	4b16      	ldr	r3, [pc, #88]	; (80051f8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800519e:	b530      	push	{r4, r5, lr}
 80051a0:	68dc      	ldr	r4, [r3, #12]
 80051a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051a6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051aa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	bf28      	it	cs
 80051b0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051b2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051b4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051b8:	bf98      	it	ls
 80051ba:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051bc:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051c0:	bf88      	it	hi
 80051c2:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051c4:	ea21 0303 	bic.w	r3, r1, r3
 80051c8:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051ca:	fa05 f404 	lsl.w	r4, r5, r4
 80051ce:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80051d2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051d4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051d8:	bfac      	ite	ge
 80051da:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051de:	4a07      	ldrlt	r2, [pc, #28]	; (80051fc <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051e0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	bfab      	itete	ge
 80051e8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051ec:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051f0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051f4:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80051f6:	bd30      	pop	{r4, r5, pc}
 80051f8:	e000ed00 	.word	0xe000ed00
 80051fc:	e000ed14 	.word	0xe000ed14

08005200 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005200:	2800      	cmp	r0, #0
 8005202:	db08      	blt.n	8005216 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005204:	2301      	movs	r3, #1
 8005206:	0942      	lsrs	r2, r0, #5
 8005208:	f000 001f 	and.w	r0, r0, #31
 800520c:	fa03 f000 	lsl.w	r0, r3, r0
 8005210:	4b01      	ldr	r3, [pc, #4]	; (8005218 <HAL_NVIC_EnableIRQ+0x18>)
 8005212:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005216:	4770      	bx	lr
 8005218:	e000e100 	.word	0xe000e100

0800521c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800521c:	3801      	subs	r0, #1
 800521e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005222:	d20b      	bcs.n	800523c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005224:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005228:	21f0      	movs	r1, #240	; 0xf0
 800522a:	4a05      	ldr	r2, [pc, #20]	; (8005240 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800522c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800522e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005232:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005234:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005236:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005238:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800523a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800523c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800523e:	4770      	bx	lr
 8005240:	e000ed00 	.word	0xe000ed00

08005244 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005244:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005248:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 800524a:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800524c:	4f64      	ldr	r7, [pc, #400]	; (80053e0 <HAL_GPIO_Init+0x19c>)
 800524e:	4b65      	ldr	r3, [pc, #404]	; (80053e4 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8005250:	f8df c194 	ldr.w	ip, [pc, #404]	; 80053e8 <HAL_GPIO_Init+0x1a4>
 8005254:	f8df e194 	ldr.w	lr, [pc, #404]	; 80053ec <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005258:	680d      	ldr	r5, [r1, #0]
 800525a:	fa35 f406 	lsrs.w	r4, r5, r6
 800525e:	d102      	bne.n	8005266 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8005260:	b003      	add	sp, #12
 8005262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8005266:	f04f 0801 	mov.w	r8, #1
 800526a:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800526e:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8005272:	ea38 0505 	bics.w	r5, r8, r5
 8005276:	d17b      	bne.n	8005370 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8005278:	684d      	ldr	r5, [r1, #4]
 800527a:	2d03      	cmp	r5, #3
 800527c:	d807      	bhi.n	800528e <HAL_GPIO_Init+0x4a>
 800527e:	3d01      	subs	r5, #1
 8005280:	2d02      	cmp	r5, #2
 8005282:	f200 8088 	bhi.w	8005396 <HAL_GPIO_Init+0x152>
 8005286:	e8df f005 	tbb	[pc, r5]
 800528a:	9b96      	.short	0x9b96
 800528c:	a1          	.byte	0xa1
 800528d:	00          	.byte	0x00
 800528e:	2d12      	cmp	r5, #18
 8005290:	f000 8099 	beq.w	80053c6 <HAL_GPIO_Init+0x182>
 8005294:	d86e      	bhi.n	8005374 <HAL_GPIO_Init+0x130>
 8005296:	2d11      	cmp	r5, #17
 8005298:	f000 808f 	beq.w	80053ba <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800529c:	2cff      	cmp	r4, #255	; 0xff
 800529e:	bf98      	it	ls
 80052a0:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80052a2:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80052a6:	bf88      	it	hi
 80052a8:	f100 0a04 	addhi.w	sl, r0, #4
 80052ac:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80052b0:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80052b4:	bf88      	it	hi
 80052b6:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80052b8:	fa09 fb05 	lsl.w	fp, r9, r5
 80052bc:	ea28 080b 	bic.w	r8, r8, fp
 80052c0:	fa02 f505 	lsl.w	r5, r2, r5
 80052c4:	ea48 0505 	orr.w	r5, r8, r5
 80052c8:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80052cc:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80052d0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80052d4:	d04c      	beq.n	8005370 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80052d6:	69bd      	ldr	r5, [r7, #24]
 80052d8:	f026 0803 	bic.w	r8, r6, #3
 80052dc:	f045 0501 	orr.w	r5, r5, #1
 80052e0:	61bd      	str	r5, [r7, #24]
 80052e2:	69bd      	ldr	r5, [r7, #24]
 80052e4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80052e8:	f005 0501 	and.w	r5, r5, #1
 80052ec:	9501      	str	r5, [sp, #4]
 80052ee:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80052f2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80052f6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80052f8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80052fc:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005300:	fa09 f90b 	lsl.w	r9, r9, fp
 8005304:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005308:	4d39      	ldr	r5, [pc, #228]	; (80053f0 <HAL_GPIO_Init+0x1ac>)
 800530a:	42a8      	cmp	r0, r5
 800530c:	d062      	beq.n	80053d4 <HAL_GPIO_Init+0x190>
 800530e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005312:	42a8      	cmp	r0, r5
 8005314:	d060      	beq.n	80053d8 <HAL_GPIO_Init+0x194>
 8005316:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800531a:	42a8      	cmp	r0, r5
 800531c:	d05e      	beq.n	80053dc <HAL_GPIO_Init+0x198>
 800531e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005322:	42a8      	cmp	r0, r5
 8005324:	bf0c      	ite	eq
 8005326:	2503      	moveq	r5, #3
 8005328:	2504      	movne	r5, #4
 800532a:	fa05 f50b 	lsl.w	r5, r5, fp
 800532e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8005332:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8005336:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005338:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800533c:	bf14      	ite	ne
 800533e:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005340:	43a5      	biceq	r5, r4
 8005342:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8005344:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005346:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800534a:	bf14      	ite	ne
 800534c:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800534e:	43a5      	biceq	r5, r4
 8005350:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8005352:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005354:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8005358:	bf14      	ite	ne
 800535a:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800535c:	43a5      	biceq	r5, r4
 800535e:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8005360:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005362:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8005366:	bf14      	ite	ne
 8005368:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800536a:	ea25 0404 	biceq.w	r4, r5, r4
 800536e:	601c      	str	r4, [r3, #0]
	position++;
 8005370:	3601      	adds	r6, #1
 8005372:	e771      	b.n	8005258 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8005374:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80053f4 <HAL_GPIO_Init+0x1b0>
 8005378:	454d      	cmp	r5, r9
 800537a:	d00c      	beq.n	8005396 <HAL_GPIO_Init+0x152>
 800537c:	d817      	bhi.n	80053ae <HAL_GPIO_Init+0x16a>
 800537e:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8005382:	454d      	cmp	r5, r9
 8005384:	d007      	beq.n	8005396 <HAL_GPIO_Init+0x152>
 8005386:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 800538a:	454d      	cmp	r5, r9
 800538c:	d003      	beq.n	8005396 <HAL_GPIO_Init+0x152>
 800538e:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8005392:	454d      	cmp	r5, r9
 8005394:	d182      	bne.n	800529c <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005396:	688a      	ldr	r2, [r1, #8]
 8005398:	b1d2      	cbz	r2, 80053d0 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800539a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800539c:	bf08      	it	eq
 800539e:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80053a2:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 80053a6:	bf18      	it	ne
 80053a8:	f8c0 8014 	strne.w	r8, [r0, #20]
 80053ac:	e776      	b.n	800529c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80053ae:	4565      	cmp	r5, ip
 80053b0:	d0f1      	beq.n	8005396 <HAL_GPIO_Init+0x152>
 80053b2:	4575      	cmp	r5, lr
 80053b4:	e7ee      	b.n	8005394 <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80053b6:	68ca      	ldr	r2, [r1, #12]
          break;
 80053b8:	e770      	b.n	800529c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80053ba:	68ca      	ldr	r2, [r1, #12]
 80053bc:	3204      	adds	r2, #4
          break;
 80053be:	e76d      	b.n	800529c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80053c0:	68ca      	ldr	r2, [r1, #12]
 80053c2:	3208      	adds	r2, #8
          break;
 80053c4:	e76a      	b.n	800529c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80053c6:	68ca      	ldr	r2, [r1, #12]
 80053c8:	320c      	adds	r2, #12
          break;
 80053ca:	e767      	b.n	800529c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80053cc:	2200      	movs	r2, #0
 80053ce:	e765      	b.n	800529c <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80053d0:	2204      	movs	r2, #4
 80053d2:	e763      	b.n	800529c <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80053d4:	2500      	movs	r5, #0
 80053d6:	e7a8      	b.n	800532a <HAL_GPIO_Init+0xe6>
 80053d8:	2501      	movs	r5, #1
 80053da:	e7a6      	b.n	800532a <HAL_GPIO_Init+0xe6>
 80053dc:	2502      	movs	r5, #2
 80053de:	e7a4      	b.n	800532a <HAL_GPIO_Init+0xe6>
 80053e0:	40021000 	.word	0x40021000
 80053e4:	40010400 	.word	0x40010400
 80053e8:	10310000 	.word	0x10310000
 80053ec:	10320000 	.word	0x10320000
 80053f0:	40010800 	.word	0x40010800
 80053f4:	10220000 	.word	0x10220000

080053f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053f8:	b10a      	cbz	r2, 80053fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80053fa:	6101      	str	r1, [r0, #16]
  }
}
 80053fc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80053fe:	0409      	lsls	r1, r1, #16
 8005400:	e7fb      	b.n	80053fa <HAL_GPIO_WritePin+0x2>

08005402 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005402:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005404:	4604      	mov	r4, r0
{
 8005406:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8005408:	b310      	cbz	r0, 8005450 <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800540a:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 800540e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005412:	b91b      	cbnz	r3, 800541c <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005414:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005418:	f002 fe04 	bl	8008024 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800541c:	2303      	movs	r3, #3
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800541e:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005420:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 8005422:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8005426:	f855 0b10 	ldr.w	r0, [r5], #16
 800542a:	f001 fad3 	bl	80069d4 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800542e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005430:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005432:	682b      	ldr	r3, [r5, #0]
 8005434:	1d27      	adds	r7, r4, #4
 8005436:	6033      	str	r3, [r6, #0]
 8005438:	4626      	mov	r6, r4
 800543a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800543e:	f856 0b10 	ldr.w	r0, [r6], #16
 8005442:	f001 fab7 	bl	80069b4 <USB_CoreInit>
 8005446:	4605      	mov	r5, r0
 8005448:	b120      	cbz	r0, 8005454 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800544a:	2302      	movs	r3, #2
 800544c:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8005450:	2501      	movs	r5, #1
 8005452:	e04b      	b.n	80054ec <HAL_PCD_Init+0xea>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005454:	4601      	mov	r1, r0
 8005456:	6820      	ldr	r0, [r4, #0]
 8005458:	f001 fac6 	bl	80069e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800545c:	4629      	mov	r1, r5
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800545e:	f04f 0e01 	mov.w	lr, #1
 8005462:	2528      	movs	r5, #40	; 0x28
    hpcd->IN_ep[i].num = i;
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005464:	460a      	mov	r2, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005466:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800546a:	b2c8      	uxtb	r0, r1
 800546c:	4584      	cmp	ip, r0
 800546e:	f101 0101 	add.w	r1, r1, #1
 8005472:	d81b      	bhi.n	80054ac <HAL_PCD_Init+0xaa>
 8005474:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005476:	2528      	movs	r5, #40	; 0x28
 8005478:	4619      	mov	r1, r3
 800547a:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800547c:	4584      	cmp	ip, r0
 800547e:	f103 0301 	add.w	r3, r3, #1
 8005482:	d81f      	bhi.n	80054c4 <HAL_PCD_Init+0xc2>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005484:	46ec      	mov	ip, sp
 8005486:	4635      	mov	r5, r6
 8005488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800548a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800548e:	682b      	ldr	r3, [r5, #0]
 8005490:	f8cc 3000 	str.w	r3, [ip]
 8005494:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8005498:	6820      	ldr	r0, [r4, #0]
 800549a:	f001 faa7 	bl	80069ec <USB_DevInit>
 800549e:	2301      	movs	r3, #1
 80054a0:	4605      	mov	r5, r0
 80054a2:	b1e0      	cbz	r0, 80054de <HAL_PCD_Init+0xdc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054a4:	2202      	movs	r2, #2
 80054a6:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 80054aa:	e7d1      	b.n	8005450 <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 80054ac:	fb05 4300 	mla	r3, r5, r0, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 80054b0:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 80054b4:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 80054b8:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80054bc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 80054c0:	641a      	str	r2, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054c2:	e7d2      	b.n	800546a <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 80054c4:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80054c8:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 80054cc:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 80054d0:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80054d4:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 80054d8:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054dc:	e7cd      	b.n	800547a <HAL_PCD_Init+0x78>
  }

  hpcd->USB_Address = 0U;
 80054de:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);
 80054e2:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80054e4:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80054e8:	f001 fd38 	bl	8006f5c <USB_DevDisconnect>

  return HAL_OK;
}
 80054ec:	4628      	mov	r0, r5
 80054ee:	b007      	add	sp, #28
 80054f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054f2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80054f2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80054f4:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 80054f8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d010      	beq.n	8005520 <HAL_PCD_Start+0x2e>
 80054fe:	2501      	movs	r5, #1
 8005500:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005504:	6800      	ldr	r0, [r0, #0]
 8005506:	f001 fa5c 	bl	80069c2 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800550a:	4629      	mov	r1, r5
 800550c:	4620      	mov	r0, r4
 800550e:	f002 fe94 	bl	800823a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005512:	6820      	ldr	r0, [r4, #0]
 8005514:	f001 fd20 	bl	8006f58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005518:	2000      	movs	r0, #0
 800551a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 800551e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8005520:	2002      	movs	r0, #2
 8005522:	e7fc      	b.n	800551e <HAL_PCD_Start+0x2c>

08005524 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005524:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8005526:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 800552a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800552c:	2a01      	cmp	r2, #1
 800552e:	d00b      	beq.n	8005548 <HAL_PCD_SetAddress+0x24>
 8005530:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8005532:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8005536:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800553a:	6800      	ldr	r0, [r0, #0]
 800553c:	f001 fd06 	bl	8006f4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005540:	2000      	movs	r0, #0
 8005542:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8005546:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8005548:	2002      	movs	r0, #2
 800554a:	e7fc      	b.n	8005546 <HAL_PCD_SetAddress+0x22>

0800554c <HAL_PCD_IRQHandler>:
{
 800554c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005550:	4604      	mov	r4, r0
 8005552:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005554:	6800      	ldr	r0, [r0, #0]
 8005556:	f001 fd03 	bl	8006f60 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800555a:	f410 4500 	ands.w	r5, r0, #32768	; 0x8000
 800555e:	f000 8428 	beq.w	8005db2 <HAL_PCD_IRQHandler+0x866>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005562:	f8df 9320 	ldr.w	r9, [pc, #800]	; 8005884 <HAL_PCD_IRQHandler+0x338>
 8005566:	f8df 8320 	ldr.w	r8, [pc, #800]	; 8005888 <HAL_PCD_IRQHandler+0x33c>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800556a:	6820      	ldr	r0, [r4, #0]
 800556c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8005570:	041f      	lsls	r7, r3, #16
 8005572:	d402      	bmi.n	800557a <HAL_PCD_IRQHandler+0x2e>
}
 8005574:	b005      	add	sp, #20
 8005576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 800557a:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 800557e:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 8005580:	f016 060f 	ands.w	r6, r6, #15
 8005584:	f040 80c6 	bne.w	8005714 <HAL_PCD_IRQHandler+0x1c8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005588:	f011 0110 	ands.w	r1, r1, #16
 800558c:	d12b      	bne.n	80055e6 <HAL_PCD_IRQHandler+0x9a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800558e:	8803      	ldrh	r3, [r0, #0]
 8005590:	b29b      	uxth	r3, r3
 8005592:	ea03 0309 	and.w	r3, r3, r9
 8005596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800559a:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800559c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80055a0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055aa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80055ae:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 80055b2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80055b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055b8:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80055ba:	4413      	add	r3, r2
 80055bc:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80055be:	4620      	mov	r0, r4
 80055c0:	f002 fd5f 	bl	8008082 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80055c4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0ce      	beq.n	800556a <HAL_PCD_IRQHandler+0x1e>
 80055cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80055ce:	2a00      	cmp	r2, #0
 80055d0:	d1cb      	bne.n	800556a <HAL_PCD_IRQHandler+0x1e>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80055d2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80055d6:	6821      	ldr	r1, [r4, #0]
 80055d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055dc:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80055e0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 80055e4:	e7c1      	b.n	800556a <HAL_PCD_IRQHandler+0x1e>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80055e6:	8805      	ldrh	r5, [r0, #0]
 80055e8:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80055ea:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 80055ee:	d021      	beq.n	8005634 <HAL_PCD_IRQHandler+0xe8>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80055f0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80055f4:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055fe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005602:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005606:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 800560a:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800560e:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005612:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8005616:	f001 fef1 	bl	80073fc <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800561a:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800561c:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800561e:	8813      	ldrh	r3, [r2, #0]
 8005620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005624:	051b      	lsls	r3, r3, #20
 8005626:	0d1b      	lsrs	r3, r3, #20
 8005628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800562c:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800562e:	f002 fd19 	bl	8008064 <HAL_PCD_SetupStageCallback>
 8005632:	e79a      	b.n	800556a <HAL_PCD_IRQHandler+0x1e>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005634:	0419      	lsls	r1, r3, #16
 8005636:	d598      	bpl.n	800556a <HAL_PCD_IRQHandler+0x1e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005638:	8803      	ldrh	r3, [r0, #0]
 800563a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563e:	051b      	lsls	r3, r3, #20
 8005640:	0d1b      	lsrs	r3, r3, #20
 8005642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005646:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005648:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800564c:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8005650:	b29b      	uxth	r3, r3
 8005652:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005656:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800565a:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 800565e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005662:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005666:	b18b      	cbz	r3, 800568c <HAL_PCD_IRQHandler+0x140>
 8005668:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 800566c:	b171      	cbz	r1, 800568c <HAL_PCD_IRQHandler+0x140>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800566e:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8005672:	f001 fec3 	bl	80073fc <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8005676:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800567a:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800567e:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8005680:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005682:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8005684:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005688:	f002 fcf2 	bl	8008070 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800568c:	6821      	ldr	r1, [r4, #0]
 800568e:	880a      	ldrh	r2, [r1, #0]
 8005690:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005692:	0512      	lsls	r2, r2, #20
 8005694:	f53f af69 	bmi.w	800556a <HAL_PCD_IRQHandler+0x1e>
 8005698:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800569c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056a0:	f43f af63 	beq.w	800556a <HAL_PCD_IRQHandler+0x1e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80056a4:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80056a8:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	5ac2      	ldrh	r2, [r0, r3]
 80056b0:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 80056b4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80056b8:	2d3e      	cmp	r5, #62	; 0x3e
 80056ba:	52c2      	strh	r2, [r0, r3]
 80056bc:	d90c      	bls.n	80056d8 <HAL_PCD_IRQHandler+0x18c>
 80056be:	5ac2      	ldrh	r2, [r0, r3]
 80056c0:	096e      	lsrs	r6, r5, #5
 80056c2:	06ef      	lsls	r7, r5, #27
 80056c4:	bf08      	it	eq
 80056c6:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80056ca:	b292      	uxth	r2, r2
 80056cc:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80056d0:	ea42 0208 	orr.w	r2, r2, r8
 80056d4:	b292      	uxth	r2, r2
 80056d6:	e004      	b.n	80056e2 <HAL_PCD_IRQHandler+0x196>
 80056d8:	b99d      	cbnz	r5, 8005702 <HAL_PCD_IRQHandler+0x1b6>
 80056da:	5ac2      	ldrh	r2, [r0, r3]
 80056dc:	b292      	uxth	r2, r2
 80056de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056e2:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80056e4:	880b      	ldrh	r3, [r1, #0]
 80056e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ee:	041b      	lsls	r3, r3, #16
 80056f0:	0c1b      	lsrs	r3, r3, #16
 80056f2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80056f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056fe:	800b      	strh	r3, [r1, #0]
 8005700:	e733      	b.n	800556a <HAL_PCD_IRQHandler+0x1e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005702:	5ac2      	ldrh	r2, [r0, r3]
 8005704:	086e      	lsrs	r6, r5, #1
 8005706:	07ed      	lsls	r5, r5, #31
 8005708:	bf48      	it	mi
 800570a:	3601      	addmi	r6, #1
 800570c:	b292      	uxth	r2, r2
 800570e:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8005712:	e7df      	b.n	80056d4 <HAL_PCD_IRQHandler+0x188>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005714:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005718:	041a      	lsls	r2, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800571a:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800571c:	f140 80f4 	bpl.w	8005908 <HAL_PCD_IRQHandler+0x3bc>
        if (ep->doublebuffer == 0U)
 8005720:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005722:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8005726:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800572a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572e:	051b      	lsls	r3, r3, #20
 8005730:	0d1b      	lsrs	r3, r3, #20
 8005732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005736:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800573a:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 800573e:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8005742:	b9b3      	cbnz	r3, 8005772 <HAL_PCD_IRQHandler+0x226>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005744:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005748:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 800574c:	b29b      	uxth	r3, r3
 800574e:	3306      	adds	r3, #6
 8005750:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005754:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8005758:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 800575c:	2d00      	cmp	r5, #0
 800575e:	f000 80b7 	beq.w	80058d0 <HAL_PCD_IRQHandler+0x384>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005762:	462b      	mov	r3, r5
 8005764:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005768:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800576c:	f001 fe46 	bl	80073fc <USB_ReadPMA>
 8005770:	e0ae      	b.n	80058d0 <HAL_PCD_IRQHandler+0x384>
          if (ep->type == EP_TYPE_BULK)
 8005772:	f891 216b 	ldrb.w	r2, [r1, #363]	; 0x16b
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005776:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
          if (ep->type == EP_TYPE_BULK)
 800577a:	2a02      	cmp	r2, #2
 800577c:	f040 8086 	bne.w	800588c <HAL_PCD_IRQHandler+0x340>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005780:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005784:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000

    if (ep->xfer_len >= count)
 8005788:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800578c:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005790:	b2ad      	uxth	r5, r5
 8005792:	f007 0e40 	and.w	lr, r7, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005796:	d03b      	beq.n	8005810 <HAL_PCD_IRQHandler+0x2c4>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005798:	44ab      	add	fp, r5
 800579a:	f10b 0b02 	add.w	fp, fp, #2
 800579e:	f83c 501b 	ldrh.w	r5, [ip, fp, lsl #1]
 80057a2:	f3c5 0509 	ubfx	r5, r5, #0, #10
    if (ep->xfer_len >= count)
 80057a6:	4295      	cmp	r5, r2
 80057a8:	d913      	bls.n	80057d2 <HAL_PCD_IRQHandler+0x286>
 80057aa:	2200      	movs	r2, #0
 80057ac:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80057b0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80057b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80057bc:	0412      	lsls	r2, r2, #16
 80057be:	0c12      	lsrs	r2, r2, #16
 80057c0:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 80057c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057cc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 80057d0:	e004      	b.n	80057dc <HAL_PCD_IRQHandler+0x290>
      ep->xfer_len -= count;
 80057d2:	1b52      	subs	r2, r2, r5
 80057d4:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80057d8:	2a00      	cmp	r2, #0
 80057da:	d0e9      	beq.n	80057b0 <HAL_PCD_IRQHandler+0x264>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80057dc:	f1be 0f00 	cmp.w	lr, #0
 80057e0:	d00d      	beq.n	80057fe <HAL_PCD_IRQHandler+0x2b2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80057e2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80057e6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80057ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80057ee:	0412      	lsls	r2, r2, #16
 80057f0:	0c12      	lsrs	r2, r2, #16
 80057f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057f6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80057fa:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 80057fe:	2d00      	cmp	r5, #0
 8005800:	d066      	beq.n	80058d0 <HAL_PCD_IRQHandler+0x384>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005802:	2128      	movs	r1, #40	; 0x28
 8005804:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005808:	462b      	mov	r3, r5
 800580a:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 800580e:	e7ab      	b.n	8005768 <HAL_PCD_IRQHandler+0x21c>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005810:	445d      	add	r5, fp
 8005812:	3506      	adds	r5, #6
 8005814:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 8005818:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 800581c:	4295      	cmp	r5, r2
 800581e:	d912      	bls.n	8005846 <HAL_PCD_IRQHandler+0x2fa>
 8005820:	f8c1 a180 	str.w	sl, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005824:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005828:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800582c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005830:	0412      	lsls	r2, r2, #16
 8005832:	0c12      	lsrs	r2, r2, #16
 8005834:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8005838:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800583c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005840:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8005844:	e004      	b.n	8005850 <HAL_PCD_IRQHandler+0x304>
      ep->xfer_len -= count;
 8005846:	1b52      	subs	r2, r2, r5
 8005848:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 800584c:	2a00      	cmp	r2, #0
 800584e:	d0e9      	beq.n	8005824 <HAL_PCD_IRQHandler+0x2d8>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005850:	f1be 0f00 	cmp.w	lr, #0
 8005854:	d10d      	bne.n	8005872 <HAL_PCD_IRQHandler+0x326>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005856:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800585a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800585e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005862:	0412      	lsls	r2, r2, #16
 8005864:	0c12      	lsrs	r2, r2, #16
 8005866:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800586a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800586e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8005872:	b36d      	cbz	r5, 80058d0 <HAL_PCD_IRQHandler+0x384>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005874:	2128      	movs	r1, #40	; 0x28
 8005876:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800587a:	462b      	mov	r3, r5
 800587c:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8005880:	e772      	b.n	8005768 <HAL_PCD_IRQHandler+0x21c>
 8005882:	bf00      	nop
 8005884:	ffff8f0f 	.word	0xffff8f0f
 8005888:	ffff8000 	.word	0xffff8000
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800588c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005890:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005894:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005898:	0412      	lsls	r2, r2, #16
 800589a:	0c12      	lsrs	r2, r2, #16
 800589c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058a0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80058a4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80058a8:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 80058ac:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80058b0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80058b4:	ea4f 02c3 	mov.w	r2, r3, lsl #3
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80058b8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80058bc:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80058be:	d056      	beq.n	800596e <HAL_PCD_IRQHandler+0x422>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80058c0:	3302      	adds	r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 80058c8:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 80058cc:	2d00      	cmp	r5, #0
 80058ce:	d19b      	bne.n	8005808 <HAL_PCD_IRQHandler+0x2bc>
        ep->xfer_count += count;
 80058d0:	2128      	movs	r1, #40	; 0x28
 80058d2:	4371      	muls	r1, r6
 80058d4:	1863      	adds	r3, r4, r1
 80058d6:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 80058da:	442a      	add	r2, r5
 80058dc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 80058e0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80058e4:	442a      	add	r2, r5
 80058e6:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80058ea:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80058ee:	b11a      	cbz	r2, 80058f8 <HAL_PCD_IRQHandler+0x3ac>
 80058f0:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80058f4:	429d      	cmp	r5, r3
 80058f6:	d243      	bcs.n	8005980 <HAL_PCD_IRQHandler+0x434>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80058f8:	2328      	movs	r3, #40	; 0x28
 80058fa:	fb03 4306 	mla	r3, r3, r6, r4
 80058fe:	4620      	mov	r0, r4
 8005900:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8005904:	f002 fbb4 	bl	8008070 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005908:	063b      	lsls	r3, r7, #24
 800590a:	f57f ae2e 	bpl.w	800556a <HAL_PCD_IRQHandler+0x1e>
 800590e:	f04f 0c28 	mov.w	ip, #40	; 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005912:	6820      	ldr	r0, [r4, #0]
 8005914:	fb0c 4506 	mla	r5, ip, r6, r4
 8005918:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 800591c:	b29b      	uxth	r3, r3
 800591e:	ea03 0309 	and.w	r3, r3, r9
 8005922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005926:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 800592a:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800592e:	2b01      	cmp	r3, #1
 8005930:	d150      	bne.n	80059d4 <HAL_PCD_IRQHandler+0x488>
          ep->xfer_len = 0U;
 8005932:	2100      	movs	r1, #0
          if (ep->doublebuffer != 0U)
 8005934:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
          ep->xfer_len = 0U;
 8005938:	6429      	str	r1, [r5, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 800593a:	b393      	cbz	r3, 80059a2 <HAL_PCD_IRQHandler+0x456>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800593c:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8005940:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8005944:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8005948:	d031      	beq.n	80059ae <HAL_PCD_IRQHandler+0x462>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800594a:	bb02      	cbnz	r2, 800598e <HAL_PCD_IRQHandler+0x442>
 800594c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005950:	011b      	lsls	r3, r3, #4
 8005952:	b292      	uxth	r2, r2
 8005954:	f200 4004 	addw	r0, r0, #1028	; 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005958:	4410      	add	r0, r2
 800595a:	5a1a      	ldrh	r2, [r3, r0]
 800595c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005960:	521a      	strh	r2, [r3, r0]
 8005962:	5a1a      	ldrh	r2, [r3, r0]
 8005964:	b292      	uxth	r2, r2
 8005966:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800596a:	521a      	strh	r2, [r3, r0]
 800596c:	e019      	b.n	80059a2 <HAL_PCD_IRQHandler+0x456>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800596e:	3306      	adds	r3, #6
 8005970:	4413      	add	r3, r2
 8005972:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8005976:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 800597a:	2d00      	cmp	r5, #0
 800597c:	d0a8      	beq.n	80058d0 <HAL_PCD_IRQHandler+0x384>
 800597e:	e77c      	b.n	800587a <HAL_PCD_IRQHandler+0x32e>
        ep = &hpcd->OUT_ep[epindex];
 8005980:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005984:	6820      	ldr	r0, [r4, #0]
 8005986:	4421      	add	r1, r4
 8005988:	f001 fb00 	bl	8006f8c <USB_EPStartXfer>
 800598c:	e7bc      	b.n	8005908 <HAL_PCD_IRQHandler+0x3bc>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800598e:	2a01      	cmp	r2, #1
 8005990:	d107      	bne.n	80059a2 <HAL_PCD_IRQHandler+0x456>
 8005992:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005996:	f200 4004 	addw	r0, r0, #1028	; 0x404
 800599a:	b292      	uxth	r2, r2
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	4410      	add	r0, r2
 80059a0:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80059a2:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80059a6:	4620      	mov	r0, r4
 80059a8:	f002 fb6b 	bl	8008082 <HAL_PCD_DataInStageCallback>
 80059ac:	e5dd      	b.n	800556a <HAL_PCD_IRQHandler+0x1e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059ae:	b932      	cbnz	r2, 80059be <HAL_PCD_IRQHandler+0x472>
 80059b0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80059b4:	011b      	lsls	r3, r3, #4
 80059b6:	b292      	uxth	r2, r2
 80059b8:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 80059bc:	e7cc      	b.n	8005958 <HAL_PCD_IRQHandler+0x40c>
 80059be:	2a01      	cmp	r2, #1
 80059c0:	d1ef      	bne.n	80059a2 <HAL_PCD_IRQHandler+0x456>
 80059c2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80059c6:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 80059ca:	b292      	uxth	r2, r2
 80059cc:	011b      	lsls	r3, r3, #4
 80059ce:	4410      	add	r0, r2
 80059d0:	521f      	strh	r7, [r3, r0]
 80059d2:	e7e6      	b.n	80059a2 <HAL_PCD_IRQHandler+0x456>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80059d4:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
          if ((wEPVal & USB_EP_KIND) == 0U)
 80059d8:	f417 7280 	ands.w	r2, r7, #256	; 0x100
            if (ep->xfer_len > TxPctSize)
 80059dc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80059de:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 80059e2:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 80059e6:	d11c      	bne.n	8005a22 <HAL_PCD_IRQHandler+0x4d6>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80059e8:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 80059ec:	b2bf      	uxth	r7, r7
 80059ee:	44ba      	add	sl, r7
 80059f0:	f10a 0a02 	add.w	sl, sl, #2
 80059f4:	f83e 701a 	ldrh.w	r7, [lr, sl, lsl #1]
            if (ep->xfer_len > TxPctSize)
 80059f8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80059fc:	429f      	cmp	r7, r3
 80059fe:	d301      	bcc.n	8005a04 <HAL_PCD_IRQHandler+0x4b8>
 8005a00:	642a      	str	r2, [r5, #64]	; 0x40
 8005a02:	e7d0      	b.n	80059a6 <HAL_PCD_IRQHandler+0x45a>
              ep->xfer_len -= TxPctSize;
 8005a04:	1bdb      	subs	r3, r3, r7
 8005a06:	642b      	str	r3, [r5, #64]	; 0x40
              ep->xfer_buff += TxPctSize;
 8005a08:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 8005a0a:	fb06 cc0c 	mla	ip, r6, ip, ip
              ep->xfer_buff += TxPctSize;
 8005a0e:	443b      	add	r3, r7
 8005a10:	63eb      	str	r3, [r5, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8005a12:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a14:	eb04 010c 	add.w	r1, r4, ip
              ep->xfer_count += TxPctSize;
 8005a18:	443b      	add	r3, r7
 8005a1a:	646b      	str	r3, [r5, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a1c:	f001 fab6 	bl	8006f8c <USB_EPStartXfer>
 8005a20:	e5a3      	b.n	800556a <HAL_PCD_IRQHandler+0x1e>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005a22:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005a26:	f017 0c40 	ands.w	ip, r7, #64	; 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005a2a:	b292      	uxth	r2, r2
 8005a2c:	4452      	add	r2, sl
 8005a2e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005a32:	f000 80dc 	beq.w	8005bee <HAL_PCD_IRQHandler+0x6a2>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005a36:	3202      	adds	r2, #2
 8005a38:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8005a3c:	f04f 0c28 	mov.w	ip, #40	; 0x28

    if (ep->xfer_len > TxPctSize)
 8005a40:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005a44:	429a      	cmp	r2, r3
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 8005a46:	bf28      	it	cs
 8005a48:	2300      	movcs	r3, #0
 8005a4a:	fb0c 4c06 	mla	ip, ip, r6, r4
      ep->xfer_len -= TxPctSize;
 8005a4e:	bf38      	it	cc
 8005a50:	1a9b      	subcc	r3, r3, r2
 8005a52:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005a56:	b2bf      	uxth	r7, r7
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d14d      	bne.n	8005af8 <HAL_PCD_IRQHandler+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a5c:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8005a60:	2a00      	cmp	r2, #0
 8005a62:	d136      	bne.n	8005ad2 <HAL_PCD_IRQHandler+0x586>
 8005a64:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8005a68:	010b      	lsls	r3, r1, #4
 8005a6a:	b2b2      	uxth	r2, r6
 8005a6c:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8005a70:	4416      	add	r6, r2
 8005a72:	5af2      	ldrh	r2, [r6, r3]
 8005a74:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005a78:	52f2      	strh	r2, [r6, r3]
 8005a7a:	5af2      	ldrh	r2, [r6, r3]
 8005a7c:	b292      	uxth	r2, r2
 8005a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a82:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a84:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005a88:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8005a8c:	b292      	uxth	r2, r2
 8005a8e:	4410      	add	r0, r2
 8005a90:	5ac2      	ldrh	r2, [r0, r3]
 8005a92:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005a96:	52c2      	strh	r2, [r0, r3]
 8005a98:	5ac2      	ldrh	r2, [r0, r3]
 8005a9a:	b292      	uxth	r2, r2
 8005a9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005aa0:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	f002 faed 	bl	8008082 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005aa8:	2f00      	cmp	r7, #0
 8005aaa:	f000 80dc 	beq.w	8005c66 <HAL_PCD_IRQHandler+0x71a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005aae:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8005ab2:	6822      	ldr	r2, [r4, #0]
 8005ab4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8005ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac0:	041b      	lsls	r3, r3, #16
 8005ac2:	0c1b      	lsrs	r3, r3, #16
 8005ac4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005acc:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8005ad0:	e0c9      	b.n	8005c66 <HAL_PCD_IRQHandler+0x71a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ad2:	2a01      	cmp	r2, #1
 8005ad4:	d1e5      	bne.n	8005aa2 <HAL_PCD_IRQHandler+0x556>
 8005ad6:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8005ada:	010a      	lsls	r2, r1, #4
 8005adc:	fa1f fc86 	uxth.w	ip, r6
 8005ae0:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8005ae4:	4466      	add	r6, ip
 8005ae6:	52b3      	strh	r3, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ae8:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8005aec:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8005af0:	b2b6      	uxth	r6, r6
 8005af2:	4430      	add	r0, r6
 8005af4:	5283      	strh	r3, [r0, r2]
 8005af6:	e7d4      	b.n	8005aa2 <HAL_PCD_IRQHandler+0x556>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005af8:	b16f      	cbz	r7, 8005b16 <HAL_PCD_IRQHandler+0x5ca>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005afa:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8005afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b06:	041b      	lsls	r3, r3, #16
 8005b08:	0c1b      	lsrs	r3, r3, #16
 8005b0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b12:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8005b16:	2728      	movs	r7, #40	; 0x28
 8005b18:	fb07 4706 	mla	r7, r7, r6, r4
 8005b1c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	f040 80a0 	bne.w	8005c66 <HAL_PCD_IRQHandler+0x71a>
        ep->xfer_buff += TxPctSize;
 8005b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8005b28:	f8d7 e048 	ldr.w	lr, [r7, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 8005b2c:	eb03 0c02 	add.w	ip, r3, r2
        ep->xfer_count += TxPctSize;
 8005b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8005b32:	f8c7 c03c 	str.w	ip, [r7, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 8005b36:	4413      	add	r3, r2
 8005b38:	647b      	str	r3, [r7, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3c:	459e      	cmp	lr, r3
 8005b3e:	d32c      	bcc.n	8005b9a <HAL_PCD_IRQHandler+0x64e>
          ep->xfer_len_db -= len;
 8005b40:	ebae 0203 	sub.w	r2, lr, r3
 8005b44:	64ba      	str	r2, [r7, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005b46:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8005b4a:	fa1f fe83 	uxth.w	lr, r3
 8005b4e:	2a00      	cmp	r2, #0
 8005b50:	d141      	bne.n	8005bd6 <HAL_PCD_IRQHandler+0x68a>
 8005b52:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005b56:	f200 4704 	addw	r7, r0, #1028	; 0x404
 8005b5a:	b292      	uxth	r2, r2
 8005b5c:	443a      	add	r2, r7
 8005b5e:	0109      	lsls	r1, r1, #4
 8005b60:	5a57      	ldrh	r7, [r2, r1]
 8005b62:	2b3e      	cmp	r3, #62	; 0x3e
 8005b64:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005b68:	5257      	strh	r7, [r2, r1]
 8005b6a:	d923      	bls.n	8005bb4 <HAL_PCD_IRQHandler+0x668>
 8005b6c:	06df      	lsls	r7, r3, #27
 8005b6e:	5a57      	ldrh	r7, [r2, r1]
 8005b70:	ea4f 1a53 	mov.w	sl, r3, lsr #5
 8005b74:	bf08      	it	eq
 8005b76:	f10a 3aff 	addeq.w	sl, sl, #4294967295
 8005b7a:	b2bf      	uxth	r7, r7
 8005b7c:	ea47 278a 	orr.w	r7, r7, sl, lsl #10
 8005b80:	ea47 0708 	orr.w	r7, r7, r8
 8005b84:	b2bf      	uxth	r7, r7
 8005b86:	5257      	strh	r7, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005b88:	2128      	movs	r1, #40	; 0x28
 8005b8a:	4673      	mov	r3, lr
 8005b8c:	fb01 4606 	mla	r6, r1, r6, r4
 8005b90:	4661      	mov	r1, ip
 8005b92:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005b94:	f001 f9ea 	bl	8006f6c <USB_WritePMA>
 8005b98:	e065      	b.n	8005c66 <HAL_PCD_IRQHandler+0x71a>
        else if (ep->xfer_len_db == 0U)
 8005b9a:	f1be 0f00 	cmp.w	lr, #0
 8005b9e:	d103      	bne.n	8005ba8 <HAL_PCD_IRQHandler+0x65c>
    if (ep->xfer_len > TxPctSize)
 8005ba0:	4613      	mov	r3, r2
          ep->xfer_fill_db = 0U;
 8005ba2:	f887 e04c 	strb.w	lr, [r7, #76]	; 0x4c
 8005ba6:	e7ce      	b.n	8005b46 <HAL_PCD_IRQHandler+0x5fa>
          ep->xfer_fill_db = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8005bae:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bb0:	4673      	mov	r3, lr
 8005bb2:	e7c8      	b.n	8005b46 <HAL_PCD_IRQHandler+0x5fa>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005bb4:	b92b      	cbnz	r3, 8005bc2 <HAL_PCD_IRQHandler+0x676>
 8005bb6:	5a53      	ldrh	r3, [r2, r1]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bbe:	5253      	strh	r3, [r2, r1]
 8005bc0:	e7e2      	b.n	8005b88 <HAL_PCD_IRQHandler+0x63c>
 8005bc2:	085f      	lsrs	r7, r3, #1
 8005bc4:	07db      	lsls	r3, r3, #31
 8005bc6:	5a53      	ldrh	r3, [r2, r1]
 8005bc8:	bf48      	it	mi
 8005bca:	3701      	addmi	r7, #1
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	e7f3      	b.n	8005bbe <HAL_PCD_IRQHandler+0x672>
 8005bd6:	2a01      	cmp	r2, #1
 8005bd8:	d1d6      	bne.n	8005b88 <HAL_PCD_IRQHandler+0x63c>
 8005bda:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005bde:	0109      	lsls	r1, r1, #4
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	f200 4304 	addw	r3, r0, #1028	; 0x404
 8005be6:	4413      	add	r3, r2
 8005be8:	f823 e001 	strh.w	lr, [r3, r1]
 8005bec:	e7cc      	b.n	8005b88 <HAL_PCD_IRQHandler+0x63c>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005bee:	3206      	adds	r2, #6
 8005bf0:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8005bf4:	b2bf      	uxth	r7, r7
    if (ep->xfer_len >= TxPctSize)
 8005bf6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005bfa:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8005bfc:	bf88      	it	hi
 8005bfe:	4663      	movhi	r3, ip
 8005c00:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8005c04:	fb0c 4c06 	mla	ip, ip, r6, r4
      ep->xfer_len -= TxPctSize;
 8005c08:	bf98      	it	ls
 8005c0a:	1a9b      	subls	r3, r3, r2
 8005c0c:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d14e      	bne.n	8005cb2 <HAL_PCD_IRQHandler+0x766>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c14:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8005c18:	2a00      	cmp	r2, #0
 8005c1a:	d137      	bne.n	8005c8c <HAL_PCD_IRQHandler+0x740>
 8005c1c:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8005c20:	010b      	lsls	r3, r1, #4
 8005c22:	b2b2      	uxth	r2, r6
 8005c24:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8005c28:	4416      	add	r6, r2
 8005c2a:	5af2      	ldrh	r2, [r6, r3]
 8005c2c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005c30:	52f2      	strh	r2, [r6, r3]
 8005c32:	5af2      	ldrh	r2, [r6, r3]
 8005c34:	b292      	uxth	r2, r2
 8005c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c3a:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c3c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005c40:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8005c44:	b292      	uxth	r2, r2
 8005c46:	4410      	add	r0, r2
 8005c48:	5ac2      	ldrh	r2, [r0, r3]
 8005c4a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005c4e:	52c2      	strh	r2, [r0, r3]
 8005c50:	5ac2      	ldrh	r2, [r0, r3]
 8005c52:	b292      	uxth	r2, r2
 8005c54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c58:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f002 fa11 	bl	8008082 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005c60:	2f00      	cmp	r7, #0
 8005c62:	f43f af24 	beq.w	8005aae <HAL_PCD_IRQHandler+0x562>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005c66:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8005c6a:	6822      	ldr	r2, [r4, #0]
 8005c6c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c7a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8005c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c86:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8005c8a:	e46e      	b.n	800556a <HAL_PCD_IRQHandler+0x1e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c8c:	2a01      	cmp	r2, #1
 8005c8e:	d1e4      	bne.n	8005c5a <HAL_PCD_IRQHandler+0x70e>
 8005c90:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8005c94:	010a      	lsls	r2, r1, #4
 8005c96:	fa1f fc86 	uxth.w	ip, r6
 8005c9a:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8005c9e:	4466      	add	r6, ip
 8005ca0:	52b3      	strh	r3, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ca2:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8005ca6:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8005caa:	b2b6      	uxth	r6, r6
 8005cac:	4430      	add	r0, r6
 8005cae:	5283      	strh	r3, [r0, r2]
 8005cb0:	e7d3      	b.n	8005c5a <HAL_PCD_IRQHandler+0x70e>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005cb2:	b96f      	cbnz	r7, 8005cd0 <HAL_PCD_IRQHandler+0x784>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005cb4:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8005cb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc0:	041b      	lsls	r3, r3, #16
 8005cc2:	0c1b      	lsrs	r3, r3, #16
 8005cc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ccc:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8005cd0:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8005cd4:	fb0c 4c06 	mla	ip, ip, r6, r4
 8005cd8:	f89c 304c 	ldrb.w	r3, [ip, #76]	; 0x4c
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d1c2      	bne.n	8005c66 <HAL_PCD_IRQHandler+0x71a>
        ep->xfer_count += TxPctSize;
 8005ce0:	f8dc 3044 	ldr.w	r3, [ip, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8005ce4:	f8dc 703c 	ldr.w	r7, [ip, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 8005ce8:	4413      	add	r3, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 8005cea:	f8dc e048 	ldr.w	lr, [ip, #72]	; 0x48
        ep->xfer_count += TxPctSize;
 8005cee:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8005cf2:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
        ep->xfer_buff += TxPctSize;
 8005cf6:	4417      	add	r7, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 8005cf8:	459e      	cmp	lr, r3
        ep->xfer_buff += TxPctSize;
 8005cfa:	f8cc 703c 	str.w	r7, [ip, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8005cfe:	d326      	bcc.n	8005d4e <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db -= len;
 8005d00:	ebae 0203 	sub.w	r2, lr, r3
 8005d04:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005d08:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8005d0c:	fa1f fc83 	uxth.w	ip, r3
 8005d10:	2a00      	cmp	r2, #0
 8005d12:	d142      	bne.n	8005d9a <HAL_PCD_IRQHandler+0x84e>
 8005d14:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8005d18:	f200 4e0c 	addw	lr, r0, #1036	; 0x40c
 8005d1c:	b292      	uxth	r2, r2
 8005d1e:	4472      	add	r2, lr
 8005d20:	0109      	lsls	r1, r1, #4
 8005d22:	f832 e001 	ldrh.w	lr, [r2, r1]
 8005d26:	2b3e      	cmp	r3, #62	; 0x3e
 8005d28:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005d2c:	f822 e001 	strh.w	lr, [r2, r1]
 8005d30:	d91b      	bls.n	8005d6a <HAL_PCD_IRQHandler+0x81e>
 8005d32:	ea4f 1e53 	mov.w	lr, r3, lsr #5
 8005d36:	06db      	lsls	r3, r3, #27
 8005d38:	5a53      	ldrh	r3, [r2, r1]
 8005d3a:	bf08      	it	eq
 8005d3c:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
 8005d46:	ea43 0308 	orr.w	r3, r3, r8
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	e012      	b.n	8005d74 <HAL_PCD_IRQHandler+0x828>
        else if (ep->xfer_len_db == 0U)
 8005d4e:	f1be 0f00 	cmp.w	lr, #0
 8005d52:	d103      	bne.n	8005d5c <HAL_PCD_IRQHandler+0x810>
    if (ep->xfer_len >= TxPctSize)
 8005d54:	4613      	mov	r3, r2
          ep->xfer_fill_db = 0U;
 8005d56:	f88c e04c 	strb.w	lr, [ip, #76]	; 0x4c
 8005d5a:	e7d5      	b.n	8005d08 <HAL_PCD_IRQHandler+0x7bc>
          ep->xfer_len_db = 0U;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8005d62:	f88c 304c 	strb.w	r3, [ip, #76]	; 0x4c
 8005d66:	4673      	mov	r3, lr
 8005d68:	e7ce      	b.n	8005d08 <HAL_PCD_IRQHandler+0x7bc>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005d6a:	b95b      	cbnz	r3, 8005d84 <HAL_PCD_IRQHandler+0x838>
 8005d6c:	5a53      	ldrh	r3, [r2, r1]
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d74:	5253      	strh	r3, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005d76:	2128      	movs	r1, #40	; 0x28
 8005d78:	fb01 4606 	mla	r6, r1, r6, r4
 8005d7c:	4663      	mov	r3, ip
 8005d7e:	4639      	mov	r1, r7
 8005d80:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 8005d82:	e707      	b.n	8005b94 <HAL_PCD_IRQHandler+0x648>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005d84:	ea4f 0e53 	mov.w	lr, r3, lsr #1
 8005d88:	07db      	lsls	r3, r3, #31
 8005d8a:	5a53      	ldrh	r3, [r2, r1]
 8005d8c:	bf48      	it	mi
 8005d8e:	f10e 0e01 	addmi.w	lr, lr, #1
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
 8005d98:	e7d7      	b.n	8005d4a <HAL_PCD_IRQHandler+0x7fe>
 8005d9a:	2a01      	cmp	r2, #1
 8005d9c:	d1eb      	bne.n	8005d76 <HAL_PCD_IRQHandler+0x82a>
 8005d9e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	f200 430c 	addw	r3, r0, #1036	; 0x40c
 8005da8:	4413      	add	r3, r2
 8005daa:	010a      	lsls	r2, r1, #4
 8005dac:	f823 c002 	strh.w	ip, [r3, r2]
 8005db0:	e7e1      	b.n	8005d76 <HAL_PCD_IRQHandler+0x82a>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005db2:	0546      	lsls	r6, r0, #21
 8005db4:	d512      	bpl.n	8005ddc <HAL_PCD_IRQHandler+0x890>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005db6:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8005db8:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005dba:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005dbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dc2:	041b      	lsls	r3, r3, #16
 8005dc4:	0c1b      	lsrs	r3, r3, #16
 8005dc6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8005dca:	f002 f966 	bl	800809a <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005dce:	4629      	mov	r1, r5
 8005dd0:	4620      	mov	r0, r4
}
 8005dd2:	b005      	add	sp, #20
 8005dd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005dd8:	f7ff bba4 	b.w	8005524 <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005ddc:	0441      	lsls	r1, r0, #17
 8005dde:	d50a      	bpl.n	8005df6 <HAL_PCD_IRQHandler+0x8aa>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005de0:	6822      	ldr	r2, [r4, #0]
 8005de2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005de6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005dea:	041b      	lsls	r3, r3, #16
 8005dec:	0c1b      	lsrs	r3, r3, #16
 8005dee:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8005df2:	f7ff bbbf 	b.w	8005574 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005df6:	0482      	lsls	r2, r0, #18
 8005df8:	d505      	bpl.n	8005e06 <HAL_PCD_IRQHandler+0x8ba>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005dfa:	6822      	ldr	r2, [r4, #0]
 8005dfc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005e00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e04:	e7f1      	b.n	8005dea <HAL_PCD_IRQHandler+0x89e>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005e06:	04c3      	lsls	r3, r0, #19
 8005e08:	d519      	bpl.n	8005e3e <HAL_PCD_IRQHandler+0x8f2>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005e0a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8005e0c:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005e0e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005e12:	f023 0304 	bic.w	r3, r3, #4
 8005e16:	041b      	lsls	r3, r3, #16
 8005e18:	0c1b      	lsrs	r3, r3, #16
 8005e1a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005e1e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005e22:	f023 0308 	bic.w	r3, r3, #8
 8005e26:	041b      	lsls	r3, r3, #16
 8005e28:	0c1b      	lsrs	r3, r3, #16
 8005e2a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8005e2e:	f002 f957 	bl	80080e0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005e32:	6822      	ldr	r2, [r4, #0]
 8005e34:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005e38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e3c:	e7d5      	b.n	8005dea <HAL_PCD_IRQHandler+0x89e>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005e3e:	0507      	lsls	r7, r0, #20
 8005e40:	d548      	bpl.n	8005ed4 <HAL_PCD_IRQHandler+0x988>
 8005e42:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005e44:	6822      	ldr	r2, [r4, #0]
 8005e46:	4606      	mov	r6, r0
 8005e48:	4611      	mov	r1, r2
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	f102 0520 	add.w	r5, r2, #32
 8005e50:	f833 7b04 	ldrh.w	r7, [r3], #4
    for (i = 0U; i < 8U; i++)
 8005e54:	429d      	cmp	r5, r3
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005e56:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 8005e5a:	d1f9      	bne.n	8005e50 <HAL_PCD_IRQHandler+0x904>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005e5c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	f043 0301 	orr.w	r3, r3, #1
 8005e66:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005e6a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005e6e:	f023 0301 	bic.w	r3, r3, #1
 8005e72:	041b      	lsls	r3, r3, #16
 8005e74:	0c1b      	lsrs	r3, r3, #16
 8005e76:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005e7a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005e7e:	055e      	lsls	r6, r3, #21
 8005e80:	d5fb      	bpl.n	8005e7a <HAL_PCD_IRQHandler+0x92e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005e82:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005e86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e8a:	041b      	lsls	r3, r3, #16
 8005e8c:	0c1b      	lsrs	r3, r3, #16
 8005e8e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005e92:	f830 3b02 	ldrh.w	r3, [r0], #2
 8005e96:	f821 3b04 	strh.w	r3, [r1], #4
    for (i = 0U; i < 8U; i++)
 8005e9a:	428d      	cmp	r5, r1
 8005e9c:	d1f9      	bne.n	8005e92 <HAL_PCD_IRQHandler+0x946>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005e9e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8005ea2:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	f043 0308 	orr.w	r3, r3, #8
 8005eaa:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005eae:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005eb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005eb6:	041b      	lsls	r3, r3, #16
 8005eb8:	0c1b      	lsrs	r3, r3, #16
 8005eba:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005ebe:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	f043 0304 	orr.w	r3, r3, #4
 8005ec8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8005ecc:	f002 f8f8 	bl	80080c0 <HAL_PCD_SuspendCallback>
    return;
 8005ed0:	f7ff bb50 	b.w	8005574 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005ed4:	0582      	lsls	r2, r0, #22
 8005ed6:	d50d      	bpl.n	8005ef4 <HAL_PCD_IRQHandler+0x9a8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005ed8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8005eda:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005edc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005ee0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ee4:	041b      	lsls	r3, r3, #16
 8005ee6:	0c1b      	lsrs	r3, r3, #16
 8005ee8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8005eec:	f002 f8d1 	bl	8008092 <HAL_PCD_SOFCallback>
    return;
 8005ef0:	f7ff bb40 	b.w	8005574 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005ef4:	05c3      	lsls	r3, r0, #23
 8005ef6:	f57f ab3d 	bpl.w	8005574 <HAL_PCD_IRQHandler+0x28>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005efa:	6822      	ldr	r2, [r4, #0]
 8005efc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f04:	e771      	b.n	8005dea <HAL_PCD_IRQHandler+0x89e>
 8005f06:	bf00      	nop

08005f08 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8005f08:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8005f0c:	b570      	push	{r4, r5, r6, lr}
 8005f0e:	4605      	mov	r5, r0
 8005f10:	f04f 0428 	mov.w	r4, #40	; 0x28
 8005f14:	f001 0007 	and.w	r0, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 8005f18:	d01a      	beq.n	8005f50 <HAL_PCD_EP_Open+0x48>
    ep->is_in = 1U;
 8005f1a:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f1c:	fb00 4104 	mla	r1, r0, r4, r4
 8005f20:	4429      	add	r1, r5
    ep->is_in = 1U;
 8005f22:	704e      	strb	r6, [r1, #1]
  if (ep_type == EP_TYPE_BULK)
 8005f24:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8005f26:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 8005f28:	bf08      	it	eq
 8005f2a:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f2c:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 8005f2e:	bf08      	it	eq
 8005f30:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 8005f32:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8005f34:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d012      	beq.n	8005f62 <HAL_PCD_EP_Open+0x5a>
 8005f3c:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005f3e:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8005f40:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005f44:	f000 fd66 	bl	8006a14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f48:	2000      	movs	r0, #0
 8005f4a:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 8005f4e:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8005f50:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f52:	4344      	muls	r4, r0
 8005f54:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    ep->is_in = 0U;
 8005f58:	442c      	add	r4, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f5a:	4429      	add	r1, r5
    ep->is_in = 0U;
 8005f5c:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
 8005f60:	e7e0      	b.n	8005f24 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 8005f62:	2002      	movs	r0, #2
 8005f64:	e7f3      	b.n	8005f4e <HAL_PCD_EP_Open+0x46>

08005f66 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8005f66:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8005f6a:	b510      	push	{r4, lr}
 8005f6c:	f04f 0328 	mov.w	r3, #40	; 0x28
 8005f70:	4604      	mov	r4, r0
 8005f72:	f001 0207 	and.w	r2, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 8005f76:	d013      	beq.n	8005fa0 <HAL_PCD_EP_Close+0x3a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f78:	fb02 3103 	mla	r1, r2, r3, r3
 8005f7c:	4401      	add	r1, r0
    ep->is_in = 1U;
 8005f7e:	2001      	movs	r0, #1
 8005f80:	7048      	strb	r0, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f82:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8005f84:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d012      	beq.n	8005fb2 <HAL_PCD_EP_Close+0x4c>
 8005f8c:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005f8e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8005f90:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005f94:	f000 fea0 	bl	8006cd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f98:	2000      	movs	r0, #0
 8005f9a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005f9e:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fa0:	4353      	muls	r3, r2
 8005fa2:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8005fa6:	4401      	add	r1, r0
    ep->is_in = 0U;
 8005fa8:	4403      	add	r3, r0
 8005faa:	2000      	movs	r0, #0
 8005fac:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8005fb0:	e7e7      	b.n	8005f82 <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 8005fb2:	2002      	movs	r0, #2
 8005fb4:	e7f3      	b.n	8005f9e <HAL_PCD_EP_Close+0x38>

08005fb6 <HAL_PCD_EP_Receive>:
{
 8005fb6:	b570      	push	{r4, r5, r6, lr}
 8005fb8:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 8005fbc:	2128      	movs	r1, #40	; 0x28
  ep->xfer_count = 0U;
 8005fbe:	2600      	movs	r6, #0
  ep->xfer_buff = pBuf;
 8005fc0:	4369      	muls	r1, r5
 8005fc2:	1844      	adds	r4, r0, r1
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fc4:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005fc8:	4401      	add	r1, r0
  ep->xfer_len = len;
 8005fca:	e9c4 235f 	strd	r2, r3, [r4, #380]	; 0x17c
  ep->xfer_count = 0U;
 8005fce:	f8c4 6184 	str.w	r6, [r4, #388]	; 0x184
  ep->is_in = 0U;
 8005fd2:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fd6:	f884 5168 	strb.w	r5, [r4, #360]	; 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005fda:	6800      	ldr	r0, [r0, #0]
 8005fdc:	f000 ffd6 	bl	8006f8c <USB_EPStartXfer>
}
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	bd70      	pop	{r4, r5, r6, pc}

08005fe4 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005fe4:	2328      	movs	r3, #40	; 0x28
 8005fe6:	f001 0107 	and.w	r1, r1, #7
 8005fea:	fb03 0001 	mla	r0, r3, r1, r0
}
 8005fee:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_PCD_EP_Transmit>:
{
 8005ff4:	b570      	push	{r4, r5, r6, lr}
 8005ff6:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 8005ffa:	2128      	movs	r1, #40	; 0x28
 8005ffc:	fb01 0405 	mla	r4, r1, r5, r0
  ep->xfer_count = 0U;
 8006000:	2600      	movs	r6, #0
  ep->xfer_len = len;
 8006002:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 8006006:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006008:	fb05 1101 	mla	r1, r5, r1, r1
  ep->xfer_fill_db = 1U;
 800600c:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006010:	4401      	add	r1, r0
  ep->xfer_len_db = len;
 8006012:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8006014:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8006016:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 800601a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800601e:	6800      	ldr	r0, [r0, #0]
 8006020:	f000 ffb4 	bl	8006f8c <USB_EPStartXfer>
}
 8006024:	4630      	mov	r0, r6
 8006026:	bd70      	pop	{r4, r5, r6, pc}

08006028 <HAL_PCD_EP_SetStall>:
{
 8006028:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800602a:	6843      	ldr	r3, [r0, #4]
 800602c:	f001 0507 	and.w	r5, r1, #7
 8006030:	429d      	cmp	r5, r3
{
 8006032:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006034:	d828      	bhi.n	8006088 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8006036:	f011 0f80 	tst.w	r1, #128	; 0x80
 800603a:	f04f 0328 	mov.w	r3, #40	; 0x28
 800603e:	d01a      	beq.n	8006076 <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 8006040:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006042:	fb05 3103 	mla	r1, r5, r3, r3
 8006046:	4401      	add	r1, r0
    ep->is_in = 1U;
 8006048:	704a      	strb	r2, [r1, #1]
  ep->is_stall = 1U;
 800604a:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800604c:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800604e:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8006050:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 8006054:	429a      	cmp	r2, r3
 8006056:	d019      	beq.n	800608c <HAL_PCD_EP_SetStall+0x64>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006058:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800605a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800605e:	f000 ff0c 	bl	8006e7a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006062:	b925      	cbnz	r5, 800606e <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006064:	6820      	ldr	r0, [r4, #0]
 8006066:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 800606a:	f000 ff7d 	bl	8006f68 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 800606e:	2000      	movs	r0, #0
 8006070:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8006074:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8006076:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8006078:	434b      	muls	r3, r1
 800607a:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 800607e:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8006080:	4401      	add	r1, r0
    ep->is_in = 0U;
 8006082:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 8006086:	e7e0      	b.n	800604a <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8006088:	2001      	movs	r0, #1
 800608a:	e7f3      	b.n	8006074 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 800608c:	2002      	movs	r0, #2
 800608e:	e7f1      	b.n	8006074 <HAL_PCD_EP_SetStall+0x4c>

08006090 <HAL_PCD_EP_ClrStall>:
{
 8006090:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006092:	6843      	ldr	r3, [r0, #4]
 8006094:	f001 020f 	and.w	r2, r1, #15
 8006098:	429a      	cmp	r2, r3
{
 800609a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800609c:	d825      	bhi.n	80060ea <HAL_PCD_EP_ClrStall+0x5a>
  if ((0x80U & ep_addr) == 0x80U)
 800609e:	f011 0f80 	tst.w	r1, #128	; 0x80
 80060a2:	f04f 0328 	mov.w	r3, #40	; 0x28
 80060a6:	f001 0207 	and.w	r2, r1, #7
 80060aa:	d015      	beq.n	80060d8 <HAL_PCD_EP_ClrStall+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060ac:	fb02 3103 	mla	r1, r2, r3, r3
 80060b0:	4401      	add	r1, r0
    ep->is_in = 1U;
 80060b2:	2001      	movs	r0, #1
 80060b4:	7048      	strb	r0, [r1, #1]
  ep->is_stall = 0U;
 80060b6:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 80060b8:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 80060ba:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80060bc:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d014      	beq.n	80060ee <HAL_PCD_EP_ClrStall+0x5e>
 80060c4:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80060c6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80060c8:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80060cc:	f000 fef5 	bl	8006eba <USB_EPClearStall>
  return HAL_OK;
 80060d0:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 80060d2:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 80060d6:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060d8:	4353      	muls	r3, r2
 80060da:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 80060de:	4401      	add	r1, r0
    ep->is_in = 0U;
 80060e0:	4403      	add	r3, r0
 80060e2:	2000      	movs	r0, #0
 80060e4:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 80060e8:	e7e5      	b.n	80060b6 <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 80060ea:	2001      	movs	r0, #1
 80060ec:	e7f3      	b.n	80060d6 <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 80060ee:	2002      	movs	r0, #2
 80060f0:	e7f1      	b.n	80060d6 <HAL_PCD_EP_ClrStall+0x46>

080060f2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80060f2:	b510      	push	{r4, lr}
 80060f4:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80060f6:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060fa:	bf1b      	ittet	ne
 80060fc:	f001 0107 	andne.w	r1, r1, #7
 8006100:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006104:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006108:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 800610a:	bf08      	it	eq
 800610c:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006110:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8006112:	b91a      	cbnz	r2, 800611c <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 8006114:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8006116:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8006118:	2000      	movs	r0, #0
 800611a:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 800611c:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800611e:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8006120:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006122:	e7f9      	b.n	8006118 <HAL_PCDEx_PMAConfig+0x26>

08006124 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006124:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006128:	4605      	mov	r5, r0
 800612a:	b338      	cbz	r0, 800617c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800612c:	6803      	ldr	r3, [r0, #0]
 800612e:	07db      	lsls	r3, r3, #31
 8006130:	d410      	bmi.n	8006154 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006132:	682b      	ldr	r3, [r5, #0]
 8006134:	079f      	lsls	r7, r3, #30
 8006136:	d45e      	bmi.n	80061f6 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006138:	682b      	ldr	r3, [r5, #0]
 800613a:	0719      	lsls	r1, r3, #28
 800613c:	f100 8095 	bmi.w	800626a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	075a      	lsls	r2, r3, #29
 8006144:	f100 80c1 	bmi.w	80062ca <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006148:	69e8      	ldr	r0, [r5, #28]
 800614a:	2800      	cmp	r0, #0
 800614c:	f040 812c 	bne.w	80063a8 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8006150:	2000      	movs	r0, #0
 8006152:	e029      	b.n	80061a8 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006154:	4c90      	ldr	r4, [pc, #576]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 8006156:	6863      	ldr	r3, [r4, #4]
 8006158:	f003 030c 	and.w	r3, r3, #12
 800615c:	2b04      	cmp	r3, #4
 800615e:	d007      	beq.n	8006170 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006160:	6863      	ldr	r3, [r4, #4]
 8006162:	f003 030c 	and.w	r3, r3, #12
 8006166:	2b08      	cmp	r3, #8
 8006168:	d10a      	bne.n	8006180 <HAL_RCC_OscConfig+0x5c>
 800616a:	6863      	ldr	r3, [r4, #4]
 800616c:	03de      	lsls	r6, r3, #15
 800616e:	d507      	bpl.n	8006180 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	039c      	lsls	r4, r3, #14
 8006174:	d5dd      	bpl.n	8006132 <HAL_RCC_OscConfig+0xe>
 8006176:	686b      	ldr	r3, [r5, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1da      	bne.n	8006132 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800617c:	2001      	movs	r0, #1
 800617e:	e013      	b.n	80061a8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006180:	686b      	ldr	r3, [r5, #4]
 8006182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006186:	d112      	bne.n	80061ae <HAL_RCC_OscConfig+0x8a>
 8006188:	6823      	ldr	r3, [r4, #0]
 800618a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800618e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006190:	f7fe ffec 	bl	800516c <HAL_GetTick>
 8006194:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	0398      	lsls	r0, r3, #14
 800619a:	d4ca      	bmi.n	8006132 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800619c:	f7fe ffe6 	bl	800516c <HAL_GetTick>
 80061a0:	1b80      	subs	r0, r0, r6
 80061a2:	2864      	cmp	r0, #100	; 0x64
 80061a4:	d9f7      	bls.n	8006196 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80061a6:	2003      	movs	r0, #3
}
 80061a8:	b002      	add	sp, #8
 80061aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061ae:	b99b      	cbnz	r3, 80061d8 <HAL_RCC_OscConfig+0xb4>
 80061b0:	6823      	ldr	r3, [r4, #0]
 80061b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061b6:	6023      	str	r3, [r4, #0]
 80061b8:	6823      	ldr	r3, [r4, #0]
 80061ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061be:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80061c0:	f7fe ffd4 	bl	800516c <HAL_GetTick>
 80061c4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	0399      	lsls	r1, r3, #14
 80061ca:	d5b2      	bpl.n	8006132 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061cc:	f7fe ffce 	bl	800516c <HAL_GetTick>
 80061d0:	1b80      	subs	r0, r0, r6
 80061d2:	2864      	cmp	r0, #100	; 0x64
 80061d4:	d9f7      	bls.n	80061c6 <HAL_RCC_OscConfig+0xa2>
 80061d6:	e7e6      	b.n	80061a6 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	d103      	bne.n	80061e8 <HAL_RCC_OscConfig+0xc4>
 80061e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061e4:	6023      	str	r3, [r4, #0]
 80061e6:	e7cf      	b.n	8006188 <HAL_RCC_OscConfig+0x64>
 80061e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061ec:	6023      	str	r3, [r4, #0]
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061f4:	e7cb      	b.n	800618e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80061f6:	4c68      	ldr	r4, [pc, #416]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 80061f8:	6863      	ldr	r3, [r4, #4]
 80061fa:	f013 0f0c 	tst.w	r3, #12
 80061fe:	d007      	beq.n	8006210 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006200:	6863      	ldr	r3, [r4, #4]
 8006202:	f003 030c 	and.w	r3, r3, #12
 8006206:	2b08      	cmp	r3, #8
 8006208:	d110      	bne.n	800622c <HAL_RCC_OscConfig+0x108>
 800620a:	6863      	ldr	r3, [r4, #4]
 800620c:	03da      	lsls	r2, r3, #15
 800620e:	d40d      	bmi.n	800622c <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006210:	6823      	ldr	r3, [r4, #0]
 8006212:	079b      	lsls	r3, r3, #30
 8006214:	d502      	bpl.n	800621c <HAL_RCC_OscConfig+0xf8>
 8006216:	692b      	ldr	r3, [r5, #16]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d1af      	bne.n	800617c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	696a      	ldr	r2, [r5, #20]
 8006220:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006224:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006228:	6023      	str	r3, [r4, #0]
 800622a:	e785      	b.n	8006138 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800622c:	692a      	ldr	r2, [r5, #16]
 800622e:	4b5b      	ldr	r3, [pc, #364]	; (800639c <HAL_RCC_OscConfig+0x278>)
 8006230:	b16a      	cbz	r2, 800624e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8006232:	2201      	movs	r2, #1
 8006234:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006236:	f7fe ff99 	bl	800516c <HAL_GetTick>
 800623a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	079f      	lsls	r7, r3, #30
 8006240:	d4ec      	bmi.n	800621c <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006242:	f7fe ff93 	bl	800516c <HAL_GetTick>
 8006246:	1b80      	subs	r0, r0, r6
 8006248:	2802      	cmp	r0, #2
 800624a:	d9f7      	bls.n	800623c <HAL_RCC_OscConfig+0x118>
 800624c:	e7ab      	b.n	80061a6 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800624e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006250:	f7fe ff8c 	bl	800516c <HAL_GetTick>
 8006254:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	0798      	lsls	r0, r3, #30
 800625a:	f57f af6d 	bpl.w	8006138 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800625e:	f7fe ff85 	bl	800516c <HAL_GetTick>
 8006262:	1b80      	subs	r0, r0, r6
 8006264:	2802      	cmp	r0, #2
 8006266:	d9f6      	bls.n	8006256 <HAL_RCC_OscConfig+0x132>
 8006268:	e79d      	b.n	80061a6 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800626a:	69aa      	ldr	r2, [r5, #24]
 800626c:	4e4a      	ldr	r6, [pc, #296]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 800626e:	4b4b      	ldr	r3, [pc, #300]	; (800639c <HAL_RCC_OscConfig+0x278>)
 8006270:	b1e2      	cbz	r2, 80062ac <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8006272:	2201      	movs	r2, #1
 8006274:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8006278:	f7fe ff78 	bl	800516c <HAL_GetTick>
 800627c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800627e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006280:	079b      	lsls	r3, r3, #30
 8006282:	d50d      	bpl.n	80062a0 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006284:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006288:	4b45      	ldr	r3, [pc, #276]	; (80063a0 <HAL_RCC_OscConfig+0x27c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006290:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8006292:	bf00      	nop
  }
  while (Delay --);
 8006294:	9b01      	ldr	r3, [sp, #4]
 8006296:	1e5a      	subs	r2, r3, #1
 8006298:	9201      	str	r2, [sp, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1f9      	bne.n	8006292 <HAL_RCC_OscConfig+0x16e>
 800629e:	e74f      	b.n	8006140 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062a0:	f7fe ff64 	bl	800516c <HAL_GetTick>
 80062a4:	1b00      	subs	r0, r0, r4
 80062a6:	2802      	cmp	r0, #2
 80062a8:	d9e9      	bls.n	800627e <HAL_RCC_OscConfig+0x15a>
 80062aa:	e77c      	b.n	80061a6 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80062ac:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80062b0:	f7fe ff5c 	bl	800516c <HAL_GetTick>
 80062b4:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062b6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80062b8:	079f      	lsls	r7, r3, #30
 80062ba:	f57f af41 	bpl.w	8006140 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062be:	f7fe ff55 	bl	800516c <HAL_GetTick>
 80062c2:	1b00      	subs	r0, r0, r4
 80062c4:	2802      	cmp	r0, #2
 80062c6:	d9f6      	bls.n	80062b6 <HAL_RCC_OscConfig+0x192>
 80062c8:	e76d      	b.n	80061a6 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062ca:	4c33      	ldr	r4, [pc, #204]	; (8006398 <HAL_RCC_OscConfig+0x274>)
 80062cc:	69e3      	ldr	r3, [r4, #28]
 80062ce:	00d8      	lsls	r0, r3, #3
 80062d0:	d424      	bmi.n	800631c <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80062d2:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80062d4:	69e3      	ldr	r3, [r4, #28]
 80062d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062da:	61e3      	str	r3, [r4, #28]
 80062dc:	69e3      	ldr	r3, [r4, #28]
 80062de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062e6:	4e2f      	ldr	r6, [pc, #188]	; (80063a4 <HAL_RCC_OscConfig+0x280>)
 80062e8:	6833      	ldr	r3, [r6, #0]
 80062ea:	05d9      	lsls	r1, r3, #23
 80062ec:	d518      	bpl.n	8006320 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062ee:	68eb      	ldr	r3, [r5, #12]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d126      	bne.n	8006342 <HAL_RCC_OscConfig+0x21e>
 80062f4:	6a23      	ldr	r3, [r4, #32]
 80062f6:	f043 0301 	orr.w	r3, r3, #1
 80062fa:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80062fc:	f7fe ff36 	bl	800516c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006300:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006304:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006306:	6a23      	ldr	r3, [r4, #32]
 8006308:	079b      	lsls	r3, r3, #30
 800630a:	d53f      	bpl.n	800638c <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 800630c:	2f00      	cmp	r7, #0
 800630e:	f43f af1b 	beq.w	8006148 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006312:	69e3      	ldr	r3, [r4, #28]
 8006314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006318:	61e3      	str	r3, [r4, #28]
 800631a:	e715      	b.n	8006148 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800631c:	2700      	movs	r7, #0
 800631e:	e7e2      	b.n	80062e6 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006320:	6833      	ldr	r3, [r6, #0]
 8006322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006326:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006328:	f7fe ff20 	bl	800516c <HAL_GetTick>
 800632c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800632e:	6833      	ldr	r3, [r6, #0]
 8006330:	05da      	lsls	r2, r3, #23
 8006332:	d4dc      	bmi.n	80062ee <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006334:	f7fe ff1a 	bl	800516c <HAL_GetTick>
 8006338:	eba0 0008 	sub.w	r0, r0, r8
 800633c:	2864      	cmp	r0, #100	; 0x64
 800633e:	d9f6      	bls.n	800632e <HAL_RCC_OscConfig+0x20a>
 8006340:	e731      	b.n	80061a6 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006342:	b9ab      	cbnz	r3, 8006370 <HAL_RCC_OscConfig+0x24c>
 8006344:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006346:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800634a:	f023 0301 	bic.w	r3, r3, #1
 800634e:	6223      	str	r3, [r4, #32]
 8006350:	6a23      	ldr	r3, [r4, #32]
 8006352:	f023 0304 	bic.w	r3, r3, #4
 8006356:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8006358:	f7fe ff08 	bl	800516c <HAL_GetTick>
 800635c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800635e:	6a23      	ldr	r3, [r4, #32]
 8006360:	0798      	lsls	r0, r3, #30
 8006362:	d5d3      	bpl.n	800630c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006364:	f7fe ff02 	bl	800516c <HAL_GetTick>
 8006368:	1b80      	subs	r0, r0, r6
 800636a:	4540      	cmp	r0, r8
 800636c:	d9f7      	bls.n	800635e <HAL_RCC_OscConfig+0x23a>
 800636e:	e71a      	b.n	80061a6 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006370:	2b05      	cmp	r3, #5
 8006372:	6a23      	ldr	r3, [r4, #32]
 8006374:	d103      	bne.n	800637e <HAL_RCC_OscConfig+0x25a>
 8006376:	f043 0304 	orr.w	r3, r3, #4
 800637a:	6223      	str	r3, [r4, #32]
 800637c:	e7ba      	b.n	80062f4 <HAL_RCC_OscConfig+0x1d0>
 800637e:	f023 0301 	bic.w	r3, r3, #1
 8006382:	6223      	str	r3, [r4, #32]
 8006384:	6a23      	ldr	r3, [r4, #32]
 8006386:	f023 0304 	bic.w	r3, r3, #4
 800638a:	e7b6      	b.n	80062fa <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800638c:	f7fe feee 	bl	800516c <HAL_GetTick>
 8006390:	1b80      	subs	r0, r0, r6
 8006392:	4540      	cmp	r0, r8
 8006394:	d9b7      	bls.n	8006306 <HAL_RCC_OscConfig+0x1e2>
 8006396:	e706      	b.n	80061a6 <HAL_RCC_OscConfig+0x82>
 8006398:	40021000 	.word	0x40021000
 800639c:	42420000 	.word	0x42420000
 80063a0:	20000000 	.word	0x20000000
 80063a4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063a8:	4c2a      	ldr	r4, [pc, #168]	; (8006454 <HAL_RCC_OscConfig+0x330>)
 80063aa:	6863      	ldr	r3, [r4, #4]
 80063ac:	f003 030c 	and.w	r3, r3, #12
 80063b0:	2b08      	cmp	r3, #8
 80063b2:	d03e      	beq.n	8006432 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063b4:	2200      	movs	r2, #0
 80063b6:	4b28      	ldr	r3, [pc, #160]	; (8006458 <HAL_RCC_OscConfig+0x334>)
 80063b8:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80063ba:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063bc:	d12c      	bne.n	8006418 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80063be:	f7fe fed5 	bl	800516c <HAL_GetTick>
 80063c2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063c4:	6823      	ldr	r3, [r4, #0]
 80063c6:	0199      	lsls	r1, r3, #6
 80063c8:	d420      	bmi.n	800640c <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80063ca:	6a2b      	ldr	r3, [r5, #32]
 80063cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063d0:	d105      	bne.n	80063de <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80063d2:	6862      	ldr	r2, [r4, #4]
 80063d4:	68a9      	ldr	r1, [r5, #8]
 80063d6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80063da:	430a      	orrs	r2, r1
 80063dc:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063de:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80063e0:	6862      	ldr	r2, [r4, #4]
 80063e2:	430b      	orrs	r3, r1
 80063e4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80063e8:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80063ea:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063ec:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80063ee:	4b1a      	ldr	r3, [pc, #104]	; (8006458 <HAL_RCC_OscConfig+0x334>)
 80063f0:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80063f2:	f7fe febb 	bl	800516c <HAL_GetTick>
 80063f6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	019a      	lsls	r2, r3, #6
 80063fc:	f53f aea8 	bmi.w	8006150 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006400:	f7fe feb4 	bl	800516c <HAL_GetTick>
 8006404:	1b40      	subs	r0, r0, r5
 8006406:	2802      	cmp	r0, #2
 8006408:	d9f6      	bls.n	80063f8 <HAL_RCC_OscConfig+0x2d4>
 800640a:	e6cc      	b.n	80061a6 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800640c:	f7fe feae 	bl	800516c <HAL_GetTick>
 8006410:	1b80      	subs	r0, r0, r6
 8006412:	2802      	cmp	r0, #2
 8006414:	d9d6      	bls.n	80063c4 <HAL_RCC_OscConfig+0x2a0>
 8006416:	e6c6      	b.n	80061a6 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8006418:	f7fe fea8 	bl	800516c <HAL_GetTick>
 800641c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	019b      	lsls	r3, r3, #6
 8006422:	f57f ae95 	bpl.w	8006150 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006426:	f7fe fea1 	bl	800516c <HAL_GetTick>
 800642a:	1b40      	subs	r0, r0, r5
 800642c:	2802      	cmp	r0, #2
 800642e:	d9f6      	bls.n	800641e <HAL_RCC_OscConfig+0x2fa>
 8006430:	e6b9      	b.n	80061a6 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006432:	2801      	cmp	r0, #1
 8006434:	f43f aeb8 	beq.w	80061a8 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8006438:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800643a:	6a2a      	ldr	r2, [r5, #32]
 800643c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8006440:	4291      	cmp	r1, r2
 8006442:	f47f ae9b 	bne.w	800617c <HAL_RCC_OscConfig+0x58>
 8006446:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006448:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800644c:	4293      	cmp	r3, r2
 800644e:	f43f ae7f 	beq.w	8006150 <HAL_RCC_OscConfig+0x2c>
 8006452:	e693      	b.n	800617c <HAL_RCC_OscConfig+0x58>
 8006454:	40021000 	.word	0x40021000
 8006458:	42420000 	.word	0x42420000

0800645c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800645c:	4a0d      	ldr	r2, [pc, #52]	; (8006494 <HAL_RCC_GetSysClockFreq+0x38>)
 800645e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8006460:	f003 010c 	and.w	r1, r3, #12
 8006464:	2908      	cmp	r1, #8
 8006466:	d112      	bne.n	800648e <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006468:	480b      	ldr	r0, [pc, #44]	; (8006498 <HAL_RCC_GetSysClockFreq+0x3c>)
 800646a:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800646e:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006470:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006472:	d509      	bpl.n	8006488 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006474:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006476:	4a09      	ldr	r2, [pc, #36]	; (800649c <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006478:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800647c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800647e:	4a08      	ldr	r2, [pc, #32]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x44>)
 8006480:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006482:	fbb0 f0f3 	udiv	r0, r0, r3
 8006486:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006488:	4b06      	ldr	r3, [pc, #24]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x48>)
 800648a:	4358      	muls	r0, r3
 800648c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800648e:	4803      	ldr	r0, [pc, #12]	; (800649c <HAL_RCC_GetSysClockFreq+0x40>)
}
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	40021000 	.word	0x40021000
 8006498:	0800bafe 	.word	0x0800bafe
 800649c:	007a1200 	.word	0x007a1200
 80064a0:	0800bb0e 	.word	0x0800bb0e
 80064a4:	003d0900 	.word	0x003d0900

080064a8 <HAL_RCC_ClockConfig>:
{
 80064a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ac:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80064ae:	4604      	mov	r4, r0
 80064b0:	b910      	cbnz	r0, 80064b8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80064b2:	2001      	movs	r0, #1
}
 80064b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064b8:	4a44      	ldr	r2, [pc, #272]	; (80065cc <HAL_RCC_ClockConfig+0x124>)
 80064ba:	6813      	ldr	r3, [r2, #0]
 80064bc:	f003 0307 	and.w	r3, r3, #7
 80064c0:	428b      	cmp	r3, r1
 80064c2:	d328      	bcc.n	8006516 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064c4:	6821      	ldr	r1, [r4, #0]
 80064c6:	078e      	lsls	r6, r1, #30
 80064c8:	d430      	bmi.n	800652c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ca:	07ca      	lsls	r2, r1, #31
 80064cc:	d443      	bmi.n	8006556 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064ce:	4a3f      	ldr	r2, [pc, #252]	; (80065cc <HAL_RCC_ClockConfig+0x124>)
 80064d0:	6813      	ldr	r3, [r2, #0]
 80064d2:	f003 0307 	and.w	r3, r3, #7
 80064d6:	42ab      	cmp	r3, r5
 80064d8:	d865      	bhi.n	80065a6 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064da:	6822      	ldr	r2, [r4, #0]
 80064dc:	4d3c      	ldr	r5, [pc, #240]	; (80065d0 <HAL_RCC_ClockConfig+0x128>)
 80064de:	f012 0f04 	tst.w	r2, #4
 80064e2:	d16c      	bne.n	80065be <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064e4:	0713      	lsls	r3, r2, #28
 80064e6:	d506      	bpl.n	80064f6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80064e8:	686b      	ldr	r3, [r5, #4]
 80064ea:	6922      	ldr	r2, [r4, #16]
 80064ec:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80064f0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80064f4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80064f6:	f7ff ffb1 	bl	800645c <HAL_RCC_GetSysClockFreq>
 80064fa:	686b      	ldr	r3, [r5, #4]
 80064fc:	4a35      	ldr	r2, [pc, #212]	; (80065d4 <HAL_RCC_ClockConfig+0x12c>)
 80064fe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006502:	5cd3      	ldrb	r3, [r2, r3]
 8006504:	40d8      	lsrs	r0, r3
 8006506:	4b34      	ldr	r3, [pc, #208]	; (80065d8 <HAL_RCC_ClockConfig+0x130>)
 8006508:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800650a:	4b34      	ldr	r3, [pc, #208]	; (80065dc <HAL_RCC_ClockConfig+0x134>)
 800650c:	6818      	ldr	r0, [r3, #0]
 800650e:	f7fe fdeb 	bl	80050e8 <HAL_InitTick>
  return HAL_OK;
 8006512:	2000      	movs	r0, #0
 8006514:	e7ce      	b.n	80064b4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006516:	6813      	ldr	r3, [r2, #0]
 8006518:	f023 0307 	bic.w	r3, r3, #7
 800651c:	430b      	orrs	r3, r1
 800651e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006520:	6813      	ldr	r3, [r2, #0]
 8006522:	f003 0307 	and.w	r3, r3, #7
 8006526:	428b      	cmp	r3, r1
 8006528:	d1c3      	bne.n	80064b2 <HAL_RCC_ClockConfig+0xa>
 800652a:	e7cb      	b.n	80064c4 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800652c:	4b28      	ldr	r3, [pc, #160]	; (80065d0 <HAL_RCC_ClockConfig+0x128>)
 800652e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006532:	bf1e      	ittt	ne
 8006534:	685a      	ldrne	r2, [r3, #4]
 8006536:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800653a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800653c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800653e:	bf42      	ittt	mi
 8006540:	685a      	ldrmi	r2, [r3, #4]
 8006542:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8006546:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	68a0      	ldr	r0, [r4, #8]
 800654c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006550:	4302      	orrs	r2, r0
 8006552:	605a      	str	r2, [r3, #4]
 8006554:	e7b9      	b.n	80064ca <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006556:	6862      	ldr	r2, [r4, #4]
 8006558:	4e1d      	ldr	r6, [pc, #116]	; (80065d0 <HAL_RCC_ClockConfig+0x128>)
 800655a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800655c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800655e:	d11a      	bne.n	8006596 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006560:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006564:	d0a5      	beq.n	80064b2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006566:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006568:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800656c:	f023 0303 	bic.w	r3, r3, #3
 8006570:	4313      	orrs	r3, r2
 8006572:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8006574:	f7fe fdfa 	bl	800516c <HAL_GetTick>
 8006578:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800657a:	6873      	ldr	r3, [r6, #4]
 800657c:	6862      	ldr	r2, [r4, #4]
 800657e:	f003 030c 	and.w	r3, r3, #12
 8006582:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006586:	d0a2      	beq.n	80064ce <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006588:	f7fe fdf0 	bl	800516c <HAL_GetTick>
 800658c:	1bc0      	subs	r0, r0, r7
 800658e:	4540      	cmp	r0, r8
 8006590:	d9f3      	bls.n	800657a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8006592:	2003      	movs	r0, #3
 8006594:	e78e      	b.n	80064b4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006596:	2a02      	cmp	r2, #2
 8006598:	d102      	bne.n	80065a0 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800659a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800659e:	e7e1      	b.n	8006564 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065a0:	f013 0f02 	tst.w	r3, #2
 80065a4:	e7de      	b.n	8006564 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065a6:	6813      	ldr	r3, [r2, #0]
 80065a8:	f023 0307 	bic.w	r3, r3, #7
 80065ac:	432b      	orrs	r3, r5
 80065ae:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065b0:	6813      	ldr	r3, [r2, #0]
 80065b2:	f003 0307 	and.w	r3, r3, #7
 80065b6:	42ab      	cmp	r3, r5
 80065b8:	f47f af7b 	bne.w	80064b2 <HAL_RCC_ClockConfig+0xa>
 80065bc:	e78d      	b.n	80064da <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065be:	686b      	ldr	r3, [r5, #4]
 80065c0:	68e1      	ldr	r1, [r4, #12]
 80065c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80065c6:	430b      	orrs	r3, r1
 80065c8:	606b      	str	r3, [r5, #4]
 80065ca:	e78b      	b.n	80064e4 <HAL_RCC_ClockConfig+0x3c>
 80065cc:	40022000 	.word	0x40022000
 80065d0:	40021000 	.word	0x40021000
 80065d4:	0800baee 	.word	0x0800baee
 80065d8:	20000000 	.word	0x20000000
 80065dc:	20000008 	.word	0x20000008

080065e0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80065e0:	6803      	ldr	r3, [r0, #0]
{
 80065e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80065e6:	07d9      	lsls	r1, r3, #31
{
 80065e8:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80065ea:	d520      	bpl.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065ec:	4c36      	ldr	r4, [pc, #216]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80065ee:	69e3      	ldr	r3, [r4, #28]
 80065f0:	00da      	lsls	r2, r3, #3
 80065f2:	d432      	bmi.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80065f4:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80065f6:	69e3      	ldr	r3, [r4, #28]
 80065f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065fc:	61e3      	str	r3, [r4, #28]
 80065fe:	69e3      	ldr	r3, [r4, #28]
 8006600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006604:	9301      	str	r3, [sp, #4]
 8006606:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006608:	4f30      	ldr	r7, [pc, #192]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0xec>)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	05db      	lsls	r3, r3, #23
 800660e:	d526      	bpl.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006610:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006612:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006616:	d136      	bne.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006618:	6a23      	ldr	r3, [r4, #32]
 800661a:	686a      	ldr	r2, [r5, #4]
 800661c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006620:	4313      	orrs	r3, r2
 8006622:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006624:	b11e      	cbz	r6, 800662e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006626:	69e3      	ldr	r3, [r4, #28]
 8006628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800662c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800662e:	6828      	ldr	r0, [r5, #0]
 8006630:	0783      	lsls	r3, r0, #30
 8006632:	d506      	bpl.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006634:	4924      	ldr	r1, [pc, #144]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006636:	68ab      	ldr	r3, [r5, #8]
 8006638:	684a      	ldr	r2, [r1, #4]
 800663a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800663e:	431a      	orrs	r2, r3
 8006640:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006642:	f010 0010 	ands.w	r0, r0, #16
 8006646:	d01b      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006648:	4a1f      	ldr	r2, [pc, #124]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800664a:	68e9      	ldr	r1, [r5, #12]
 800664c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800664e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006650:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006654:	430b      	orrs	r3, r1
 8006656:	6053      	str	r3, [r2, #4]
 8006658:	e012      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 800665a:	2600      	movs	r6, #0
 800665c:	e7d4      	b.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006664:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8006666:	f7fe fd81 	bl	800516c <HAL_GetTick>
 800666a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	05d8      	lsls	r0, r3, #23
 8006670:	d4ce      	bmi.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006672:	f7fe fd7b 	bl	800516c <HAL_GetTick>
 8006676:	eba0 0008 	sub.w	r0, r0, r8
 800667a:	2864      	cmp	r0, #100	; 0x64
 800667c:	d9f6      	bls.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800667e:	2003      	movs	r0, #3
}
 8006680:	b002      	add	sp, #8
 8006682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006686:	686a      	ldr	r2, [r5, #4]
 8006688:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800668c:	429a      	cmp	r2, r3
 800668e:	d0c3      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8006690:	2001      	movs	r0, #1
 8006692:	4a0f      	ldr	r2, [pc, #60]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006694:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8006696:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 800669a:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800669c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066a0:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 80066a4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80066a6:	07d9      	lsls	r1, r3, #31
 80066a8:	d5b6      	bpl.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80066aa:	f7fe fd5f 	bl	800516c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ae:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80066b2:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066b4:	6a23      	ldr	r3, [r4, #32]
 80066b6:	079a      	lsls	r2, r3, #30
 80066b8:	d4ae      	bmi.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ba:	f7fe fd57 	bl	800516c <HAL_GetTick>
 80066be:	1bc0      	subs	r0, r0, r7
 80066c0:	4540      	cmp	r0, r8
 80066c2:	d9f7      	bls.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80066c4:	e7db      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80066c6:	bf00      	nop
 80066c8:	40021000 	.word	0x40021000
 80066cc:	40007000 	.word	0x40007000
 80066d0:	42420000 	.word	0x42420000

080066d4 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80066d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80066d8:	461c      	mov	r4, r3
 80066da:	4616      	mov	r6, r2
 80066dc:	460f      	mov	r7, r1
 80066de:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066e0:	f7fe fd44 	bl	800516c <HAL_GetTick>
 80066e4:	4434      	add	r4, r6
 80066e6:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80066e8:	f7fe fd40 	bl	800516c <HAL_GetTick>
 80066ec:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80066ee:	4b23      	ldr	r3, [pc, #140]	; (800677c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80066f6:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066f8:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 80066fa:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066fc:	6893      	ldr	r3, [r2, #8]
 80066fe:	ea37 0303 	bics.w	r3, r7, r3
 8006702:	d001      	beq.n	8006708 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8006704:	2000      	movs	r0, #0
 8006706:	e02e      	b.n	8006766 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8006708:	1c73      	adds	r3, r6, #1
 800670a:	d0f7      	beq.n	80066fc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800670c:	f7fe fd2e 	bl	800516c <HAL_GetTick>
 8006710:	eba0 0008 	sub.w	r0, r0, r8
 8006714:	42a0      	cmp	r0, r4
 8006716:	d329      	bcc.n	800676c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006718:	682b      	ldr	r3, [r5, #0]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006720:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006722:	686a      	ldr	r2, [r5, #4]
 8006724:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8006728:	d10a      	bne.n	8006740 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 800672a:	68aa      	ldr	r2, [r5, #8]
 800672c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006730:	d002      	beq.n	8006738 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006732:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006736:	d103      	bne.n	8006740 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800673e:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006740:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8006742:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006746:	d107      	bne.n	8006758 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006756:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006758:	2301      	movs	r3, #1
 800675a:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800675e:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8006760:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8006762:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8006766:	b002      	add	sp, #8
 8006768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (count == 0U)
 800676c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800676e:	2b00      	cmp	r3, #0
      count--;
 8006770:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8006772:	bf08      	it	eq
 8006774:	2400      	moveq	r4, #0
      count--;
 8006776:	3b01      	subs	r3, #1
 8006778:	e7be      	b.n	80066f8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 800677a:	bf00      	nop
 800677c:	20000000 	.word	0x20000000

08006780 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006780:	b510      	push	{r4, lr}
 8006782:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006784:	460a      	mov	r2, r1
 8006786:	2180      	movs	r1, #128	; 0x80
{
 8006788:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800678a:	f7ff ffa3 	bl	80066d4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800678e:	b120      	cbz	r0, 800679a <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8006790:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006792:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006794:	f043 0320 	orr.w	r3, r3, #32
 8006798:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 800679a:	bd10      	pop	{r4, pc}

0800679c <HAL_SPI_Init>:
{
 800679c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800679e:	4604      	mov	r4, r0
 80067a0:	2800      	cmp	r0, #0
 80067a2:	d051      	beq.n	8006848 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d14a      	bne.n	8006840 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067aa:	6842      	ldr	r2, [r0, #4]
 80067ac:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80067b0:	d000      	beq.n	80067b4 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067b2:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067b4:	2300      	movs	r3, #0
 80067b6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80067b8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80067bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80067c0:	b923      	cbnz	r3, 80067cc <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 80067c2:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80067c4:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80067c8:	f7fe fbb6 	bl	8004f38 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80067cc:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80067ce:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80067d0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80067d4:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067d6:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80067d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067dc:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067de:	6863      	ldr	r3, [r4, #4]
 80067e0:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 80067e4:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80067e8:	4303      	orrs	r3, r0
 80067ea:	68e0      	ldr	r0, [r4, #12]
 80067ec:	69a1      	ldr	r1, [r4, #24]
 80067ee:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 80067f2:	4303      	orrs	r3, r0
 80067f4:	6920      	ldr	r0, [r4, #16]
 80067f6:	f000 0002 	and.w	r0, r0, #2
 80067fa:	4303      	orrs	r3, r0
 80067fc:	6960      	ldr	r0, [r4, #20]
 80067fe:	f000 0001 	and.w	r0, r0, #1
 8006802:	4303      	orrs	r3, r0
 8006804:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8006808:	4303      	orrs	r3, r0
 800680a:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800680c:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800680e:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8006812:	4303      	orrs	r3, r0
 8006814:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006816:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800681a:	f000 0080 	and.w	r0, r0, #128	; 0x80
 800681e:	4303      	orrs	r3, r0
 8006820:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006822:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8006826:	4303      	orrs	r3, r0
 8006828:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800682a:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800682c:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800682e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006830:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006834:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8006836:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006838:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800683a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800683e:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006840:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006842:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006846:	e7b5      	b.n	80067b4 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8006848:	2001      	movs	r0, #1
 800684a:	e7f8      	b.n	800683e <HAL_SPI_Init+0xa2>

0800684c <HAL_SPI_Transmit>:
{
 800684c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006850:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8006852:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8006856:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8006858:	2b01      	cmp	r3, #1
{
 800685a:	460d      	mov	r5, r1
 800685c:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 800685e:	f000 80a6 	beq.w	80069ae <HAL_SPI_Transmit+0x162>
 8006862:	2301      	movs	r3, #1
 8006864:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8006868:	f7fe fc80 	bl	800516c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800686c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8006870:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006872:	2b01      	cmp	r3, #1
 8006874:	fa5f f883 	uxtb.w	r8, r3
 8006878:	f040 8096 	bne.w	80069a8 <HAL_SPI_Transmit+0x15c>
  if ((pData == NULL) || (Size == 0U))
 800687c:	2d00      	cmp	r5, #0
 800687e:	d063      	beq.n	8006948 <HAL_SPI_Transmit+0xfc>
 8006880:	2f00      	cmp	r7, #0
 8006882:	d061      	beq.n	8006948 <HAL_SPI_Transmit+0xfc>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006884:	2303      	movs	r3, #3
 8006886:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800688a:	2300      	movs	r3, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800688c:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800688e:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006890:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->RxISR       = NULL;
 8006894:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8006898:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800689a:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800689c:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800689e:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80068a0:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_DISABLE(hspi);
 80068a2:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 80068a4:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068a6:	d107      	bne.n	80068b8 <HAL_SPI_Transmit+0x6c>
    __HAL_SPI_DISABLE(hspi);
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068b6:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068b8:	681a      	ldr	r2, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068ba:	6861      	ldr	r1, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068bc:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80068be:	bf5e      	ittt	pl
 80068c0:	681a      	ldrpl	r2, [r3, #0]
 80068c2:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80068c6:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80068c8:	68e2      	ldr	r2, [r4, #12]
 80068ca:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80068ce:	d145      	bne.n	800695c <HAL_SPI_Transmit+0x110>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068d0:	b109      	cbz	r1, 80068d6 <HAL_SPI_Transmit+0x8a>
 80068d2:	2f01      	cmp	r7, #1
 80068d4:	d107      	bne.n	80068e6 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068d6:	f835 2b02 	ldrh.w	r2, [r5], #2
 80068da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068dc:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80068de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80068e0:	3b01      	subs	r3, #1
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80068e6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	b9b3      	cbnz	r3, 800691a <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068ec:	464a      	mov	r2, r9
 80068ee:	4631      	mov	r1, r6
 80068f0:	4620      	mov	r0, r4
 80068f2:	f7ff ff45 	bl	8006780 <SPI_EndRxTxTransaction>
 80068f6:	2800      	cmp	r0, #0
 80068f8:	d153      	bne.n	80069a2 <HAL_SPI_Transmit+0x156>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068fa:	68a3      	ldr	r3, [r4, #8]
 80068fc:	b933      	cbnz	r3, 800690c <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068fe:	9301      	str	r3, [sp, #4]
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	68da      	ldr	r2, [r3, #12]
 8006904:	9201      	str	r2, [sp, #4]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	9301      	str	r3, [sp, #4]
 800690a:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800690c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800690e:	b9db      	cbnz	r3, 8006948 <HAL_SPI_Transmit+0xfc>
    hspi->State = HAL_SPI_STATE_READY;
 8006910:	2201      	movs	r2, #1
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006912:	4698      	mov	r8, r3
    hspi->State = HAL_SPI_STATE_READY;
 8006914:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
 8006918:	e016      	b.n	8006948 <HAL_SPI_Transmit+0xfc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800691a:	6822      	ldr	r2, [r4, #0]
 800691c:	6893      	ldr	r3, [r2, #8]
 800691e:	0798      	lsls	r0, r3, #30
 8006920:	d505      	bpl.n	800692e <HAL_SPI_Transmit+0xe2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006922:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006924:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006928:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800692a:	6323      	str	r3, [r4, #48]	; 0x30
 800692c:	e7d7      	b.n	80068de <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800692e:	f7fe fc1d 	bl	800516c <HAL_GetTick>
 8006932:	eba0 0009 	sub.w	r0, r0, r9
 8006936:	42b0      	cmp	r0, r6
 8006938:	d30d      	bcc.n	8006956 <HAL_SPI_Transmit+0x10a>
 800693a:	1c71      	adds	r1, r6, #1
 800693c:	d0d3      	beq.n	80068e6 <HAL_SPI_Transmit+0x9a>
          hspi->State = HAL_SPI_STATE_READY;
 800693e:	2301      	movs	r3, #1
          errorcode = HAL_TIMEOUT;
 8006940:	f04f 0803 	mov.w	r8, #3
          hspi->State = HAL_SPI_STATE_READY;
 8006944:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006948:	2300      	movs	r3, #0
 800694a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800694e:	4640      	mov	r0, r8
 8006950:	b003      	add	sp, #12
 8006952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006956:	2e00      	cmp	r6, #0
 8006958:	d1c5      	bne.n	80068e6 <HAL_SPI_Transmit+0x9a>
 800695a:	e7f0      	b.n	800693e <HAL_SPI_Transmit+0xf2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800695c:	b109      	cbz	r1, 8006962 <HAL_SPI_Transmit+0x116>
 800695e:	2f01      	cmp	r7, #1
 8006960:	d108      	bne.n	8006974 <HAL_SPI_Transmit+0x128>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006962:	782a      	ldrb	r2, [r5, #0]
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006964:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006966:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006968:	3301      	adds	r3, #1
 800696a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800696c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800696e:	3b01      	subs	r3, #1
 8006970:	b29b      	uxth	r3, r3
 8006972:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8006974:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006976:	b29b      	uxth	r3, r3
 8006978:	2b00      	cmp	r3, #0
 800697a:	d0b7      	beq.n	80068ec <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	0792      	lsls	r2, r2, #30
 8006982:	d502      	bpl.n	800698a <HAL_SPI_Transmit+0x13e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006984:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006986:	7812      	ldrb	r2, [r2, #0]
 8006988:	e7ec      	b.n	8006964 <HAL_SPI_Transmit+0x118>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800698a:	f7fe fbef 	bl	800516c <HAL_GetTick>
 800698e:	eba0 0009 	sub.w	r0, r0, r9
 8006992:	42b0      	cmp	r0, r6
 8006994:	d302      	bcc.n	800699c <HAL_SPI_Transmit+0x150>
 8006996:	1c73      	adds	r3, r6, #1
 8006998:	d0ec      	beq.n	8006974 <HAL_SPI_Transmit+0x128>
 800699a:	e7d0      	b.n	800693e <HAL_SPI_Transmit+0xf2>
 800699c:	2e00      	cmp	r6, #0
 800699e:	d1e9      	bne.n	8006974 <HAL_SPI_Transmit+0x128>
 80069a0:	e7cd      	b.n	800693e <HAL_SPI_Transmit+0xf2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069a2:	2320      	movs	r3, #32
 80069a4:	6563      	str	r3, [r4, #84]	; 0x54
 80069a6:	e7a8      	b.n	80068fa <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 80069a8:	f04f 0802 	mov.w	r8, #2
 80069ac:	e7cc      	b.n	8006948 <HAL_SPI_Transmit+0xfc>
  __HAL_LOCK(hspi);
 80069ae:	f04f 0802 	mov.w	r8, #2
 80069b2:	e7cc      	b.n	800694e <HAL_SPI_Transmit+0x102>

080069b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80069b4:	b084      	sub	sp, #16
 80069b6:	a801      	add	r0, sp, #4
 80069b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80069bc:	b004      	add	sp, #16
 80069be:	2000      	movs	r0, #0
 80069c0:	4770      	bx	lr

080069c2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80069c2:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80069c4:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 80069c8:	2000      	movs	r0, #0
 80069ca:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 80069ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 80069d2:	4770      	bx	lr

080069d4 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80069d4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80069d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80069dc:	045b      	lsls	r3, r3, #17
 80069de:	0c5b      	lsrs	r3, r3, #17
 80069e0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80069e4:	2000      	movs	r0, #0
 80069e6:	4770      	bx	lr

080069e8 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80069e8:	2000      	movs	r0, #0
 80069ea:	4770      	bx	lr

080069ec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80069ec:	b084      	sub	sp, #16
 80069ee:	b510      	push	{r4, lr}
 80069f0:	4604      	mov	r4, r0
 80069f2:	a803      	add	r0, sp, #12
 80069f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80069f8:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80069fa:	2301      	movs	r3, #1
 80069fc:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0U;
 8006a00:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006a04:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006a08:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 8006a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a10:	b004      	add	sp, #16
 8006a12:	4770      	bx	lr

08006a14 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a14:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006a16:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8006a18:	78ce      	ldrb	r6, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006a1a:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 8006a1e:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006a20:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8006a24:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8006a28:	0424      	lsls	r4, r4, #16
 8006a2a:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 8006a2c:	2e03      	cmp	r6, #3
 8006a2e:	d84c      	bhi.n	8006aca <USB_ActivateEndpoint+0xb6>
 8006a30:	e8df f006 	tbb	[pc, r6]
 8006a34:	44464802 	.word	0x44464802
  HAL_StatusTypeDef ret = HAL_OK;
 8006a38:	4630      	mov	r0, r6
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006a3a:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006a3e:	f248 0780 	movw	r7, #32896	; 0x8080
 8006a42:	433c      	orrs	r4, r7
 8006a44:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006a48:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8006a4c:	f8df c27c 	ldr.w	ip, [pc, #636]	; 8006ccc <USB_ActivateEndpoint+0x2b8>
 8006a50:	b2a4      	uxth	r4, r4
 8006a52:	ea04 040c 	and.w	r4, r4, ip
 8006a56:	4314      	orrs	r4, r2
 8006a58:	433c      	orrs	r4, r7
 8006a5a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8006a5e:	7b0c      	ldrb	r4, [r1, #12]
 8006a60:	eb03 1e02 	add.w	lr, r3, r2, lsl #4
 8006a64:	2c00      	cmp	r4, #0
 8006a66:	f040 808b 	bne.w	8006b80 <USB_ActivateEndpoint+0x16c>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006a6a:	88cd      	ldrh	r5, [r1, #6]
    if (ep->is_in != 0U)
 8006a6c:	784c      	ldrb	r4, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006a6e:	086d      	lsrs	r5, r5, #1
 8006a70:	006d      	lsls	r5, r5, #1
    if (ep->is_in != 0U)
 8006a72:	b364      	cbz	r4, 8006ace <USB_ActivateEndpoint+0xba>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006a74:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8006a78:	b2a4      	uxth	r4, r4
 8006a7a:	4474      	add	r4, lr
 8006a7c:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a80:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006a84:	064f      	lsls	r7, r1, #25
 8006a86:	d50a      	bpl.n	8006a9e <USB_ActivateEndpoint+0x8a>
 8006a88:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8006a8c:	b2ad      	uxth	r5, r5
 8006a8e:	ea05 050c 	and.w	r5, r5, ip
 8006a92:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8006a96:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
 8006a9a:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a9e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006aa2:	4c8b      	ldr	r4, [pc, #556]	; (8006cd0 <USB_ActivateEndpoint+0x2bc>)
 8006aa4:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8006aa6:	2e01      	cmp	r6, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006aa8:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8006aac:	d001      	beq.n	8006ab2 <USB_ActivateEndpoint+0x9e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006aae:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ab2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8006ab6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8006aba:	e0bf      	b.n	8006c3c <USB_ActivateEndpoint+0x228>
      wEpRegVal |= USB_EP_INTERRUPT;
 8006abc:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8006ac0:	2000      	movs	r0, #0
      break;
 8006ac2:	e7bc      	b.n	8006a3e <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006ac4:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
      break;
 8006ac8:	e7fa      	b.n	8006ac0 <USB_ActivateEndpoint+0xac>
  switch (ep->type)
 8006aca:	2001      	movs	r0, #1
 8006acc:	e7b7      	b.n	8006a3e <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ace:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8006ad2:	b2a4      	uxth	r4, r4
 8006ad4:	4474      	add	r4, lr
 8006ad6:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006ada:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8006ade:	b2a4      	uxth	r4, r4
 8006ae0:	4474      	add	r4, lr
 8006ae2:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	; 0x40c
 8006ae6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006aea:	f8a4 540c 	strh.w	r5, [r4, #1036]	; 0x40c
 8006aee:	690d      	ldr	r5, [r1, #16]
 8006af0:	2d3e      	cmp	r5, #62	; 0x3e
 8006af2:	d92f      	bls.n	8006b54 <USB_ActivateEndpoint+0x140>
 8006af4:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 8006af8:	096e      	lsrs	r6, r5, #5
 8006afa:	06ed      	lsls	r5, r5, #27
 8006afc:	bf08      	it	eq
 8006afe:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8006b02:	b289      	uxth	r1, r1
 8006b04:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8006b08:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8006b0c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8006b10:	b289      	uxth	r1, r1
 8006b12:	f8a4 140c 	strh.w	r1, [r4, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b16:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006b1a:	044f      	lsls	r7, r1, #17
 8006b1c:	d50d      	bpl.n	8006b3a <USB_ActivateEndpoint+0x126>
 8006b1e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006b22:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8006b26:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8006b2a:	0409      	lsls	r1, r1, #16
 8006b2c:	0c09      	lsrs	r1, r1, #16
 8006b2e:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8006b32:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8006b36:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 8006b3a:	4c66      	ldr	r4, [pc, #408]	; (8006cd4 <USB_ActivateEndpoint+0x2c0>)
 8006b3c:	b9ca      	cbnz	r2, 8006b72 <USB_ActivateEndpoint+0x15e>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b3e:	8819      	ldrh	r1, [r3, #0]
 8006b40:	b289      	uxth	r1, r1
 8006b42:	4021      	ands	r1, r4
 8006b44:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8006b48:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8006b4c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8006b50:	8019      	strh	r1, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8006b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006b54:	b915      	cbnz	r5, 8006b5c <USB_ActivateEndpoint+0x148>
 8006b56:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 8006b5a:	e7d5      	b.n	8006b08 <USB_ActivateEndpoint+0xf4>
 8006b5c:	07e9      	lsls	r1, r5, #31
 8006b5e:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 8006b62:	ea4f 0655 	mov.w	r6, r5, lsr #1
 8006b66:	bf48      	it	mi
 8006b68:	3601      	addmi	r6, #1
 8006b6a:	b289      	uxth	r1, r1
 8006b6c:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8006b70:	e7ce      	b.n	8006b10 <USB_ActivateEndpoint+0xfc>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006b72:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006b76:	b289      	uxth	r1, r1
 8006b78:	4021      	ands	r1, r4
 8006b7a:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8006b7e:	e798      	b.n	8006ab2 <USB_ActivateEndpoint+0x9e>
    if (ep->type == EP_TYPE_BULK)
 8006b80:	2e02      	cmp	r6, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006b82:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8006b86:	d15c      	bne.n	8006c42 <USB_ActivateEndpoint+0x22e>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006b88:	b2ad      	uxth	r5, r5
 8006b8a:	ea05 050c 	and.w	r5, r5, ip
 8006b8e:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 8006b92:	f045 0580 	orr.w	r5, r5, #128	; 0x80
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006b96:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006b9a:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8006b9e:	890d      	ldrh	r5, [r1, #8]
 8006ba0:	b2a4      	uxth	r4, r4
 8006ba2:	086d      	lsrs	r5, r5, #1
 8006ba4:	4474      	add	r4, lr
 8006ba6:	006d      	lsls	r5, r5, #1
 8006ba8:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
 8006bac:	894d      	ldrh	r5, [r1, #10]
 8006bae:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8006bb2:	086d      	lsrs	r5, r5, #1
 8006bb4:	b2a4      	uxth	r4, r4
 8006bb6:	4474      	add	r4, lr
 8006bb8:	006d      	lsls	r5, r5, #1
 8006bba:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
    if (ep->is_in == 0U)
 8006bbe:	7849      	ldrb	r1, [r1, #1]
 8006bc0:	2900      	cmp	r1, #0
 8006bc2:	d146      	bne.n	8006c52 <USB_ActivateEndpoint+0x23e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bc4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006bc8:	044e      	lsls	r6, r1, #17
 8006bca:	d50d      	bpl.n	8006be8 <USB_ActivateEndpoint+0x1d4>
 8006bcc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006bd0:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8006bd4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8006bd8:	0409      	lsls	r1, r1, #16
 8006bda:	0c09      	lsrs	r1, r1, #16
 8006bdc:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8006be0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8006be4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006be8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006bec:	064d      	lsls	r5, r1, #25
 8006bee:	d50d      	bpl.n	8006c0c <USB_ActivateEndpoint+0x1f8>
 8006bf0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006bf4:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8006bf8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8006bfc:	0409      	lsls	r1, r1, #16
 8006bfe:	0c09      	lsrs	r1, r1, #16
 8006c00:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8006c04:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8006c08:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c0c:	f248 0480 	movw	r4, #32896	; 0x8080
 8006c10:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006c14:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8006c18:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8006c1c:	0409      	lsls	r1, r1, #16
 8006c1e:	0c09      	lsrs	r1, r1, #16
 8006c20:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8006c24:	4321      	orrs	r1, r4
 8006c26:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c2a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006c2e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8006c32:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8006c36:	0409      	lsls	r1, r1, #16
 8006c38:	0c09      	lsrs	r1, r1, #16
 8006c3a:	4321      	orrs	r1, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c3c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8006c40:	e787      	b.n	8006b52 <USB_ActivateEndpoint+0x13e>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006c42:	f425 45e2 	bic.w	r5, r5, #28928	; 0x7100
 8006c46:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 8006c4a:	042d      	lsls	r5, r5, #16
 8006c4c:	0c2d      	lsrs	r5, r5, #16
 8006c4e:	433d      	orrs	r5, r7
 8006c50:	e7a1      	b.n	8006b96 <USB_ActivateEndpoint+0x182>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c52:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006c56:	044c      	lsls	r4, r1, #17
 8006c58:	d50d      	bpl.n	8006c76 <USB_ActivateEndpoint+0x262>
 8006c5a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006c5e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8006c62:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8006c66:	0409      	lsls	r1, r1, #16
 8006c68:	0c09      	lsrs	r1, r1, #16
 8006c6a:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8006c6e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8006c72:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c76:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006c7a:	0649      	lsls	r1, r1, #25
 8006c7c:	d50d      	bpl.n	8006c9a <USB_ActivateEndpoint+0x286>
 8006c7e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006c82:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8006c86:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8006c8a:	0409      	lsls	r1, r1, #16
 8006c8c:	0c09      	lsrs	r1, r1, #16
 8006c8e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8006c92:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8006c96:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c9a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006c9e:	4c0c      	ldr	r4, [pc, #48]	; (8006cd0 <USB_ActivateEndpoint+0x2bc>)
 8006ca0:	b289      	uxth	r1, r1
 8006ca2:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8006ca4:	2e01      	cmp	r6, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ca6:	bf18      	it	ne
 8006ca8:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cac:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8006cb0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8006cb4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cb8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006cbc:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8006cc0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8006cc4:	0409      	lsls	r1, r1, #16
 8006cc6:	0c09      	lsrs	r1, r1, #16
 8006cc8:	e6f3      	b.n	8006ab2 <USB_ActivateEndpoint+0x9e>
 8006cca:	bf00      	nop
 8006ccc:	ffff8f8f 	.word	0xffff8f8f
 8006cd0:	ffff8fbf 	.word	0xffff8fbf
 8006cd4:	ffffbf8f 	.word	0xffffbf8f

08006cd8 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8006cd8:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cda:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8006cdc:	7b09      	ldrb	r1, [r1, #12]
 8006cde:	bbd9      	cbnz	r1, 8006d58 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8006ce0:	b30a      	cbz	r2, 8006d26 <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ce2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006ce6:	0651      	lsls	r1, r2, #25
 8006ce8:	d50d      	bpl.n	8006d06 <USB_DeactivateEndpoint+0x2e>
 8006cea:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006cee:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006cf2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006cf6:	0412      	lsls	r2, r2, #16
 8006cf8:	0c12      	lsrs	r2, r2, #16
 8006cfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cfe:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006d02:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d06:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006d0a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d12:	0412      	lsls	r2, r2, #16
 8006d14:	0c12      	lsrs	r2, r2, #16
 8006d16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d1e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8006d22:	2000      	movs	r0, #0
 8006d24:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d26:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006d2a:	0452      	lsls	r2, r2, #17
 8006d2c:	d50d      	bpl.n	8006d4a <USB_DeactivateEndpoint+0x72>
 8006d2e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006d32:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006d36:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006d3a:	0412      	lsls	r2, r2, #16
 8006d3c:	0c12      	lsrs	r2, r2, #16
 8006d3e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006d42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d46:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d4a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006d4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d52:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006d56:	e7dc      	b.n	8006d12 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8006d58:	2a00      	cmp	r2, #0
 8006d5a:	d148      	bne.n	8006dee <USB_DeactivateEndpoint+0x116>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d5c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006d60:	0451      	lsls	r1, r2, #17
 8006d62:	d50d      	bpl.n	8006d80 <USB_DeactivateEndpoint+0xa8>
 8006d64:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006d68:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006d6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006d70:	0412      	lsls	r2, r2, #16
 8006d72:	0c12      	lsrs	r2, r2, #16
 8006d74:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006d78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d7c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d80:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006d84:	0652      	lsls	r2, r2, #25
 8006d86:	d50d      	bpl.n	8006da4 <USB_DeactivateEndpoint+0xcc>
 8006d88:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006d8c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006d90:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006d94:	0412      	lsls	r2, r2, #16
 8006d96:	0c12      	lsrs	r2, r2, #16
 8006d98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d9c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006da0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006da4:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8006da8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006dac:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006db0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006db4:	0412      	lsls	r2, r2, #16
 8006db6:	0c12      	lsrs	r2, r2, #16
 8006db8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dbc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006dc0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006dc4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006dc8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006dcc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006dd0:	0412      	lsls	r2, r2, #16
 8006dd2:	0c12      	lsrs	r2, r2, #16
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006dda:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006dde:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006de6:	0412      	lsls	r2, r2, #16
 8006de8:	0c12      	lsrs	r2, r2, #16
 8006dea:	430a      	orrs	r2, r1
 8006dec:	e797      	b.n	8006d1e <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dee:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006df2:	0451      	lsls	r1, r2, #17
 8006df4:	d50d      	bpl.n	8006e12 <USB_DeactivateEndpoint+0x13a>
 8006df6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006dfa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006dfe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006e02:	0412      	lsls	r2, r2, #16
 8006e04:	0c12      	lsrs	r2, r2, #16
 8006e06:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006e0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e0e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e12:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006e16:	0652      	lsls	r2, r2, #25
 8006e18:	d50d      	bpl.n	8006e36 <USB_DeactivateEndpoint+0x15e>
 8006e1a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006e1e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006e22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006e26:	0412      	lsls	r2, r2, #16
 8006e28:	0c12      	lsrs	r2, r2, #16
 8006e2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e2e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006e32:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e36:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8006e3a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006e3e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006e42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006e46:	0412      	lsls	r2, r2, #16
 8006e48:	0c12      	lsrs	r2, r2, #16
 8006e4a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006e4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e52:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e56:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006e5a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006e5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e62:	0412      	lsls	r2, r2, #16
 8006e64:	0c12      	lsrs	r2, r2, #16
 8006e66:	430a      	orrs	r2, r1
 8006e68:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e6c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006e70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006e74:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006e78:	e7b5      	b.n	8006de6 <USB_DeactivateEndpoint+0x10e>

08006e7a <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8006e7a:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006e7c:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8006e7e:	b18b      	cbz	r3, 8006ea4 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006e80:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e8c:	041b      	lsls	r3, r3, #16
 8006e8e:	0c1b      	lsrs	r3, r3, #16
 8006e90:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e9c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006ea4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006ea8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb0:	041b      	lsls	r3, r3, #16
 8006eb2:	0c1b      	lsrs	r3, r3, #16
 8006eb4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006eb8:	e7ec      	b.n	8006e94 <USB_EPSetStall+0x1a>

08006eba <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8006eba:	7b0b      	ldrb	r3, [r1, #12]
 8006ebc:	bb3b      	cbnz	r3, 8006f0e <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 8006ebe:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ec0:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8006ec2:	b333      	cbz	r3, 8006f12 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ec4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006ec8:	065b      	lsls	r3, r3, #25
 8006eca:	d50d      	bpl.n	8006ee8 <USB_EPClearStall+0x2e>
 8006ecc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006ed0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed8:	041b      	lsls	r3, r3, #16
 8006eda:	0c1b      	lsrs	r3, r3, #16
 8006edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ee0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ee4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8006ee8:	78cb      	ldrb	r3, [r1, #3]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d00f      	beq.n	8006f0e <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006eee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006efa:	041b      	lsls	r3, r3, #16
 8006efc:	0c1b      	lsrs	r3, r3, #16
 8006efe:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f0a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8006f0e:	2000      	movs	r0, #0
 8006f10:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f12:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006f16:	045b      	lsls	r3, r3, #17
 8006f18:	d50d      	bpl.n	8006f36 <USB_EPClearStall+0x7c>
 8006f1a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f26:	041b      	lsls	r3, r3, #16
 8006f28:	0c1b      	lsrs	r3, r3, #16
 8006f2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f32:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f36:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006f3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f42:	041b      	lsls	r3, r3, #16
 8006f44:	0c1b      	lsrs	r3, r3, #16
 8006f46:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006f4a:	e7da      	b.n	8006f02 <USB_EPClearStall+0x48>

08006f4c <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8006f4c:	b911      	cbnz	r1, 8006f54 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006f4e:	2380      	movs	r3, #128	; 0x80
 8006f50:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8006f54:	2000      	movs	r0, #0
 8006f56:	4770      	bx	lr

08006f58 <USB_DevConnect>:
 8006f58:	2000      	movs	r0, #0
 8006f5a:	4770      	bx	lr

08006f5c <USB_DevDisconnect>:
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	4770      	bx	lr

08006f60 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006f60:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8006f64:	b280      	uxth	r0, r0
 8006f66:	4770      	bx	lr

08006f68 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8006f68:	2000      	movs	r0, #0
 8006f6a:	4770      	bx	lr

08006f6c <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f6c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006f70:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006f76:	085b      	lsrs	r3, r3, #1
 8006f78:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (count = n; count != 0U; count--)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d100      	bne.n	8006f82 <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8006f80:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006f82:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8006f86:	f822 0b04 	strh.w	r0, [r2], #4
  for (count = n; count != 0U; count--)
 8006f8a:	e7f7      	b.n	8006f7c <USB_WritePMA+0x10>

08006f8c <USB_EPStartXfer>:
{
 8006f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f90:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8006f92:	7849      	ldrb	r1, [r1, #1]
{
 8006f94:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 8006f96:	2901      	cmp	r1, #1
    if (ep->doublebuffer == 0U)
 8006f98:	7b22      	ldrb	r2, [r4, #12]
  if (ep->is_in == 1U)
 8006f9a:	f040 811e 	bne.w	80071da <USB_EPStartXfer+0x24e>
    if (ep->xfer_len > ep->maxpacket)
 8006f9e:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8006fa2:	69a6      	ldr	r6, [r4, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006fa4:	6961      	ldr	r1, [r4, #20]
 8006fa6:	4576      	cmp	r6, lr
 8006fa8:	bf28      	it	cs
 8006faa:	4676      	movcs	r6, lr
    if (ep->doublebuffer == 0U)
 8006fac:	bb0a      	cbnz	r2, 8006ff2 <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006fae:	b2b6      	uxth	r6, r6
 8006fb0:	88e2      	ldrh	r2, [r4, #6]
 8006fb2:	4633      	mov	r3, r6
 8006fb4:	f7ff ffda 	bl	8006f6c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006fb8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8006fbc:	7821      	ldrb	r1, [r4, #0]
 8006fbe:	b290      	uxth	r0, r2
 8006fc0:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8006fc4:	0109      	lsls	r1, r1, #4
 8006fc6:	4402      	add	r2, r0
 8006fc8:	528e      	strh	r6, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006fca:	7822      	ldrb	r2, [r4, #0]
 8006fcc:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8006fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fd8:	041b      	lsls	r3, r3, #16
 8006fda:	0c1b      	lsrs	r3, r3, #16
 8006fdc:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 8006fe0:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fea:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8006fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (ep->type == EP_TYPE_BULK)
 8006ff2:	78e2      	ldrb	r2, [r4, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006ff4:	7827      	ldrb	r7, [r4, #0]
      if (ep->type == EP_TYPE_BULK)
 8006ff6:	2a02      	cmp	r2, #2
        if (ep->xfer_len_db > ep->maxpacket)
 8006ff8:	6a23      	ldr	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ffa:	ea4f 1c07 	mov.w	ip, r7, lsl #4
      if (ep->type == EP_TYPE_BULK)
 8006ffe:	f040 80d6 	bne.w	80071ae <USB_EPStartXfer+0x222>
        if (ep->xfer_len_db > ep->maxpacket)
 8007002:	459e      	cmp	lr, r3
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007004:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8007008:	f080 80ba 	bcs.w	8007180 <USB_EPStartXfer+0x1f4>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800700c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007010:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007014:	0412      	lsls	r2, r2, #16
 8007016:	0c12      	lsrs	r2, r2, #16
 8007018:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800701c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007020:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007024:	f830 8027 	ldrh.w	r8, [r0, r7, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007028:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          ep->xfer_len_db -= len;
 800702c:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800702e:	f018 0840 	ands.w	r8, r8, #64	; 0x40
          ep->xfer_len_db -= len;
 8007032:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007034:	b297      	uxth	r7, r2
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007036:	b2b3      	uxth	r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007038:	d052      	beq.n	80070e0 <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800703a:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 800703e:	443a      	add	r2, r7
 8007040:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007044:	8962      	ldrh	r2, [r4, #10]
 8007046:	f7ff ff91 	bl	8006f6c <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800704a:	6a27      	ldr	r7, [r4, #32]
 800704c:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 800704e:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8007050:	429f      	cmp	r7, r3
              ep->xfer_len_db -= len;
 8007052:	bf8a      	itet	hi
 8007054:	1bbb      	subhi	r3, r7, r6
              ep->xfer_len_db = 0U;
 8007056:	2300      	movls	r3, #0
 8007058:	4637      	movhi	r7, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800705a:	7862      	ldrb	r2, [r4, #1]
            ep->xfer_buff += len;
 800705c:	4431      	add	r1, r6
 800705e:	6223      	str	r3, [r4, #32]
 8007060:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007062:	b2bb      	uxth	r3, r7
 8007064:	bb82      	cbnz	r2, 80070c8 <USB_EPStartXfer+0x13c>
 8007066:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800706a:	7826      	ldrb	r6, [r4, #0]
 800706c:	b282      	uxth	r2, r0
 800706e:	f205 4004 	addw	r0, r5, #1028	; 0x404
 8007072:	0136      	lsls	r6, r6, #4
 8007074:	4410      	add	r0, r2
 8007076:	5a32      	ldrh	r2, [r6, r0]
 8007078:	2f3e      	cmp	r7, #62	; 0x3e
 800707a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800707e:	5232      	strh	r2, [r6, r0]
 8007080:	d914      	bls.n	80070ac <USB_EPStartXfer+0x120>
 8007082:	06fa      	lsls	r2, r7, #27
 8007084:	5a32      	ldrh	r2, [r6, r0]
 8007086:	ea4f 1c57 	mov.w	ip, r7, lsr #5
 800708a:	bf08      	it	eq
 800708c:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8007090:	b292      	uxth	r2, r2
 8007092:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 8007096:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800709a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800709e:	b292      	uxth	r2, r2
 80070a0:	5232      	strh	r2, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070a2:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070a4:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070a6:	f7ff ff61 	bl	8006f6c <USB_WritePMA>
 80070aa:	e78e      	b.n	8006fca <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070ac:	b90f      	cbnz	r7, 80070b2 <USB_EPStartXfer+0x126>
 80070ae:	5a32      	ldrh	r2, [r6, r0]
 80070b0:	e7f1      	b.n	8007096 <USB_EPStartXfer+0x10a>
 80070b2:	5a32      	ldrh	r2, [r6, r0]
 80070b4:	ea4f 0c57 	mov.w	ip, r7, lsr #1
 80070b8:	07ff      	lsls	r7, r7, #31
 80070ba:	bf48      	it	mi
 80070bc:	f10c 0c01 	addmi.w	ip, ip, #1
 80070c0:	b292      	uxth	r2, r2
 80070c2:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 80070c6:	e7ea      	b.n	800709e <USB_EPStartXfer+0x112>
 80070c8:	2a01      	cmp	r2, #1
 80070ca:	d1ea      	bne.n	80070a2 <USB_EPStartXfer+0x116>
 80070cc:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80070d0:	7820      	ldrb	r0, [r4, #0]
 80070d2:	b296      	uxth	r6, r2
 80070d4:	f205 4204 	addw	r2, r5, #1028	; 0x404
 80070d8:	0100      	lsls	r0, r0, #4
 80070da:	4432      	add	r2, r6
 80070dc:	5283      	strh	r3, [r0, r2]
 80070de:	e7e0      	b.n	80070a2 <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070e0:	f200 4204 	addw	r2, r0, #1028	; 0x404
 80070e4:	443a      	add	r2, r7
 80070e6:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070ea:	8922      	ldrh	r2, [r4, #8]
 80070ec:	f7ff ff3e 	bl	8006f6c <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80070f0:	6a27      	ldr	r7, [r4, #32]
 80070f2:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 80070f4:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80070f6:	429f      	cmp	r7, r3
              ep->xfer_len_db -= len;
 80070f8:	bf8a      	itet	hi
 80070fa:	1bbb      	subhi	r3, r7, r6
              ep->xfer_len_db = 0U;
 80070fc:	4643      	movls	r3, r8
 80070fe:	4637      	movhi	r7, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007100:	7862      	ldrb	r2, [r4, #1]
            ep->xfer_buff += len;
 8007102:	4431      	add	r1, r6
 8007104:	6223      	str	r3, [r4, #32]
 8007106:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007108:	b2bb      	uxth	r3, r7
 800710a:	bb6a      	cbnz	r2, 8007168 <USB_EPStartXfer+0x1dc>
 800710c:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8007110:	7826      	ldrb	r6, [r4, #0]
 8007112:	b282      	uxth	r2, r0
 8007114:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8007118:	0136      	lsls	r6, r6, #4
 800711a:	4410      	add	r0, r2
 800711c:	5a32      	ldrh	r2, [r6, r0]
 800711e:	2f3e      	cmp	r7, #62	; 0x3e
 8007120:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007124:	5232      	strh	r2, [r6, r0]
 8007126:	d911      	bls.n	800714c <USB_EPStartXfer+0x1c0>
 8007128:	06fa      	lsls	r2, r7, #27
 800712a:	5a32      	ldrh	r2, [r6, r0]
 800712c:	ea4f 1c57 	mov.w	ip, r7, lsr #5
 8007130:	bf08      	it	eq
 8007132:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8007136:	b292      	uxth	r2, r2
 8007138:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 800713c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007140:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007144:	b292      	uxth	r2, r2
 8007146:	5232      	strh	r2, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007148:	8962      	ldrh	r2, [r4, #10]
 800714a:	e7ab      	b.n	80070a4 <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800714c:	b90f      	cbnz	r7, 8007152 <USB_EPStartXfer+0x1c6>
 800714e:	5a32      	ldrh	r2, [r6, r0]
 8007150:	e7f4      	b.n	800713c <USB_EPStartXfer+0x1b0>
 8007152:	5a32      	ldrh	r2, [r6, r0]
 8007154:	ea4f 0c57 	mov.w	ip, r7, lsr #1
 8007158:	07ff      	lsls	r7, r7, #31
 800715a:	bf48      	it	mi
 800715c:	f10c 0c01 	addmi.w	ip, ip, #1
 8007160:	b292      	uxth	r2, r2
 8007162:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 8007166:	e7ed      	b.n	8007144 <USB_EPStartXfer+0x1b8>
 8007168:	2a01      	cmp	r2, #1
 800716a:	d1ed      	bne.n	8007148 <USB_EPStartXfer+0x1bc>
 800716c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007170:	7820      	ldrb	r0, [r4, #0]
 8007172:	b296      	uxth	r6, r2
 8007174:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8007178:	0100      	lsls	r0, r0, #4
 800717a:	4432      	add	r2, r6
 800717c:	5283      	strh	r3, [r0, r2]
 800717e:	e7e3      	b.n	8007148 <USB_EPStartXfer+0x1bc>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007180:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8007184:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007188:	0412      	lsls	r2, r2, #16
 800718a:	0c12      	lsrs	r2, r2, #16
 800718c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007190:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007194:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007198:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800719c:	b29b      	uxth	r3, r3
 800719e:	b296      	uxth	r6, r2
 80071a0:	f200 4204 	addw	r2, r0, #1028	; 0x404
 80071a4:	4432      	add	r2, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071a6:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071aa:	8922      	ldrh	r2, [r4, #8]
 80071ac:	e77b      	b.n	80070a6 <USB_EPStartXfer+0x11a>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80071ae:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        ep->xfer_len_db -= len;
 80071b2:	1b9b      	subs	r3, r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80071b4:	f012 0f40 	tst.w	r2, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071b8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
        ep->xfer_len_db -= len;
 80071bc:	6223      	str	r3, [r4, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80071be:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071c0:	b296      	uxth	r6, r2
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80071c2:	d006      	beq.n	80071d2 <USB_EPStartXfer+0x246>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071c4:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 80071c8:	4432      	add	r2, r6
 80071ca:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071ce:	8962      	ldrh	r2, [r4, #10]
 80071d0:	e769      	b.n	80070a6 <USB_EPStartXfer+0x11a>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071d2:	f200 4204 	addw	r2, r0, #1028	; 0x404
 80071d6:	4432      	add	r2, r6
 80071d8:	e7e5      	b.n	80071a6 <USB_EPStartXfer+0x21a>
    if (ep->doublebuffer == 0U)
 80071da:	2a00      	cmp	r2, #0
 80071dc:	d131      	bne.n	8007242 <USB_EPStartXfer+0x2b6>
      if (ep->xfer_len > ep->maxpacket)
 80071de:	69a0      	ldr	r0, [r4, #24]
 80071e0:	6923      	ldr	r3, [r4, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80071e2:	7821      	ldrb	r1, [r4, #0]
      if (ep->xfer_len > ep->maxpacket)
 80071e4:	4298      	cmp	r0, r3
        ep->xfer_len -= len;
 80071e6:	bf84      	itt	hi
 80071e8:	1ac2      	subhi	r2, r0, r3
 80071ea:	4618      	movhi	r0, r3
 80071ec:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80071ee:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80071f2:	0109      	lsls	r1, r1, #4
 80071f4:	b293      	uxth	r3, r2
 80071f6:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 80071fa:	441a      	add	r2, r3
 80071fc:	5a8b      	ldrh	r3, [r1, r2]
 80071fe:	283e      	cmp	r0, #62	; 0x3e
 8007200:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007204:	528b      	strh	r3, [r1, r2]
 8007206:	d90d      	bls.n	8007224 <USB_EPStartXfer+0x298>
 8007208:	5a8b      	ldrh	r3, [r1, r2]
 800720a:	0946      	lsrs	r6, r0, #5
 800720c:	06c0      	lsls	r0, r0, #27
 800720e:	bf08      	it	eq
 8007210:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8007214:	b29b      	uxth	r3, r3
 8007216:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800721a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800721e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007222:	e00b      	b.n	800723c <USB_EPStartXfer+0x2b0>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007224:	b908      	cbnz	r0, 800722a <USB_EPStartXfer+0x29e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007226:	5a53      	ldrh	r3, [r2, r1]
 8007228:	e7f7      	b.n	800721a <USB_EPStartXfer+0x28e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800722a:	07c3      	lsls	r3, r0, #31
 800722c:	5a8b      	ldrh	r3, [r1, r2]
 800722e:	ea4f 0650 	mov.w	r6, r0, lsr #1
 8007232:	bf48      	it	mi
 8007234:	3601      	addmi	r6, #1
 8007236:	b29b      	uxth	r3, r3
 8007238:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800723c:	b29b      	uxth	r3, r3
 800723e:	5253      	strh	r3, [r2, r1]
 8007240:	e06a      	b.n	8007318 <USB_EPStartXfer+0x38c>
      if (ep->type == EP_TYPE_BULK)
 8007242:	78e3      	ldrb	r3, [r4, #3]
 8007244:	2b02      	cmp	r3, #2
 8007246:	d17c      	bne.n	8007342 <USB_EPStartXfer+0x3b6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007248:	2900      	cmp	r1, #0
 800724a:	d14b      	bne.n	80072e4 <USB_EPStartXfer+0x358>
 800724c:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8007250:	7820      	ldrb	r0, [r4, #0]
 8007252:	b28b      	uxth	r3, r1
 8007254:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8007258:	0100      	lsls	r0, r0, #4
 800725a:	4419      	add	r1, r3
 800725c:	5a43      	ldrh	r3, [r0, r1]
 800725e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007262:	5243      	strh	r3, [r0, r1]
 8007264:	6923      	ldr	r3, [r4, #16]
 8007266:	2b3e      	cmp	r3, #62	; 0x3e
 8007268:	d920      	bls.n	80072ac <USB_EPStartXfer+0x320>
 800726a:	5a42      	ldrh	r2, [r0, r1]
 800726c:	095e      	lsrs	r6, r3, #5
 800726e:	06df      	lsls	r7, r3, #27
 8007270:	bf08      	it	eq
 8007272:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8007276:	b292      	uxth	r2, r2
 8007278:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 800727c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007280:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007284:	b292      	uxth	r2, r2
 8007286:	5242      	strh	r2, [r0, r1]
 8007288:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800728c:	7822      	ldrb	r2, [r4, #0]
 800728e:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8007292:	b289      	uxth	r1, r1
 8007294:	0112      	lsls	r2, r2, #4
 8007296:	4401      	add	r1, r0
 8007298:	5a50      	ldrh	r0, [r2, r1]
 800729a:	2b3e      	cmp	r3, #62	; 0x3e
 800729c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80072a0:	5250      	strh	r0, [r2, r1]
 80072a2:	d810      	bhi.n	80072c6 <USB_EPStartXfer+0x33a>
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d143      	bne.n	8007330 <USB_EPStartXfer+0x3a4>
 80072a8:	5a53      	ldrh	r3, [r2, r1]
 80072aa:	e015      	b.n	80072d8 <USB_EPStartXfer+0x34c>
 80072ac:	b90b      	cbnz	r3, 80072b2 <USB_EPStartXfer+0x326>
 80072ae:	5a42      	ldrh	r2, [r0, r1]
 80072b0:	e7e4      	b.n	800727c <USB_EPStartXfer+0x2f0>
 80072b2:	07da      	lsls	r2, r3, #31
 80072b4:	5a42      	ldrh	r2, [r0, r1]
 80072b6:	ea4f 0653 	mov.w	r6, r3, lsr #1
 80072ba:	bf48      	it	mi
 80072bc:	3601      	addmi	r6, #1
 80072be:	b292      	uxth	r2, r2
 80072c0:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80072c4:	e7de      	b.n	8007284 <USB_EPStartXfer+0x2f8>
 80072c6:	0958      	lsrs	r0, r3, #5
 80072c8:	06df      	lsls	r7, r3, #27
 80072ca:	5a53      	ldrh	r3, [r2, r1]
 80072cc:	bf08      	it	eq
 80072ce:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80072d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	5253      	strh	r3, [r2, r1]
        if (ep->xfer_count != 0U)
 80072e4:	69e3      	ldr	r3, [r4, #28]
 80072e6:	b1bb      	cbz	r3, 8007318 <USB_EPStartXfer+0x38c>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80072e8:	f244 0340 	movw	r3, #16448	; 0x4040
 80072ec:	7822      	ldrb	r2, [r4, #0]
 80072ee:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80072f2:	ea03 0001 	and.w	r0, r3, r1
 80072f6:	438b      	bics	r3, r1
 80072f8:	d000      	beq.n	80072fc <USB_EPStartXfer+0x370>
 80072fa:	b968      	cbnz	r0, 8007318 <USB_EPStartXfer+0x38c>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80072fc:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8007300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007308:	041b      	lsls	r3, r3, #16
 800730a:	0c1b      	lsrs	r3, r3, #16
 800730c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007310:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007314:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007318:	7822      	ldrb	r2, [r4, #0]
 800731a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800731e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007326:	041b      	lsls	r3, r3, #16
 8007328:	0c1b      	lsrs	r3, r3, #16
 800732a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800732e:	e657      	b.n	8006fe0 <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007330:	0858      	lsrs	r0, r3, #1
 8007332:	07de      	lsls	r6, r3, #31
 8007334:	5a53      	ldrh	r3, [r2, r1]
 8007336:	bf48      	it	mi
 8007338:	3001      	addmi	r0, #1
 800733a:	b29b      	uxth	r3, r3
 800733c:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8007340:	e7ce      	b.n	80072e0 <USB_EPStartXfer+0x354>
      else if (ep->type == EP_TYPE_ISOC)
 8007342:	2b01      	cmp	r3, #1
 8007344:	d158      	bne.n	80073f8 <USB_EPStartXfer+0x46c>
        if (ep->xfer_len > ep->maxpacket)
 8007346:	69a3      	ldr	r3, [r4, #24]
 8007348:	6922      	ldr	r2, [r4, #16]
 800734a:	4293      	cmp	r3, r2
          ep->xfer_len = 0U;
 800734c:	bf94      	ite	ls
 800734e:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 8007350:	1a98      	subhi	r0, r3, r2
 8007352:	61a0      	str	r0, [r4, #24]
 8007354:	bf88      	it	hi
 8007356:	4613      	movhi	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007358:	2900      	cmp	r1, #0
 800735a:	d1dd      	bne.n	8007318 <USB_EPStartXfer+0x38c>
 800735c:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8007360:	7820      	ldrb	r0, [r4, #0]
 8007362:	b28a      	uxth	r2, r1
 8007364:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8007368:	0100      	lsls	r0, r0, #4
 800736a:	4411      	add	r1, r2
 800736c:	5a42      	ldrh	r2, [r0, r1]
 800736e:	2b3e      	cmp	r3, #62	; 0x3e
 8007370:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007374:	5242      	strh	r2, [r0, r1]
 8007376:	d929      	bls.n	80073cc <USB_EPStartXfer+0x440>
 8007378:	06da      	lsls	r2, r3, #27
 800737a:	5a42      	ldrh	r2, [r0, r1]
 800737c:	ea4f 1653 	mov.w	r6, r3, lsr #5
 8007380:	bf08      	it	eq
 8007382:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8007386:	b292      	uxth	r2, r2
 8007388:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 800738c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007390:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007394:	b292      	uxth	r2, r2
 8007396:	5242      	strh	r2, [r0, r1]
 8007398:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800739c:	7822      	ldrb	r2, [r4, #0]
 800739e:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 80073a2:	b289      	uxth	r1, r1
 80073a4:	0112      	lsls	r2, r2, #4
 80073a6:	4401      	add	r1, r0
 80073a8:	5a50      	ldrh	r0, [r2, r1]
 80073aa:	2b3e      	cmp	r3, #62	; 0x3e
 80073ac:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80073b0:	5250      	strh	r0, [r2, r1]
 80073b2:	d817      	bhi.n	80073e4 <USB_EPStartXfer+0x458>
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f43f af36 	beq.w	8007226 <USB_EPStartXfer+0x29a>
 80073ba:	0858      	lsrs	r0, r3, #1
 80073bc:	07db      	lsls	r3, r3, #31
 80073be:	5a53      	ldrh	r3, [r2, r1]
 80073c0:	bf48      	it	mi
 80073c2:	3001      	addmi	r0, #1
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80073ca:	e737      	b.n	800723c <USB_EPStartXfer+0x2b0>
 80073cc:	b90b      	cbnz	r3, 80073d2 <USB_EPStartXfer+0x446>
 80073ce:	5a42      	ldrh	r2, [r0, r1]
 80073d0:	e7dc      	b.n	800738c <USB_EPStartXfer+0x400>
 80073d2:	5a42      	ldrh	r2, [r0, r1]
 80073d4:	085e      	lsrs	r6, r3, #1
 80073d6:	07df      	lsls	r7, r3, #31
 80073d8:	bf48      	it	mi
 80073da:	3601      	addmi	r6, #1
 80073dc:	b292      	uxth	r2, r2
 80073de:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80073e2:	e7d7      	b.n	8007394 <USB_EPStartXfer+0x408>
 80073e4:	0958      	lsrs	r0, r3, #5
 80073e6:	06de      	lsls	r6, r3, #27
 80073e8:	5a53      	ldrh	r3, [r2, r1]
 80073ea:	bf08      	it	eq
 80073ec:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80073f6:	e710      	b.n	800721a <USB_EPStartXfer+0x28e>
        return HAL_ERROR;
 80073f8:	2001      	movs	r0, #1
 80073fa:	e5f8      	b.n	8006fee <USB_EPStartXfer+0x62>

080073fc <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80073fc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8007400:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007402:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007406:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 8007408:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800740a:	4617      	mov	r7, r2
  for (count = n; count != 0U; count--)
 800740c:	462e      	mov	r6, r5
 800740e:	3402      	adds	r4, #2
 8007410:	b936      	cbnz	r6, 8007420 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007412:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 8007414:	bf44      	itt	mi
 8007416:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800741a:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 800741e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8007420:	f837 0b04 	ldrh.w	r0, [r7], #4
  for (count = n; count != 0U; count--)
 8007424:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8007426:	b280      	uxth	r0, r0
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007428:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800742c:	0a00      	lsrs	r0, r0, #8
 800742e:	f804 0c01 	strb.w	r0, [r4, #-1]
  for (count = n; count != 0U; count--)
 8007432:	e7ec      	b.n	800740e <USB_ReadPMA+0x12>

08007434 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007434:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8007438:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800743a:	b16b      	cbz	r3, 8007458 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800743c:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007440:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8007444:	28ff      	cmp	r0, #255	; 0xff
 8007446:	d007      	beq.n	8007458 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	4621      	mov	r1, r4
 800744c:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8007450:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8007452:	23ff      	movs	r3, #255	; 0xff
 8007454:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8007458:	2000      	movs	r0, #0
 800745a:	bd10      	pop	{r4, pc}

0800745c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800745c:	2343      	movs	r3, #67	; 0x43
 800745e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8007460:	4800      	ldr	r0, [pc, #0]	; (8007464 <USBD_CDC_GetFSCfgDesc+0x8>)
 8007462:	4770      	bx	lr
 8007464:	20000044 	.word	0x20000044

08007468 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007468:	2343      	movs	r3, #67	; 0x43
 800746a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800746c:	4800      	ldr	r0, [pc, #0]	; (8007470 <USBD_CDC_GetHSCfgDesc+0x8>)
 800746e:	4770      	bx	lr
 8007470:	20000088 	.word	0x20000088

08007474 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007474:	2343      	movs	r3, #67	; 0x43
 8007476:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8007478:	4800      	ldr	r0, [pc, #0]	; (800747c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800747a:	4770      	bx	lr
 800747c:	200000d8 	.word	0x200000d8

08007480 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007480:	230a      	movs	r3, #10
 8007482:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8007484:	4800      	ldr	r0, [pc, #0]	; (8007488 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8007486:	4770      	bx	lr
 8007488:	200000cc 	.word	0x200000cc

0800748c <USBD_CDC_DataOut>:
{
 800748c:	b538      	push	{r3, r4, r5, lr}
 800748e:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007490:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007494:	f000 fec7 	bl	8008226 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8007498:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800749c:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 80074a0:	b14b      	cbz	r3, 80074b6 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80074a2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80074a6:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80074b0:	4798      	blx	r3
    return USBD_OK;
 80074b2:	2000      	movs	r0, #0
}
 80074b4:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80074b6:	2002      	movs	r0, #2
 80074b8:	e7fc      	b.n	80074b4 <USBD_CDC_DataOut+0x28>

080074ba <USBD_CDC_DataIn>:
{
 80074ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80074bc:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 80074c0:	b1d6      	cbz	r6, 80074f8 <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80074c2:	2214      	movs	r2, #20
 80074c4:	fb02 0201 	mla	r2, r2, r1, r0
 80074c8:	69d4      	ldr	r4, [r2, #28]
 80074ca:	b18c      	cbz	r4, 80074f0 <USBD_CDC_DataIn+0x36>
 80074cc:	2728      	movs	r7, #40	; 0x28
 80074ce:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80074d2:	fb07 3501 	mla	r5, r7, r1, r3
 80074d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80074d8:	fbb4 f5f3 	udiv	r5, r4, r3
 80074dc:	fb03 4415 	mls	r4, r3, r5, r4
 80074e0:	b934      	cbnz	r4, 80074f0 <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 80074e2:	61d4      	str	r4, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80074e4:	4623      	mov	r3, r4
 80074e6:	4622      	mov	r2, r4
 80074e8:	f000 fe8b 	bl	8008202 <USBD_LL_Transmit>
    return USBD_OK;
 80074ec:	4620      	mov	r0, r4
}
 80074ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 80074f0:	2000      	movs	r0, #0
 80074f2:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 80074f6:	e7fa      	b.n	80074ee <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 80074f8:	2002      	movs	r0, #2
 80074fa:	e7f8      	b.n	80074ee <USBD_CDC_DataIn+0x34>

080074fc <USBD_CDC_Setup>:
{
 80074fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8007500:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007504:	780a      	ldrb	r2, [r1, #0]
{
 8007506:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007508:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 800750c:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800750e:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8007512:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8007516:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800751a:	d028      	beq.n	800756e <USBD_CDC_Setup+0x72>
 800751c:	2c20      	cmp	r4, #32
 800751e:	d142      	bne.n	80075a6 <USBD_CDC_Setup+0xaa>
      if (req->wLength)
 8007520:	88cc      	ldrh	r4, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007522:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 8007524:	b1e4      	cbz	r4, 8007560 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8007526:	0612      	lsls	r2, r2, #24
 8007528:	d511      	bpl.n	800754e <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800752a:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800752e:	4639      	mov	r1, r7
 8007530:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8007534:	4618      	mov	r0, r3
 8007536:	4622      	mov	r2, r4
 8007538:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800753a:	4639      	mov	r1, r7
 800753c:	4628      	mov	r0, r5
 800753e:	88f2      	ldrh	r2, [r6, #6]
 8007540:	f000 fc4b 	bl	8007dda <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8007544:	4644      	mov	r4, r8
}
 8007546:	4620      	mov	r0, r4
 8007548:	b003      	add	sp, #12
 800754a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800754e:	4622      	mov	r2, r4
 8007550:	4639      	mov	r1, r7
          hcdc->CmdOpCode = req->bRequest;
 8007552:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007556:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800755a:	f000 fc53 	bl	8007e04 <USBD_CtlPrepareRx>
 800755e:	e7f1      	b.n	8007544 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007560:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8007564:	4618      	mov	r0, r3
 8007566:	6895      	ldr	r5, [r2, #8]
 8007568:	4622      	mov	r2, r4
 800756a:	47a8      	blx	r5
 800756c:	e7eb      	b.n	8007546 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 800756e:	784b      	ldrb	r3, [r1, #1]
 8007570:	2b0a      	cmp	r3, #10
 8007572:	d00c      	beq.n	800758e <USBD_CDC_Setup+0x92>
 8007574:	2b0b      	cmp	r3, #11
 8007576:	d012      	beq.n	800759e <USBD_CDC_Setup+0xa2>
 8007578:	b9ab      	cbnz	r3, 80075a6 <USBD_CDC_Setup+0xaa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800757a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800757e:	2b03      	cmp	r3, #3
 8007580:	d111      	bne.n	80075a6 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007582:	2202      	movs	r2, #2
 8007584:	f10d 0106 	add.w	r1, sp, #6
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007588:	f000 fc27 	bl	8007dda <USBD_CtlSendData>
 800758c:	e7db      	b.n	8007546 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800758e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007592:	2b03      	cmp	r3, #3
 8007594:	d107      	bne.n	80075a6 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007596:	2201      	movs	r2, #1
 8007598:	f10d 0105 	add.w	r1, sp, #5
 800759c:	e7f4      	b.n	8007588 <USBD_CDC_Setup+0x8c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800759e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	d0cf      	beq.n	8007546 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 80075a6:	4631      	mov	r1, r6
 80075a8:	4628      	mov	r0, r5
 80075aa:	f000 fbef 	bl	8007d8c <USBD_CtlError>
          ret = USBD_FAIL;
 80075ae:	2402      	movs	r4, #2
 80075b0:	e7c9      	b.n	8007546 <USBD_CDC_Setup+0x4a>

080075b2 <USBD_CDC_DeInit>:
{
 80075b2:	b538      	push	{r3, r4, r5, lr}
 80075b4:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80075b6:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80075b8:	2181      	movs	r1, #129	; 0x81
 80075ba:	f000 fdec 	bl	8008196 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80075be:	2101      	movs	r1, #1
 80075c0:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80075c2:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80075c4:	f000 fde7 	bl	8008196 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80075c8:	2182      	movs	r1, #130	; 0x82
 80075ca:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80075cc:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80075d0:	f000 fde1 	bl	8008196 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80075d4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80075d8:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 80075da:	b14b      	cbz	r3, 80075f0 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80075dc:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80075e4:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 80075e8:	f000 fe26 	bl	8008238 <USBD_static_free>
    pdev->pClassData = NULL;
 80075ec:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 80075f0:	2000      	movs	r0, #0
 80075f2:	bd38      	pop	{r3, r4, r5, pc}

080075f4 <USBD_CDC_Init>:
{
 80075f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075f8:	7c03      	ldrb	r3, [r0, #16]
{
 80075fa:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075fc:	bbbb      	cbnz	r3, 800766e <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80075fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007602:	2202      	movs	r2, #2
 8007604:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007606:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007608:	f000 fdb9 	bl	800817e <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800760c:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007610:	62e5      	str	r5, [r4, #44]	; 0x2c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007612:	2701      	movs	r7, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007614:	4629      	mov	r1, r5
 8007616:	2202      	movs	r2, #2
 8007618:	4620      	mov	r0, r4
 800761a:	f000 fdb0 	bl	800817e <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800761e:	2308      	movs	r3, #8
 8007620:	2203      	movs	r2, #3
 8007622:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007624:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007628:	4620      	mov	r0, r4
 800762a:	f000 fda8 	bl	800817e <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800762e:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007632:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007634:	f000 fdfc 	bl	8008230 <USBD_static_malloc>
 8007638:	4605      	mov	r5, r0
 800763a:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 800763e:	b340      	cbz	r0, 8007692 <USBD_CDC_Init+0x9e>
    hcdc->TxState = 0U;
 8007640:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007644:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4798      	blx	r3
    hcdc->TxState = 0U;
 800764c:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8007650:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007654:	7c26      	ldrb	r6, [r4, #16]
 8007656:	b99e      	cbnz	r6, 8007680 <USBD_CDC_Init+0x8c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800765c:	4639      	mov	r1, r7
 800765e:	4620      	mov	r0, r4
 8007660:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8007664:	f000 fdd6 	bl	8008214 <USBD_LL_PrepareReceive>
}
 8007668:	4630      	mov	r0, r6
 800766a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800766e:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007670:	2340      	movs	r3, #64	; 0x40
 8007672:	2202      	movs	r2, #2
 8007674:	2181      	movs	r1, #129	; 0x81
 8007676:	f000 fd82 	bl	800817e <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800767a:	2340      	movs	r3, #64	; 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800767c:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800767e:	e7c8      	b.n	8007612 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007680:	2340      	movs	r3, #64	; 0x40
 8007682:	4639      	mov	r1, r7
 8007684:	4620      	mov	r0, r4
 8007686:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800768a:	f000 fdc3 	bl	8008214 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800768e:	4646      	mov	r6, r8
 8007690:	e7ea      	b.n	8007668 <USBD_CDC_Init+0x74>
    ret = 1U;
 8007692:	463e      	mov	r6, r7
 8007694:	e7e8      	b.n	8007668 <USBD_CDC_Init+0x74>

08007696 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8007696:	b119      	cbz	r1, 80076a0 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8007698:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 800769c:	2000      	movs	r0, #0
 800769e:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80076a0:	2002      	movs	r0, #2
  }

  return ret;
}
 80076a2:	4770      	bx	lr

080076a4 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076a4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 80076a8:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80076aa:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80076ae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80076b2:	4770      	bx	lr

080076b4 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80076b4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 80076b8:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80076ba:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 80076be:	4770      	bx	lr

080076c0 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076c0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 80076c4:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 80076c6:	b182      	cbz	r2, 80076ea <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 80076c8:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 80076cc:	2301      	movs	r3, #1
 80076ce:	b974      	cbnz	r4, 80076ee <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80076d0:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80076d4:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80076d8:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80076da:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80076dc:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	f000 fd8e 	bl	8008202 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 80076e6:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 80076e8:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80076ea:	2002      	movs	r0, #2
 80076ec:	e7fc      	b.n	80076e8 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 80076ee:	4618      	mov	r0, r3
 80076f0:	e7fa      	b.n	80076e8 <USBD_CDC_TransmitPacket+0x28>

080076f2 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076f2:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 80076f6:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80076f8:	b182      	cbz	r2, 800771c <USBD_CDC_ReceivePacket+0x2a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076fa:	7c04      	ldrb	r4, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80076fc:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007700:	b934      	cbnz	r4, 8007710 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 8007702:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007706:	2101      	movs	r1, #1
 8007708:	f000 fd84 	bl	8008214 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 800770c:	4620      	mov	r0, r4
 800770e:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8007710:	2340      	movs	r3, #64	; 0x40
 8007712:	2101      	movs	r1, #1
 8007714:	f000 fd7e 	bl	8008214 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8007718:	2400      	movs	r4, #0
 800771a:	e7f7      	b.n	800770c <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 800771c:	2402      	movs	r4, #2
 800771e:	e7f5      	b.n	800770c <USBD_CDC_ReceivePacket+0x1a>

08007720 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007720:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007722:	b180      	cbz	r0, 8007746 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007724:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007728:	b113      	cbz	r3, 8007730 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800772a:	2300      	movs	r3, #0
 800772c:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007730:	b109      	cbz	r1, 8007736 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8007732:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007736:	2301      	movs	r3, #1
  pdev->id = id;
 8007738:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800773a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800773e:	f000 fcd3 	bl	80080e8 <USBD_LL_Init>

  return USBD_OK;
 8007742:	2000      	movs	r0, #0
}
 8007744:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8007746:	2002      	movs	r0, #2
 8007748:	e7fc      	b.n	8007744 <USBD_Init+0x24>

0800774a <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 800774a:	b119      	cbz	r1, 8007754 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800774c:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8007750:	2000      	movs	r0, #0
 8007752:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007754:	2002      	movs	r0, #2
  }

  return status;
}
 8007756:	4770      	bx	lr

08007758 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007758:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800775a:	f000 fd07 	bl	800816c <USBD_LL_Start>

  return USBD_OK;
}
 800775e:	2000      	movs	r0, #0
 8007760:	bd08      	pop	{r3, pc}

08007762 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007762:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8007764:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007768:	b90b      	cbnz	r3, 800776e <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 800776a:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 800776c:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4798      	blx	r3
 8007772:	2800      	cmp	r0, #0
 8007774:	d0fa      	beq.n	800776c <USBD_SetClassConfig+0xa>
 8007776:	e7f8      	b.n	800776a <USBD_SetClassConfig+0x8>

08007778 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007778:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800777a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	4798      	blx	r3

  return USBD_OK;
}
 8007782:	2000      	movs	r0, #0
 8007784:	bd08      	pop	{r3, pc}

08007786 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007786:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007788:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 800778c:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800778e:	4628      	mov	r0, r5
 8007790:	f000 fae8 	bl	8007d64 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007794:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8007796:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 800779a:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800779e:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 80077a2:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 80077a6:	f001 031f 	and.w	r3, r1, #31
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d008      	beq.n	80077c0 <USBD_LL_SetupStage+0x3a>
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d00b      	beq.n	80077ca <USBD_LL_SetupStage+0x44>
 80077b2:	b97b      	cbnz	r3, 80077d4 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80077b4:	4629      	mov	r1, r5
 80077b6:	4620      	mov	r0, r4
 80077b8:	f000 f8fc 	bl	80079b4 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 80077bc:	2000      	movs	r0, #0
 80077be:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80077c0:	4629      	mov	r1, r5
 80077c2:	4620      	mov	r0, r4
 80077c4:	f000 fa20 	bl	8007c08 <USBD_StdItfReq>
      break;
 80077c8:	e7f8      	b.n	80077bc <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 80077ca:	4629      	mov	r1, r5
 80077cc:	4620      	mov	r0, r4
 80077ce:	f000 fa3f 	bl	8007c50 <USBD_StdEPReq>
      break;
 80077d2:	e7f3      	b.n	80077bc <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80077d4:	4620      	mov	r0, r4
 80077d6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80077da:	f000 fce5 	bl	80081a8 <USBD_LL_StallEP>
      break;
 80077de:	e7ed      	b.n	80077bc <USBD_LL_SetupStage+0x36>

080077e0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80077e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e2:	4604      	mov	r4, r0
 80077e4:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80077e6:	460d      	mov	r5, r1
 80077e8:	bb39      	cbnz	r1, 800783a <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80077ea:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80077ee:	2b03      	cmp	r3, #3
 80077f0:	d11c      	bne.n	800782c <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 80077f2:	e9d0 6258 	ldrd	r6, r2, [r0, #352]	; 0x160
 80077f6:	4296      	cmp	r6, r2
 80077f8:	d90b      	bls.n	8007812 <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 80077fa:	1ab6      	subs	r6, r6, r2

        USBD_CtlContinueRx(pdev, pdata,
 80077fc:	42b2      	cmp	r2, r6
 80077fe:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 8007800:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8007804:	bf8c      	ite	hi
 8007806:	b2b2      	uxthhi	r2, r6
 8007808:	b292      	uxthls	r2, r2
 800780a:	f000 fb08 	bl	8007e1e <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800780e:	4628      	mov	r0, r5
 8007810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007812:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	b123      	cbz	r3, 8007824 <USBD_LL_DataOutStage+0x44>
 800781a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800781e:	2a03      	cmp	r2, #3
 8007820:	d100      	bne.n	8007824 <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 8007822:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8007824:	4620      	mov	r0, r4
 8007826:	f000 fb02 	bl	8007e2e <USBD_CtlSendStatus>
 800782a:	e7f0      	b.n	800780e <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800782c:	2b05      	cmp	r3, #5
 800782e:	d1ee      	bne.n	800780e <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8007830:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007834:	f000 fcb8 	bl	80081a8 <USBD_LL_StallEP>
 8007838:	e7e9      	b.n	800780e <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 800783a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	b133      	cbz	r3, 8007850 <USBD_LL_DataOutStage+0x70>
 8007842:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007846:	2a03      	cmp	r2, #3
 8007848:	d102      	bne.n	8007850 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 800784a:	4798      	blx	r3
  return USBD_OK;
 800784c:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 800784e:	e7de      	b.n	800780e <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 8007850:	2502      	movs	r5, #2
 8007852:	e7dc      	b.n	800780e <USBD_LL_DataOutStage+0x2e>

08007854 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007856:	4604      	mov	r4, r0
 8007858:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800785a:	460d      	mov	r5, r1
 800785c:	2900      	cmp	r1, #0
 800785e:	d147      	bne.n	80078f0 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007860:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8007864:	2b02      	cmp	r3, #2
 8007866:	d13c      	bne.n	80078e2 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007868:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 800786c:	429e      	cmp	r6, r3
 800786e:	d914      	bls.n	800789a <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8007870:	1af3      	subs	r3, r6, r3

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007872:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 8007874:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007876:	b29a      	uxth	r2, r3
 8007878:	f000 fabc 	bl	8007df4 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800787c:	462b      	mov	r3, r5
 800787e:	462a      	mov	r2, r5
 8007880:	4629      	mov	r1, r5
 8007882:	4620      	mov	r0, r4
 8007884:	f000 fcc6 	bl	8008214 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007888:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800788c:	2b01      	cmp	r3, #1
 800788e:	d102      	bne.n	8007896 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8007890:	2300      	movs	r3, #0
 8007892:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8007896:	4628      	mov	r0, r5
 8007898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800789a:	69c2      	ldr	r2, [r0, #28]
 800789c:	fbb2 f6f3 	udiv	r6, r2, r3
 80078a0:	fb03 2616 	mls	r6, r3, r6, r2
 80078a4:	b95e      	cbnz	r6, 80078be <USBD_LL_DataInStage+0x6a>
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d809      	bhi.n	80078be <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 80078aa:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d205      	bcs.n	80078be <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80078b2:	460a      	mov	r2, r1
 80078b4:	f000 fa9e 	bl	8007df4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80078b8:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 80078bc:	e7de      	b.n	800787c <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80078be:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	b12b      	cbz	r3, 80078d2 <USBD_LL_DataInStage+0x7e>
 80078c6:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80078ca:	2a03      	cmp	r2, #3
 80078cc:	d101      	bne.n	80078d2 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 80078ce:	4620      	mov	r0, r4
 80078d0:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80078d2:	2180      	movs	r1, #128	; 0x80
 80078d4:	4620      	mov	r0, r4
 80078d6:	f000 fc67 	bl	80081a8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80078da:	4620      	mov	r0, r4
 80078dc:	f000 fab2 	bl	8007e44 <USBD_CtlReceiveStatus>
 80078e0:	e7d2      	b.n	8007888 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80078e2:	f033 0304 	bics.w	r3, r3, #4
 80078e6:	d1cf      	bne.n	8007888 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80078e8:	2180      	movs	r1, #128	; 0x80
 80078ea:	f000 fc5d 	bl	80081a8 <USBD_LL_StallEP>
 80078ee:	e7cb      	b.n	8007888 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 80078f0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	b133      	cbz	r3, 8007906 <USBD_LL_DataInStage+0xb2>
 80078f8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80078fc:	2a03      	cmp	r2, #3
 80078fe:	d102      	bne.n	8007906 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 8007900:	4798      	blx	r3
  return USBD_OK;
 8007902:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 8007904:	e7c7      	b.n	8007896 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8007906:	2502      	movs	r5, #2
 8007908:	e7c5      	b.n	8007896 <USBD_LL_DataInStage+0x42>

0800790a <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800790a:	2200      	movs	r2, #0
{
 800790c:	b570      	push	{r4, r5, r6, lr}
 800790e:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007910:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007912:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007914:	4611      	mov	r1, r2
 8007916:	2340      	movs	r3, #64	; 0x40
 8007918:	f000 fc31 	bl	800817e <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800791c:	4633      	mov	r3, r6
 800791e:	2180      	movs	r1, #128	; 0x80
 8007920:	2200      	movs	r2, #0
 8007922:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007924:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007928:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800792c:	f000 fc27 	bl	800817e <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8007930:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8007932:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007936:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007938:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800793a:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800793e:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8007942:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8007944:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8007948:	b123      	cbz	r3, 8007954 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800794a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800794e:	4620      	mov	r0, r4
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	4798      	blx	r3
  }

  return USBD_OK;
}
 8007954:	2000      	movs	r0, #0
 8007956:	bd70      	pop	{r4, r5, r6, pc}

08007958 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8007958:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800795a:	2000      	movs	r0, #0
 800795c:	4770      	bx	lr

0800795e <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800795e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007962:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007966:	2304      	movs	r3, #4
 8007968:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800796c:	2000      	movs	r0, #0
 800796e:	4770      	bx	lr

08007970 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007970:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007974:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8007976:	bf04      	itt	eq
 8007978:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 800797c:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8007980:	2000      	movs	r0, #0
 8007982:	4770      	bx	lr

08007984 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007984:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007986:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800798a:	2a03      	cmp	r2, #3
 800798c:	d104      	bne.n	8007998 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 800798e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007992:	69db      	ldr	r3, [r3, #28]
 8007994:	b103      	cbz	r3, 8007998 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8007996:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8007998:	2000      	movs	r0, #0
 800799a:	bd08      	pop	{r3, pc}

0800799c <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 800799c:	b510      	push	{r4, lr}
 800799e:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80079a0:	2180      	movs	r1, #128	; 0x80
 80079a2:	f000 fc01 	bl	80081a8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80079a6:	4620      	mov	r0, r4
}
 80079a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80079ac:	2100      	movs	r1, #0
 80079ae:	f000 bbfb 	b.w	80081a8 <USBD_LL_StallEP>
	...

080079b4 <USBD_StdDevReq>:
{
 80079b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079b6:	780b      	ldrb	r3, [r1, #0]
 80079b8:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079be:	2b20      	cmp	r3, #32
{
 80079c0:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079c2:	d012      	beq.n	80079ea <USBD_StdDevReq+0x36>
 80079c4:	2b40      	cmp	r3, #64	; 0x40
 80079c6:	d010      	beq.n	80079ea <USBD_StdDevReq+0x36>
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d151      	bne.n	8007a70 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 80079cc:	784b      	ldrb	r3, [r1, #1]
 80079ce:	2b09      	cmp	r3, #9
 80079d0:	d84e      	bhi.n	8007a70 <USBD_StdDevReq+0xbc>
 80079d2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80079d6:	00ee      	.short	0x00ee
 80079d8:	004d010a 	.word	0x004d010a
 80079dc:	004d0103 	.word	0x004d0103
 80079e0:	00130087 	.word	0x00130087
 80079e4:	00d6004d 	.word	0x00d6004d
 80079e8:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 80079ea:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80079ee:	4629      	mov	r1, r5
 80079f0:	4620      	mov	r0, r4
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	4798      	blx	r3
}
 80079f6:	2000      	movs	r0, #0
 80079f8:	b003      	add	sp, #12
 80079fa:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8007a02:	884b      	ldrh	r3, [r1, #2]
 8007a04:	0a1a      	lsrs	r2, r3, #8
 8007a06:	3a01      	subs	r2, #1
 8007a08:	2a06      	cmp	r2, #6
 8007a0a:	d831      	bhi.n	8007a70 <USBD_StdDevReq+0xbc>
 8007a0c:	e8df f002 	tbb	[pc, r2]
 8007a10:	30231604 	.word	0x30231604
 8007a14:	4830      	.short	0x4830
 8007a16:	52          	.byte	0x52
 8007a17:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a18:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007a1c:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a1e:	7c20      	ldrb	r0, [r4, #16]
 8007a20:	f10d 0106 	add.w	r1, sp, #6
 8007a24:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8007a26:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007a2a:	2a00      	cmp	r2, #0
 8007a2c:	d056      	beq.n	8007adc <USBD_StdDevReq+0x128>
 8007a2e:	88eb      	ldrh	r3, [r5, #6]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d14a      	bne.n	8007aca <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 8007a34:	4620      	mov	r0, r4
 8007a36:	f000 f9fa 	bl	8007e2e <USBD_CtlSendStatus>
 8007a3a:	e7dc      	b.n	80079f6 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a3c:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 8007a3e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a42:	b932      	cbnz	r2, 8007a52 <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007a46:	f10d 0006 	add.w	r0, sp, #6
 8007a4a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a4c:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a4e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007a50:	e7e9      	b.n	8007a26 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a54:	e7f7      	b.n	8007a46 <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b05      	cmp	r3, #5
 8007a5a:	d809      	bhi.n	8007a70 <USBD_StdDevReq+0xbc>
 8007a5c:	e8df f003 	tbb	[pc, r3]
 8007a60:	14100c03 	.word	0x14100c03
 8007a64:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a66:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007a6a:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1d6      	bne.n	8007a1e <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8007a70:	4620      	mov	r0, r4
 8007a72:	f7ff ff93 	bl	800799c <USBD_CtlError.constprop.0>
        break;
 8007a76:	e7be      	b.n	80079f6 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a78:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	e7f5      	b.n	8007a6c <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a80:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	e7f1      	b.n	8007a6c <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a88:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	e7ed      	b.n	8007a6c <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a90:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	e7e9      	b.n	8007a6c <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a98:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	e7e5      	b.n	8007a6c <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aa0:	7c03      	ldrb	r3, [r0, #16]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1e4      	bne.n	8007a70 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007aa6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007aaa:	f10d 0006 	add.w	r0, sp, #6
 8007aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab0:	4798      	blx	r3
 8007ab2:	e7b8      	b.n	8007a26 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ab4:	7c03      	ldrb	r3, [r0, #16]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1da      	bne.n	8007a70 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007aba:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007abe:	f10d 0006 	add.w	r0, sp, #6
 8007ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ac6:	2307      	movs	r3, #7
 8007ac8:	e7c1      	b.n	8007a4e <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 8007aca:	429a      	cmp	r2, r3
 8007acc:	bf28      	it	cs
 8007ace:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ad0:	4601      	mov	r1, r0
 8007ad2:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8007ad4:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ad8:	f000 f97f 	bl	8007dda <USBD_CtlSendData>
    if (req->wLength == 0U)
 8007adc:	88eb      	ldrh	r3, [r5, #6]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d189      	bne.n	80079f6 <USBD_StdDevReq+0x42>
 8007ae2:	e7a7      	b.n	8007a34 <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ae4:	888b      	ldrh	r3, [r1, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1c2      	bne.n	8007a70 <USBD_StdDevReq+0xbc>
 8007aea:	88cb      	ldrh	r3, [r1, #6]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1bf      	bne.n	8007a70 <USBD_StdDevReq+0xbc>
 8007af0:	884d      	ldrh	r5, [r1, #2]
 8007af2:	2d7f      	cmp	r5, #127	; 0x7f
 8007af4:	d8bc      	bhi.n	8007a70 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007afa:	2b03      	cmp	r3, #3
 8007afc:	d0b8      	beq.n	8007a70 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007afe:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8007b00:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b04:	f000 fb74 	bl	80081f0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f000 f990 	bl	8007e2e <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8007b0e:	b11d      	cbz	r5, 8007b18 <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b10:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b12:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8007b16:	e76e      	b.n	80079f6 <USBD_StdDevReq+0x42>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e7fa      	b.n	8007b12 <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 8007b1c:	7889      	ldrb	r1, [r1, #2]
 8007b1e:	4d39      	ldr	r5, [pc, #228]	; (8007c04 <USBD_StdDevReq+0x250>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b20:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8007b22:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b24:	d8a4      	bhi.n	8007a70 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8007b26:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d008      	beq.n	8007b40 <USBD_StdDevReq+0x18c>
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	d015      	beq.n	8007b5e <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 8007b32:	f7ff ff33 	bl	800799c <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007b36:	4620      	mov	r0, r4
 8007b38:	7829      	ldrb	r1, [r5, #0]
 8007b3a:	f7ff fe1d 	bl	8007778 <USBD_ClrClassConfig>
        break;
 8007b3e:	e75a      	b.n	80079f6 <USBD_StdDevReq+0x42>
        if (cfgidx)
 8007b40:	2900      	cmp	r1, #0
 8007b42:	f43f af77 	beq.w	8007a34 <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 8007b46:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b48:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8007b4a:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b4c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b50:	4620      	mov	r0, r4
 8007b52:	f7ff fe06 	bl	8007762 <USBD_SetClassConfig>
 8007b56:	2802      	cmp	r0, #2
 8007b58:	f47f af6c 	bne.w	8007a34 <USBD_StdDevReq+0x80>
 8007b5c:	e788      	b.n	8007a70 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 8007b5e:	b931      	cbnz	r1, 8007b6e <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b60:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8007b62:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b64:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8007b68:	f7ff fe06 	bl	8007778 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007b6c:	e762      	b.n	8007a34 <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 8007b6e:	6841      	ldr	r1, [r0, #4]
 8007b70:	2901      	cmp	r1, #1
 8007b72:	f43f af5f 	beq.w	8007a34 <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b76:	b2c9      	uxtb	r1, r1
 8007b78:	f7ff fdfe 	bl	8007778 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007b7c:	7829      	ldrb	r1, [r5, #0]
 8007b7e:	6061      	str	r1, [r4, #4]
 8007b80:	e7e6      	b.n	8007b50 <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 8007b82:	88ca      	ldrh	r2, [r1, #6]
 8007b84:	2a01      	cmp	r2, #1
 8007b86:	f47f af73 	bne.w	8007a70 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8007b8a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d80a      	bhi.n	8007ba8 <USBD_StdDevReq+0x1f4>
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f43f af6c 	beq.w	8007a70 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 8007b98:	4601      	mov	r1, r0
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f000 f91a 	bl	8007dda <USBD_CtlSendData>
      break;
 8007ba6:	e726      	b.n	80079f6 <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	f47f af61 	bne.w	8007a70 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007bae:	1d01      	adds	r1, r0, #4
 8007bb0:	e7f6      	b.n	8007ba0 <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 8007bb2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	f63f af59 	bhi.w	8007a70 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 8007bbe:	88cb      	ldrh	r3, [r1, #6]
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	f47f af55 	bne.w	8007a70 <USBD_StdDevReq+0xbc>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8007bca:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8007bce:	b10b      	cbz	r3, 8007bd4 <USBD_StdDevReq+0x220>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007bd4:	2202      	movs	r2, #2
 8007bd6:	f104 010c 	add.w	r1, r4, #12
 8007bda:	e7e1      	b.n	8007ba0 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bdc:	884b      	ldrh	r3, [r1, #2]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	f47f af09 	bne.w	80079f6 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8007be4:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8007be8:	e724      	b.n	8007a34 <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 8007bea:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	f63f af3d 	bhi.w	8007a70 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bf6:	884b      	ldrh	r3, [r1, #2]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	f47f aefc 	bne.w	80079f6 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	e7f0      	b.n	8007be4 <USBD_StdDevReq+0x230>
 8007c02:	bf00      	nop
 8007c04:	200003d8 	.word	0x200003d8

08007c08 <USBD_StdItfReq>:
{
 8007c08:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c0a:	780b      	ldrb	r3, [r1, #0]
{
 8007c0c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c0e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8007c12:	2a40      	cmp	r2, #64	; 0x40
{
 8007c14:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c16:	d001      	beq.n	8007c1c <USBD_StdItfReq+0x14>
 8007c18:	065b      	lsls	r3, r3, #25
 8007c1a:	d415      	bmi.n	8007c48 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8007c1c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8007c20:	3b01      	subs	r3, #1
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d810      	bhi.n	8007c48 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c26:	792b      	ldrb	r3, [r5, #4]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d80d      	bhi.n	8007c48 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c2c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8007c30:	4629      	mov	r1, r5
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	4620      	mov	r0, r4
 8007c36:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c38:	88eb      	ldrh	r3, [r5, #6]
 8007c3a:	b91b      	cbnz	r3, 8007c44 <USBD_StdItfReq+0x3c>
 8007c3c:	b910      	cbnz	r0, 8007c44 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f000 f8f5 	bl	8007e2e <USBD_CtlSendStatus>
}
 8007c44:	2000      	movs	r0, #0
 8007c46:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f7ff fea7 	bl	800799c <USBD_CtlError.constprop.0>
          break;
 8007c4e:	e7f9      	b.n	8007c44 <USBD_StdItfReq+0x3c>

08007c50 <USBD_StdEPReq>:
{
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	780a      	ldrb	r2, [r1, #0]
 8007c54:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c56:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8007c5a:	2a20      	cmp	r2, #32
{
 8007c5c:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c5e:	d027      	beq.n	8007cb0 <USBD_StdEPReq+0x60>
 8007c60:	2a40      	cmp	r2, #64	; 0x40
 8007c62:	d025      	beq.n	8007cb0 <USBD_StdEPReq+0x60>
 8007c64:	bb92      	cbnz	r2, 8007ccc <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 8007c66:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8007c68:	888d      	ldrh	r5, [r1, #4]
 8007c6a:	2a01      	cmp	r2, #1
 8007c6c:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 8007c6e:	d03d      	beq.n	8007cec <USBD_StdEPReq+0x9c>
 8007c70:	2a03      	cmp	r2, #3
 8007c72:	d025      	beq.n	8007cc0 <USBD_StdEPReq+0x70>
 8007c74:	bb52      	cbnz	r2, 8007ccc <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 8007c76:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d04d      	beq.n	8007d1a <USBD_StdEPReq+0xca>
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d124      	bne.n	8007ccc <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 8007c82:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c84:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8007c88:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c8c:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8007c90:	d054      	beq.n	8007d3c <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	b1d3      	cbz	r3, 8007ccc <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c96:	2314      	movs	r3, #20
 8007c98:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8007c9c:	fb05 3303 	mla	r3, r5, r3, r3
 8007ca0:	18c5      	adds	r5, r0, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ca2:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8007ca6:	d155      	bne.n	8007d54 <USBD_StdEPReq+0x104>
                pep->status = 0x0001U;
 8007ca8:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007caa:	2202      	movs	r2, #2
 8007cac:	4629      	mov	r1, r5
 8007cae:	e041      	b.n	8007d34 <USBD_StdEPReq+0xe4>
      pdev->pClass->Setup(pdev, req);
 8007cb0:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	6892      	ldr	r2, [r2, #8]
 8007cba:	4790      	blx	r2
}
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 8007cc0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007cc4:	2a02      	cmp	r2, #2
 8007cc6:	d01f      	beq.n	8007d08 <USBD_StdEPReq+0xb8>
 8007cc8:	2a03      	cmp	r2, #3
 8007cca:	d003      	beq.n	8007cd4 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f7ff fe65 	bl	800799c <USBD_CtlError.constprop.0>
              break;
 8007cd2:	e7f3      	b.n	8007cbc <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007cd4:	885a      	ldrh	r2, [r3, #2]
 8007cd6:	b92a      	cbnz	r2, 8007ce4 <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 8007cd8:	064a      	lsls	r2, r1, #25
 8007cda:	d003      	beq.n	8007ce4 <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007cdc:	88db      	ldrh	r3, [r3, #6]
 8007cde:	b90b      	cbnz	r3, 8007ce4 <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 8007ce0:	f000 fa62 	bl	80081a8 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	f000 f8a2 	bl	8007e2e <USBD_CtlSendStatus>
              break;
 8007cea:	e7e7      	b.n	8007cbc <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 8007cec:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007cf0:	2a02      	cmp	r2, #2
 8007cf2:	d009      	beq.n	8007d08 <USBD_StdEPReq+0xb8>
 8007cf4:	2a03      	cmp	r2, #3
 8007cf6:	d1e9      	bne.n	8007ccc <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007cf8:	885b      	ldrh	r3, [r3, #2]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1de      	bne.n	8007cbc <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8007cfe:	064d      	lsls	r5, r1, #25
 8007d00:	d0f0      	beq.n	8007ce4 <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d02:	f000 fa5a 	bl	80081ba <USBD_LL_ClearStallEP>
 8007d06:	e7ed      	b.n	8007ce4 <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d08:	064b      	lsls	r3, r1, #25
 8007d0a:	d0df      	beq.n	8007ccc <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 8007d0c:	f000 fa4c 	bl	80081a8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007d10:	2180      	movs	r1, #128	; 0x80
 8007d12:	4620      	mov	r0, r4
 8007d14:	f000 fa48 	bl	80081a8 <USBD_LL_StallEP>
 8007d18:	e7d0      	b.n	8007cbc <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d1a:	064a      	lsls	r2, r1, #25
 8007d1c:	d1d6      	bne.n	8007ccc <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d1e:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8007d20:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007d24:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d28:	bf4c      	ite	mi
 8007d2a:	f100 0114 	addmi.w	r1, r0, #20
 8007d2e:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8007d32:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007d34:	4620      	mov	r0, r4
 8007d36:	f000 f850 	bl	8007dda <USBD_CtlSendData>
              break;
 8007d3a:	e7bf      	b.n	8007cbc <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007d3c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d0c3      	beq.n	8007ccc <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d44:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d46:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d4a:	fb03 0505 	mla	r5, r3, r5, r0
 8007d4e:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8007d52:	e7a6      	b.n	8007ca2 <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007d54:	4620      	mov	r0, r4
 8007d56:	f000 fa39 	bl	80081cc <USBD_LL_IsStallEP>
 8007d5a:	b108      	cbz	r0, 8007d60 <USBD_StdEPReq+0x110>
                pep->status = 0x0001U;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e7a3      	b.n	8007ca8 <USBD_StdEPReq+0x58>
                pep->status = 0x0000U;
 8007d60:	6028      	str	r0, [r5, #0]
 8007d62:	e7a2      	b.n	8007caa <USBD_StdEPReq+0x5a>

08007d64 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8007d64:	780b      	ldrb	r3, [r1, #0]
 8007d66:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007d68:	784b      	ldrb	r3, [r1, #1]
 8007d6a:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007d6c:	78ca      	ldrb	r2, [r1, #3]
 8007d6e:	788b      	ldrb	r3, [r1, #2]
 8007d70:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007d74:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007d76:	794a      	ldrb	r2, [r1, #5]
 8007d78:	790b      	ldrb	r3, [r1, #4]
 8007d7a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007d7e:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007d80:	79ca      	ldrb	r2, [r1, #7]
 8007d82:	798b      	ldrb	r3, [r1, #6]
 8007d84:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007d88:	80c3      	strh	r3, [r0, #6]
}
 8007d8a:	4770      	bx	lr

08007d8c <USBD_CtlError>:
{
 8007d8c:	b510      	push	{r4, lr}
 8007d8e:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8007d90:	2180      	movs	r1, #128	; 0x80
 8007d92:	f000 fa09 	bl	80081a8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007d96:	4620      	mov	r0, r4
}
 8007d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	f000 ba03 	b.w	80081a8 <USBD_LL_StallEP>

08007da2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007da2:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8007da4:	b188      	cbz	r0, 8007dca <USBD_GetString+0x28>
 8007da6:	2400      	movs	r4, #0
 8007da8:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8007daa:	4623      	mov	r3, r4
 8007dac:	3401      	adds	r4, #1
 8007dae:	5d05      	ldrb	r5, [r0, r4]
 8007db0:	2d00      	cmp	r5, #0
 8007db2:	d1fa      	bne.n	8007daa <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	3301      	adds	r3, #1
 8007db8:	005b      	lsls	r3, r3, #1
 8007dba:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007dbc:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	704b      	strb	r3, [r1, #1]
 8007dc2:	2302      	movs	r3, #2
    while (*desc != '\0')
 8007dc4:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8007dc8:	b904      	cbnz	r4, 8007dcc <USBD_GetString+0x2a>
}
 8007dca:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8007dcc:	1c5a      	adds	r2, r3, #1
 8007dce:	54cc      	strb	r4, [r1, r3]
 8007dd0:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8007dd2:	3302      	adds	r3, #2
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	548d      	strb	r5, [r1, r2]
 8007dd8:	e7f4      	b.n	8007dc4 <USBD_GetString+0x22>

08007dda <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007dda:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ddc:	2202      	movs	r2, #2
{
 8007dde:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8007de0:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007de4:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007de8:	460a      	mov	r2, r1
 8007dea:	2100      	movs	r1, #0
 8007dec:	f000 fa09 	bl	8008202 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007df0:	2000      	movs	r0, #0
 8007df2:	bd10      	pop	{r4, pc}

08007df4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007df4:	b508      	push	{r3, lr}
 8007df6:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007df8:	460a      	mov	r2, r1
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	f000 fa01 	bl	8008202 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007e00:	2000      	movs	r0, #0
 8007e02:	bd08      	pop	{r3, pc}

08007e04 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007e04:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e06:	2203      	movs	r2, #3
{
 8007e08:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8007e0a:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e0e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e12:	460a      	mov	r2, r1
 8007e14:	2100      	movs	r1, #0
 8007e16:	f000 f9fd 	bl	8008214 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	bd10      	pop	{r4, pc}

08007e1e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007e1e:	b508      	push	{r3, lr}
 8007e20:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e22:	460a      	mov	r2, r1
 8007e24:	2100      	movs	r1, #0
 8007e26:	f000 f9f5 	bl	8008214 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	bd08      	pop	{r3, pc}

08007e2e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e2e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e30:	2304      	movs	r3, #4
 8007e32:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e36:	2300      	movs	r3, #0
 8007e38:	461a      	mov	r2, r3
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	f000 f9e1 	bl	8008202 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007e40:	2000      	movs	r0, #0
 8007e42:	bd08      	pop	{r3, pc}

08007e44 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e44:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e46:	2305      	movs	r3, #5
 8007e48:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	461a      	mov	r2, r3
 8007e50:	4619      	mov	r1, r3
 8007e52:	f000 f9df 	bl	8008214 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007e56:	2000      	movs	r0, #0
 8007e58:	bd08      	pop	{r3, pc}
	...

08007e5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007e5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	490e      	ldr	r1, [pc, #56]	; (8007e9c <MX_USB_DEVICE_Init+0x40>)
 8007e62:	480f      	ldr	r0, [pc, #60]	; (8007ea0 <MX_USB_DEVICE_Init+0x44>)
 8007e64:	f7ff fc5c 	bl	8007720 <USBD_Init>
 8007e68:	b108      	cbz	r0, 8007e6e <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8007e6a:	f7fc fdd0 	bl	8004a0e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e6e:	490d      	ldr	r1, [pc, #52]	; (8007ea4 <MX_USB_DEVICE_Init+0x48>)
 8007e70:	480b      	ldr	r0, [pc, #44]	; (8007ea0 <MX_USB_DEVICE_Init+0x44>)
 8007e72:	f7ff fc6a 	bl	800774a <USBD_RegisterClass>
 8007e76:	b108      	cbz	r0, 8007e7c <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8007e78:	f7fc fdc9 	bl	8004a0e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007e7c:	490a      	ldr	r1, [pc, #40]	; (8007ea8 <MX_USB_DEVICE_Init+0x4c>)
 8007e7e:	4808      	ldr	r0, [pc, #32]	; (8007ea0 <MX_USB_DEVICE_Init+0x44>)
 8007e80:	f7ff fc09 	bl	8007696 <USBD_CDC_RegisterInterface>
 8007e84:	b108      	cbz	r0, 8007e8a <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8007e86:	f7fc fdc2 	bl	8004a0e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e8a:	4805      	ldr	r0, [pc, #20]	; (8007ea0 <MX_USB_DEVICE_Init+0x44>)
 8007e8c:	f7ff fc64 	bl	8007758 <USBD_Start>
 8007e90:	b118      	cbz	r0, 8007e9a <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8007e96:	f7fc bdba 	b.w	8004a0e <Error_Handler>
}
 8007e9a:	bd08      	pop	{r3, pc}
 8007e9c:	2000012c 	.word	0x2000012c
 8007ea0:	200003dc 	.word	0x200003dc
 8007ea4:	2000000c 	.word	0x2000000c
 8007ea8:	2000011c 	.word	0x2000011c

08007eac <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8007eac:	2000      	movs	r0, #0
 8007eae:	4770      	bx	lr

08007eb0 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	4770      	bx	lr

08007eb4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007eb4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007eb6:	4c05      	ldr	r4, [pc, #20]	; (8007ecc <CDC_Receive_FS+0x18>)
{
 8007eb8:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f7ff fbfa 	bl	80076b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f7ff fc16 	bl	80076f2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8007ec6:	2000      	movs	r0, #0
 8007ec8:	bd10      	pop	{r4, pc}
 8007eca:	bf00      	nop
 8007ecc:	200003dc 	.word	0x200003dc

08007ed0 <CDC_Init_FS>:
{
 8007ed0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ed2:	4c06      	ldr	r4, [pc, #24]	; (8007eec <CDC_Init_FS+0x1c>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	4905      	ldr	r1, [pc, #20]	; (8007ef0 <CDC_Init_FS+0x20>)
 8007eda:	f7ff fbe3 	bl	80076a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007ede:	4620      	mov	r0, r4
 8007ee0:	4904      	ldr	r1, [pc, #16]	; (8007ef4 <CDC_Init_FS+0x24>)
 8007ee2:	f7ff fbe7 	bl	80076b4 <USBD_CDC_SetRxBuffer>
}
 8007ee6:	2000      	movs	r0, #0
 8007ee8:	bd10      	pop	{r4, pc}
 8007eea:	bf00      	nop
 8007eec:	200003dc 	.word	0x200003dc
 8007ef0:	20000aa0 	.word	0x20000aa0
 8007ef4:	200006a0 	.word	0x200006a0

08007ef8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007ef8:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007efa:	4c09      	ldr	r4, [pc, #36]	; (8007f20 <CDC_Transmit_FS+0x28>)
{
 8007efc:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007efe:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 8007f02:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f06:	b943      	cbnz	r3, 8007f1a <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007f08:	4601      	mov	r1, r0
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f7ff fbca 	bl	80076a4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007f10:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8007f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007f16:	f7ff bbd3 	b.w	80076c0 <USBD_CDC_TransmitPacket>
}
 8007f1a:	2001      	movs	r0, #1
 8007f1c:	bd10      	pop	{r4, pc}
 8007f1e:	bf00      	nop
 8007f20:	200003dc 	.word	0x200003dc

08007f24 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f24:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8007f26:	4801      	ldr	r0, [pc, #4]	; (8007f2c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f28:	800b      	strh	r3, [r1, #0]
}
 8007f2a:	4770      	bx	lr
 8007f2c:	20000148 	.word	0x20000148

08007f30 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f30:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8007f32:	4801      	ldr	r0, [pc, #4]	; (8007f38 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8007f34:	800b      	strh	r3, [r1, #0]
}
 8007f36:	4770      	bx	lr
 8007f38:	2000015c 	.word	0x2000015c

08007f3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8007f40:	461e      	mov	r6, r3
 8007f42:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f44:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 8007f46:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f4a:	bf34      	ite	cc
 8007f4c:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f4e:	3437      	addcs	r4, #55	; 0x37
 8007f50:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8007f54:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 8007f58:	3301      	adds	r3, #1
 8007f5a:	b2dc      	uxtb	r4, r3
 8007f5c:	42a2      	cmp	r2, r4
    value = value << 4;
 8007f5e:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8007f62:	d8ef      	bhi.n	8007f44 <IntToUnicode+0x8>
  }
}
 8007f64:	bd70      	pop	{r4, r5, r6, pc}
	...

08007f68 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8007f68:	231a      	movs	r3, #26
{
 8007f6a:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8007f6c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007f6e:	4b0a      	ldr	r3, [pc, #40]	; (8007f98 <USBD_FS_SerialStrDescriptor+0x30>)
 8007f70:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial0 += deviceserial2;
 8007f74:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 8007f78:	1880      	adds	r0, r0, r2
 8007f7a:	d00a      	beq.n	8007f92 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007f7c:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	; 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007f80:	4906      	ldr	r1, [pc, #24]	; (8007f9c <USBD_FS_SerialStrDescriptor+0x34>)
 8007f82:	2208      	movs	r2, #8
 8007f84:	f7ff ffda 	bl	8007f3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007f88:	2204      	movs	r2, #4
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	3110      	adds	r1, #16
 8007f8e:	f7ff ffd5 	bl	8007f3c <IntToUnicode>
}
 8007f92:	4803      	ldr	r0, [pc, #12]	; (8007fa0 <USBD_FS_SerialStrDescriptor+0x38>)
 8007f94:	bd10      	pop	{r4, pc}
 8007f96:	bf00      	nop
 8007f98:	1ffff000 	.word	0x1ffff000
 8007f9c:	20000162 	.word	0x20000162
 8007fa0:	20000160 	.word	0x20000160

08007fa4 <USBD_FS_ManufacturerStrDescriptor>:
{
 8007fa4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007fa6:	4c04      	ldr	r4, [pc, #16]	; (8007fb8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8007fa8:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007faa:	4804      	ldr	r0, [pc, #16]	; (8007fbc <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8007fac:	4621      	mov	r1, r4
 8007fae:	f7ff fef8 	bl	8007da2 <USBD_GetString>
}
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	bd10      	pop	{r4, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20000ea0 	.word	0x20000ea0
 8007fbc:	0800bb10 	.word	0x0800bb10

08007fc0 <USBD_FS_ProductStrDescriptor>:
{
 8007fc0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007fc2:	4c04      	ldr	r4, [pc, #16]	; (8007fd4 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8007fc4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007fc6:	4804      	ldr	r0, [pc, #16]	; (8007fd8 <USBD_FS_ProductStrDescriptor+0x18>)
 8007fc8:	4621      	mov	r1, r4
 8007fca:	f7ff feea 	bl	8007da2 <USBD_GetString>
}
 8007fce:	4620      	mov	r0, r4
 8007fd0:	bd10      	pop	{r4, pc}
 8007fd2:	bf00      	nop
 8007fd4:	20000ea0 	.word	0x20000ea0
 8007fd8:	0800bb23 	.word	0x0800bb23

08007fdc <USBD_FS_ConfigStrDescriptor>:
{
 8007fdc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007fde:	4c04      	ldr	r4, [pc, #16]	; (8007ff0 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8007fe0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007fe2:	4804      	ldr	r0, [pc, #16]	; (8007ff4 <USBD_FS_ConfigStrDescriptor+0x18>)
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	f7ff fedc 	bl	8007da2 <USBD_GetString>
}
 8007fea:	4620      	mov	r0, r4
 8007fec:	bd10      	pop	{r4, pc}
 8007fee:	bf00      	nop
 8007ff0:	20000ea0 	.word	0x20000ea0
 8007ff4:	0800bb39 	.word	0x0800bb39

08007ff8 <USBD_FS_InterfaceStrDescriptor>:
{
 8007ff8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ffa:	4c04      	ldr	r4, [pc, #16]	; (800800c <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8007ffc:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ffe:	4804      	ldr	r0, [pc, #16]	; (8008010 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8008000:	4621      	mov	r1, r4
 8008002:	f7ff fece 	bl	8007da2 <USBD_GetString>
}
 8008006:	4620      	mov	r0, r4
 8008008:	bd10      	pop	{r4, pc}
 800800a:	bf00      	nop
 800800c:	20000ea0 	.word	0x20000ea0
 8008010:	0800bb44 	.word	0x0800bb44

08008014 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8008014:	2803      	cmp	r0, #3
 8008016:	bf9a      	itte	ls
 8008018:	4b01      	ldrls	r3, [pc, #4]	; (8008020 <USBD_Get_USB_Status+0xc>)
 800801a:	5c18      	ldrbls	r0, [r3, r0]
{
 800801c:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800801e:	4770      	bx	lr
 8008020:	0800bb52 	.word	0x0800bb52

08008024 <HAL_PCD_MspInit>:
{
 8008024:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8008026:	4b0e      	ldr	r3, [pc, #56]	; (8008060 <HAL_PCD_MspInit+0x3c>)
 8008028:	6802      	ldr	r2, [r0, #0]
 800802a:	429a      	cmp	r2, r3
 800802c:	d115      	bne.n	800805a <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 800802e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8008032:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008034:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8008036:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800803a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800803c:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800803e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008040:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8008042:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008046:	9301      	str	r3, [sp, #4]
 8008048:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800804a:	f7fd f8a7 	bl	800519c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800804e:	2014      	movs	r0, #20
}
 8008050:	b003      	add	sp, #12
 8008052:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008056:	f7fd b8d3 	b.w	8005200 <HAL_NVIC_EnableIRQ>
}
 800805a:	b003      	add	sp, #12
 800805c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008060:	40005c00 	.word	0x40005c00

08008064 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008064:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8008068:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 800806c:	f7ff bb8b 	b.w	8007786 <USBD_LL_SetupStage>

08008070 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008070:	2328      	movs	r3, #40	; 0x28
 8008072:	fb03 0301 	mla	r3, r3, r1, r0
 8008076:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 800807a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800807e:	f7ff bbaf 	b.w	80077e0 <USBD_LL_DataOutStage>

08008082 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008082:	2328      	movs	r3, #40	; 0x28
 8008084:	fb03 0301 	mla	r3, r3, r1, r0
 8008088:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 800808c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800808e:	f7ff bbe1 	b.w	8007854 <USBD_LL_DataInStage>

08008092 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008092:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8008096:	f7ff bc75 	b.w	8007984 <USBD_LL_SOF>

0800809a <HAL_PCD_ResetCallback>:
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800809a:	6883      	ldr	r3, [r0, #8]
{
 800809c:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800809e:	2b02      	cmp	r3, #2
{
 80080a0:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80080a2:	d001      	beq.n	80080a8 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 80080a4:	f7fc fcb3 	bl	8004a0e <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80080a8:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
 80080ac:	2101      	movs	r1, #1
 80080ae:	f7ff fc53 	bl	8007958 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80080b2:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
}
 80080b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80080ba:	f7ff bc26 	b.w	800790a <USBD_LL_Reset>
	...

080080c0 <HAL_PCD_SuspendCallback>:
{
 80080c0:	b510      	push	{r4, lr}
 80080c2:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80080c4:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 80080c8:	f7ff fc49 	bl	800795e <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 80080cc:	69a3      	ldr	r3, [r4, #24]
 80080ce:	b123      	cbz	r3, 80080da <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80080d0:	4a02      	ldr	r2, [pc, #8]	; (80080dc <HAL_PCD_SuspendCallback+0x1c>)
 80080d2:	6913      	ldr	r3, [r2, #16]
 80080d4:	f043 0306 	orr.w	r3, r3, #6
 80080d8:	6113      	str	r3, [r2, #16]
}
 80080da:	bd10      	pop	{r4, pc}
 80080dc:	e000ed00 	.word	0xe000ed00

080080e0 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80080e0:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 80080e4:	f7ff bc44 	b.w	8007970 <USBD_LL_Resume>

080080e8 <USBD_LL_Init>:
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80080e8:	2308      	movs	r3, #8
{
 80080ea:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80080ec:	4a1d      	ldr	r2, [pc, #116]	; (8008164 <USBD_LL_Init+0x7c>)
{
 80080ee:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80080f0:	481d      	ldr	r0, [pc, #116]	; (8008168 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80080f2:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80080f6:	2302      	movs	r3, #2
 80080f8:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80080fa:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 80080fc:	f8c0 42ec 	str.w	r4, [r0, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008100:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008104:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008108:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800810a:	f7fd f97a 	bl	8005402 <HAL_PCD_Init>
 800810e:	b108      	cbz	r0, 8008114 <USBD_LL_Init+0x2c>
    Error_Handler( );
 8008110:	f7fc fc7d 	bl	8004a0e <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008114:	2200      	movs	r2, #0
 8008116:	2318      	movs	r3, #24
 8008118:	4611      	mov	r1, r2
 800811a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800811e:	f7fd ffe8 	bl	80060f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008122:	2358      	movs	r3, #88	; 0x58
 8008124:	2200      	movs	r2, #0
 8008126:	2180      	movs	r1, #128	; 0x80
 8008128:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800812c:	f7fd ffe1 	bl	80060f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008130:	23c0      	movs	r3, #192	; 0xc0
 8008132:	2200      	movs	r2, #0
 8008134:	2181      	movs	r1, #129	; 0x81
 8008136:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800813a:	f7fd ffda 	bl	80060f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800813e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008142:	2200      	movs	r2, #0
 8008144:	2101      	movs	r1, #1
 8008146:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800814a:	f7fd ffd2 	bl	80060f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800814e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008152:	2200      	movs	r2, #0
 8008154:	2182      	movs	r1, #130	; 0x82
 8008156:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800815a:	f7fd ffca 	bl	80060f2 <HAL_PCDEx_PMAConfig>
}
 800815e:	2000      	movs	r0, #0
 8008160:	bd10      	pop	{r4, pc}
 8008162:	bf00      	nop
 8008164:	40005c00 	.word	0x40005c00
 8008168:	200010a0 	.word	0x200010a0

0800816c <USBD_LL_Start>:
{
 800816c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800816e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8008172:	f7fd f9be 	bl	80054f2 <HAL_PCD_Start>
}
 8008176:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800817a:	f7ff bf4b 	b.w	8008014 <USBD_Get_USB_Status>

0800817e <USBD_LL_OpenEP>:
{
 800817e:	b510      	push	{r4, lr}
 8008180:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008182:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 8008186:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008188:	4623      	mov	r3, r4
 800818a:	f7fd febd 	bl	8005f08 <HAL_PCD_EP_Open>
}
 800818e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008192:	f7ff bf3f 	b.w	8008014 <USBD_Get_USB_Status>

08008196 <USBD_LL_CloseEP>:
{
 8008196:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008198:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800819c:	f7fd fee3 	bl	8005f66 <HAL_PCD_EP_Close>
}
 80081a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80081a4:	f7ff bf36 	b.w	8008014 <USBD_Get_USB_Status>

080081a8 <USBD_LL_StallEP>:
{
 80081a8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80081aa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80081ae:	f7fd ff3b 	bl	8006028 <HAL_PCD_EP_SetStall>
}
 80081b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80081b6:	f7ff bf2d 	b.w	8008014 <USBD_Get_USB_Status>

080081ba <USBD_LL_ClearStallEP>:
{
 80081ba:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80081bc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80081c0:	f7fd ff66 	bl	8006090 <HAL_PCD_EP_ClrStall>
}
 80081c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80081c8:	f7ff bf24 	b.w	8008014 <USBD_Get_USB_Status>

080081cc <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80081cc:	2228      	movs	r2, #40	; 0x28
  if((ep_addr & 0x80) == 0x80)
 80081ce:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80081d2:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80081d6:	bf1b      	ittet	ne
 80081d8:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 80081dc:	fb01 2102 	mlane	r1, r1, r2, r2
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80081e0:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80081e4:	185b      	addne	r3, r3, r1
 80081e6:	bf14      	ite	ne
 80081e8:	7898      	ldrbne	r0, [r3, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80081ea:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
}
 80081ee:	4770      	bx	lr

080081f0 <USBD_LL_SetUSBAddress>:
{
 80081f0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80081f2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80081f6:	f7fd f995 	bl	8005524 <HAL_PCD_SetAddress>
}
 80081fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80081fe:	f7ff bf09 	b.w	8008014 <USBD_Get_USB_Status>

08008202 <USBD_LL_Transmit>:
{
 8008202:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008204:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8008208:	f7fd fef4 	bl	8005ff4 <HAL_PCD_EP_Transmit>
}
 800820c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008210:	f7ff bf00 	b.w	8008014 <USBD_Get_USB_Status>

08008214 <USBD_LL_PrepareReceive>:
{
 8008214:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008216:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800821a:	f7fd fecc 	bl	8005fb6 <HAL_PCD_EP_Receive>
}
 800821e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008222:	f7ff bef7 	b.w	8008014 <USBD_Get_USB_Status>

08008226 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008226:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800822a:	f7fd bedb 	b.w	8005fe4 <HAL_PCD_EP_GetRxCount>
	...

08008230 <USBD_static_malloc>:
}
 8008230:	4800      	ldr	r0, [pc, #0]	; (8008234 <USBD_static_malloc+0x4>)
 8008232:	4770      	bx	lr
 8008234:	20001390 	.word	0x20001390

08008238 <USBD_static_free>:
}
 8008238:	4770      	bx	lr

0800823a <HAL_PCDEx_SetConnectionState>:
}
 800823a:	4770      	bx	lr

0800823c <_ZdlPvj>:
 800823c:	f000 bb4a 	b.w	80088d4 <_ZdlPv>

08008240 <_Znwj>:
 8008240:	2801      	cmp	r0, #1
 8008242:	bf38      	it	cc
 8008244:	2001      	movcc	r0, #1
 8008246:	b510      	push	{r4, lr}
 8008248:	4604      	mov	r4, r0
 800824a:	4620      	mov	r0, r4
 800824c:	f000 fb7e 	bl	800894c <malloc>
 8008250:	b930      	cbnz	r0, 8008260 <_Znwj+0x20>
 8008252:	f000 fb41 	bl	80088d8 <_ZSt15get_new_handlerv>
 8008256:	b908      	cbnz	r0, 800825c <_Znwj+0x1c>
 8008258:	f000 fb46 	bl	80088e8 <abort>
 800825c:	4780      	blx	r0
 800825e:	e7f4      	b.n	800824a <_Znwj+0xa>
 8008260:	bd10      	pop	{r4, pc}

08008262 <_ZNSaIcEC1Ev>:
 8008262:	4770      	bx	lr

08008264 <_ZNSaIcED1Ev>:
 8008264:	4770      	bx	lr

08008266 <_ZSt17__throw_bad_allocv>:
 8008266:	b508      	push	{r3, lr}
 8008268:	f000 fb3e 	bl	80088e8 <abort>

0800826c <_ZSt19__throw_logic_errorPKc>:
 800826c:	b508      	push	{r3, lr}
 800826e:	f000 fb3b 	bl	80088e8 <abort>

08008272 <_ZSt24__throw_invalid_argumentPKc>:
 8008272:	b508      	push	{r3, lr}
 8008274:	f000 fb38 	bl	80088e8 <abort>

08008278 <_ZSt20__throw_length_errorPKc>:
 8008278:	b508      	push	{r3, lr}
 800827a:	f000 fb35 	bl	80088e8 <abort>

0800827e <_ZSt20__throw_out_of_rangePKc>:
 800827e:	b508      	push	{r3, lr}
 8008280:	f000 fb32 	bl	80088e8 <abort>

08008284 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8008284:	b40f      	push	{r0, r1, r2, r3}
 8008286:	b580      	push	{r7, lr}
 8008288:	b082      	sub	sp, #8
 800828a:	af00      	add	r7, sp, #0
 800828c:	f107 0410 	add.w	r4, r7, #16
 8008290:	f854 5b04 	ldr.w	r5, [r4], #4
 8008294:	4628      	mov	r0, r5
 8008296:	f7f7 ff5b 	bl	8000150 <strlen>
 800829a:	f200 2307 	addw	r3, r0, #519	; 0x207
 800829e:	f023 0307 	bic.w	r3, r3, #7
 80082a2:	ebad 0d03 	sub.w	sp, sp, r3
 80082a6:	f500 7100 	add.w	r1, r0, #512	; 0x200
 80082aa:	4623      	mov	r3, r4
 80082ac:	462a      	mov	r2, r5
 80082ae:	4668      	mov	r0, sp
 80082b0:	607c      	str	r4, [r7, #4]
 80082b2:	f000 f855 	bl	8008360 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80082b6:	f000 fb17 	bl	80088e8 <abort>
	...

080082bc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80082bc:	4606      	mov	r6, r0
 80082be:	460c      	mov	r4, r1
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b09c      	sub	sp, #112	; 0x70
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	1ba4      	subs	r4, r4, r6
 80082c8:	2269      	movs	r2, #105	; 0x69
 80082ca:	490e      	ldr	r1, [pc, #56]	; (8008304 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80082cc:	1d38      	adds	r0, r7, #4
 80082ce:	f000 fb5b 	bl	8008988 <memcpy>
 80082d2:	f104 0370 	add.w	r3, r4, #112	; 0x70
 80082d6:	f023 0307 	bic.w	r3, r3, #7
 80082da:	ebad 0d03 	sub.w	sp, sp, r3
 80082de:	466d      	mov	r5, sp
 80082e0:	2268      	movs	r2, #104	; 0x68
 80082e2:	1d39      	adds	r1, r7, #4
 80082e4:	4628      	mov	r0, r5
 80082e6:	f000 fb4f 	bl	8008988 <memcpy>
 80082ea:	4622      	mov	r2, r4
 80082ec:	4631      	mov	r1, r6
 80082ee:	f105 0068 	add.w	r0, r5, #104	; 0x68
 80082f2:	f000 fb49 	bl	8008988 <memcpy>
 80082f6:	2300      	movs	r3, #0
 80082f8:	442c      	add	r4, r5
 80082fa:	4628      	mov	r0, r5
 80082fc:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8008300:	f7ff ffb4 	bl	800826c <_ZSt19__throw_logic_errorPKc>
 8008304:	0800bb56 	.word	0x0800bb56

08008308 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8008308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800830c:	af00      	add	r7, sp, #0
 800830e:	b084      	sub	sp, #16
 8008310:	466d      	mov	r5, sp
 8008312:	f105 040c 	add.w	r4, r5, #12
 8008316:	4623      	mov	r3, r4
 8008318:	f04f 0c0a 	mov.w	ip, #10
 800831c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 800835c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8008320:	fbb2 f6fc 	udiv	r6, r2, ip
 8008324:	fb0c 2e16 	mls	lr, ip, r6, r2
 8008328:	f818 e00e 	ldrb.w	lr, [r8, lr]
 800832c:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8008330:	4696      	mov	lr, r2
 8008332:	f1be 0f09 	cmp.w	lr, #9
 8008336:	4632      	mov	r2, r6
 8008338:	d8f2      	bhi.n	8008320 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 800833a:	1ae4      	subs	r4, r4, r3
 800833c:	428c      	cmp	r4, r1
 800833e:	d809      	bhi.n	8008354 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8008340:	f1c4 030c 	rsb	r3, r4, #12
 8008344:	4622      	mov	r2, r4
 8008346:	18e9      	adds	r1, r5, r3
 8008348:	f000 fb1e 	bl	8008988 <memcpy>
 800834c:	4620      	mov	r0, r4
 800834e:	46bd      	mov	sp, r7
 8008350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008354:	f04f 34ff 	mov.w	r4, #4294967295
 8008358:	e7f8      	b.n	800834c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800835a:	bf00      	nop
 800835c:	0800bbbf 	.word	0x0800bbbf

08008360 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8008360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008364:	4607      	mov	r7, r0
 8008366:	4615      	mov	r5, r2
 8008368:	4604      	mov	r4, r0
 800836a:	3901      	subs	r1, #1
 800836c:	eb00 0801 	add.w	r8, r0, r1
 8008370:	782a      	ldrb	r2, [r5, #0]
 8008372:	b392      	cbz	r2, 80083da <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 8008374:	4544      	cmp	r4, r8
 8008376:	d22a      	bcs.n	80083ce <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8008378:	2a25      	cmp	r2, #37	; 0x25
 800837a:	d107      	bne.n	800838c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800837c:	786a      	ldrb	r2, [r5, #1]
 800837e:	2a73      	cmp	r2, #115	; 0x73
 8008380:	d009      	beq.n	8008396 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8008382:	2a7a      	cmp	r2, #122	; 0x7a
 8008384:	d012      	beq.n	80083ac <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8008386:	2a25      	cmp	r2, #37	; 0x25
 8008388:	d100      	bne.n	800838c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800838a:	3501      	adds	r5, #1
 800838c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8008390:	f804 2b01 	strb.w	r2, [r4], #1
 8008394:	e7ec      	b.n	8008370 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8008396:	f853 2b04 	ldr.w	r2, [r3], #4
 800839a:	3a01      	subs	r2, #1
 800839c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80083a0:	b1c9      	cbz	r1, 80083d6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 80083a2:	4544      	cmp	r4, r8
 80083a4:	d013      	beq.n	80083ce <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 80083a6:	f804 1b01 	strb.w	r1, [r4], #1
 80083aa:	e7f7      	b.n	800839c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 80083ac:	78aa      	ldrb	r2, [r5, #2]
 80083ae:	2a75      	cmp	r2, #117	; 0x75
 80083b0:	d1ec      	bne.n	800838c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80083b2:	461e      	mov	r6, r3
 80083b4:	4620      	mov	r0, r4
 80083b6:	f856 2b04 	ldr.w	r2, [r6], #4
 80083ba:	eba8 0104 	sub.w	r1, r8, r4
 80083be:	f7ff ffa3 	bl	8008308 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80083c2:	2800      	cmp	r0, #0
 80083c4:	dd03      	ble.n	80083ce <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 80083c6:	4633      	mov	r3, r6
 80083c8:	4404      	add	r4, r0
 80083ca:	3503      	adds	r5, #3
 80083cc:	e7d0      	b.n	8008370 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80083ce:	4621      	mov	r1, r4
 80083d0:	4638      	mov	r0, r7
 80083d2:	f7ff ff73 	bl	80082bc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80083d6:	3502      	adds	r5, #2
 80083d8:	e7ca      	b.n	8008370 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80083da:	7022      	strb	r2, [r4, #0]
 80083dc:	1be0      	subs	r0, r4, r7
 80083de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080083e2 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 80083e2:	b10a      	cbz	r2, 80083e8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 80083e4:	f000 bad0 	b.w	8008988 <memcpy>
 80083e8:	4770      	bx	lr

080083ea <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
 80083ea:	4613      	mov	r3, r2
 80083ec:	460a      	mov	r2, r1
 80083ee:	b111      	cbz	r1, 80083f6 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
 80083f0:	7819      	ldrb	r1, [r3, #0]
 80083f2:	f000 babb 	b.w	800896c <memchr>
 80083f6:	4608      	mov	r0, r1
 80083f8:	4770      	bx	lr

080083fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 80083fa:	6001      	str	r1, [r0, #0]
 80083fc:	4770      	bx	lr

080083fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 80083fe:	6800      	ldr	r0, [r0, #0]
 8008400:	4770      	bx	lr

08008402 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8008402:	3008      	adds	r0, #8
 8008404:	4770      	bx	lr

08008406 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8008406:	6081      	str	r1, [r0, #8]
 8008408:	4770      	bx	lr

0800840a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 800840a:	2200      	movs	r2, #0
 800840c:	6803      	ldr	r3, [r0, #0]
 800840e:	6041      	str	r1, [r0, #4]
 8008410:	545a      	strb	r2, [r3, r1]
 8008412:	4770      	bx	lr

08008414 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8008414:	b508      	push	{r3, lr}
 8008416:	680b      	ldr	r3, [r1, #0]
 8008418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800841c:	d302      	bcc.n	8008424 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800841e:	480d      	ldr	r0, [pc, #52]	; (8008454 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8008420:	f7ff ff2a 	bl	8008278 <_ZSt20__throw_length_errorPKc>
 8008424:	4293      	cmp	r3, r2
 8008426:	d90b      	bls.n	8008440 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8008428:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800842c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8008430:	d206      	bcs.n	8008440 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8008432:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008436:	bf2a      	itet	cs
 8008438:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800843c:	6008      	strcc	r0, [r1, #0]
 800843e:	600b      	strcs	r3, [r1, #0]
 8008440:	6808      	ldr	r0, [r1, #0]
 8008442:	3001      	adds	r0, #1
 8008444:	d501      	bpl.n	800844a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8008446:	f7ff ff0e 	bl	8008266 <_ZSt17__throw_bad_allocv>
 800844a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800844e:	f7ff bef7 	b.w	8008240 <_Znwj>
 8008452:	bf00      	nop
 8008454:	0800bbca 	.word	0x0800bbca

08008458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8008458:	4603      	mov	r3, r0
 800845a:	f853 0b08 	ldr.w	r0, [r3], #8
 800845e:	4298      	cmp	r0, r3
 8008460:	d001      	beq.n	8008466 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8008462:	f000 ba37 	b.w	80088d4 <_ZdlPv>
 8008466:	4770      	bx	lr

08008468 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8008468:	b508      	push	{r3, lr}
 800846a:	4603      	mov	r3, r0
 800846c:	4608      	mov	r0, r1
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	4611      	mov	r1, r2
 8008472:	4298      	cmp	r0, r3
 8008474:	d903      	bls.n	800847e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 8008476:	4602      	mov	r2, r0
 8008478:	4801      	ldr	r0, [pc, #4]	; (8008480 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 800847a:	f7ff ff03 	bl	8008284 <_ZSt24__throw_out_of_range_fmtPKcz>
 800847e:	bd08      	pop	{r3, pc}
 8008480:	0800bbe2 	.word	0x0800bbe2

08008484 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8008484:	6840      	ldr	r0, [r0, #4]
 8008486:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800848a:	3901      	subs	r1, #1
 800848c:	1a09      	subs	r1, r1, r0
 800848e:	4291      	cmp	r1, r2
 8008490:	b508      	push	{r3, lr}
 8008492:	d202      	bcs.n	800849a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8008494:	4618      	mov	r0, r3
 8008496:	f7ff feef 	bl	8008278 <_ZSt20__throw_length_errorPKc>
 800849a:	bd08      	pop	{r3, pc}

0800849c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800849c:	6803      	ldr	r3, [r0, #0]
 800849e:	428b      	cmp	r3, r1
 80084a0:	d806      	bhi.n	80084b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 80084a2:	6840      	ldr	r0, [r0, #4]
 80084a4:	4418      	add	r0, r3
 80084a6:	4281      	cmp	r1, r0
 80084a8:	bf94      	ite	ls
 80084aa:	2000      	movls	r0, #0
 80084ac:	2001      	movhi	r0, #1
 80084ae:	4770      	bx	lr
 80084b0:	2001      	movs	r0, #1
 80084b2:	4770      	bx	lr

080084b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80084b4:	2a01      	cmp	r2, #1
 80084b6:	b410      	push	{r4}
 80084b8:	d103      	bne.n	80084c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xe>
 80084ba:	780a      	ldrb	r2, [r1, #0]
 80084bc:	bc10      	pop	{r4}
 80084be:	7002      	strb	r2, [r0, #0]
 80084c0:	4770      	bx	lr
 80084c2:	bc10      	pop	{r4}
 80084c4:	f7ff bf8d 	b.w	80083e2 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080084c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80084c8:	2a01      	cmp	r2, #1
 80084ca:	b430      	push	{r4, r5}
 80084cc:	d103      	bne.n	80084d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80084ce:	780b      	ldrb	r3, [r1, #0]
 80084d0:	7003      	strb	r3, [r0, #0]
 80084d2:	bc30      	pop	{r4, r5}
 80084d4:	4770      	bx	lr
 80084d6:	2a00      	cmp	r2, #0
 80084d8:	d0fb      	beq.n	80084d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80084da:	bc30      	pop	{r4, r5}
 80084dc:	f000 ba62 	b.w	80089a4 <memmove>

080084e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80084e0:	b508      	push	{r3, lr}
 80084e2:	1a52      	subs	r2, r2, r1
 80084e4:	f7ff ffe6 	bl	80084b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80084e8:	bd08      	pop	{r3, pc}

080084ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80084ea:	b508      	push	{r3, lr}
 80084ec:	1a52      	subs	r2, r2, r1
 80084ee:	f7ff ffe1 	bl	80084b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80084f2:	bd08      	pop	{r3, pc}

080084f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80084f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80084f8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80084fa:	461f      	mov	r7, r3
 80084fc:	6843      	ldr	r3, [r0, #4]
 80084fe:	eb01 0802 	add.w	r8, r1, r2
 8008502:	1ab2      	subs	r2, r6, r2
 8008504:	441a      	add	r2, r3
 8008506:	eba3 0908 	sub.w	r9, r3, r8
 800850a:	4603      	mov	r3, r0
 800850c:	9201      	str	r2, [sp, #4]
 800850e:	f853 2b08 	ldr.w	r2, [r3], #8
 8008512:	460d      	mov	r5, r1
 8008514:	429a      	cmp	r2, r3
 8008516:	bf0c      	ite	eq
 8008518:	220f      	moveq	r2, #15
 800851a:	6882      	ldrne	r2, [r0, #8]
 800851c:	a901      	add	r1, sp, #4
 800851e:	4604      	mov	r4, r0
 8008520:	f7ff ff78 	bl	8008414 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8008524:	4682      	mov	sl, r0
 8008526:	b11d      	cbz	r5, 8008530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3c>
 8008528:	462a      	mov	r2, r5
 800852a:	6821      	ldr	r1, [r4, #0]
 800852c:	f7ff ffc2 	bl	80084b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008530:	b137      	cbz	r7, 8008540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4c>
 8008532:	b12e      	cbz	r6, 8008540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4c>
 8008534:	4632      	mov	r2, r6
 8008536:	4639      	mov	r1, r7
 8008538:	eb0a 0005 	add.w	r0, sl, r5
 800853c:	f7ff ffba 	bl	80084b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008540:	f1b9 0f00 	cmp.w	r9, #0
 8008544:	d007      	beq.n	8008556 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x62>
 8008546:	6821      	ldr	r1, [r4, #0]
 8008548:	4435      	add	r5, r6
 800854a:	464a      	mov	r2, r9
 800854c:	4441      	add	r1, r8
 800854e:	eb0a 0005 	add.w	r0, sl, r5
 8008552:	f7ff ffaf 	bl	80084b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008556:	4620      	mov	r0, r4
 8008558:	f7ff ff7e 	bl	8008458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800855c:	9b01      	ldr	r3, [sp, #4]
 800855e:	f8c4 a000 	str.w	sl, [r4]
 8008562:	60a3      	str	r3, [r4, #8]
 8008564:	b002      	add	sp, #8
 8008566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800856a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800856a:	f100 0208 	add.w	r2, r0, #8
 800856e:	6002      	str	r2, [r0, #0]
 8008570:	2200      	movs	r2, #0
 8008572:	6042      	str	r2, [r0, #4]
 8008574:	7202      	strb	r2, [r0, #8]
 8008576:	4770      	bx	lr

08008578 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8008578:	b570      	push	{r4, r5, r6, lr}
 800857a:	4604      	mov	r4, r0
 800857c:	460e      	mov	r6, r1
 800857e:	3008      	adds	r0, #8
 8008580:	6020      	str	r0, [r4, #0]
 8008582:	f856 3b08 	ldr.w	r3, [r6], #8
 8008586:	460d      	mov	r5, r1
 8008588:	429e      	cmp	r6, r3
 800858a:	d10b      	bne.n	80085a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 800858c:	2210      	movs	r2, #16
 800858e:	4631      	mov	r1, r6
 8008590:	f7ff ff27 	bl	80083e2 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 8008594:	686b      	ldr	r3, [r5, #4]
 8008596:	4620      	mov	r0, r4
 8008598:	6063      	str	r3, [r4, #4]
 800859a:	2300      	movs	r3, #0
 800859c:	602e      	str	r6, [r5, #0]
 800859e:	606b      	str	r3, [r5, #4]
 80085a0:	722b      	strb	r3, [r5, #8]
 80085a2:	bd70      	pop	{r4, r5, r6, pc}
 80085a4:	6023      	str	r3, [r4, #0]
 80085a6:	688b      	ldr	r3, [r1, #8]
 80085a8:	60a3      	str	r3, [r4, #8]
 80085aa:	e7f3      	b.n	8008594 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

080085ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80085ac:	b510      	push	{r4, lr}
 80085ae:	4604      	mov	r4, r0
 80085b0:	f7ff ff52 	bl	8008458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80085b4:	4620      	mov	r0, r4
 80085b6:	bd10      	pop	{r4, pc}

080085b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 80085b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ba:	460d      	mov	r5, r1
 80085bc:	f851 3b08 	ldr.w	r3, [r1], #8
 80085c0:	4604      	mov	r4, r0
 80085c2:	4299      	cmp	r1, r3
 80085c4:	6800      	ldr	r0, [r0, #0]
 80085c6:	686a      	ldr	r2, [r5, #4]
 80085c8:	d10d      	bne.n	80085e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 80085ca:	b10a      	cbz	r2, 80085d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x18>
 80085cc:	f7ff ff72 	bl	80084b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80085d0:	2100      	movs	r1, #0
 80085d2:	686b      	ldr	r3, [r5, #4]
 80085d4:	6822      	ldr	r2, [r4, #0]
 80085d6:	6063      	str	r3, [r4, #4]
 80085d8:	54d1      	strb	r1, [r2, r3]
 80085da:	2300      	movs	r3, #0
 80085dc:	682a      	ldr	r2, [r5, #0]
 80085de:	606b      	str	r3, [r5, #4]
 80085e0:	7013      	strb	r3, [r2, #0]
 80085e2:	4620      	mov	r0, r4
 80085e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085e6:	f104 0708 	add.w	r7, r4, #8
 80085ea:	42b8      	cmp	r0, r7
 80085ec:	bf08      	it	eq
 80085ee:	2000      	moveq	r0, #0
 80085f0:	e9c4 3200 	strd	r3, r2, [r4]
 80085f4:	68ab      	ldr	r3, [r5, #8]
 80085f6:	bf18      	it	ne
 80085f8:	68a6      	ldrne	r6, [r4, #8]
 80085fa:	60a3      	str	r3, [r4, #8]
 80085fc:	b110      	cbz	r0, 8008604 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x4c>
 80085fe:	6028      	str	r0, [r5, #0]
 8008600:	60ae      	str	r6, [r5, #8]
 8008602:	e7ea      	b.n	80085da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>
 8008604:	6029      	str	r1, [r5, #0]
 8008606:	e7e8      	b.n	80085da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>

08008608 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>:
 8008608:	6800      	ldr	r0, [r0, #0]
 800860a:	4770      	bx	lr

0800860c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>:
 800860c:	e9d0 2000 	ldrd	r2, r0, [r0]
 8008610:	4410      	add	r0, r2
 8008612:	4770      	bx	lr

08008614 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8008614:	6800      	ldr	r0, [r0, #0]
 8008616:	4408      	add	r0, r1
 8008618:	4770      	bx	lr

0800861a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 800861a:	4603      	mov	r3, r0
 800861c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800861e:	f853 2b08 	ldr.w	r2, [r3], #8
 8008622:	6846      	ldr	r6, [r0, #4]
 8008624:	429a      	cmp	r2, r3
 8008626:	bf0c      	ite	eq
 8008628:	230f      	moveq	r3, #15
 800862a:	6883      	ldrne	r3, [r0, #8]
 800862c:	1c75      	adds	r5, r6, #1
 800862e:	429d      	cmp	r5, r3
 8008630:	4604      	mov	r4, r0
 8008632:	460f      	mov	r7, r1
 8008634:	d906      	bls.n	8008644 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2a>
 8008636:	2301      	movs	r3, #1
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	2300      	movs	r3, #0
 800863c:	4631      	mov	r1, r6
 800863e:	461a      	mov	r2, r3
 8008640:	f7ff ff58 	bl	80084f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8008644:	2200      	movs	r2, #0
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	559f      	strb	r7, [r3, r6]
 800864a:	6823      	ldr	r3, [r4, #0]
 800864c:	6065      	str	r5, [r4, #4]
 800864e:	555a      	strb	r2, [r3, r5]
 8008650:	b003      	add	sp, #12
 8008652:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 8008654:	b510      	push	{r4, lr}
 8008656:	4604      	mov	r4, r0
 8008658:	f7ff ffdf 	bl	800861a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 800865c:	4620      	mov	r0, r4
 800865e:	bd10      	pop	{r4, pc}

08008660 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8008660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008664:	4614      	mov	r4, r2
 8008666:	4680      	mov	r8, r0
 8008668:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800866a:	4689      	mov	r9, r1
 800866c:	462a      	mov	r2, r5
 800866e:	461f      	mov	r7, r3
 8008670:	4621      	mov	r1, r4
 8008672:	4b38      	ldr	r3, [pc, #224]	; (8008754 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf4>)
 8008674:	f7ff ff06 	bl	8008484 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8008678:	4642      	mov	r2, r8
 800867a:	f852 6b08 	ldr.w	r6, [r2], #8
 800867e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008682:	4296      	cmp	r6, r2
 8008684:	bf0c      	ite	eq
 8008686:	220f      	moveq	r2, #15
 8008688:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 800868c:	eba5 0b04 	sub.w	fp, r5, r4
 8008690:	eb03 0a0b 	add.w	sl, r3, fp
 8008694:	4552      	cmp	r2, sl
 8008696:	d351      	bcc.n	800873c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xdc>
 8008698:	444e      	add	r6, r9
 800869a:	4639      	mov	r1, r7
 800869c:	44a1      	add	r9, r4
 800869e:	4640      	mov	r0, r8
 80086a0:	eba3 0909 	sub.w	r9, r3, r9
 80086a4:	f7ff fefa 	bl	800849c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 80086a8:	b180      	cbz	r0, 80086cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6c>
 80086aa:	f1b9 0f00 	cmp.w	r9, #0
 80086ae:	d006      	beq.n	80086be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 80086b0:	42ac      	cmp	r4, r5
 80086b2:	d004      	beq.n	80086be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 80086b4:	464a      	mov	r2, r9
 80086b6:	1931      	adds	r1, r6, r4
 80086b8:	1970      	adds	r0, r6, r5
 80086ba:	f7ff ff05 	bl	80084c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80086be:	b315      	cbz	r5, 8008706 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 80086c0:	462a      	mov	r2, r5
 80086c2:	4639      	mov	r1, r7
 80086c4:	4630      	mov	r0, r6
 80086c6:	f7ff fef5 	bl	80084b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80086ca:	e01c      	b.n	8008706 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 80086cc:	b135      	cbz	r5, 80086dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7c>
 80086ce:	42ac      	cmp	r4, r5
 80086d0:	d33c      	bcc.n	800874c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xec>
 80086d2:	462a      	mov	r2, r5
 80086d4:	4639      	mov	r1, r7
 80086d6:	4630      	mov	r0, r6
 80086d8:	f7ff fef6 	bl	80084c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80086dc:	f1b9 0f00 	cmp.w	r9, #0
 80086e0:	d011      	beq.n	8008706 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 80086e2:	42ac      	cmp	r4, r5
 80086e4:	d00f      	beq.n	8008706 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 80086e6:	464a      	mov	r2, r9
 80086e8:	1931      	adds	r1, r6, r4
 80086ea:	1970      	adds	r0, r6, r5
 80086ec:	f7ff feec 	bl	80084c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80086f0:	42ac      	cmp	r4, r5
 80086f2:	d208      	bcs.n	8008706 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 80086f4:	4434      	add	r4, r6
 80086f6:	197b      	adds	r3, r7, r5
 80086f8:	429c      	cmp	r4, r3
 80086fa:	d30f      	bcc.n	800871c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
 80086fc:	462a      	mov	r2, r5
 80086fe:	4639      	mov	r1, r7
 8008700:	4630      	mov	r0, r6
 8008702:	f7ff fee1 	bl	80084c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8008706:	2200      	movs	r2, #0
 8008708:	4640      	mov	r0, r8
 800870a:	f8d8 3000 	ldr.w	r3, [r8]
 800870e:	f8c8 a004 	str.w	sl, [r8, #4]
 8008712:	f803 200a 	strb.w	r2, [r3, sl]
 8008716:	b003      	add	sp, #12
 8008718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800871c:	42bc      	cmp	r4, r7
 800871e:	d803      	bhi.n	8008728 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc8>
 8008720:	462a      	mov	r2, r5
 8008722:	eb07 010b 	add.w	r1, r7, fp
 8008726:	e7cd      	b.n	80086c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x64>
 8008728:	1be4      	subs	r4, r4, r7
 800872a:	4622      	mov	r2, r4
 800872c:	4639      	mov	r1, r7
 800872e:	4630      	mov	r0, r6
 8008730:	f7ff feca 	bl	80084c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8008734:	1b2a      	subs	r2, r5, r4
 8008736:	1971      	adds	r1, r6, r5
 8008738:	1930      	adds	r0, r6, r4
 800873a:	e7c4      	b.n	80086c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 800873c:	463b      	mov	r3, r7
 800873e:	4622      	mov	r2, r4
 8008740:	4649      	mov	r1, r9
 8008742:	4640      	mov	r0, r8
 8008744:	9500      	str	r5, [sp, #0]
 8008746:	f7ff fed5 	bl	80084f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800874a:	e7dc      	b.n	8008706 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 800874c:	f1b9 0f00 	cmp.w	r9, #0
 8008750:	d0d0      	beq.n	80086f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x94>
 8008752:	e7c8      	b.n	80086e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x86>
 8008754:	0800bc19 	.word	0x0800bc19

08008758 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8008758:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800875a:	4604      	mov	r4, r0
 800875c:	4608      	mov	r0, r1
 800875e:	460d      	mov	r5, r1
 8008760:	f7f7 fcf6 	bl	8000150 <strlen>
 8008764:	462b      	mov	r3, r5
 8008766:	9000      	str	r0, [sp, #0]
 8008768:	2100      	movs	r1, #0
 800876a:	4620      	mov	r0, r4
 800876c:	6862      	ldr	r2, [r4, #4]
 800876e:	f7ff ff77 	bl	8008660 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8008772:	b003      	add	sp, #12
 8008774:	bd30      	pop	{r4, r5, pc}

08008776 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 8008776:	b508      	push	{r3, lr}
 8008778:	f7ff ffee 	bl	8008758 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 800877c:	bd08      	pop	{r3, pc}

0800877e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800877e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008780:	4604      	mov	r4, r0
 8008782:	4623      	mov	r3, r4
 8008784:	f853 6b08 	ldr.w	r6, [r3], #8
 8008788:	6840      	ldr	r0, [r0, #4]
 800878a:	429e      	cmp	r6, r3
 800878c:	bf0c      	ite	eq
 800878e:	230f      	moveq	r3, #15
 8008790:	68a3      	ldrne	r3, [r4, #8]
 8008792:	1885      	adds	r5, r0, r2
 8008794:	429d      	cmp	r5, r3
 8008796:	d80a      	bhi.n	80087ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 8008798:	b112      	cbz	r2, 80087a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 800879a:	4430      	add	r0, r6
 800879c:	f7ff fe8a 	bl	80084b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80087a0:	2200      	movs	r2, #0
 80087a2:	4620      	mov	r0, r4
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	6065      	str	r5, [r4, #4]
 80087a8:	555a      	strb	r2, [r3, r5]
 80087aa:	b002      	add	sp, #8
 80087ac:	bd70      	pop	{r4, r5, r6, pc}
 80087ae:	460b      	mov	r3, r1
 80087b0:	9200      	str	r2, [sp, #0]
 80087b2:	4601      	mov	r1, r0
 80087b4:	2200      	movs	r2, #0
 80087b6:	4620      	mov	r0, r4
 80087b8:	f7ff fe9c 	bl	80084f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80087bc:	e7f0      	b.n	80087a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

080087be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 80087be:	b508      	push	{r3, lr}
 80087c0:	e9d1 1200 	ldrd	r1, r2, [r1]
 80087c4:	f7ff ffdb 	bl	800877e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80087c8:	bd08      	pop	{r3, pc}

080087ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 80087ca:	b508      	push	{r3, lr}
 80087cc:	f7ff fff7 	bl	80087be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 80087d0:	bd08      	pop	{r3, pc}

080087d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80087d2:	6800      	ldr	r0, [r0, #0]
 80087d4:	4770      	bx	lr

080087d6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>:
 80087d6:	b513      	push	{r0, r1, r4, lr}
 80087d8:	f88d 1007 	strb.w	r1, [sp, #7]
 80087dc:	6841      	ldr	r1, [r0, #4]
 80087de:	4613      	mov	r3, r2
 80087e0:	428a      	cmp	r2, r1
 80087e2:	d20a      	bcs.n	80087fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 80087e4:	6804      	ldr	r4, [r0, #0]
 80087e6:	f10d 0207 	add.w	r2, sp, #7
 80087ea:	1ac9      	subs	r1, r1, r3
 80087ec:	18e0      	adds	r0, r4, r3
 80087ee:	f7ff fdfc 	bl	80083ea <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 80087f2:	b110      	cbz	r0, 80087fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 80087f4:	1b00      	subs	r0, r0, r4
 80087f6:	b002      	add	sp, #8
 80087f8:	bd10      	pop	{r4, pc}
 80087fa:	f04f 30ff 	mov.w	r0, #4294967295
 80087fe:	e7fa      	b.n	80087f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x20>

08008800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8008800:	6001      	str	r1, [r0, #0]
 8008802:	4770      	bx	lr

08008804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8008804:	b510      	push	{r4, lr}
 8008806:	4604      	mov	r4, r0
 8008808:	f100 0208 	add.w	r2, r0, #8
 800880c:	6002      	str	r2, [r0, #0]
 800880e:	e9d1 1200 	ldrd	r1, r2, [r1]
 8008812:	f04f 0300 	mov.w	r3, #0
 8008816:	440a      	add	r2, r1
 8008818:	f7fa f8d2 	bl	80029c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800881c:	4620      	mov	r0, r4
 800881e:	bd10      	pop	{r4, pc}

08008820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8008820:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008822:	4604      	mov	r4, r0
 8008824:	4616      	mov	r6, r2
 8008826:	460d      	mov	r5, r1
 8008828:	b919      	cbnz	r1, 8008832 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800882a:	b112      	cbz	r2, 8008832 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800882c:	480d      	ldr	r0, [pc, #52]	; (8008864 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800882e:	f7ff fd1d 	bl	800826c <_ZSt19__throw_logic_errorPKc>
 8008832:	1b73      	subs	r3, r6, r5
 8008834:	2b0f      	cmp	r3, #15
 8008836:	9301      	str	r3, [sp, #4]
 8008838:	d907      	bls.n	800884a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800883a:	2200      	movs	r2, #0
 800883c:	4620      	mov	r0, r4
 800883e:	a901      	add	r1, sp, #4
 8008840:	f7ff fde8 	bl	8008414 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8008844:	9b01      	ldr	r3, [sp, #4]
 8008846:	6020      	str	r0, [r4, #0]
 8008848:	60a3      	str	r3, [r4, #8]
 800884a:	4632      	mov	r2, r6
 800884c:	4629      	mov	r1, r5
 800884e:	6820      	ldr	r0, [r4, #0]
 8008850:	f7ff fe4b 	bl	80084ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8008854:	2100      	movs	r1, #0
 8008856:	9b01      	ldr	r3, [sp, #4]
 8008858:	6822      	ldr	r2, [r4, #0]
 800885a:	6063      	str	r3, [r4, #4]
 800885c:	54d1      	strb	r1, [r2, r3]
 800885e:	b002      	add	sp, #8
 8008860:	bd70      	pop	{r4, r5, r6, pc}
 8008862:	bf00      	nop
 8008864:	0800bc32 	.word	0x0800bc32

08008868 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 8008868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800886c:	460d      	mov	r5, r1
 800886e:	4617      	mov	r7, r2
 8008870:	4698      	mov	r8, r3
 8008872:	f100 0308 	add.w	r3, r0, #8
 8008876:	4604      	mov	r4, r0
 8008878:	4639      	mov	r1, r7
 800887a:	6003      	str	r3, [r0, #0]
 800887c:	4a0a      	ldr	r2, [pc, #40]	; (80088a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
 800887e:	4628      	mov	r0, r5
 8008880:	f7ff fdf2 	bl	8008468 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8008884:	686a      	ldr	r2, [r5, #4]
 8008886:	682e      	ldr	r6, [r5, #0]
 8008888:	1bd7      	subs	r7, r2, r7
 800888a:	1831      	adds	r1, r6, r0
 800888c:	f04f 0300 	mov.w	r3, #0
 8008890:	4620      	mov	r0, r4
 8008892:	4547      	cmp	r7, r8
 8008894:	bf94      	ite	ls
 8008896:	19ca      	addls	r2, r1, r7
 8008898:	eb01 0208 	addhi.w	r2, r1, r8
 800889c:	f7ff ffc0 	bl	8008820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80088a0:	4620      	mov	r0, r4
 80088a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088a6:	bf00      	nop
 80088a8:	0800bc5c 	.word	0x0800bc5c

080088ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 80088ac:	b570      	push	{r4, r5, r6, lr}
 80088ae:	460d      	mov	r5, r1
 80088b0:	4604      	mov	r4, r0
 80088b2:	4611      	mov	r1, r2
 80088b4:	4628      	mov	r0, r5
 80088b6:	4a06      	ldr	r2, [pc, #24]	; (80088d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 80088b8:	461e      	mov	r6, r3
 80088ba:	f7ff fdd5 	bl	8008468 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80088be:	4633      	mov	r3, r6
 80088c0:	4602      	mov	r2, r0
 80088c2:	4629      	mov	r1, r5
 80088c4:	4620      	mov	r0, r4
 80088c6:	f7ff ffcf 	bl	8008868 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 80088ca:	4620      	mov	r0, r4
 80088cc:	bd70      	pop	{r4, r5, r6, pc}
 80088ce:	bf00      	nop
 80088d0:	0800bc77 	.word	0x0800bc77

080088d4 <_ZdlPv>:
 80088d4:	f000 b842 	b.w	800895c <free>

080088d8 <_ZSt15get_new_handlerv>:
 80088d8:	4b02      	ldr	r3, [pc, #8]	; (80088e4 <_ZSt15get_new_handlerv+0xc>)
 80088da:	6818      	ldr	r0, [r3, #0]
 80088dc:	f3bf 8f5b 	dmb	ish
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	200015b0 	.word	0x200015b0

080088e8 <abort>:
 80088e8:	2006      	movs	r0, #6
 80088ea:	b508      	push	{r3, lr}
 80088ec:	f000 f990 	bl	8008c10 <raise>
 80088f0:	2001      	movs	r0, #1
 80088f2:	f7fc fb83 	bl	8004ffc <_exit>
	...

080088f8 <__errno>:
 80088f8:	4b01      	ldr	r3, [pc, #4]	; (8008900 <__errno+0x8>)
 80088fa:	6818      	ldr	r0, [r3, #0]
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	2000017c 	.word	0x2000017c

08008904 <__libc_init_array>:
 8008904:	b570      	push	{r4, r5, r6, lr}
 8008906:	2600      	movs	r6, #0
 8008908:	4d0c      	ldr	r5, [pc, #48]	; (800893c <__libc_init_array+0x38>)
 800890a:	4c0d      	ldr	r4, [pc, #52]	; (8008940 <__libc_init_array+0x3c>)
 800890c:	1b64      	subs	r4, r4, r5
 800890e:	10a4      	asrs	r4, r4, #2
 8008910:	42a6      	cmp	r6, r4
 8008912:	d109      	bne.n	8008928 <__libc_init_array+0x24>
 8008914:	f003 f89a 	bl	800ba4c <_init>
 8008918:	2600      	movs	r6, #0
 800891a:	4d0a      	ldr	r5, [pc, #40]	; (8008944 <__libc_init_array+0x40>)
 800891c:	4c0a      	ldr	r4, [pc, #40]	; (8008948 <__libc_init_array+0x44>)
 800891e:	1b64      	subs	r4, r4, r5
 8008920:	10a4      	asrs	r4, r4, #2
 8008922:	42a6      	cmp	r6, r4
 8008924:	d105      	bne.n	8008932 <__libc_init_array+0x2e>
 8008926:	bd70      	pop	{r4, r5, r6, pc}
 8008928:	f855 3b04 	ldr.w	r3, [r5], #4
 800892c:	4798      	blx	r3
 800892e:	3601      	adds	r6, #1
 8008930:	e7ee      	b.n	8008910 <__libc_init_array+0xc>
 8008932:	f855 3b04 	ldr.w	r3, [r5], #4
 8008936:	4798      	blx	r3
 8008938:	3601      	adds	r6, #1
 800893a:	e7f2      	b.n	8008922 <__libc_init_array+0x1e>
 800893c:	0800c51c 	.word	0x0800c51c
 8008940:	0800c51c 	.word	0x0800c51c
 8008944:	0800c51c 	.word	0x0800c51c
 8008948:	0800c524 	.word	0x0800c524

0800894c <malloc>:
 800894c:	4b02      	ldr	r3, [pc, #8]	; (8008958 <malloc+0xc>)
 800894e:	4601      	mov	r1, r0
 8008950:	6818      	ldr	r0, [r3, #0]
 8008952:	f000 b8b1 	b.w	8008ab8 <_malloc_r>
 8008956:	bf00      	nop
 8008958:	2000017c 	.word	0x2000017c

0800895c <free>:
 800895c:	4b02      	ldr	r3, [pc, #8]	; (8008968 <free+0xc>)
 800895e:	4601      	mov	r1, r0
 8008960:	6818      	ldr	r0, [r3, #0]
 8008962:	f000 b841 	b.w	80089e8 <_free_r>
 8008966:	bf00      	nop
 8008968:	2000017c 	.word	0x2000017c

0800896c <memchr>:
 800896c:	4603      	mov	r3, r0
 800896e:	b510      	push	{r4, lr}
 8008970:	b2c9      	uxtb	r1, r1
 8008972:	4402      	add	r2, r0
 8008974:	4293      	cmp	r3, r2
 8008976:	4618      	mov	r0, r3
 8008978:	d101      	bne.n	800897e <memchr+0x12>
 800897a:	2000      	movs	r0, #0
 800897c:	e003      	b.n	8008986 <memchr+0x1a>
 800897e:	7804      	ldrb	r4, [r0, #0]
 8008980:	3301      	adds	r3, #1
 8008982:	428c      	cmp	r4, r1
 8008984:	d1f6      	bne.n	8008974 <memchr+0x8>
 8008986:	bd10      	pop	{r4, pc}

08008988 <memcpy>:
 8008988:	440a      	add	r2, r1
 800898a:	4291      	cmp	r1, r2
 800898c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008990:	d100      	bne.n	8008994 <memcpy+0xc>
 8008992:	4770      	bx	lr
 8008994:	b510      	push	{r4, lr}
 8008996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800899a:	4291      	cmp	r1, r2
 800899c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089a0:	d1f9      	bne.n	8008996 <memcpy+0xe>
 80089a2:	bd10      	pop	{r4, pc}

080089a4 <memmove>:
 80089a4:	4288      	cmp	r0, r1
 80089a6:	b510      	push	{r4, lr}
 80089a8:	eb01 0402 	add.w	r4, r1, r2
 80089ac:	d902      	bls.n	80089b4 <memmove+0x10>
 80089ae:	4284      	cmp	r4, r0
 80089b0:	4623      	mov	r3, r4
 80089b2:	d807      	bhi.n	80089c4 <memmove+0x20>
 80089b4:	1e43      	subs	r3, r0, #1
 80089b6:	42a1      	cmp	r1, r4
 80089b8:	d008      	beq.n	80089cc <memmove+0x28>
 80089ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089c2:	e7f8      	b.n	80089b6 <memmove+0x12>
 80089c4:	4601      	mov	r1, r0
 80089c6:	4402      	add	r2, r0
 80089c8:	428a      	cmp	r2, r1
 80089ca:	d100      	bne.n	80089ce <memmove+0x2a>
 80089cc:	bd10      	pop	{r4, pc}
 80089ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089d6:	e7f7      	b.n	80089c8 <memmove+0x24>

080089d8 <memset>:
 80089d8:	4603      	mov	r3, r0
 80089da:	4402      	add	r2, r0
 80089dc:	4293      	cmp	r3, r2
 80089de:	d100      	bne.n	80089e2 <memset+0xa>
 80089e0:	4770      	bx	lr
 80089e2:	f803 1b01 	strb.w	r1, [r3], #1
 80089e6:	e7f9      	b.n	80089dc <memset+0x4>

080089e8 <_free_r>:
 80089e8:	b538      	push	{r3, r4, r5, lr}
 80089ea:	4605      	mov	r5, r0
 80089ec:	2900      	cmp	r1, #0
 80089ee:	d040      	beq.n	8008a72 <_free_r+0x8a>
 80089f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089f4:	1f0c      	subs	r4, r1, #4
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	bfb8      	it	lt
 80089fa:	18e4      	addlt	r4, r4, r3
 80089fc:	f001 faee 	bl	8009fdc <__malloc_lock>
 8008a00:	4a1c      	ldr	r2, [pc, #112]	; (8008a74 <_free_r+0x8c>)
 8008a02:	6813      	ldr	r3, [r2, #0]
 8008a04:	b933      	cbnz	r3, 8008a14 <_free_r+0x2c>
 8008a06:	6063      	str	r3, [r4, #4]
 8008a08:	6014      	str	r4, [r2, #0]
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a10:	f001 baea 	b.w	8009fe8 <__malloc_unlock>
 8008a14:	42a3      	cmp	r3, r4
 8008a16:	d908      	bls.n	8008a2a <_free_r+0x42>
 8008a18:	6820      	ldr	r0, [r4, #0]
 8008a1a:	1821      	adds	r1, r4, r0
 8008a1c:	428b      	cmp	r3, r1
 8008a1e:	bf01      	itttt	eq
 8008a20:	6819      	ldreq	r1, [r3, #0]
 8008a22:	685b      	ldreq	r3, [r3, #4]
 8008a24:	1809      	addeq	r1, r1, r0
 8008a26:	6021      	streq	r1, [r4, #0]
 8008a28:	e7ed      	b.n	8008a06 <_free_r+0x1e>
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	b10b      	cbz	r3, 8008a34 <_free_r+0x4c>
 8008a30:	42a3      	cmp	r3, r4
 8008a32:	d9fa      	bls.n	8008a2a <_free_r+0x42>
 8008a34:	6811      	ldr	r1, [r2, #0]
 8008a36:	1850      	adds	r0, r2, r1
 8008a38:	42a0      	cmp	r0, r4
 8008a3a:	d10b      	bne.n	8008a54 <_free_r+0x6c>
 8008a3c:	6820      	ldr	r0, [r4, #0]
 8008a3e:	4401      	add	r1, r0
 8008a40:	1850      	adds	r0, r2, r1
 8008a42:	4283      	cmp	r3, r0
 8008a44:	6011      	str	r1, [r2, #0]
 8008a46:	d1e0      	bne.n	8008a0a <_free_r+0x22>
 8008a48:	6818      	ldr	r0, [r3, #0]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	4401      	add	r1, r0
 8008a4e:	6011      	str	r1, [r2, #0]
 8008a50:	6053      	str	r3, [r2, #4]
 8008a52:	e7da      	b.n	8008a0a <_free_r+0x22>
 8008a54:	d902      	bls.n	8008a5c <_free_r+0x74>
 8008a56:	230c      	movs	r3, #12
 8008a58:	602b      	str	r3, [r5, #0]
 8008a5a:	e7d6      	b.n	8008a0a <_free_r+0x22>
 8008a5c:	6820      	ldr	r0, [r4, #0]
 8008a5e:	1821      	adds	r1, r4, r0
 8008a60:	428b      	cmp	r3, r1
 8008a62:	bf01      	itttt	eq
 8008a64:	6819      	ldreq	r1, [r3, #0]
 8008a66:	685b      	ldreq	r3, [r3, #4]
 8008a68:	1809      	addeq	r1, r1, r0
 8008a6a:	6021      	streq	r1, [r4, #0]
 8008a6c:	6063      	str	r3, [r4, #4]
 8008a6e:	6054      	str	r4, [r2, #4]
 8008a70:	e7cb      	b.n	8008a0a <_free_r+0x22>
 8008a72:	bd38      	pop	{r3, r4, r5, pc}
 8008a74:	200015b4 	.word	0x200015b4

08008a78 <sbrk_aligned>:
 8008a78:	b570      	push	{r4, r5, r6, lr}
 8008a7a:	4e0e      	ldr	r6, [pc, #56]	; (8008ab4 <sbrk_aligned+0x3c>)
 8008a7c:	460c      	mov	r4, r1
 8008a7e:	6831      	ldr	r1, [r6, #0]
 8008a80:	4605      	mov	r5, r0
 8008a82:	b911      	cbnz	r1, 8008a8a <sbrk_aligned+0x12>
 8008a84:	f000 f88c 	bl	8008ba0 <_sbrk_r>
 8008a88:	6030      	str	r0, [r6, #0]
 8008a8a:	4621      	mov	r1, r4
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	f000 f887 	bl	8008ba0 <_sbrk_r>
 8008a92:	1c43      	adds	r3, r0, #1
 8008a94:	d00a      	beq.n	8008aac <sbrk_aligned+0x34>
 8008a96:	1cc4      	adds	r4, r0, #3
 8008a98:	f024 0403 	bic.w	r4, r4, #3
 8008a9c:	42a0      	cmp	r0, r4
 8008a9e:	d007      	beq.n	8008ab0 <sbrk_aligned+0x38>
 8008aa0:	1a21      	subs	r1, r4, r0
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	f000 f87c 	bl	8008ba0 <_sbrk_r>
 8008aa8:	3001      	adds	r0, #1
 8008aaa:	d101      	bne.n	8008ab0 <sbrk_aligned+0x38>
 8008aac:	f04f 34ff 	mov.w	r4, #4294967295
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	bd70      	pop	{r4, r5, r6, pc}
 8008ab4:	200015b8 	.word	0x200015b8

08008ab8 <_malloc_r>:
 8008ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008abc:	1ccd      	adds	r5, r1, #3
 8008abe:	f025 0503 	bic.w	r5, r5, #3
 8008ac2:	3508      	adds	r5, #8
 8008ac4:	2d0c      	cmp	r5, #12
 8008ac6:	bf38      	it	cc
 8008ac8:	250c      	movcc	r5, #12
 8008aca:	2d00      	cmp	r5, #0
 8008acc:	4607      	mov	r7, r0
 8008ace:	db01      	blt.n	8008ad4 <_malloc_r+0x1c>
 8008ad0:	42a9      	cmp	r1, r5
 8008ad2:	d905      	bls.n	8008ae0 <_malloc_r+0x28>
 8008ad4:	230c      	movs	r3, #12
 8008ad6:	2600      	movs	r6, #0
 8008ad8:	603b      	str	r3, [r7, #0]
 8008ada:	4630      	mov	r0, r6
 8008adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae0:	4e2e      	ldr	r6, [pc, #184]	; (8008b9c <_malloc_r+0xe4>)
 8008ae2:	f001 fa7b 	bl	8009fdc <__malloc_lock>
 8008ae6:	6833      	ldr	r3, [r6, #0]
 8008ae8:	461c      	mov	r4, r3
 8008aea:	bb34      	cbnz	r4, 8008b3a <_malloc_r+0x82>
 8008aec:	4629      	mov	r1, r5
 8008aee:	4638      	mov	r0, r7
 8008af0:	f7ff ffc2 	bl	8008a78 <sbrk_aligned>
 8008af4:	1c43      	adds	r3, r0, #1
 8008af6:	4604      	mov	r4, r0
 8008af8:	d14d      	bne.n	8008b96 <_malloc_r+0xde>
 8008afa:	6834      	ldr	r4, [r6, #0]
 8008afc:	4626      	mov	r6, r4
 8008afe:	2e00      	cmp	r6, #0
 8008b00:	d140      	bne.n	8008b84 <_malloc_r+0xcc>
 8008b02:	6823      	ldr	r3, [r4, #0]
 8008b04:	4631      	mov	r1, r6
 8008b06:	4638      	mov	r0, r7
 8008b08:	eb04 0803 	add.w	r8, r4, r3
 8008b0c:	f000 f848 	bl	8008ba0 <_sbrk_r>
 8008b10:	4580      	cmp	r8, r0
 8008b12:	d13a      	bne.n	8008b8a <_malloc_r+0xd2>
 8008b14:	6821      	ldr	r1, [r4, #0]
 8008b16:	3503      	adds	r5, #3
 8008b18:	1a6d      	subs	r5, r5, r1
 8008b1a:	f025 0503 	bic.w	r5, r5, #3
 8008b1e:	3508      	adds	r5, #8
 8008b20:	2d0c      	cmp	r5, #12
 8008b22:	bf38      	it	cc
 8008b24:	250c      	movcc	r5, #12
 8008b26:	4638      	mov	r0, r7
 8008b28:	4629      	mov	r1, r5
 8008b2a:	f7ff ffa5 	bl	8008a78 <sbrk_aligned>
 8008b2e:	3001      	adds	r0, #1
 8008b30:	d02b      	beq.n	8008b8a <_malloc_r+0xd2>
 8008b32:	6823      	ldr	r3, [r4, #0]
 8008b34:	442b      	add	r3, r5
 8008b36:	6023      	str	r3, [r4, #0]
 8008b38:	e00e      	b.n	8008b58 <_malloc_r+0xa0>
 8008b3a:	6822      	ldr	r2, [r4, #0]
 8008b3c:	1b52      	subs	r2, r2, r5
 8008b3e:	d41e      	bmi.n	8008b7e <_malloc_r+0xc6>
 8008b40:	2a0b      	cmp	r2, #11
 8008b42:	d916      	bls.n	8008b72 <_malloc_r+0xba>
 8008b44:	1961      	adds	r1, r4, r5
 8008b46:	42a3      	cmp	r3, r4
 8008b48:	6025      	str	r5, [r4, #0]
 8008b4a:	bf18      	it	ne
 8008b4c:	6059      	strne	r1, [r3, #4]
 8008b4e:	6863      	ldr	r3, [r4, #4]
 8008b50:	bf08      	it	eq
 8008b52:	6031      	streq	r1, [r6, #0]
 8008b54:	5162      	str	r2, [r4, r5]
 8008b56:	604b      	str	r3, [r1, #4]
 8008b58:	4638      	mov	r0, r7
 8008b5a:	f104 060b 	add.w	r6, r4, #11
 8008b5e:	f001 fa43 	bl	8009fe8 <__malloc_unlock>
 8008b62:	f026 0607 	bic.w	r6, r6, #7
 8008b66:	1d23      	adds	r3, r4, #4
 8008b68:	1af2      	subs	r2, r6, r3
 8008b6a:	d0b6      	beq.n	8008ada <_malloc_r+0x22>
 8008b6c:	1b9b      	subs	r3, r3, r6
 8008b6e:	50a3      	str	r3, [r4, r2]
 8008b70:	e7b3      	b.n	8008ada <_malloc_r+0x22>
 8008b72:	6862      	ldr	r2, [r4, #4]
 8008b74:	42a3      	cmp	r3, r4
 8008b76:	bf0c      	ite	eq
 8008b78:	6032      	streq	r2, [r6, #0]
 8008b7a:	605a      	strne	r2, [r3, #4]
 8008b7c:	e7ec      	b.n	8008b58 <_malloc_r+0xa0>
 8008b7e:	4623      	mov	r3, r4
 8008b80:	6864      	ldr	r4, [r4, #4]
 8008b82:	e7b2      	b.n	8008aea <_malloc_r+0x32>
 8008b84:	4634      	mov	r4, r6
 8008b86:	6876      	ldr	r6, [r6, #4]
 8008b88:	e7b9      	b.n	8008afe <_malloc_r+0x46>
 8008b8a:	230c      	movs	r3, #12
 8008b8c:	4638      	mov	r0, r7
 8008b8e:	603b      	str	r3, [r7, #0]
 8008b90:	f001 fa2a 	bl	8009fe8 <__malloc_unlock>
 8008b94:	e7a1      	b.n	8008ada <_malloc_r+0x22>
 8008b96:	6025      	str	r5, [r4, #0]
 8008b98:	e7de      	b.n	8008b58 <_malloc_r+0xa0>
 8008b9a:	bf00      	nop
 8008b9c:	200015b4 	.word	0x200015b4

08008ba0 <_sbrk_r>:
 8008ba0:	b538      	push	{r3, r4, r5, lr}
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	4d05      	ldr	r5, [pc, #20]	; (8008bbc <_sbrk_r+0x1c>)
 8008ba6:	4604      	mov	r4, r0
 8008ba8:	4608      	mov	r0, r1
 8008baa:	602b      	str	r3, [r5, #0]
 8008bac:	f7fc fa54 	bl	8005058 <_sbrk>
 8008bb0:	1c43      	adds	r3, r0, #1
 8008bb2:	d102      	bne.n	8008bba <_sbrk_r+0x1a>
 8008bb4:	682b      	ldr	r3, [r5, #0]
 8008bb6:	b103      	cbz	r3, 8008bba <_sbrk_r+0x1a>
 8008bb8:	6023      	str	r3, [r4, #0]
 8008bba:	bd38      	pop	{r3, r4, r5, pc}
 8008bbc:	200015bc 	.word	0x200015bc

08008bc0 <_raise_r>:
 8008bc0:	291f      	cmp	r1, #31
 8008bc2:	b538      	push	{r3, r4, r5, lr}
 8008bc4:	4604      	mov	r4, r0
 8008bc6:	460d      	mov	r5, r1
 8008bc8:	d904      	bls.n	8008bd4 <_raise_r+0x14>
 8008bca:	2316      	movs	r3, #22
 8008bcc:	6003      	str	r3, [r0, #0]
 8008bce:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd2:	bd38      	pop	{r3, r4, r5, pc}
 8008bd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008bd6:	b112      	cbz	r2, 8008bde <_raise_r+0x1e>
 8008bd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008bdc:	b94b      	cbnz	r3, 8008bf2 <_raise_r+0x32>
 8008bde:	4620      	mov	r0, r4
 8008be0:	f000 f830 	bl	8008c44 <_getpid_r>
 8008be4:	462a      	mov	r2, r5
 8008be6:	4601      	mov	r1, r0
 8008be8:	4620      	mov	r0, r4
 8008bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bee:	f000 b817 	b.w	8008c20 <_kill_r>
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d00a      	beq.n	8008c0c <_raise_r+0x4c>
 8008bf6:	1c59      	adds	r1, r3, #1
 8008bf8:	d103      	bne.n	8008c02 <_raise_r+0x42>
 8008bfa:	2316      	movs	r3, #22
 8008bfc:	6003      	str	r3, [r0, #0]
 8008bfe:	2001      	movs	r0, #1
 8008c00:	e7e7      	b.n	8008bd2 <_raise_r+0x12>
 8008c02:	2400      	movs	r4, #0
 8008c04:	4628      	mov	r0, r5
 8008c06:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008c0a:	4798      	blx	r3
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	e7e0      	b.n	8008bd2 <_raise_r+0x12>

08008c10 <raise>:
 8008c10:	4b02      	ldr	r3, [pc, #8]	; (8008c1c <raise+0xc>)
 8008c12:	4601      	mov	r1, r0
 8008c14:	6818      	ldr	r0, [r3, #0]
 8008c16:	f7ff bfd3 	b.w	8008bc0 <_raise_r>
 8008c1a:	bf00      	nop
 8008c1c:	2000017c 	.word	0x2000017c

08008c20 <_kill_r>:
 8008c20:	b538      	push	{r3, r4, r5, lr}
 8008c22:	2300      	movs	r3, #0
 8008c24:	4d06      	ldr	r5, [pc, #24]	; (8008c40 <_kill_r+0x20>)
 8008c26:	4604      	mov	r4, r0
 8008c28:	4608      	mov	r0, r1
 8008c2a:	4611      	mov	r1, r2
 8008c2c:	602b      	str	r3, [r5, #0]
 8008c2e:	f7fc f9dd 	bl	8004fec <_kill>
 8008c32:	1c43      	adds	r3, r0, #1
 8008c34:	d102      	bne.n	8008c3c <_kill_r+0x1c>
 8008c36:	682b      	ldr	r3, [r5, #0]
 8008c38:	b103      	cbz	r3, 8008c3c <_kill_r+0x1c>
 8008c3a:	6023      	str	r3, [r4, #0]
 8008c3c:	bd38      	pop	{r3, r4, r5, pc}
 8008c3e:	bf00      	nop
 8008c40:	200015bc 	.word	0x200015bc

08008c44 <_getpid_r>:
 8008c44:	f7fc b9d0 	b.w	8004fe8 <_getpid>

08008c48 <sulp>:
 8008c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c4c:	460f      	mov	r7, r1
 8008c4e:	4690      	mov	r8, r2
 8008c50:	f001 fd40 	bl	800a6d4 <__ulp>
 8008c54:	4604      	mov	r4, r0
 8008c56:	460d      	mov	r5, r1
 8008c58:	f1b8 0f00 	cmp.w	r8, #0
 8008c5c:	d011      	beq.n	8008c82 <sulp+0x3a>
 8008c5e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008c62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	dd0b      	ble.n	8008c82 <sulp+0x3a>
 8008c6a:	2400      	movs	r4, #0
 8008c6c:	051b      	lsls	r3, r3, #20
 8008c6e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008c72:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008c76:	4622      	mov	r2, r4
 8008c78:	462b      	mov	r3, r5
 8008c7a:	f7f7 fc2d 	bl	80004d8 <__aeabi_dmul>
 8008c7e:	4604      	mov	r4, r0
 8008c80:	460d      	mov	r5, r1
 8008c82:	4620      	mov	r0, r4
 8008c84:	4629      	mov	r1, r5
 8008c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c8a:	0000      	movs	r0, r0
 8008c8c:	0000      	movs	r0, r0
	...

08008c90 <_strtod_l>:
 8008c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c94:	469b      	mov	fp, r3
 8008c96:	2300      	movs	r3, #0
 8008c98:	b09f      	sub	sp, #124	; 0x7c
 8008c9a:	931a      	str	r3, [sp, #104]	; 0x68
 8008c9c:	4b9e      	ldr	r3, [pc, #632]	; (8008f18 <_strtod_l+0x288>)
 8008c9e:	4682      	mov	sl, r0
 8008ca0:	681f      	ldr	r7, [r3, #0]
 8008ca2:	460e      	mov	r6, r1
 8008ca4:	4638      	mov	r0, r7
 8008ca6:	9215      	str	r2, [sp, #84]	; 0x54
 8008ca8:	f7f7 fa52 	bl	8000150 <strlen>
 8008cac:	f04f 0800 	mov.w	r8, #0
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	f04f 0900 	mov.w	r9, #0
 8008cb6:	9619      	str	r6, [sp, #100]	; 0x64
 8008cb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008cba:	781a      	ldrb	r2, [r3, #0]
 8008cbc:	2a2b      	cmp	r2, #43	; 0x2b
 8008cbe:	d04c      	beq.n	8008d5a <_strtod_l+0xca>
 8008cc0:	d83a      	bhi.n	8008d38 <_strtod_l+0xa8>
 8008cc2:	2a0d      	cmp	r2, #13
 8008cc4:	d833      	bhi.n	8008d2e <_strtod_l+0x9e>
 8008cc6:	2a08      	cmp	r2, #8
 8008cc8:	d833      	bhi.n	8008d32 <_strtod_l+0xa2>
 8008cca:	2a00      	cmp	r2, #0
 8008ccc:	d03d      	beq.n	8008d4a <_strtod_l+0xba>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	930a      	str	r3, [sp, #40]	; 0x28
 8008cd2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008cd4:	782b      	ldrb	r3, [r5, #0]
 8008cd6:	2b30      	cmp	r3, #48	; 0x30
 8008cd8:	f040 80aa 	bne.w	8008e30 <_strtod_l+0x1a0>
 8008cdc:	786b      	ldrb	r3, [r5, #1]
 8008cde:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ce2:	2b58      	cmp	r3, #88	; 0x58
 8008ce4:	d166      	bne.n	8008db4 <_strtod_l+0x124>
 8008ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ce8:	4650      	mov	r0, sl
 8008cea:	9301      	str	r3, [sp, #4]
 8008cec:	ab1a      	add	r3, sp, #104	; 0x68
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	4a8a      	ldr	r2, [pc, #552]	; (8008f1c <_strtod_l+0x28c>)
 8008cf2:	f8cd b008 	str.w	fp, [sp, #8]
 8008cf6:	ab1b      	add	r3, sp, #108	; 0x6c
 8008cf8:	a919      	add	r1, sp, #100	; 0x64
 8008cfa:	f000 fe5f 	bl	80099bc <__gethex>
 8008cfe:	f010 0607 	ands.w	r6, r0, #7
 8008d02:	4604      	mov	r4, r0
 8008d04:	d005      	beq.n	8008d12 <_strtod_l+0x82>
 8008d06:	2e06      	cmp	r6, #6
 8008d08:	d129      	bne.n	8008d5e <_strtod_l+0xce>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	3501      	adds	r5, #1
 8008d0e:	9519      	str	r5, [sp, #100]	; 0x64
 8008d10:	930a      	str	r3, [sp, #40]	; 0x28
 8008d12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f040 858a 	bne.w	800982e <_strtod_l+0xb9e>
 8008d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d1c:	b1d3      	cbz	r3, 8008d54 <_strtod_l+0xc4>
 8008d1e:	4642      	mov	r2, r8
 8008d20:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008d24:	4610      	mov	r0, r2
 8008d26:	4619      	mov	r1, r3
 8008d28:	b01f      	add	sp, #124	; 0x7c
 8008d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d2e:	2a20      	cmp	r2, #32
 8008d30:	d1cd      	bne.n	8008cce <_strtod_l+0x3e>
 8008d32:	3301      	adds	r3, #1
 8008d34:	9319      	str	r3, [sp, #100]	; 0x64
 8008d36:	e7bf      	b.n	8008cb8 <_strtod_l+0x28>
 8008d38:	2a2d      	cmp	r2, #45	; 0x2d
 8008d3a:	d1c8      	bne.n	8008cce <_strtod_l+0x3e>
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	920a      	str	r2, [sp, #40]	; 0x28
 8008d40:	1c5a      	adds	r2, r3, #1
 8008d42:	9219      	str	r2, [sp, #100]	; 0x64
 8008d44:	785b      	ldrb	r3, [r3, #1]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1c3      	bne.n	8008cd2 <_strtod_l+0x42>
 8008d4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d4c:	9619      	str	r6, [sp, #100]	; 0x64
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f040 856b 	bne.w	800982a <_strtod_l+0xb9a>
 8008d54:	4642      	mov	r2, r8
 8008d56:	464b      	mov	r3, r9
 8008d58:	e7e4      	b.n	8008d24 <_strtod_l+0x94>
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	e7ef      	b.n	8008d3e <_strtod_l+0xae>
 8008d5e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008d60:	b13a      	cbz	r2, 8008d72 <_strtod_l+0xe2>
 8008d62:	2135      	movs	r1, #53	; 0x35
 8008d64:	a81c      	add	r0, sp, #112	; 0x70
 8008d66:	f001 fdb9 	bl	800a8dc <__copybits>
 8008d6a:	4650      	mov	r0, sl
 8008d6c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008d6e:	f001 f981 	bl	800a074 <_Bfree>
 8008d72:	3e01      	subs	r6, #1
 8008d74:	2e04      	cmp	r6, #4
 8008d76:	d806      	bhi.n	8008d86 <_strtod_l+0xf6>
 8008d78:	e8df f006 	tbb	[pc, r6]
 8008d7c:	1714030a 	.word	0x1714030a
 8008d80:	0a          	.byte	0x0a
 8008d81:	00          	.byte	0x00
 8008d82:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008d86:	0721      	lsls	r1, r4, #28
 8008d88:	d5c3      	bpl.n	8008d12 <_strtod_l+0x82>
 8008d8a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008d8e:	e7c0      	b.n	8008d12 <_strtod_l+0x82>
 8008d90:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008d92:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008d96:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008d9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008d9e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008da2:	e7f0      	b.n	8008d86 <_strtod_l+0xf6>
 8008da4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008f20 <_strtod_l+0x290>
 8008da8:	e7ed      	b.n	8008d86 <_strtod_l+0xf6>
 8008daa:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008dae:	f04f 38ff 	mov.w	r8, #4294967295
 8008db2:	e7e8      	b.n	8008d86 <_strtod_l+0xf6>
 8008db4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008db6:	1c5a      	adds	r2, r3, #1
 8008db8:	9219      	str	r2, [sp, #100]	; 0x64
 8008dba:	785b      	ldrb	r3, [r3, #1]
 8008dbc:	2b30      	cmp	r3, #48	; 0x30
 8008dbe:	d0f9      	beq.n	8008db4 <_strtod_l+0x124>
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d0a6      	beq.n	8008d12 <_strtod_l+0x82>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	9307      	str	r3, [sp, #28]
 8008dc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008dca:	220a      	movs	r2, #10
 8008dcc:	9308      	str	r3, [sp, #32]
 8008dce:	2300      	movs	r3, #0
 8008dd0:	469b      	mov	fp, r3
 8008dd2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008dd6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008dd8:	7805      	ldrb	r5, [r0, #0]
 8008dda:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8008dde:	b2d9      	uxtb	r1, r3
 8008de0:	2909      	cmp	r1, #9
 8008de2:	d927      	bls.n	8008e34 <_strtod_l+0x1a4>
 8008de4:	4622      	mov	r2, r4
 8008de6:	4639      	mov	r1, r7
 8008de8:	f002 f8c8 	bl	800af7c <strncmp>
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d033      	beq.n	8008e58 <_strtod_l+0x1c8>
 8008df0:	2000      	movs	r0, #0
 8008df2:	462a      	mov	r2, r5
 8008df4:	465c      	mov	r4, fp
 8008df6:	4603      	mov	r3, r0
 8008df8:	9004      	str	r0, [sp, #16]
 8008dfa:	2a65      	cmp	r2, #101	; 0x65
 8008dfc:	d001      	beq.n	8008e02 <_strtod_l+0x172>
 8008dfe:	2a45      	cmp	r2, #69	; 0x45
 8008e00:	d114      	bne.n	8008e2c <_strtod_l+0x19c>
 8008e02:	b91c      	cbnz	r4, 8008e0c <_strtod_l+0x17c>
 8008e04:	9a07      	ldr	r2, [sp, #28]
 8008e06:	4302      	orrs	r2, r0
 8008e08:	d09f      	beq.n	8008d4a <_strtod_l+0xba>
 8008e0a:	2400      	movs	r4, #0
 8008e0c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008e0e:	1c72      	adds	r2, r6, #1
 8008e10:	9219      	str	r2, [sp, #100]	; 0x64
 8008e12:	7872      	ldrb	r2, [r6, #1]
 8008e14:	2a2b      	cmp	r2, #43	; 0x2b
 8008e16:	d079      	beq.n	8008f0c <_strtod_l+0x27c>
 8008e18:	2a2d      	cmp	r2, #45	; 0x2d
 8008e1a:	f000 8083 	beq.w	8008f24 <_strtod_l+0x294>
 8008e1e:	2700      	movs	r7, #0
 8008e20:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008e24:	2909      	cmp	r1, #9
 8008e26:	f240 8083 	bls.w	8008f30 <_strtod_l+0x2a0>
 8008e2a:	9619      	str	r6, [sp, #100]	; 0x64
 8008e2c:	2500      	movs	r5, #0
 8008e2e:	e09f      	b.n	8008f70 <_strtod_l+0x2e0>
 8008e30:	2300      	movs	r3, #0
 8008e32:	e7c8      	b.n	8008dc6 <_strtod_l+0x136>
 8008e34:	f1bb 0f08 	cmp.w	fp, #8
 8008e38:	bfd5      	itete	le
 8008e3a:	9906      	ldrle	r1, [sp, #24]
 8008e3c:	9905      	ldrgt	r1, [sp, #20]
 8008e3e:	fb02 3301 	mlale	r3, r2, r1, r3
 8008e42:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008e46:	f100 0001 	add.w	r0, r0, #1
 8008e4a:	bfd4      	ite	le
 8008e4c:	9306      	strle	r3, [sp, #24]
 8008e4e:	9305      	strgt	r3, [sp, #20]
 8008e50:	f10b 0b01 	add.w	fp, fp, #1
 8008e54:	9019      	str	r0, [sp, #100]	; 0x64
 8008e56:	e7be      	b.n	8008dd6 <_strtod_l+0x146>
 8008e58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e5a:	191a      	adds	r2, r3, r4
 8008e5c:	9219      	str	r2, [sp, #100]	; 0x64
 8008e5e:	5d1a      	ldrb	r2, [r3, r4]
 8008e60:	f1bb 0f00 	cmp.w	fp, #0
 8008e64:	d036      	beq.n	8008ed4 <_strtod_l+0x244>
 8008e66:	465c      	mov	r4, fp
 8008e68:	9004      	str	r0, [sp, #16]
 8008e6a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008e6e:	2b09      	cmp	r3, #9
 8008e70:	d912      	bls.n	8008e98 <_strtod_l+0x208>
 8008e72:	2301      	movs	r3, #1
 8008e74:	e7c1      	b.n	8008dfa <_strtod_l+0x16a>
 8008e76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e78:	3001      	adds	r0, #1
 8008e7a:	1c5a      	adds	r2, r3, #1
 8008e7c:	9219      	str	r2, [sp, #100]	; 0x64
 8008e7e:	785a      	ldrb	r2, [r3, #1]
 8008e80:	2a30      	cmp	r2, #48	; 0x30
 8008e82:	d0f8      	beq.n	8008e76 <_strtod_l+0x1e6>
 8008e84:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008e88:	2b08      	cmp	r3, #8
 8008e8a:	f200 84d5 	bhi.w	8009838 <_strtod_l+0xba8>
 8008e8e:	9004      	str	r0, [sp, #16]
 8008e90:	2000      	movs	r0, #0
 8008e92:	4604      	mov	r4, r0
 8008e94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e96:	9308      	str	r3, [sp, #32]
 8008e98:	3a30      	subs	r2, #48	; 0x30
 8008e9a:	f100 0301 	add.w	r3, r0, #1
 8008e9e:	d013      	beq.n	8008ec8 <_strtod_l+0x238>
 8008ea0:	9904      	ldr	r1, [sp, #16]
 8008ea2:	1905      	adds	r5, r0, r4
 8008ea4:	4419      	add	r1, r3
 8008ea6:	9104      	str	r1, [sp, #16]
 8008ea8:	4623      	mov	r3, r4
 8008eaa:	210a      	movs	r1, #10
 8008eac:	42ab      	cmp	r3, r5
 8008eae:	d113      	bne.n	8008ed8 <_strtod_l+0x248>
 8008eb0:	1823      	adds	r3, r4, r0
 8008eb2:	2b08      	cmp	r3, #8
 8008eb4:	f104 0401 	add.w	r4, r4, #1
 8008eb8:	4404      	add	r4, r0
 8008eba:	dc1b      	bgt.n	8008ef4 <_strtod_l+0x264>
 8008ebc:	230a      	movs	r3, #10
 8008ebe:	9906      	ldr	r1, [sp, #24]
 8008ec0:	fb03 2301 	mla	r3, r3, r1, r2
 8008ec4:	9306      	str	r3, [sp, #24]
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008eca:	4618      	mov	r0, r3
 8008ecc:	1c51      	adds	r1, r2, #1
 8008ece:	9119      	str	r1, [sp, #100]	; 0x64
 8008ed0:	7852      	ldrb	r2, [r2, #1]
 8008ed2:	e7ca      	b.n	8008e6a <_strtod_l+0x1da>
 8008ed4:	4658      	mov	r0, fp
 8008ed6:	e7d3      	b.n	8008e80 <_strtod_l+0x1f0>
 8008ed8:	2b08      	cmp	r3, #8
 8008eda:	dc04      	bgt.n	8008ee6 <_strtod_l+0x256>
 8008edc:	9f06      	ldr	r7, [sp, #24]
 8008ede:	434f      	muls	r7, r1
 8008ee0:	9706      	str	r7, [sp, #24]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	e7e2      	b.n	8008eac <_strtod_l+0x21c>
 8008ee6:	1c5f      	adds	r7, r3, #1
 8008ee8:	2f10      	cmp	r7, #16
 8008eea:	bfde      	ittt	le
 8008eec:	9f05      	ldrle	r7, [sp, #20]
 8008eee:	434f      	mulle	r7, r1
 8008ef0:	9705      	strle	r7, [sp, #20]
 8008ef2:	e7f6      	b.n	8008ee2 <_strtod_l+0x252>
 8008ef4:	2c10      	cmp	r4, #16
 8008ef6:	bfdf      	itttt	le
 8008ef8:	230a      	movle	r3, #10
 8008efa:	9905      	ldrle	r1, [sp, #20]
 8008efc:	fb03 2301 	mlale	r3, r3, r1, r2
 8008f00:	9305      	strle	r3, [sp, #20]
 8008f02:	e7e0      	b.n	8008ec6 <_strtod_l+0x236>
 8008f04:	2300      	movs	r3, #0
 8008f06:	9304      	str	r3, [sp, #16]
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e77b      	b.n	8008e04 <_strtod_l+0x174>
 8008f0c:	2700      	movs	r7, #0
 8008f0e:	1cb2      	adds	r2, r6, #2
 8008f10:	9219      	str	r2, [sp, #100]	; 0x64
 8008f12:	78b2      	ldrb	r2, [r6, #2]
 8008f14:	e784      	b.n	8008e20 <_strtod_l+0x190>
 8008f16:	bf00      	nop
 8008f18:	0800bd68 	.word	0x0800bd68
 8008f1c:	0800bc9c 	.word	0x0800bc9c
 8008f20:	7ff00000 	.word	0x7ff00000
 8008f24:	2701      	movs	r7, #1
 8008f26:	e7f2      	b.n	8008f0e <_strtod_l+0x27e>
 8008f28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f2a:	1c51      	adds	r1, r2, #1
 8008f2c:	9119      	str	r1, [sp, #100]	; 0x64
 8008f2e:	7852      	ldrb	r2, [r2, #1]
 8008f30:	2a30      	cmp	r2, #48	; 0x30
 8008f32:	d0f9      	beq.n	8008f28 <_strtod_l+0x298>
 8008f34:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008f38:	2908      	cmp	r1, #8
 8008f3a:	f63f af77 	bhi.w	8008e2c <_strtod_l+0x19c>
 8008f3e:	f04f 0e0a 	mov.w	lr, #10
 8008f42:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008f46:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f48:	9209      	str	r2, [sp, #36]	; 0x24
 8008f4a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f4c:	1c51      	adds	r1, r2, #1
 8008f4e:	9119      	str	r1, [sp, #100]	; 0x64
 8008f50:	7852      	ldrb	r2, [r2, #1]
 8008f52:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008f56:	2d09      	cmp	r5, #9
 8008f58:	d935      	bls.n	8008fc6 <_strtod_l+0x336>
 8008f5a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008f5c:	1b49      	subs	r1, r1, r5
 8008f5e:	2908      	cmp	r1, #8
 8008f60:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008f64:	dc02      	bgt.n	8008f6c <_strtod_l+0x2dc>
 8008f66:	4565      	cmp	r5, ip
 8008f68:	bfa8      	it	ge
 8008f6a:	4665      	movge	r5, ip
 8008f6c:	b107      	cbz	r7, 8008f70 <_strtod_l+0x2e0>
 8008f6e:	426d      	negs	r5, r5
 8008f70:	2c00      	cmp	r4, #0
 8008f72:	d14c      	bne.n	800900e <_strtod_l+0x37e>
 8008f74:	9907      	ldr	r1, [sp, #28]
 8008f76:	4301      	orrs	r1, r0
 8008f78:	f47f aecb 	bne.w	8008d12 <_strtod_l+0x82>
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f47f aee4 	bne.w	8008d4a <_strtod_l+0xba>
 8008f82:	2a69      	cmp	r2, #105	; 0x69
 8008f84:	d026      	beq.n	8008fd4 <_strtod_l+0x344>
 8008f86:	dc23      	bgt.n	8008fd0 <_strtod_l+0x340>
 8008f88:	2a49      	cmp	r2, #73	; 0x49
 8008f8a:	d023      	beq.n	8008fd4 <_strtod_l+0x344>
 8008f8c:	2a4e      	cmp	r2, #78	; 0x4e
 8008f8e:	f47f aedc 	bne.w	8008d4a <_strtod_l+0xba>
 8008f92:	499d      	ldr	r1, [pc, #628]	; (8009208 <_strtod_l+0x578>)
 8008f94:	a819      	add	r0, sp, #100	; 0x64
 8008f96:	f000 ff5f 	bl	8009e58 <__match>
 8008f9a:	2800      	cmp	r0, #0
 8008f9c:	f43f aed5 	beq.w	8008d4a <_strtod_l+0xba>
 8008fa0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	2b28      	cmp	r3, #40	; 0x28
 8008fa6:	d12c      	bne.n	8009002 <_strtod_l+0x372>
 8008fa8:	4998      	ldr	r1, [pc, #608]	; (800920c <_strtod_l+0x57c>)
 8008faa:	aa1c      	add	r2, sp, #112	; 0x70
 8008fac:	a819      	add	r0, sp, #100	; 0x64
 8008fae:	f000 ff67 	bl	8009e80 <__hexnan>
 8008fb2:	2805      	cmp	r0, #5
 8008fb4:	d125      	bne.n	8009002 <_strtod_l+0x372>
 8008fb6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008fb8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008fbc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008fc0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008fc4:	e6a5      	b.n	8008d12 <_strtod_l+0x82>
 8008fc6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8008fca:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8008fce:	e7bc      	b.n	8008f4a <_strtod_l+0x2ba>
 8008fd0:	2a6e      	cmp	r2, #110	; 0x6e
 8008fd2:	e7dc      	b.n	8008f8e <_strtod_l+0x2fe>
 8008fd4:	498e      	ldr	r1, [pc, #568]	; (8009210 <_strtod_l+0x580>)
 8008fd6:	a819      	add	r0, sp, #100	; 0x64
 8008fd8:	f000 ff3e 	bl	8009e58 <__match>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	f43f aeb4 	beq.w	8008d4a <_strtod_l+0xba>
 8008fe2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008fe4:	498b      	ldr	r1, [pc, #556]	; (8009214 <_strtod_l+0x584>)
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	a819      	add	r0, sp, #100	; 0x64
 8008fea:	9319      	str	r3, [sp, #100]	; 0x64
 8008fec:	f000 ff34 	bl	8009e58 <__match>
 8008ff0:	b910      	cbnz	r0, 8008ff8 <_strtod_l+0x368>
 8008ff2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	9319      	str	r3, [sp, #100]	; 0x64
 8008ff8:	f04f 0800 	mov.w	r8, #0
 8008ffc:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009218 <_strtod_l+0x588>
 8009000:	e687      	b.n	8008d12 <_strtod_l+0x82>
 8009002:	4886      	ldr	r0, [pc, #536]	; (800921c <_strtod_l+0x58c>)
 8009004:	f001 ffb4 	bl	800af70 <nan>
 8009008:	4680      	mov	r8, r0
 800900a:	4689      	mov	r9, r1
 800900c:	e681      	b.n	8008d12 <_strtod_l+0x82>
 800900e:	9b04      	ldr	r3, [sp, #16]
 8009010:	f1bb 0f00 	cmp.w	fp, #0
 8009014:	bf08      	it	eq
 8009016:	46a3      	moveq	fp, r4
 8009018:	1aeb      	subs	r3, r5, r3
 800901a:	2c10      	cmp	r4, #16
 800901c:	9806      	ldr	r0, [sp, #24]
 800901e:	4626      	mov	r6, r4
 8009020:	9307      	str	r3, [sp, #28]
 8009022:	bfa8      	it	ge
 8009024:	2610      	movge	r6, #16
 8009026:	f7f7 f9dd 	bl	80003e4 <__aeabi_ui2d>
 800902a:	2c09      	cmp	r4, #9
 800902c:	4680      	mov	r8, r0
 800902e:	4689      	mov	r9, r1
 8009030:	dd13      	ble.n	800905a <_strtod_l+0x3ca>
 8009032:	4b7b      	ldr	r3, [pc, #492]	; (8009220 <_strtod_l+0x590>)
 8009034:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009038:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800903c:	f7f7 fa4c 	bl	80004d8 <__aeabi_dmul>
 8009040:	4680      	mov	r8, r0
 8009042:	9805      	ldr	r0, [sp, #20]
 8009044:	4689      	mov	r9, r1
 8009046:	f7f7 f9cd 	bl	80003e4 <__aeabi_ui2d>
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	4640      	mov	r0, r8
 8009050:	4649      	mov	r1, r9
 8009052:	f7f7 f88b 	bl	800016c <__adddf3>
 8009056:	4680      	mov	r8, r0
 8009058:	4689      	mov	r9, r1
 800905a:	2c0f      	cmp	r4, #15
 800905c:	dc36      	bgt.n	80090cc <_strtod_l+0x43c>
 800905e:	9b07      	ldr	r3, [sp, #28]
 8009060:	2b00      	cmp	r3, #0
 8009062:	f43f ae56 	beq.w	8008d12 <_strtod_l+0x82>
 8009066:	dd22      	ble.n	80090ae <_strtod_l+0x41e>
 8009068:	2b16      	cmp	r3, #22
 800906a:	dc09      	bgt.n	8009080 <_strtod_l+0x3f0>
 800906c:	496c      	ldr	r1, [pc, #432]	; (8009220 <_strtod_l+0x590>)
 800906e:	4642      	mov	r2, r8
 8009070:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009074:	464b      	mov	r3, r9
 8009076:	e9d1 0100 	ldrd	r0, r1, [r1]
 800907a:	f7f7 fa2d 	bl	80004d8 <__aeabi_dmul>
 800907e:	e7c3      	b.n	8009008 <_strtod_l+0x378>
 8009080:	9a07      	ldr	r2, [sp, #28]
 8009082:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009086:	4293      	cmp	r3, r2
 8009088:	db20      	blt.n	80090cc <_strtod_l+0x43c>
 800908a:	4d65      	ldr	r5, [pc, #404]	; (8009220 <_strtod_l+0x590>)
 800908c:	f1c4 040f 	rsb	r4, r4, #15
 8009090:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009094:	4642      	mov	r2, r8
 8009096:	e9d1 0100 	ldrd	r0, r1, [r1]
 800909a:	464b      	mov	r3, r9
 800909c:	f7f7 fa1c 	bl	80004d8 <__aeabi_dmul>
 80090a0:	9b07      	ldr	r3, [sp, #28]
 80090a2:	1b1c      	subs	r4, r3, r4
 80090a4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80090a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80090ac:	e7e5      	b.n	800907a <_strtod_l+0x3ea>
 80090ae:	9b07      	ldr	r3, [sp, #28]
 80090b0:	3316      	adds	r3, #22
 80090b2:	db0b      	blt.n	80090cc <_strtod_l+0x43c>
 80090b4:	9b04      	ldr	r3, [sp, #16]
 80090b6:	4640      	mov	r0, r8
 80090b8:	1b5d      	subs	r5, r3, r5
 80090ba:	4b59      	ldr	r3, [pc, #356]	; (8009220 <_strtod_l+0x590>)
 80090bc:	4649      	mov	r1, r9
 80090be:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80090c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80090c6:	f7f7 fb31 	bl	800072c <__aeabi_ddiv>
 80090ca:	e79d      	b.n	8009008 <_strtod_l+0x378>
 80090cc:	9b07      	ldr	r3, [sp, #28]
 80090ce:	1ba6      	subs	r6, r4, r6
 80090d0:	441e      	add	r6, r3
 80090d2:	2e00      	cmp	r6, #0
 80090d4:	dd74      	ble.n	80091c0 <_strtod_l+0x530>
 80090d6:	f016 030f 	ands.w	r3, r6, #15
 80090da:	d00a      	beq.n	80090f2 <_strtod_l+0x462>
 80090dc:	4950      	ldr	r1, [pc, #320]	; (8009220 <_strtod_l+0x590>)
 80090de:	4642      	mov	r2, r8
 80090e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80090e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090e8:	464b      	mov	r3, r9
 80090ea:	f7f7 f9f5 	bl	80004d8 <__aeabi_dmul>
 80090ee:	4680      	mov	r8, r0
 80090f0:	4689      	mov	r9, r1
 80090f2:	f036 060f 	bics.w	r6, r6, #15
 80090f6:	d052      	beq.n	800919e <_strtod_l+0x50e>
 80090f8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80090fc:	dd27      	ble.n	800914e <_strtod_l+0x4be>
 80090fe:	f04f 0b00 	mov.w	fp, #0
 8009102:	f8cd b010 	str.w	fp, [sp, #16]
 8009106:	f8cd b020 	str.w	fp, [sp, #32]
 800910a:	f8cd b018 	str.w	fp, [sp, #24]
 800910e:	2322      	movs	r3, #34	; 0x22
 8009110:	f04f 0800 	mov.w	r8, #0
 8009114:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009218 <_strtod_l+0x588>
 8009118:	f8ca 3000 	str.w	r3, [sl]
 800911c:	9b08      	ldr	r3, [sp, #32]
 800911e:	2b00      	cmp	r3, #0
 8009120:	f43f adf7 	beq.w	8008d12 <_strtod_l+0x82>
 8009124:	4650      	mov	r0, sl
 8009126:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009128:	f000 ffa4 	bl	800a074 <_Bfree>
 800912c:	4650      	mov	r0, sl
 800912e:	9906      	ldr	r1, [sp, #24]
 8009130:	f000 ffa0 	bl	800a074 <_Bfree>
 8009134:	4650      	mov	r0, sl
 8009136:	9904      	ldr	r1, [sp, #16]
 8009138:	f000 ff9c 	bl	800a074 <_Bfree>
 800913c:	4650      	mov	r0, sl
 800913e:	9908      	ldr	r1, [sp, #32]
 8009140:	f000 ff98 	bl	800a074 <_Bfree>
 8009144:	4659      	mov	r1, fp
 8009146:	4650      	mov	r0, sl
 8009148:	f000 ff94 	bl	800a074 <_Bfree>
 800914c:	e5e1      	b.n	8008d12 <_strtod_l+0x82>
 800914e:	4b35      	ldr	r3, [pc, #212]	; (8009224 <_strtod_l+0x594>)
 8009150:	4640      	mov	r0, r8
 8009152:	9305      	str	r3, [sp, #20]
 8009154:	2300      	movs	r3, #0
 8009156:	4649      	mov	r1, r9
 8009158:	461f      	mov	r7, r3
 800915a:	1136      	asrs	r6, r6, #4
 800915c:	2e01      	cmp	r6, #1
 800915e:	dc21      	bgt.n	80091a4 <_strtod_l+0x514>
 8009160:	b10b      	cbz	r3, 8009166 <_strtod_l+0x4d6>
 8009162:	4680      	mov	r8, r0
 8009164:	4689      	mov	r9, r1
 8009166:	4b2f      	ldr	r3, [pc, #188]	; (8009224 <_strtod_l+0x594>)
 8009168:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800916c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009170:	4642      	mov	r2, r8
 8009172:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009176:	464b      	mov	r3, r9
 8009178:	f7f7 f9ae 	bl	80004d8 <__aeabi_dmul>
 800917c:	4b26      	ldr	r3, [pc, #152]	; (8009218 <_strtod_l+0x588>)
 800917e:	460a      	mov	r2, r1
 8009180:	400b      	ands	r3, r1
 8009182:	4929      	ldr	r1, [pc, #164]	; (8009228 <_strtod_l+0x598>)
 8009184:	4680      	mov	r8, r0
 8009186:	428b      	cmp	r3, r1
 8009188:	d8b9      	bhi.n	80090fe <_strtod_l+0x46e>
 800918a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800918e:	428b      	cmp	r3, r1
 8009190:	bf86      	itte	hi
 8009192:	f04f 38ff 	movhi.w	r8, #4294967295
 8009196:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800922c <_strtod_l+0x59c>
 800919a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800919e:	2300      	movs	r3, #0
 80091a0:	9305      	str	r3, [sp, #20]
 80091a2:	e07f      	b.n	80092a4 <_strtod_l+0x614>
 80091a4:	07f2      	lsls	r2, r6, #31
 80091a6:	d505      	bpl.n	80091b4 <_strtod_l+0x524>
 80091a8:	9b05      	ldr	r3, [sp, #20]
 80091aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ae:	f7f7 f993 	bl	80004d8 <__aeabi_dmul>
 80091b2:	2301      	movs	r3, #1
 80091b4:	9a05      	ldr	r2, [sp, #20]
 80091b6:	3701      	adds	r7, #1
 80091b8:	3208      	adds	r2, #8
 80091ba:	1076      	asrs	r6, r6, #1
 80091bc:	9205      	str	r2, [sp, #20]
 80091be:	e7cd      	b.n	800915c <_strtod_l+0x4cc>
 80091c0:	d0ed      	beq.n	800919e <_strtod_l+0x50e>
 80091c2:	4276      	negs	r6, r6
 80091c4:	f016 020f 	ands.w	r2, r6, #15
 80091c8:	d00a      	beq.n	80091e0 <_strtod_l+0x550>
 80091ca:	4b15      	ldr	r3, [pc, #84]	; (8009220 <_strtod_l+0x590>)
 80091cc:	4640      	mov	r0, r8
 80091ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091d2:	4649      	mov	r1, r9
 80091d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d8:	f7f7 faa8 	bl	800072c <__aeabi_ddiv>
 80091dc:	4680      	mov	r8, r0
 80091de:	4689      	mov	r9, r1
 80091e0:	1136      	asrs	r6, r6, #4
 80091e2:	d0dc      	beq.n	800919e <_strtod_l+0x50e>
 80091e4:	2e1f      	cmp	r6, #31
 80091e6:	dd23      	ble.n	8009230 <_strtod_l+0x5a0>
 80091e8:	f04f 0b00 	mov.w	fp, #0
 80091ec:	f8cd b010 	str.w	fp, [sp, #16]
 80091f0:	f8cd b020 	str.w	fp, [sp, #32]
 80091f4:	f8cd b018 	str.w	fp, [sp, #24]
 80091f8:	2322      	movs	r3, #34	; 0x22
 80091fa:	f04f 0800 	mov.w	r8, #0
 80091fe:	f04f 0900 	mov.w	r9, #0
 8009202:	f8ca 3000 	str.w	r3, [sl]
 8009206:	e789      	b.n	800911c <_strtod_l+0x48c>
 8009208:	0800bc99 	.word	0x0800bc99
 800920c:	0800bcb0 	.word	0x0800bcb0
 8009210:	0800bc90 	.word	0x0800bc90
 8009214:	0800bc93 	.word	0x0800bc93
 8009218:	7ff00000 	.word	0x7ff00000
 800921c:	0800bf5a 	.word	0x0800bf5a
 8009220:	0800be18 	.word	0x0800be18
 8009224:	0800bdf0 	.word	0x0800bdf0
 8009228:	7ca00000 	.word	0x7ca00000
 800922c:	7fefffff 	.word	0x7fefffff
 8009230:	f016 0310 	ands.w	r3, r6, #16
 8009234:	bf18      	it	ne
 8009236:	236a      	movne	r3, #106	; 0x6a
 8009238:	4640      	mov	r0, r8
 800923a:	9305      	str	r3, [sp, #20]
 800923c:	4649      	mov	r1, r9
 800923e:	2300      	movs	r3, #0
 8009240:	4fb0      	ldr	r7, [pc, #704]	; (8009504 <_strtod_l+0x874>)
 8009242:	07f2      	lsls	r2, r6, #31
 8009244:	d504      	bpl.n	8009250 <_strtod_l+0x5c0>
 8009246:	e9d7 2300 	ldrd	r2, r3, [r7]
 800924a:	f7f7 f945 	bl	80004d8 <__aeabi_dmul>
 800924e:	2301      	movs	r3, #1
 8009250:	1076      	asrs	r6, r6, #1
 8009252:	f107 0708 	add.w	r7, r7, #8
 8009256:	d1f4      	bne.n	8009242 <_strtod_l+0x5b2>
 8009258:	b10b      	cbz	r3, 800925e <_strtod_l+0x5ce>
 800925a:	4680      	mov	r8, r0
 800925c:	4689      	mov	r9, r1
 800925e:	9b05      	ldr	r3, [sp, #20]
 8009260:	b1c3      	cbz	r3, 8009294 <_strtod_l+0x604>
 8009262:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009266:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800926a:	2b00      	cmp	r3, #0
 800926c:	4649      	mov	r1, r9
 800926e:	dd11      	ble.n	8009294 <_strtod_l+0x604>
 8009270:	2b1f      	cmp	r3, #31
 8009272:	f340 8127 	ble.w	80094c4 <_strtod_l+0x834>
 8009276:	2b34      	cmp	r3, #52	; 0x34
 8009278:	bfd8      	it	le
 800927a:	f04f 33ff 	movle.w	r3, #4294967295
 800927e:	f04f 0800 	mov.w	r8, #0
 8009282:	bfcf      	iteee	gt
 8009284:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009288:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800928c:	fa03 f202 	lslle.w	r2, r3, r2
 8009290:	ea02 0901 	andle.w	r9, r2, r1
 8009294:	2200      	movs	r2, #0
 8009296:	2300      	movs	r3, #0
 8009298:	4640      	mov	r0, r8
 800929a:	4649      	mov	r1, r9
 800929c:	f7f7 fb84 	bl	80009a8 <__aeabi_dcmpeq>
 80092a0:	2800      	cmp	r0, #0
 80092a2:	d1a1      	bne.n	80091e8 <_strtod_l+0x558>
 80092a4:	9b06      	ldr	r3, [sp, #24]
 80092a6:	465a      	mov	r2, fp
 80092a8:	9300      	str	r3, [sp, #0]
 80092aa:	4650      	mov	r0, sl
 80092ac:	4623      	mov	r3, r4
 80092ae:	9908      	ldr	r1, [sp, #32]
 80092b0:	f000 ff48 	bl	800a144 <__s2b>
 80092b4:	9008      	str	r0, [sp, #32]
 80092b6:	2800      	cmp	r0, #0
 80092b8:	f43f af21 	beq.w	80090fe <_strtod_l+0x46e>
 80092bc:	9b04      	ldr	r3, [sp, #16]
 80092be:	f04f 0b00 	mov.w	fp, #0
 80092c2:	1b5d      	subs	r5, r3, r5
 80092c4:	9b07      	ldr	r3, [sp, #28]
 80092c6:	f8cd b010 	str.w	fp, [sp, #16]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	bfb4      	ite	lt
 80092ce:	462b      	movlt	r3, r5
 80092d0:	2300      	movge	r3, #0
 80092d2:	930e      	str	r3, [sp, #56]	; 0x38
 80092d4:	9b07      	ldr	r3, [sp, #28]
 80092d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80092da:	9314      	str	r3, [sp, #80]	; 0x50
 80092dc:	9b08      	ldr	r3, [sp, #32]
 80092de:	4650      	mov	r0, sl
 80092e0:	6859      	ldr	r1, [r3, #4]
 80092e2:	f000 fe87 	bl	8009ff4 <_Balloc>
 80092e6:	9006      	str	r0, [sp, #24]
 80092e8:	2800      	cmp	r0, #0
 80092ea:	f43f af10 	beq.w	800910e <_strtod_l+0x47e>
 80092ee:	9b08      	ldr	r3, [sp, #32]
 80092f0:	300c      	adds	r0, #12
 80092f2:	691a      	ldr	r2, [r3, #16]
 80092f4:	f103 010c 	add.w	r1, r3, #12
 80092f8:	3202      	adds	r2, #2
 80092fa:	0092      	lsls	r2, r2, #2
 80092fc:	f7ff fb44 	bl	8008988 <memcpy>
 8009300:	ab1c      	add	r3, sp, #112	; 0x70
 8009302:	9301      	str	r3, [sp, #4]
 8009304:	ab1b      	add	r3, sp, #108	; 0x6c
 8009306:	9300      	str	r3, [sp, #0]
 8009308:	4642      	mov	r2, r8
 800930a:	464b      	mov	r3, r9
 800930c:	4650      	mov	r0, sl
 800930e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8009312:	f001 fa59 	bl	800a7c8 <__d2b>
 8009316:	901a      	str	r0, [sp, #104]	; 0x68
 8009318:	2800      	cmp	r0, #0
 800931a:	f43f aef8 	beq.w	800910e <_strtod_l+0x47e>
 800931e:	2101      	movs	r1, #1
 8009320:	4650      	mov	r0, sl
 8009322:	f000 ffa7 	bl	800a274 <__i2b>
 8009326:	4603      	mov	r3, r0
 8009328:	9004      	str	r0, [sp, #16]
 800932a:	2800      	cmp	r0, #0
 800932c:	f43f aeef 	beq.w	800910e <_strtod_l+0x47e>
 8009330:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009332:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009334:	2d00      	cmp	r5, #0
 8009336:	bfab      	itete	ge
 8009338:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800933a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800933c:	18ee      	addge	r6, r5, r3
 800933e:	1b5c      	sublt	r4, r3, r5
 8009340:	9b05      	ldr	r3, [sp, #20]
 8009342:	bfa8      	it	ge
 8009344:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8009346:	eba5 0503 	sub.w	r5, r5, r3
 800934a:	4415      	add	r5, r2
 800934c:	4b6e      	ldr	r3, [pc, #440]	; (8009508 <_strtod_l+0x878>)
 800934e:	f105 35ff 	add.w	r5, r5, #4294967295
 8009352:	bfb8      	it	lt
 8009354:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009356:	429d      	cmp	r5, r3
 8009358:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800935c:	f280 80c4 	bge.w	80094e8 <_strtod_l+0x858>
 8009360:	1b5b      	subs	r3, r3, r5
 8009362:	2b1f      	cmp	r3, #31
 8009364:	f04f 0701 	mov.w	r7, #1
 8009368:	eba2 0203 	sub.w	r2, r2, r3
 800936c:	f300 80b1 	bgt.w	80094d2 <_strtod_l+0x842>
 8009370:	2500      	movs	r5, #0
 8009372:	fa07 f303 	lsl.w	r3, r7, r3
 8009376:	930f      	str	r3, [sp, #60]	; 0x3c
 8009378:	18b7      	adds	r7, r6, r2
 800937a:	9b05      	ldr	r3, [sp, #20]
 800937c:	42be      	cmp	r6, r7
 800937e:	4414      	add	r4, r2
 8009380:	441c      	add	r4, r3
 8009382:	4633      	mov	r3, r6
 8009384:	bfa8      	it	ge
 8009386:	463b      	movge	r3, r7
 8009388:	42a3      	cmp	r3, r4
 800938a:	bfa8      	it	ge
 800938c:	4623      	movge	r3, r4
 800938e:	2b00      	cmp	r3, #0
 8009390:	bfc2      	ittt	gt
 8009392:	1aff      	subgt	r7, r7, r3
 8009394:	1ae4      	subgt	r4, r4, r3
 8009396:	1af6      	subgt	r6, r6, r3
 8009398:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800939a:	2b00      	cmp	r3, #0
 800939c:	dd17      	ble.n	80093ce <_strtod_l+0x73e>
 800939e:	461a      	mov	r2, r3
 80093a0:	4650      	mov	r0, sl
 80093a2:	9904      	ldr	r1, [sp, #16]
 80093a4:	f001 f824 	bl	800a3f0 <__pow5mult>
 80093a8:	9004      	str	r0, [sp, #16]
 80093aa:	2800      	cmp	r0, #0
 80093ac:	f43f aeaf 	beq.w	800910e <_strtod_l+0x47e>
 80093b0:	4601      	mov	r1, r0
 80093b2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80093b4:	4650      	mov	r0, sl
 80093b6:	f000 ff73 	bl	800a2a0 <__multiply>
 80093ba:	9009      	str	r0, [sp, #36]	; 0x24
 80093bc:	2800      	cmp	r0, #0
 80093be:	f43f aea6 	beq.w	800910e <_strtod_l+0x47e>
 80093c2:	4650      	mov	r0, sl
 80093c4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80093c6:	f000 fe55 	bl	800a074 <_Bfree>
 80093ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093cc:	931a      	str	r3, [sp, #104]	; 0x68
 80093ce:	2f00      	cmp	r7, #0
 80093d0:	f300 808e 	bgt.w	80094f0 <_strtod_l+0x860>
 80093d4:	9b07      	ldr	r3, [sp, #28]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	dd08      	ble.n	80093ec <_strtod_l+0x75c>
 80093da:	4650      	mov	r0, sl
 80093dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80093de:	9906      	ldr	r1, [sp, #24]
 80093e0:	f001 f806 	bl	800a3f0 <__pow5mult>
 80093e4:	9006      	str	r0, [sp, #24]
 80093e6:	2800      	cmp	r0, #0
 80093e8:	f43f ae91 	beq.w	800910e <_strtod_l+0x47e>
 80093ec:	2c00      	cmp	r4, #0
 80093ee:	dd08      	ble.n	8009402 <_strtod_l+0x772>
 80093f0:	4622      	mov	r2, r4
 80093f2:	4650      	mov	r0, sl
 80093f4:	9906      	ldr	r1, [sp, #24]
 80093f6:	f001 f855 	bl	800a4a4 <__lshift>
 80093fa:	9006      	str	r0, [sp, #24]
 80093fc:	2800      	cmp	r0, #0
 80093fe:	f43f ae86 	beq.w	800910e <_strtod_l+0x47e>
 8009402:	2e00      	cmp	r6, #0
 8009404:	dd08      	ble.n	8009418 <_strtod_l+0x788>
 8009406:	4632      	mov	r2, r6
 8009408:	4650      	mov	r0, sl
 800940a:	9904      	ldr	r1, [sp, #16]
 800940c:	f001 f84a 	bl	800a4a4 <__lshift>
 8009410:	9004      	str	r0, [sp, #16]
 8009412:	2800      	cmp	r0, #0
 8009414:	f43f ae7b 	beq.w	800910e <_strtod_l+0x47e>
 8009418:	4650      	mov	r0, sl
 800941a:	9a06      	ldr	r2, [sp, #24]
 800941c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800941e:	f001 f8cd 	bl	800a5bc <__mdiff>
 8009422:	4683      	mov	fp, r0
 8009424:	2800      	cmp	r0, #0
 8009426:	f43f ae72 	beq.w	800910e <_strtod_l+0x47e>
 800942a:	2400      	movs	r4, #0
 800942c:	68c3      	ldr	r3, [r0, #12]
 800942e:	9904      	ldr	r1, [sp, #16]
 8009430:	60c4      	str	r4, [r0, #12]
 8009432:	930b      	str	r3, [sp, #44]	; 0x2c
 8009434:	f001 f8a6 	bl	800a584 <__mcmp>
 8009438:	42a0      	cmp	r0, r4
 800943a:	da6b      	bge.n	8009514 <_strtod_l+0x884>
 800943c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800943e:	ea53 0308 	orrs.w	r3, r3, r8
 8009442:	f040 8091 	bne.w	8009568 <_strtod_l+0x8d8>
 8009446:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800944a:	2b00      	cmp	r3, #0
 800944c:	f040 808c 	bne.w	8009568 <_strtod_l+0x8d8>
 8009450:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009454:	0d1b      	lsrs	r3, r3, #20
 8009456:	051b      	lsls	r3, r3, #20
 8009458:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800945c:	f240 8084 	bls.w	8009568 <_strtod_l+0x8d8>
 8009460:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009464:	b91b      	cbnz	r3, 800946e <_strtod_l+0x7de>
 8009466:	f8db 3010 	ldr.w	r3, [fp, #16]
 800946a:	2b01      	cmp	r3, #1
 800946c:	dd7c      	ble.n	8009568 <_strtod_l+0x8d8>
 800946e:	4659      	mov	r1, fp
 8009470:	2201      	movs	r2, #1
 8009472:	4650      	mov	r0, sl
 8009474:	f001 f816 	bl	800a4a4 <__lshift>
 8009478:	9904      	ldr	r1, [sp, #16]
 800947a:	4683      	mov	fp, r0
 800947c:	f001 f882 	bl	800a584 <__mcmp>
 8009480:	2800      	cmp	r0, #0
 8009482:	dd71      	ble.n	8009568 <_strtod_l+0x8d8>
 8009484:	9905      	ldr	r1, [sp, #20]
 8009486:	464b      	mov	r3, r9
 8009488:	4a20      	ldr	r2, [pc, #128]	; (800950c <_strtod_l+0x87c>)
 800948a:	2900      	cmp	r1, #0
 800948c:	f000 808c 	beq.w	80095a8 <_strtod_l+0x918>
 8009490:	ea02 0109 	and.w	r1, r2, r9
 8009494:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009498:	f300 8086 	bgt.w	80095a8 <_strtod_l+0x918>
 800949c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80094a0:	f77f aeaa 	ble.w	80091f8 <_strtod_l+0x568>
 80094a4:	4640      	mov	r0, r8
 80094a6:	4649      	mov	r1, r9
 80094a8:	4b19      	ldr	r3, [pc, #100]	; (8009510 <_strtod_l+0x880>)
 80094aa:	2200      	movs	r2, #0
 80094ac:	f7f7 f814 	bl	80004d8 <__aeabi_dmul>
 80094b0:	460b      	mov	r3, r1
 80094b2:	4303      	orrs	r3, r0
 80094b4:	bf08      	it	eq
 80094b6:	2322      	moveq	r3, #34	; 0x22
 80094b8:	4680      	mov	r8, r0
 80094ba:	4689      	mov	r9, r1
 80094bc:	bf08      	it	eq
 80094be:	f8ca 3000 	streq.w	r3, [sl]
 80094c2:	e62f      	b.n	8009124 <_strtod_l+0x494>
 80094c4:	f04f 32ff 	mov.w	r2, #4294967295
 80094c8:	fa02 f303 	lsl.w	r3, r2, r3
 80094cc:	ea03 0808 	and.w	r8, r3, r8
 80094d0:	e6e0      	b.n	8009294 <_strtod_l+0x604>
 80094d2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80094d6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80094da:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80094de:	35e2      	adds	r5, #226	; 0xe2
 80094e0:	fa07 f505 	lsl.w	r5, r7, r5
 80094e4:	970f      	str	r7, [sp, #60]	; 0x3c
 80094e6:	e747      	b.n	8009378 <_strtod_l+0x6e8>
 80094e8:	2301      	movs	r3, #1
 80094ea:	2500      	movs	r5, #0
 80094ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80094ee:	e743      	b.n	8009378 <_strtod_l+0x6e8>
 80094f0:	463a      	mov	r2, r7
 80094f2:	4650      	mov	r0, sl
 80094f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80094f6:	f000 ffd5 	bl	800a4a4 <__lshift>
 80094fa:	901a      	str	r0, [sp, #104]	; 0x68
 80094fc:	2800      	cmp	r0, #0
 80094fe:	f47f af69 	bne.w	80093d4 <_strtod_l+0x744>
 8009502:	e604      	b.n	800910e <_strtod_l+0x47e>
 8009504:	0800bcc8 	.word	0x0800bcc8
 8009508:	fffffc02 	.word	0xfffffc02
 800950c:	7ff00000 	.word	0x7ff00000
 8009510:	39500000 	.word	0x39500000
 8009514:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009518:	d165      	bne.n	80095e6 <_strtod_l+0x956>
 800951a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800951c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009520:	b35a      	cbz	r2, 800957a <_strtod_l+0x8ea>
 8009522:	4a99      	ldr	r2, [pc, #612]	; (8009788 <_strtod_l+0xaf8>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d12b      	bne.n	8009580 <_strtod_l+0x8f0>
 8009528:	9b05      	ldr	r3, [sp, #20]
 800952a:	4641      	mov	r1, r8
 800952c:	b303      	cbz	r3, 8009570 <_strtod_l+0x8e0>
 800952e:	464a      	mov	r2, r9
 8009530:	4b96      	ldr	r3, [pc, #600]	; (800978c <_strtod_l+0xafc>)
 8009532:	4013      	ands	r3, r2
 8009534:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009538:	f04f 32ff 	mov.w	r2, #4294967295
 800953c:	d81b      	bhi.n	8009576 <_strtod_l+0x8e6>
 800953e:	0d1b      	lsrs	r3, r3, #20
 8009540:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009544:	fa02 f303 	lsl.w	r3, r2, r3
 8009548:	4299      	cmp	r1, r3
 800954a:	d119      	bne.n	8009580 <_strtod_l+0x8f0>
 800954c:	4b90      	ldr	r3, [pc, #576]	; (8009790 <_strtod_l+0xb00>)
 800954e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009550:	429a      	cmp	r2, r3
 8009552:	d102      	bne.n	800955a <_strtod_l+0x8ca>
 8009554:	3101      	adds	r1, #1
 8009556:	f43f adda 	beq.w	800910e <_strtod_l+0x47e>
 800955a:	f04f 0800 	mov.w	r8, #0
 800955e:	4b8b      	ldr	r3, [pc, #556]	; (800978c <_strtod_l+0xafc>)
 8009560:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009562:	401a      	ands	r2, r3
 8009564:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009568:	9b05      	ldr	r3, [sp, #20]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d19a      	bne.n	80094a4 <_strtod_l+0x814>
 800956e:	e5d9      	b.n	8009124 <_strtod_l+0x494>
 8009570:	f04f 33ff 	mov.w	r3, #4294967295
 8009574:	e7e8      	b.n	8009548 <_strtod_l+0x8b8>
 8009576:	4613      	mov	r3, r2
 8009578:	e7e6      	b.n	8009548 <_strtod_l+0x8b8>
 800957a:	ea53 0308 	orrs.w	r3, r3, r8
 800957e:	d081      	beq.n	8009484 <_strtod_l+0x7f4>
 8009580:	b1e5      	cbz	r5, 80095bc <_strtod_l+0x92c>
 8009582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009584:	421d      	tst	r5, r3
 8009586:	d0ef      	beq.n	8009568 <_strtod_l+0x8d8>
 8009588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800958a:	4640      	mov	r0, r8
 800958c:	4649      	mov	r1, r9
 800958e:	9a05      	ldr	r2, [sp, #20]
 8009590:	b1c3      	cbz	r3, 80095c4 <_strtod_l+0x934>
 8009592:	f7ff fb59 	bl	8008c48 <sulp>
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800959e:	f7f6 fde5 	bl	800016c <__adddf3>
 80095a2:	4680      	mov	r8, r0
 80095a4:	4689      	mov	r9, r1
 80095a6:	e7df      	b.n	8009568 <_strtod_l+0x8d8>
 80095a8:	4013      	ands	r3, r2
 80095aa:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80095ae:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80095b2:	f04f 38ff 	mov.w	r8, #4294967295
 80095b6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80095ba:	e7d5      	b.n	8009568 <_strtod_l+0x8d8>
 80095bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095be:	ea13 0f08 	tst.w	r3, r8
 80095c2:	e7e0      	b.n	8009586 <_strtod_l+0x8f6>
 80095c4:	f7ff fb40 	bl	8008c48 <sulp>
 80095c8:	4602      	mov	r2, r0
 80095ca:	460b      	mov	r3, r1
 80095cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80095d0:	f7f6 fdca 	bl	8000168 <__aeabi_dsub>
 80095d4:	2200      	movs	r2, #0
 80095d6:	2300      	movs	r3, #0
 80095d8:	4680      	mov	r8, r0
 80095da:	4689      	mov	r9, r1
 80095dc:	f7f7 f9e4 	bl	80009a8 <__aeabi_dcmpeq>
 80095e0:	2800      	cmp	r0, #0
 80095e2:	d0c1      	beq.n	8009568 <_strtod_l+0x8d8>
 80095e4:	e608      	b.n	80091f8 <_strtod_l+0x568>
 80095e6:	4658      	mov	r0, fp
 80095e8:	9904      	ldr	r1, [sp, #16]
 80095ea:	f001 f949 	bl	800a880 <__ratio>
 80095ee:	2200      	movs	r2, #0
 80095f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095f4:	4606      	mov	r6, r0
 80095f6:	460f      	mov	r7, r1
 80095f8:	f7f7 f9ea 	bl	80009d0 <__aeabi_dcmple>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	d070      	beq.n	80096e2 <_strtod_l+0xa52>
 8009600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009602:	2b00      	cmp	r3, #0
 8009604:	d042      	beq.n	800968c <_strtod_l+0x9fc>
 8009606:	2600      	movs	r6, #0
 8009608:	4f62      	ldr	r7, [pc, #392]	; (8009794 <_strtod_l+0xb04>)
 800960a:	4d62      	ldr	r5, [pc, #392]	; (8009794 <_strtod_l+0xb04>)
 800960c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800960e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009612:	0d1b      	lsrs	r3, r3, #20
 8009614:	051b      	lsls	r3, r3, #20
 8009616:	930f      	str	r3, [sp, #60]	; 0x3c
 8009618:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800961a:	4b5f      	ldr	r3, [pc, #380]	; (8009798 <_strtod_l+0xb08>)
 800961c:	429a      	cmp	r2, r3
 800961e:	f040 80c3 	bne.w	80097a8 <_strtod_l+0xb18>
 8009622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009624:	4640      	mov	r0, r8
 8009626:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800962a:	4649      	mov	r1, r9
 800962c:	f001 f852 	bl	800a6d4 <__ulp>
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	4630      	mov	r0, r6
 8009636:	4639      	mov	r1, r7
 8009638:	f7f6 ff4e 	bl	80004d8 <__aeabi_dmul>
 800963c:	4642      	mov	r2, r8
 800963e:	464b      	mov	r3, r9
 8009640:	f7f6 fd94 	bl	800016c <__adddf3>
 8009644:	460b      	mov	r3, r1
 8009646:	4951      	ldr	r1, [pc, #324]	; (800978c <_strtod_l+0xafc>)
 8009648:	4a54      	ldr	r2, [pc, #336]	; (800979c <_strtod_l+0xb0c>)
 800964a:	4019      	ands	r1, r3
 800964c:	4291      	cmp	r1, r2
 800964e:	4680      	mov	r8, r0
 8009650:	d95d      	bls.n	800970e <_strtod_l+0xa7e>
 8009652:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009654:	4b4e      	ldr	r3, [pc, #312]	; (8009790 <_strtod_l+0xb00>)
 8009656:	429a      	cmp	r2, r3
 8009658:	d103      	bne.n	8009662 <_strtod_l+0x9d2>
 800965a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800965c:	3301      	adds	r3, #1
 800965e:	f43f ad56 	beq.w	800910e <_strtod_l+0x47e>
 8009662:	f04f 38ff 	mov.w	r8, #4294967295
 8009666:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009790 <_strtod_l+0xb00>
 800966a:	4650      	mov	r0, sl
 800966c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800966e:	f000 fd01 	bl	800a074 <_Bfree>
 8009672:	4650      	mov	r0, sl
 8009674:	9906      	ldr	r1, [sp, #24]
 8009676:	f000 fcfd 	bl	800a074 <_Bfree>
 800967a:	4650      	mov	r0, sl
 800967c:	9904      	ldr	r1, [sp, #16]
 800967e:	f000 fcf9 	bl	800a074 <_Bfree>
 8009682:	4659      	mov	r1, fp
 8009684:	4650      	mov	r0, sl
 8009686:	f000 fcf5 	bl	800a074 <_Bfree>
 800968a:	e627      	b.n	80092dc <_strtod_l+0x64c>
 800968c:	f1b8 0f00 	cmp.w	r8, #0
 8009690:	d119      	bne.n	80096c6 <_strtod_l+0xa36>
 8009692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009698:	b9e3      	cbnz	r3, 80096d4 <_strtod_l+0xa44>
 800969a:	2200      	movs	r2, #0
 800969c:	4630      	mov	r0, r6
 800969e:	4639      	mov	r1, r7
 80096a0:	4b3c      	ldr	r3, [pc, #240]	; (8009794 <_strtod_l+0xb04>)
 80096a2:	f7f7 f98b 	bl	80009bc <__aeabi_dcmplt>
 80096a6:	b9c8      	cbnz	r0, 80096dc <_strtod_l+0xa4c>
 80096a8:	2200      	movs	r2, #0
 80096aa:	4630      	mov	r0, r6
 80096ac:	4639      	mov	r1, r7
 80096ae:	4b3c      	ldr	r3, [pc, #240]	; (80097a0 <_strtod_l+0xb10>)
 80096b0:	f7f6 ff12 	bl	80004d8 <__aeabi_dmul>
 80096b4:	4604      	mov	r4, r0
 80096b6:	460d      	mov	r5, r1
 80096b8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80096bc:	9416      	str	r4, [sp, #88]	; 0x58
 80096be:	9317      	str	r3, [sp, #92]	; 0x5c
 80096c0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80096c4:	e7a2      	b.n	800960c <_strtod_l+0x97c>
 80096c6:	f1b8 0f01 	cmp.w	r8, #1
 80096ca:	d103      	bne.n	80096d4 <_strtod_l+0xa44>
 80096cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f43f ad92 	beq.w	80091f8 <_strtod_l+0x568>
 80096d4:	2600      	movs	r6, #0
 80096d6:	2400      	movs	r4, #0
 80096d8:	4f32      	ldr	r7, [pc, #200]	; (80097a4 <_strtod_l+0xb14>)
 80096da:	e796      	b.n	800960a <_strtod_l+0x97a>
 80096dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80096de:	4d30      	ldr	r5, [pc, #192]	; (80097a0 <_strtod_l+0xb10>)
 80096e0:	e7ea      	b.n	80096b8 <_strtod_l+0xa28>
 80096e2:	4b2f      	ldr	r3, [pc, #188]	; (80097a0 <_strtod_l+0xb10>)
 80096e4:	2200      	movs	r2, #0
 80096e6:	4630      	mov	r0, r6
 80096e8:	4639      	mov	r1, r7
 80096ea:	f7f6 fef5 	bl	80004d8 <__aeabi_dmul>
 80096ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096f0:	4604      	mov	r4, r0
 80096f2:	460d      	mov	r5, r1
 80096f4:	b933      	cbnz	r3, 8009704 <_strtod_l+0xa74>
 80096f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096fa:	9010      	str	r0, [sp, #64]	; 0x40
 80096fc:	9311      	str	r3, [sp, #68]	; 0x44
 80096fe:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009702:	e783      	b.n	800960c <_strtod_l+0x97c>
 8009704:	4602      	mov	r2, r0
 8009706:	460b      	mov	r3, r1
 8009708:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800970c:	e7f7      	b.n	80096fe <_strtod_l+0xa6e>
 800970e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009712:	9b05      	ldr	r3, [sp, #20]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1a8      	bne.n	800966a <_strtod_l+0x9da>
 8009718:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800971c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800971e:	0d1b      	lsrs	r3, r3, #20
 8009720:	051b      	lsls	r3, r3, #20
 8009722:	429a      	cmp	r2, r3
 8009724:	d1a1      	bne.n	800966a <_strtod_l+0x9da>
 8009726:	4620      	mov	r0, r4
 8009728:	4629      	mov	r1, r5
 800972a:	f7f7 f98f 	bl	8000a4c <__aeabi_d2lz>
 800972e:	f7f6 fea5 	bl	800047c <__aeabi_l2d>
 8009732:	4602      	mov	r2, r0
 8009734:	460b      	mov	r3, r1
 8009736:	4620      	mov	r0, r4
 8009738:	4629      	mov	r1, r5
 800973a:	f7f6 fd15 	bl	8000168 <__aeabi_dsub>
 800973e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009740:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009744:	ea43 0308 	orr.w	r3, r3, r8
 8009748:	4313      	orrs	r3, r2
 800974a:	4604      	mov	r4, r0
 800974c:	460d      	mov	r5, r1
 800974e:	d066      	beq.n	800981e <_strtod_l+0xb8e>
 8009750:	a309      	add	r3, pc, #36	; (adr r3, 8009778 <_strtod_l+0xae8>)
 8009752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009756:	f7f7 f931 	bl	80009bc <__aeabi_dcmplt>
 800975a:	2800      	cmp	r0, #0
 800975c:	f47f ace2 	bne.w	8009124 <_strtod_l+0x494>
 8009760:	a307      	add	r3, pc, #28	; (adr r3, 8009780 <_strtod_l+0xaf0>)
 8009762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009766:	4620      	mov	r0, r4
 8009768:	4629      	mov	r1, r5
 800976a:	f7f7 f945 	bl	80009f8 <__aeabi_dcmpgt>
 800976e:	2800      	cmp	r0, #0
 8009770:	f43f af7b 	beq.w	800966a <_strtod_l+0x9da>
 8009774:	e4d6      	b.n	8009124 <_strtod_l+0x494>
 8009776:	bf00      	nop
 8009778:	94a03595 	.word	0x94a03595
 800977c:	3fdfffff 	.word	0x3fdfffff
 8009780:	35afe535 	.word	0x35afe535
 8009784:	3fe00000 	.word	0x3fe00000
 8009788:	000fffff 	.word	0x000fffff
 800978c:	7ff00000 	.word	0x7ff00000
 8009790:	7fefffff 	.word	0x7fefffff
 8009794:	3ff00000 	.word	0x3ff00000
 8009798:	7fe00000 	.word	0x7fe00000
 800979c:	7c9fffff 	.word	0x7c9fffff
 80097a0:	3fe00000 	.word	0x3fe00000
 80097a4:	bff00000 	.word	0xbff00000
 80097a8:	9b05      	ldr	r3, [sp, #20]
 80097aa:	b313      	cbz	r3, 80097f2 <_strtod_l+0xb62>
 80097ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80097b2:	d81e      	bhi.n	80097f2 <_strtod_l+0xb62>
 80097b4:	a326      	add	r3, pc, #152	; (adr r3, 8009850 <_strtod_l+0xbc0>)
 80097b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ba:	4620      	mov	r0, r4
 80097bc:	4629      	mov	r1, r5
 80097be:	f7f7 f907 	bl	80009d0 <__aeabi_dcmple>
 80097c2:	b190      	cbz	r0, 80097ea <_strtod_l+0xb5a>
 80097c4:	4629      	mov	r1, r5
 80097c6:	4620      	mov	r0, r4
 80097c8:	f7f7 f920 	bl	8000a0c <__aeabi_d2uiz>
 80097cc:	2801      	cmp	r0, #1
 80097ce:	bf38      	it	cc
 80097d0:	2001      	movcc	r0, #1
 80097d2:	f7f6 fe07 	bl	80003e4 <__aeabi_ui2d>
 80097d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097d8:	4604      	mov	r4, r0
 80097da:	460d      	mov	r5, r1
 80097dc:	b9d3      	cbnz	r3, 8009814 <_strtod_l+0xb84>
 80097de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097e2:	9012      	str	r0, [sp, #72]	; 0x48
 80097e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80097e6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80097ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80097ec:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80097f0:	1a9f      	subs	r7, r3, r2
 80097f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80097f6:	f000 ff6d 	bl	800a6d4 <__ulp>
 80097fa:	4602      	mov	r2, r0
 80097fc:	460b      	mov	r3, r1
 80097fe:	4630      	mov	r0, r6
 8009800:	4639      	mov	r1, r7
 8009802:	f7f6 fe69 	bl	80004d8 <__aeabi_dmul>
 8009806:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800980a:	f7f6 fcaf 	bl	800016c <__adddf3>
 800980e:	4680      	mov	r8, r0
 8009810:	4689      	mov	r9, r1
 8009812:	e77e      	b.n	8009712 <_strtod_l+0xa82>
 8009814:	4602      	mov	r2, r0
 8009816:	460b      	mov	r3, r1
 8009818:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800981c:	e7e3      	b.n	80097e6 <_strtod_l+0xb56>
 800981e:	a30e      	add	r3, pc, #56	; (adr r3, 8009858 <_strtod_l+0xbc8>)
 8009820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009824:	f7f7 f8ca 	bl	80009bc <__aeabi_dcmplt>
 8009828:	e7a1      	b.n	800976e <_strtod_l+0xade>
 800982a:	2300      	movs	r3, #0
 800982c:	930a      	str	r3, [sp, #40]	; 0x28
 800982e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009830:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009832:	6013      	str	r3, [r2, #0]
 8009834:	f7ff ba71 	b.w	8008d1a <_strtod_l+0x8a>
 8009838:	2a65      	cmp	r2, #101	; 0x65
 800983a:	f43f ab63 	beq.w	8008f04 <_strtod_l+0x274>
 800983e:	2a45      	cmp	r2, #69	; 0x45
 8009840:	f43f ab60 	beq.w	8008f04 <_strtod_l+0x274>
 8009844:	2301      	movs	r3, #1
 8009846:	f7ff bb95 	b.w	8008f74 <_strtod_l+0x2e4>
 800984a:	bf00      	nop
 800984c:	f3af 8000 	nop.w
 8009850:	ffc00000 	.word	0xffc00000
 8009854:	41dfffff 	.word	0x41dfffff
 8009858:	94a03595 	.word	0x94a03595
 800985c:	3fcfffff 	.word	0x3fcfffff

08009860 <strtod>:
 8009860:	460a      	mov	r2, r1
 8009862:	4601      	mov	r1, r0
 8009864:	4802      	ldr	r0, [pc, #8]	; (8009870 <strtod+0x10>)
 8009866:	4b03      	ldr	r3, [pc, #12]	; (8009874 <strtod+0x14>)
 8009868:	6800      	ldr	r0, [r0, #0]
 800986a:	f7ff ba11 	b.w	8008c90 <_strtod_l>
 800986e:	bf00      	nop
 8009870:	2000017c 	.word	0x2000017c
 8009874:	200001e4 	.word	0x200001e4

08009878 <_vsniprintf_r>:
 8009878:	b530      	push	{r4, r5, lr}
 800987a:	4614      	mov	r4, r2
 800987c:	2c00      	cmp	r4, #0
 800987e:	4605      	mov	r5, r0
 8009880:	461a      	mov	r2, r3
 8009882:	b09b      	sub	sp, #108	; 0x6c
 8009884:	da05      	bge.n	8009892 <_vsniprintf_r+0x1a>
 8009886:	238b      	movs	r3, #139	; 0x8b
 8009888:	6003      	str	r3, [r0, #0]
 800988a:	f04f 30ff 	mov.w	r0, #4294967295
 800988e:	b01b      	add	sp, #108	; 0x6c
 8009890:	bd30      	pop	{r4, r5, pc}
 8009892:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009896:	f8ad 300c 	strh.w	r3, [sp, #12]
 800989a:	bf0c      	ite	eq
 800989c:	4623      	moveq	r3, r4
 800989e:	f104 33ff 	addne.w	r3, r4, #4294967295
 80098a2:	9302      	str	r3, [sp, #8]
 80098a4:	9305      	str	r3, [sp, #20]
 80098a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80098aa:	9100      	str	r1, [sp, #0]
 80098ac:	9104      	str	r1, [sp, #16]
 80098ae:	f8ad 300e 	strh.w	r3, [sp, #14]
 80098b2:	4669      	mov	r1, sp
 80098b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80098b6:	f001 f8c5 	bl	800aa44 <_svfiprintf_r>
 80098ba:	1c43      	adds	r3, r0, #1
 80098bc:	bfbc      	itt	lt
 80098be:	238b      	movlt	r3, #139	; 0x8b
 80098c0:	602b      	strlt	r3, [r5, #0]
 80098c2:	2c00      	cmp	r4, #0
 80098c4:	d0e3      	beq.n	800988e <_vsniprintf_r+0x16>
 80098c6:	2200      	movs	r2, #0
 80098c8:	9b00      	ldr	r3, [sp, #0]
 80098ca:	701a      	strb	r2, [r3, #0]
 80098cc:	e7df      	b.n	800988e <_vsniprintf_r+0x16>
	...

080098d0 <vsniprintf>:
 80098d0:	b507      	push	{r0, r1, r2, lr}
 80098d2:	9300      	str	r3, [sp, #0]
 80098d4:	4613      	mov	r3, r2
 80098d6:	460a      	mov	r2, r1
 80098d8:	4601      	mov	r1, r0
 80098da:	4803      	ldr	r0, [pc, #12]	; (80098e8 <vsniprintf+0x18>)
 80098dc:	6800      	ldr	r0, [r0, #0]
 80098de:	f7ff ffcb 	bl	8009878 <_vsniprintf_r>
 80098e2:	b003      	add	sp, #12
 80098e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80098e8:	2000017c 	.word	0x2000017c

080098ec <rshift>:
 80098ec:	6903      	ldr	r3, [r0, #16]
 80098ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098f2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80098f6:	f100 0414 	add.w	r4, r0, #20
 80098fa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80098fe:	dd46      	ble.n	800998e <rshift+0xa2>
 8009900:	f011 011f 	ands.w	r1, r1, #31
 8009904:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009908:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800990c:	d10c      	bne.n	8009928 <rshift+0x3c>
 800990e:	4629      	mov	r1, r5
 8009910:	f100 0710 	add.w	r7, r0, #16
 8009914:	42b1      	cmp	r1, r6
 8009916:	d335      	bcc.n	8009984 <rshift+0x98>
 8009918:	1a9b      	subs	r3, r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	1eea      	subs	r2, r5, #3
 800991e:	4296      	cmp	r6, r2
 8009920:	bf38      	it	cc
 8009922:	2300      	movcc	r3, #0
 8009924:	4423      	add	r3, r4
 8009926:	e015      	b.n	8009954 <rshift+0x68>
 8009928:	46a1      	mov	r9, r4
 800992a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800992e:	f1c1 0820 	rsb	r8, r1, #32
 8009932:	40cf      	lsrs	r7, r1
 8009934:	f105 0e04 	add.w	lr, r5, #4
 8009938:	4576      	cmp	r6, lr
 800993a:	46f4      	mov	ip, lr
 800993c:	d816      	bhi.n	800996c <rshift+0x80>
 800993e:	1a9a      	subs	r2, r3, r2
 8009940:	0092      	lsls	r2, r2, #2
 8009942:	3a04      	subs	r2, #4
 8009944:	3501      	adds	r5, #1
 8009946:	42ae      	cmp	r6, r5
 8009948:	bf38      	it	cc
 800994a:	2200      	movcc	r2, #0
 800994c:	18a3      	adds	r3, r4, r2
 800994e:	50a7      	str	r7, [r4, r2]
 8009950:	b107      	cbz	r7, 8009954 <rshift+0x68>
 8009952:	3304      	adds	r3, #4
 8009954:	42a3      	cmp	r3, r4
 8009956:	eba3 0204 	sub.w	r2, r3, r4
 800995a:	bf08      	it	eq
 800995c:	2300      	moveq	r3, #0
 800995e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009962:	6102      	str	r2, [r0, #16]
 8009964:	bf08      	it	eq
 8009966:	6143      	streq	r3, [r0, #20]
 8009968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800996c:	f8dc c000 	ldr.w	ip, [ip]
 8009970:	fa0c fc08 	lsl.w	ip, ip, r8
 8009974:	ea4c 0707 	orr.w	r7, ip, r7
 8009978:	f849 7b04 	str.w	r7, [r9], #4
 800997c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009980:	40cf      	lsrs	r7, r1
 8009982:	e7d9      	b.n	8009938 <rshift+0x4c>
 8009984:	f851 cb04 	ldr.w	ip, [r1], #4
 8009988:	f847 cf04 	str.w	ip, [r7, #4]!
 800998c:	e7c2      	b.n	8009914 <rshift+0x28>
 800998e:	4623      	mov	r3, r4
 8009990:	e7e0      	b.n	8009954 <rshift+0x68>

08009992 <__hexdig_fun>:
 8009992:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009996:	2b09      	cmp	r3, #9
 8009998:	d802      	bhi.n	80099a0 <__hexdig_fun+0xe>
 800999a:	3820      	subs	r0, #32
 800999c:	b2c0      	uxtb	r0, r0
 800999e:	4770      	bx	lr
 80099a0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80099a4:	2b05      	cmp	r3, #5
 80099a6:	d801      	bhi.n	80099ac <__hexdig_fun+0x1a>
 80099a8:	3847      	subs	r0, #71	; 0x47
 80099aa:	e7f7      	b.n	800999c <__hexdig_fun+0xa>
 80099ac:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80099b0:	2b05      	cmp	r3, #5
 80099b2:	d801      	bhi.n	80099b8 <__hexdig_fun+0x26>
 80099b4:	3827      	subs	r0, #39	; 0x27
 80099b6:	e7f1      	b.n	800999c <__hexdig_fun+0xa>
 80099b8:	2000      	movs	r0, #0
 80099ba:	4770      	bx	lr

080099bc <__gethex>:
 80099bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c0:	b08b      	sub	sp, #44	; 0x2c
 80099c2:	9305      	str	r3, [sp, #20]
 80099c4:	4bb2      	ldr	r3, [pc, #712]	; (8009c90 <__gethex+0x2d4>)
 80099c6:	9002      	str	r0, [sp, #8]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	468b      	mov	fp, r1
 80099cc:	4618      	mov	r0, r3
 80099ce:	4690      	mov	r8, r2
 80099d0:	9303      	str	r3, [sp, #12]
 80099d2:	f7f6 fbbd 	bl	8000150 <strlen>
 80099d6:	4682      	mov	sl, r0
 80099d8:	9b03      	ldr	r3, [sp, #12]
 80099da:	f8db 2000 	ldr.w	r2, [fp]
 80099de:	4403      	add	r3, r0
 80099e0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80099e4:	9306      	str	r3, [sp, #24]
 80099e6:	1c93      	adds	r3, r2, #2
 80099e8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80099ec:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80099f0:	32fe      	adds	r2, #254	; 0xfe
 80099f2:	18d1      	adds	r1, r2, r3
 80099f4:	461f      	mov	r7, r3
 80099f6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80099fa:	9101      	str	r1, [sp, #4]
 80099fc:	2830      	cmp	r0, #48	; 0x30
 80099fe:	d0f8      	beq.n	80099f2 <__gethex+0x36>
 8009a00:	f7ff ffc7 	bl	8009992 <__hexdig_fun>
 8009a04:	4604      	mov	r4, r0
 8009a06:	2800      	cmp	r0, #0
 8009a08:	d13a      	bne.n	8009a80 <__gethex+0xc4>
 8009a0a:	4652      	mov	r2, sl
 8009a0c:	4638      	mov	r0, r7
 8009a0e:	9903      	ldr	r1, [sp, #12]
 8009a10:	f001 fab4 	bl	800af7c <strncmp>
 8009a14:	4605      	mov	r5, r0
 8009a16:	2800      	cmp	r0, #0
 8009a18:	d166      	bne.n	8009ae8 <__gethex+0x12c>
 8009a1a:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009a1e:	eb07 060a 	add.w	r6, r7, sl
 8009a22:	f7ff ffb6 	bl	8009992 <__hexdig_fun>
 8009a26:	2800      	cmp	r0, #0
 8009a28:	d060      	beq.n	8009aec <__gethex+0x130>
 8009a2a:	4633      	mov	r3, r6
 8009a2c:	7818      	ldrb	r0, [r3, #0]
 8009a2e:	461f      	mov	r7, r3
 8009a30:	2830      	cmp	r0, #48	; 0x30
 8009a32:	f103 0301 	add.w	r3, r3, #1
 8009a36:	d0f9      	beq.n	8009a2c <__gethex+0x70>
 8009a38:	f7ff ffab 	bl	8009992 <__hexdig_fun>
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	fab0 f480 	clz	r4, r0
 8009a42:	4635      	mov	r5, r6
 8009a44:	0964      	lsrs	r4, r4, #5
 8009a46:	9301      	str	r3, [sp, #4]
 8009a48:	463a      	mov	r2, r7
 8009a4a:	4616      	mov	r6, r2
 8009a4c:	7830      	ldrb	r0, [r6, #0]
 8009a4e:	3201      	adds	r2, #1
 8009a50:	f7ff ff9f 	bl	8009992 <__hexdig_fun>
 8009a54:	2800      	cmp	r0, #0
 8009a56:	d1f8      	bne.n	8009a4a <__gethex+0x8e>
 8009a58:	4652      	mov	r2, sl
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	9903      	ldr	r1, [sp, #12]
 8009a5e:	f001 fa8d 	bl	800af7c <strncmp>
 8009a62:	b980      	cbnz	r0, 8009a86 <__gethex+0xca>
 8009a64:	b94d      	cbnz	r5, 8009a7a <__gethex+0xbe>
 8009a66:	eb06 050a 	add.w	r5, r6, sl
 8009a6a:	462a      	mov	r2, r5
 8009a6c:	4616      	mov	r6, r2
 8009a6e:	7830      	ldrb	r0, [r6, #0]
 8009a70:	3201      	adds	r2, #1
 8009a72:	f7ff ff8e 	bl	8009992 <__hexdig_fun>
 8009a76:	2800      	cmp	r0, #0
 8009a78:	d1f8      	bne.n	8009a6c <__gethex+0xb0>
 8009a7a:	1bad      	subs	r5, r5, r6
 8009a7c:	00ad      	lsls	r5, r5, #2
 8009a7e:	e004      	b.n	8009a8a <__gethex+0xce>
 8009a80:	2400      	movs	r4, #0
 8009a82:	4625      	mov	r5, r4
 8009a84:	e7e0      	b.n	8009a48 <__gethex+0x8c>
 8009a86:	2d00      	cmp	r5, #0
 8009a88:	d1f7      	bne.n	8009a7a <__gethex+0xbe>
 8009a8a:	7833      	ldrb	r3, [r6, #0]
 8009a8c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009a90:	2b50      	cmp	r3, #80	; 0x50
 8009a92:	d139      	bne.n	8009b08 <__gethex+0x14c>
 8009a94:	7873      	ldrb	r3, [r6, #1]
 8009a96:	2b2b      	cmp	r3, #43	; 0x2b
 8009a98:	d02a      	beq.n	8009af0 <__gethex+0x134>
 8009a9a:	2b2d      	cmp	r3, #45	; 0x2d
 8009a9c:	d02c      	beq.n	8009af8 <__gethex+0x13c>
 8009a9e:	f04f 0900 	mov.w	r9, #0
 8009aa2:	1c71      	adds	r1, r6, #1
 8009aa4:	7808      	ldrb	r0, [r1, #0]
 8009aa6:	f7ff ff74 	bl	8009992 <__hexdig_fun>
 8009aaa:	1e43      	subs	r3, r0, #1
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	2b18      	cmp	r3, #24
 8009ab0:	d82a      	bhi.n	8009b08 <__gethex+0x14c>
 8009ab2:	f1a0 0210 	sub.w	r2, r0, #16
 8009ab6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009aba:	f7ff ff6a 	bl	8009992 <__hexdig_fun>
 8009abe:	1e43      	subs	r3, r0, #1
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	2b18      	cmp	r3, #24
 8009ac4:	d91b      	bls.n	8009afe <__gethex+0x142>
 8009ac6:	f1b9 0f00 	cmp.w	r9, #0
 8009aca:	d000      	beq.n	8009ace <__gethex+0x112>
 8009acc:	4252      	negs	r2, r2
 8009ace:	4415      	add	r5, r2
 8009ad0:	f8cb 1000 	str.w	r1, [fp]
 8009ad4:	b1d4      	cbz	r4, 8009b0c <__gethex+0x150>
 8009ad6:	9b01      	ldr	r3, [sp, #4]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	bf14      	ite	ne
 8009adc:	2700      	movne	r7, #0
 8009ade:	2706      	moveq	r7, #6
 8009ae0:	4638      	mov	r0, r7
 8009ae2:	b00b      	add	sp, #44	; 0x2c
 8009ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae8:	463e      	mov	r6, r7
 8009aea:	4625      	mov	r5, r4
 8009aec:	2401      	movs	r4, #1
 8009aee:	e7cc      	b.n	8009a8a <__gethex+0xce>
 8009af0:	f04f 0900 	mov.w	r9, #0
 8009af4:	1cb1      	adds	r1, r6, #2
 8009af6:	e7d5      	b.n	8009aa4 <__gethex+0xe8>
 8009af8:	f04f 0901 	mov.w	r9, #1
 8009afc:	e7fa      	b.n	8009af4 <__gethex+0x138>
 8009afe:	230a      	movs	r3, #10
 8009b00:	fb03 0202 	mla	r2, r3, r2, r0
 8009b04:	3a10      	subs	r2, #16
 8009b06:	e7d6      	b.n	8009ab6 <__gethex+0xfa>
 8009b08:	4631      	mov	r1, r6
 8009b0a:	e7e1      	b.n	8009ad0 <__gethex+0x114>
 8009b0c:	4621      	mov	r1, r4
 8009b0e:	1bf3      	subs	r3, r6, r7
 8009b10:	3b01      	subs	r3, #1
 8009b12:	2b07      	cmp	r3, #7
 8009b14:	dc0a      	bgt.n	8009b2c <__gethex+0x170>
 8009b16:	9802      	ldr	r0, [sp, #8]
 8009b18:	f000 fa6c 	bl	8009ff4 <_Balloc>
 8009b1c:	4604      	mov	r4, r0
 8009b1e:	b940      	cbnz	r0, 8009b32 <__gethex+0x176>
 8009b20:	4602      	mov	r2, r0
 8009b22:	21de      	movs	r1, #222	; 0xde
 8009b24:	4b5b      	ldr	r3, [pc, #364]	; (8009c94 <__gethex+0x2d8>)
 8009b26:	485c      	ldr	r0, [pc, #368]	; (8009c98 <__gethex+0x2dc>)
 8009b28:	f001 fa4a 	bl	800afc0 <__assert_func>
 8009b2c:	3101      	adds	r1, #1
 8009b2e:	105b      	asrs	r3, r3, #1
 8009b30:	e7ef      	b.n	8009b12 <__gethex+0x156>
 8009b32:	f04f 0b00 	mov.w	fp, #0
 8009b36:	f100 0914 	add.w	r9, r0, #20
 8009b3a:	f1ca 0301 	rsb	r3, sl, #1
 8009b3e:	f8cd 9010 	str.w	r9, [sp, #16]
 8009b42:	f8cd b004 	str.w	fp, [sp, #4]
 8009b46:	9308      	str	r3, [sp, #32]
 8009b48:	42b7      	cmp	r7, r6
 8009b4a:	d33f      	bcc.n	8009bcc <__gethex+0x210>
 8009b4c:	9f04      	ldr	r7, [sp, #16]
 8009b4e:	9b01      	ldr	r3, [sp, #4]
 8009b50:	f847 3b04 	str.w	r3, [r7], #4
 8009b54:	eba7 0709 	sub.w	r7, r7, r9
 8009b58:	10bf      	asrs	r7, r7, #2
 8009b5a:	6127      	str	r7, [r4, #16]
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f000 fb3b 	bl	800a1d8 <__hi0bits>
 8009b62:	017f      	lsls	r7, r7, #5
 8009b64:	f8d8 6000 	ldr.w	r6, [r8]
 8009b68:	1a3f      	subs	r7, r7, r0
 8009b6a:	42b7      	cmp	r7, r6
 8009b6c:	dd62      	ble.n	8009c34 <__gethex+0x278>
 8009b6e:	1bbf      	subs	r7, r7, r6
 8009b70:	4639      	mov	r1, r7
 8009b72:	4620      	mov	r0, r4
 8009b74:	f000 fed5 	bl	800a922 <__any_on>
 8009b78:	4682      	mov	sl, r0
 8009b7a:	b1a8      	cbz	r0, 8009ba8 <__gethex+0x1ec>
 8009b7c:	f04f 0a01 	mov.w	sl, #1
 8009b80:	1e7b      	subs	r3, r7, #1
 8009b82:	1159      	asrs	r1, r3, #5
 8009b84:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009b88:	f003 021f 	and.w	r2, r3, #31
 8009b8c:	fa0a f202 	lsl.w	r2, sl, r2
 8009b90:	420a      	tst	r2, r1
 8009b92:	d009      	beq.n	8009ba8 <__gethex+0x1ec>
 8009b94:	4553      	cmp	r3, sl
 8009b96:	dd05      	ble.n	8009ba4 <__gethex+0x1e8>
 8009b98:	4620      	mov	r0, r4
 8009b9a:	1eb9      	subs	r1, r7, #2
 8009b9c:	f000 fec1 	bl	800a922 <__any_on>
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	d144      	bne.n	8009c2e <__gethex+0x272>
 8009ba4:	f04f 0a02 	mov.w	sl, #2
 8009ba8:	4639      	mov	r1, r7
 8009baa:	4620      	mov	r0, r4
 8009bac:	f7ff fe9e 	bl	80098ec <rshift>
 8009bb0:	443d      	add	r5, r7
 8009bb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009bb6:	42ab      	cmp	r3, r5
 8009bb8:	da4a      	bge.n	8009c50 <__gethex+0x294>
 8009bba:	4621      	mov	r1, r4
 8009bbc:	9802      	ldr	r0, [sp, #8]
 8009bbe:	f000 fa59 	bl	800a074 <_Bfree>
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009bc6:	27a3      	movs	r7, #163	; 0xa3
 8009bc8:	6013      	str	r3, [r2, #0]
 8009bca:	e789      	b.n	8009ae0 <__gethex+0x124>
 8009bcc:	1e73      	subs	r3, r6, #1
 8009bce:	9a06      	ldr	r2, [sp, #24]
 8009bd0:	9307      	str	r3, [sp, #28]
 8009bd2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d019      	beq.n	8009c0e <__gethex+0x252>
 8009bda:	f1bb 0f20 	cmp.w	fp, #32
 8009bde:	d107      	bne.n	8009bf0 <__gethex+0x234>
 8009be0:	9b04      	ldr	r3, [sp, #16]
 8009be2:	9a01      	ldr	r2, [sp, #4]
 8009be4:	f843 2b04 	str.w	r2, [r3], #4
 8009be8:	9304      	str	r3, [sp, #16]
 8009bea:	2300      	movs	r3, #0
 8009bec:	469b      	mov	fp, r3
 8009bee:	9301      	str	r3, [sp, #4]
 8009bf0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009bf4:	f7ff fecd 	bl	8009992 <__hexdig_fun>
 8009bf8:	9b01      	ldr	r3, [sp, #4]
 8009bfa:	f000 000f 	and.w	r0, r0, #15
 8009bfe:	fa00 f00b 	lsl.w	r0, r0, fp
 8009c02:	4303      	orrs	r3, r0
 8009c04:	9301      	str	r3, [sp, #4]
 8009c06:	f10b 0b04 	add.w	fp, fp, #4
 8009c0a:	9b07      	ldr	r3, [sp, #28]
 8009c0c:	e00d      	b.n	8009c2a <__gethex+0x26e>
 8009c0e:	9a08      	ldr	r2, [sp, #32]
 8009c10:	1e73      	subs	r3, r6, #1
 8009c12:	4413      	add	r3, r2
 8009c14:	42bb      	cmp	r3, r7
 8009c16:	d3e0      	bcc.n	8009bda <__gethex+0x21e>
 8009c18:	4618      	mov	r0, r3
 8009c1a:	4652      	mov	r2, sl
 8009c1c:	9903      	ldr	r1, [sp, #12]
 8009c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c20:	f001 f9ac 	bl	800af7c <strncmp>
 8009c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c26:	2800      	cmp	r0, #0
 8009c28:	d1d7      	bne.n	8009bda <__gethex+0x21e>
 8009c2a:	461e      	mov	r6, r3
 8009c2c:	e78c      	b.n	8009b48 <__gethex+0x18c>
 8009c2e:	f04f 0a03 	mov.w	sl, #3
 8009c32:	e7b9      	b.n	8009ba8 <__gethex+0x1ec>
 8009c34:	da09      	bge.n	8009c4a <__gethex+0x28e>
 8009c36:	1bf7      	subs	r7, r6, r7
 8009c38:	4621      	mov	r1, r4
 8009c3a:	463a      	mov	r2, r7
 8009c3c:	9802      	ldr	r0, [sp, #8]
 8009c3e:	f000 fc31 	bl	800a4a4 <__lshift>
 8009c42:	4604      	mov	r4, r0
 8009c44:	1bed      	subs	r5, r5, r7
 8009c46:	f100 0914 	add.w	r9, r0, #20
 8009c4a:	f04f 0a00 	mov.w	sl, #0
 8009c4e:	e7b0      	b.n	8009bb2 <__gethex+0x1f6>
 8009c50:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009c54:	42a8      	cmp	r0, r5
 8009c56:	dd72      	ble.n	8009d3e <__gethex+0x382>
 8009c58:	1b45      	subs	r5, r0, r5
 8009c5a:	42ae      	cmp	r6, r5
 8009c5c:	dc35      	bgt.n	8009cca <__gethex+0x30e>
 8009c5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d029      	beq.n	8009cba <__gethex+0x2fe>
 8009c66:	2b03      	cmp	r3, #3
 8009c68:	d02b      	beq.n	8009cc2 <__gethex+0x306>
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d11c      	bne.n	8009ca8 <__gethex+0x2ec>
 8009c6e:	42ae      	cmp	r6, r5
 8009c70:	d11a      	bne.n	8009ca8 <__gethex+0x2ec>
 8009c72:	2e01      	cmp	r6, #1
 8009c74:	d112      	bne.n	8009c9c <__gethex+0x2e0>
 8009c76:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009c7a:	9a05      	ldr	r2, [sp, #20]
 8009c7c:	2762      	movs	r7, #98	; 0x62
 8009c7e:	6013      	str	r3, [r2, #0]
 8009c80:	2301      	movs	r3, #1
 8009c82:	6123      	str	r3, [r4, #16]
 8009c84:	f8c9 3000 	str.w	r3, [r9]
 8009c88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c8a:	601c      	str	r4, [r3, #0]
 8009c8c:	e728      	b.n	8009ae0 <__gethex+0x124>
 8009c8e:	bf00      	nop
 8009c90:	0800bd68 	.word	0x0800bd68
 8009c94:	0800bcf0 	.word	0x0800bcf0
 8009c98:	0800bd01 	.word	0x0800bd01
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	1e71      	subs	r1, r6, #1
 8009ca0:	f000 fe3f 	bl	800a922 <__any_on>
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	d1e6      	bne.n	8009c76 <__gethex+0x2ba>
 8009ca8:	4621      	mov	r1, r4
 8009caa:	9802      	ldr	r0, [sp, #8]
 8009cac:	f000 f9e2 	bl	800a074 <_Bfree>
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009cb4:	2750      	movs	r7, #80	; 0x50
 8009cb6:	6013      	str	r3, [r2, #0]
 8009cb8:	e712      	b.n	8009ae0 <__gethex+0x124>
 8009cba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d1f3      	bne.n	8009ca8 <__gethex+0x2ec>
 8009cc0:	e7d9      	b.n	8009c76 <__gethex+0x2ba>
 8009cc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d1d6      	bne.n	8009c76 <__gethex+0x2ba>
 8009cc8:	e7ee      	b.n	8009ca8 <__gethex+0x2ec>
 8009cca:	1e6f      	subs	r7, r5, #1
 8009ccc:	f1ba 0f00 	cmp.w	sl, #0
 8009cd0:	d132      	bne.n	8009d38 <__gethex+0x37c>
 8009cd2:	b127      	cbz	r7, 8009cde <__gethex+0x322>
 8009cd4:	4639      	mov	r1, r7
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f000 fe23 	bl	800a922 <__any_on>
 8009cdc:	4682      	mov	sl, r0
 8009cde:	2101      	movs	r1, #1
 8009ce0:	117b      	asrs	r3, r7, #5
 8009ce2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009ce6:	f007 071f 	and.w	r7, r7, #31
 8009cea:	fa01 f707 	lsl.w	r7, r1, r7
 8009cee:	421f      	tst	r7, r3
 8009cf0:	f04f 0702 	mov.w	r7, #2
 8009cf4:	4629      	mov	r1, r5
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	bf18      	it	ne
 8009cfa:	f04a 0a02 	orrne.w	sl, sl, #2
 8009cfe:	1b76      	subs	r6, r6, r5
 8009d00:	f7ff fdf4 	bl	80098ec <rshift>
 8009d04:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009d08:	f1ba 0f00 	cmp.w	sl, #0
 8009d0c:	d048      	beq.n	8009da0 <__gethex+0x3e4>
 8009d0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d12:	2b02      	cmp	r3, #2
 8009d14:	d015      	beq.n	8009d42 <__gethex+0x386>
 8009d16:	2b03      	cmp	r3, #3
 8009d18:	d017      	beq.n	8009d4a <__gethex+0x38e>
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d109      	bne.n	8009d32 <__gethex+0x376>
 8009d1e:	f01a 0f02 	tst.w	sl, #2
 8009d22:	d006      	beq.n	8009d32 <__gethex+0x376>
 8009d24:	f8d9 0000 	ldr.w	r0, [r9]
 8009d28:	ea4a 0a00 	orr.w	sl, sl, r0
 8009d2c:	f01a 0f01 	tst.w	sl, #1
 8009d30:	d10e      	bne.n	8009d50 <__gethex+0x394>
 8009d32:	f047 0710 	orr.w	r7, r7, #16
 8009d36:	e033      	b.n	8009da0 <__gethex+0x3e4>
 8009d38:	f04f 0a01 	mov.w	sl, #1
 8009d3c:	e7cf      	b.n	8009cde <__gethex+0x322>
 8009d3e:	2701      	movs	r7, #1
 8009d40:	e7e2      	b.n	8009d08 <__gethex+0x34c>
 8009d42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d44:	f1c3 0301 	rsb	r3, r3, #1
 8009d48:	9315      	str	r3, [sp, #84]	; 0x54
 8009d4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d0f0      	beq.n	8009d32 <__gethex+0x376>
 8009d50:	f04f 0c00 	mov.w	ip, #0
 8009d54:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009d58:	f104 0314 	add.w	r3, r4, #20
 8009d5c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009d60:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009d64:	4618      	mov	r0, r3
 8009d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d6a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009d6e:	d01c      	beq.n	8009daa <__gethex+0x3ee>
 8009d70:	3201      	adds	r2, #1
 8009d72:	6002      	str	r2, [r0, #0]
 8009d74:	2f02      	cmp	r7, #2
 8009d76:	f104 0314 	add.w	r3, r4, #20
 8009d7a:	d13d      	bne.n	8009df8 <__gethex+0x43c>
 8009d7c:	f8d8 2000 	ldr.w	r2, [r8]
 8009d80:	3a01      	subs	r2, #1
 8009d82:	42b2      	cmp	r2, r6
 8009d84:	d10a      	bne.n	8009d9c <__gethex+0x3e0>
 8009d86:	2201      	movs	r2, #1
 8009d88:	1171      	asrs	r1, r6, #5
 8009d8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009d8e:	f006 061f 	and.w	r6, r6, #31
 8009d92:	fa02 f606 	lsl.w	r6, r2, r6
 8009d96:	421e      	tst	r6, r3
 8009d98:	bf18      	it	ne
 8009d9a:	4617      	movne	r7, r2
 8009d9c:	f047 0720 	orr.w	r7, r7, #32
 8009da0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009da2:	601c      	str	r4, [r3, #0]
 8009da4:	9b05      	ldr	r3, [sp, #20]
 8009da6:	601d      	str	r5, [r3, #0]
 8009da8:	e69a      	b.n	8009ae0 <__gethex+0x124>
 8009daa:	4299      	cmp	r1, r3
 8009dac:	f843 cc04 	str.w	ip, [r3, #-4]
 8009db0:	d8d8      	bhi.n	8009d64 <__gethex+0x3a8>
 8009db2:	68a3      	ldr	r3, [r4, #8]
 8009db4:	459b      	cmp	fp, r3
 8009db6:	db17      	blt.n	8009de8 <__gethex+0x42c>
 8009db8:	6861      	ldr	r1, [r4, #4]
 8009dba:	9802      	ldr	r0, [sp, #8]
 8009dbc:	3101      	adds	r1, #1
 8009dbe:	f000 f919 	bl	8009ff4 <_Balloc>
 8009dc2:	4681      	mov	r9, r0
 8009dc4:	b918      	cbnz	r0, 8009dce <__gethex+0x412>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	2184      	movs	r1, #132	; 0x84
 8009dca:	4b19      	ldr	r3, [pc, #100]	; (8009e30 <__gethex+0x474>)
 8009dcc:	e6ab      	b.n	8009b26 <__gethex+0x16a>
 8009dce:	6922      	ldr	r2, [r4, #16]
 8009dd0:	f104 010c 	add.w	r1, r4, #12
 8009dd4:	3202      	adds	r2, #2
 8009dd6:	0092      	lsls	r2, r2, #2
 8009dd8:	300c      	adds	r0, #12
 8009dda:	f7fe fdd5 	bl	8008988 <memcpy>
 8009dde:	4621      	mov	r1, r4
 8009de0:	9802      	ldr	r0, [sp, #8]
 8009de2:	f000 f947 	bl	800a074 <_Bfree>
 8009de6:	464c      	mov	r4, r9
 8009de8:	6923      	ldr	r3, [r4, #16]
 8009dea:	1c5a      	adds	r2, r3, #1
 8009dec:	6122      	str	r2, [r4, #16]
 8009dee:	2201      	movs	r2, #1
 8009df0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009df4:	615a      	str	r2, [r3, #20]
 8009df6:	e7bd      	b.n	8009d74 <__gethex+0x3b8>
 8009df8:	6922      	ldr	r2, [r4, #16]
 8009dfa:	455a      	cmp	r2, fp
 8009dfc:	dd0b      	ble.n	8009e16 <__gethex+0x45a>
 8009dfe:	2101      	movs	r1, #1
 8009e00:	4620      	mov	r0, r4
 8009e02:	f7ff fd73 	bl	80098ec <rshift>
 8009e06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e0a:	3501      	adds	r5, #1
 8009e0c:	42ab      	cmp	r3, r5
 8009e0e:	f6ff aed4 	blt.w	8009bba <__gethex+0x1fe>
 8009e12:	2701      	movs	r7, #1
 8009e14:	e7c2      	b.n	8009d9c <__gethex+0x3e0>
 8009e16:	f016 061f 	ands.w	r6, r6, #31
 8009e1a:	d0fa      	beq.n	8009e12 <__gethex+0x456>
 8009e1c:	4453      	add	r3, sl
 8009e1e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009e22:	f000 f9d9 	bl	800a1d8 <__hi0bits>
 8009e26:	f1c6 0620 	rsb	r6, r6, #32
 8009e2a:	42b0      	cmp	r0, r6
 8009e2c:	dbe7      	blt.n	8009dfe <__gethex+0x442>
 8009e2e:	e7f0      	b.n	8009e12 <__gethex+0x456>
 8009e30:	0800bcf0 	.word	0x0800bcf0

08009e34 <L_shift>:
 8009e34:	f1c2 0208 	rsb	r2, r2, #8
 8009e38:	0092      	lsls	r2, r2, #2
 8009e3a:	b570      	push	{r4, r5, r6, lr}
 8009e3c:	f1c2 0620 	rsb	r6, r2, #32
 8009e40:	6843      	ldr	r3, [r0, #4]
 8009e42:	6804      	ldr	r4, [r0, #0]
 8009e44:	fa03 f506 	lsl.w	r5, r3, r6
 8009e48:	432c      	orrs	r4, r5
 8009e4a:	40d3      	lsrs	r3, r2
 8009e4c:	6004      	str	r4, [r0, #0]
 8009e4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009e52:	4288      	cmp	r0, r1
 8009e54:	d3f4      	bcc.n	8009e40 <L_shift+0xc>
 8009e56:	bd70      	pop	{r4, r5, r6, pc}

08009e58 <__match>:
 8009e58:	b530      	push	{r4, r5, lr}
 8009e5a:	6803      	ldr	r3, [r0, #0]
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e62:	b914      	cbnz	r4, 8009e6a <__match+0x12>
 8009e64:	6003      	str	r3, [r0, #0]
 8009e66:	2001      	movs	r0, #1
 8009e68:	bd30      	pop	{r4, r5, pc}
 8009e6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e6e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009e72:	2d19      	cmp	r5, #25
 8009e74:	bf98      	it	ls
 8009e76:	3220      	addls	r2, #32
 8009e78:	42a2      	cmp	r2, r4
 8009e7a:	d0f0      	beq.n	8009e5e <__match+0x6>
 8009e7c:	2000      	movs	r0, #0
 8009e7e:	e7f3      	b.n	8009e68 <__match+0x10>

08009e80 <__hexnan>:
 8009e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e84:	2500      	movs	r5, #0
 8009e86:	680b      	ldr	r3, [r1, #0]
 8009e88:	4682      	mov	sl, r0
 8009e8a:	115e      	asrs	r6, r3, #5
 8009e8c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009e90:	f013 031f 	ands.w	r3, r3, #31
 8009e94:	bf18      	it	ne
 8009e96:	3604      	addne	r6, #4
 8009e98:	1f37      	subs	r7, r6, #4
 8009e9a:	46b9      	mov	r9, r7
 8009e9c:	463c      	mov	r4, r7
 8009e9e:	46ab      	mov	fp, r5
 8009ea0:	b087      	sub	sp, #28
 8009ea2:	4690      	mov	r8, r2
 8009ea4:	6802      	ldr	r2, [r0, #0]
 8009ea6:	9301      	str	r3, [sp, #4]
 8009ea8:	f846 5c04 	str.w	r5, [r6, #-4]
 8009eac:	9502      	str	r5, [sp, #8]
 8009eae:	7851      	ldrb	r1, [r2, #1]
 8009eb0:	1c53      	adds	r3, r2, #1
 8009eb2:	9303      	str	r3, [sp, #12]
 8009eb4:	b341      	cbz	r1, 8009f08 <__hexnan+0x88>
 8009eb6:	4608      	mov	r0, r1
 8009eb8:	9205      	str	r2, [sp, #20]
 8009eba:	9104      	str	r1, [sp, #16]
 8009ebc:	f7ff fd69 	bl	8009992 <__hexdig_fun>
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	d14f      	bne.n	8009f64 <__hexnan+0xe4>
 8009ec4:	9904      	ldr	r1, [sp, #16]
 8009ec6:	9a05      	ldr	r2, [sp, #20]
 8009ec8:	2920      	cmp	r1, #32
 8009eca:	d818      	bhi.n	8009efe <__hexnan+0x7e>
 8009ecc:	9b02      	ldr	r3, [sp, #8]
 8009ece:	459b      	cmp	fp, r3
 8009ed0:	dd13      	ble.n	8009efa <__hexnan+0x7a>
 8009ed2:	454c      	cmp	r4, r9
 8009ed4:	d206      	bcs.n	8009ee4 <__hexnan+0x64>
 8009ed6:	2d07      	cmp	r5, #7
 8009ed8:	dc04      	bgt.n	8009ee4 <__hexnan+0x64>
 8009eda:	462a      	mov	r2, r5
 8009edc:	4649      	mov	r1, r9
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f7ff ffa8 	bl	8009e34 <L_shift>
 8009ee4:	4544      	cmp	r4, r8
 8009ee6:	d950      	bls.n	8009f8a <__hexnan+0x10a>
 8009ee8:	2300      	movs	r3, #0
 8009eea:	f1a4 0904 	sub.w	r9, r4, #4
 8009eee:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ef2:	461d      	mov	r5, r3
 8009ef4:	464c      	mov	r4, r9
 8009ef6:	f8cd b008 	str.w	fp, [sp, #8]
 8009efa:	9a03      	ldr	r2, [sp, #12]
 8009efc:	e7d7      	b.n	8009eae <__hexnan+0x2e>
 8009efe:	2929      	cmp	r1, #41	; 0x29
 8009f00:	d156      	bne.n	8009fb0 <__hexnan+0x130>
 8009f02:	3202      	adds	r2, #2
 8009f04:	f8ca 2000 	str.w	r2, [sl]
 8009f08:	f1bb 0f00 	cmp.w	fp, #0
 8009f0c:	d050      	beq.n	8009fb0 <__hexnan+0x130>
 8009f0e:	454c      	cmp	r4, r9
 8009f10:	d206      	bcs.n	8009f20 <__hexnan+0xa0>
 8009f12:	2d07      	cmp	r5, #7
 8009f14:	dc04      	bgt.n	8009f20 <__hexnan+0xa0>
 8009f16:	462a      	mov	r2, r5
 8009f18:	4649      	mov	r1, r9
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	f7ff ff8a 	bl	8009e34 <L_shift>
 8009f20:	4544      	cmp	r4, r8
 8009f22:	d934      	bls.n	8009f8e <__hexnan+0x10e>
 8009f24:	4623      	mov	r3, r4
 8009f26:	f1a8 0204 	sub.w	r2, r8, #4
 8009f2a:	f853 1b04 	ldr.w	r1, [r3], #4
 8009f2e:	429f      	cmp	r7, r3
 8009f30:	f842 1f04 	str.w	r1, [r2, #4]!
 8009f34:	d2f9      	bcs.n	8009f2a <__hexnan+0xaa>
 8009f36:	1b3b      	subs	r3, r7, r4
 8009f38:	f023 0303 	bic.w	r3, r3, #3
 8009f3c:	3304      	adds	r3, #4
 8009f3e:	3401      	adds	r4, #1
 8009f40:	3e03      	subs	r6, #3
 8009f42:	42b4      	cmp	r4, r6
 8009f44:	bf88      	it	hi
 8009f46:	2304      	movhi	r3, #4
 8009f48:	2200      	movs	r2, #0
 8009f4a:	4443      	add	r3, r8
 8009f4c:	f843 2b04 	str.w	r2, [r3], #4
 8009f50:	429f      	cmp	r7, r3
 8009f52:	d2fb      	bcs.n	8009f4c <__hexnan+0xcc>
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	b91b      	cbnz	r3, 8009f60 <__hexnan+0xe0>
 8009f58:	4547      	cmp	r7, r8
 8009f5a:	d127      	bne.n	8009fac <__hexnan+0x12c>
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	603b      	str	r3, [r7, #0]
 8009f60:	2005      	movs	r0, #5
 8009f62:	e026      	b.n	8009fb2 <__hexnan+0x132>
 8009f64:	3501      	adds	r5, #1
 8009f66:	2d08      	cmp	r5, #8
 8009f68:	f10b 0b01 	add.w	fp, fp, #1
 8009f6c:	dd06      	ble.n	8009f7c <__hexnan+0xfc>
 8009f6e:	4544      	cmp	r4, r8
 8009f70:	d9c3      	bls.n	8009efa <__hexnan+0x7a>
 8009f72:	2300      	movs	r3, #0
 8009f74:	2501      	movs	r5, #1
 8009f76:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f7a:	3c04      	subs	r4, #4
 8009f7c:	6822      	ldr	r2, [r4, #0]
 8009f7e:	f000 000f 	and.w	r0, r0, #15
 8009f82:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009f86:	6022      	str	r2, [r4, #0]
 8009f88:	e7b7      	b.n	8009efa <__hexnan+0x7a>
 8009f8a:	2508      	movs	r5, #8
 8009f8c:	e7b5      	b.n	8009efa <__hexnan+0x7a>
 8009f8e:	9b01      	ldr	r3, [sp, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d0df      	beq.n	8009f54 <__hexnan+0xd4>
 8009f94:	f04f 32ff 	mov.w	r2, #4294967295
 8009f98:	f1c3 0320 	rsb	r3, r3, #32
 8009f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009fa4:	401a      	ands	r2, r3
 8009fa6:	f846 2c04 	str.w	r2, [r6, #-4]
 8009faa:	e7d3      	b.n	8009f54 <__hexnan+0xd4>
 8009fac:	3f04      	subs	r7, #4
 8009fae:	e7d1      	b.n	8009f54 <__hexnan+0xd4>
 8009fb0:	2004      	movs	r0, #4
 8009fb2:	b007      	add	sp, #28
 8009fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009fb8 <__ascii_mbtowc>:
 8009fb8:	b082      	sub	sp, #8
 8009fba:	b901      	cbnz	r1, 8009fbe <__ascii_mbtowc+0x6>
 8009fbc:	a901      	add	r1, sp, #4
 8009fbe:	b142      	cbz	r2, 8009fd2 <__ascii_mbtowc+0x1a>
 8009fc0:	b14b      	cbz	r3, 8009fd6 <__ascii_mbtowc+0x1e>
 8009fc2:	7813      	ldrb	r3, [r2, #0]
 8009fc4:	600b      	str	r3, [r1, #0]
 8009fc6:	7812      	ldrb	r2, [r2, #0]
 8009fc8:	1e10      	subs	r0, r2, #0
 8009fca:	bf18      	it	ne
 8009fcc:	2001      	movne	r0, #1
 8009fce:	b002      	add	sp, #8
 8009fd0:	4770      	bx	lr
 8009fd2:	4610      	mov	r0, r2
 8009fd4:	e7fb      	b.n	8009fce <__ascii_mbtowc+0x16>
 8009fd6:	f06f 0001 	mvn.w	r0, #1
 8009fda:	e7f8      	b.n	8009fce <__ascii_mbtowc+0x16>

08009fdc <__malloc_lock>:
 8009fdc:	4801      	ldr	r0, [pc, #4]	; (8009fe4 <__malloc_lock+0x8>)
 8009fde:	f001 b820 	b.w	800b022 <__retarget_lock_acquire_recursive>
 8009fe2:	bf00      	nop
 8009fe4:	200015c0 	.word	0x200015c0

08009fe8 <__malloc_unlock>:
 8009fe8:	4801      	ldr	r0, [pc, #4]	; (8009ff0 <__malloc_unlock+0x8>)
 8009fea:	f001 b81b 	b.w	800b024 <__retarget_lock_release_recursive>
 8009fee:	bf00      	nop
 8009ff0:	200015c0 	.word	0x200015c0

08009ff4 <_Balloc>:
 8009ff4:	b570      	push	{r4, r5, r6, lr}
 8009ff6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	460d      	mov	r5, r1
 8009ffc:	b976      	cbnz	r6, 800a01c <_Balloc+0x28>
 8009ffe:	2010      	movs	r0, #16
 800a000:	f7fe fca4 	bl	800894c <malloc>
 800a004:	4602      	mov	r2, r0
 800a006:	6260      	str	r0, [r4, #36]	; 0x24
 800a008:	b920      	cbnz	r0, 800a014 <_Balloc+0x20>
 800a00a:	2166      	movs	r1, #102	; 0x66
 800a00c:	4b17      	ldr	r3, [pc, #92]	; (800a06c <_Balloc+0x78>)
 800a00e:	4818      	ldr	r0, [pc, #96]	; (800a070 <_Balloc+0x7c>)
 800a010:	f000 ffd6 	bl	800afc0 <__assert_func>
 800a014:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a018:	6006      	str	r6, [r0, #0]
 800a01a:	60c6      	str	r6, [r0, #12]
 800a01c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a01e:	68f3      	ldr	r3, [r6, #12]
 800a020:	b183      	cbz	r3, 800a044 <_Balloc+0x50>
 800a022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a02a:	b9b8      	cbnz	r0, 800a05c <_Balloc+0x68>
 800a02c:	2101      	movs	r1, #1
 800a02e:	fa01 f605 	lsl.w	r6, r1, r5
 800a032:	1d72      	adds	r2, r6, #5
 800a034:	4620      	mov	r0, r4
 800a036:	0092      	lsls	r2, r2, #2
 800a038:	f000 fc94 	bl	800a964 <_calloc_r>
 800a03c:	b160      	cbz	r0, 800a058 <_Balloc+0x64>
 800a03e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a042:	e00e      	b.n	800a062 <_Balloc+0x6e>
 800a044:	2221      	movs	r2, #33	; 0x21
 800a046:	2104      	movs	r1, #4
 800a048:	4620      	mov	r0, r4
 800a04a:	f000 fc8b 	bl	800a964 <_calloc_r>
 800a04e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a050:	60f0      	str	r0, [r6, #12]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d1e4      	bne.n	800a022 <_Balloc+0x2e>
 800a058:	2000      	movs	r0, #0
 800a05a:	bd70      	pop	{r4, r5, r6, pc}
 800a05c:	6802      	ldr	r2, [r0, #0]
 800a05e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a062:	2300      	movs	r3, #0
 800a064:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a068:	e7f7      	b.n	800a05a <_Balloc+0x66>
 800a06a:	bf00      	nop
 800a06c:	0800bd7c 	.word	0x0800bd7c
 800a070:	0800bd93 	.word	0x0800bd93

0800a074 <_Bfree>:
 800a074:	b570      	push	{r4, r5, r6, lr}
 800a076:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a078:	4605      	mov	r5, r0
 800a07a:	460c      	mov	r4, r1
 800a07c:	b976      	cbnz	r6, 800a09c <_Bfree+0x28>
 800a07e:	2010      	movs	r0, #16
 800a080:	f7fe fc64 	bl	800894c <malloc>
 800a084:	4602      	mov	r2, r0
 800a086:	6268      	str	r0, [r5, #36]	; 0x24
 800a088:	b920      	cbnz	r0, 800a094 <_Bfree+0x20>
 800a08a:	218a      	movs	r1, #138	; 0x8a
 800a08c:	4b08      	ldr	r3, [pc, #32]	; (800a0b0 <_Bfree+0x3c>)
 800a08e:	4809      	ldr	r0, [pc, #36]	; (800a0b4 <_Bfree+0x40>)
 800a090:	f000 ff96 	bl	800afc0 <__assert_func>
 800a094:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a098:	6006      	str	r6, [r0, #0]
 800a09a:	60c6      	str	r6, [r0, #12]
 800a09c:	b13c      	cbz	r4, 800a0ae <_Bfree+0x3a>
 800a09e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a0a0:	6862      	ldr	r2, [r4, #4]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0a8:	6021      	str	r1, [r4, #0]
 800a0aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a0ae:	bd70      	pop	{r4, r5, r6, pc}
 800a0b0:	0800bd7c 	.word	0x0800bd7c
 800a0b4:	0800bd93 	.word	0x0800bd93

0800a0b8 <__multadd>:
 800a0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0bc:	4607      	mov	r7, r0
 800a0be:	460c      	mov	r4, r1
 800a0c0:	461e      	mov	r6, r3
 800a0c2:	2000      	movs	r0, #0
 800a0c4:	690d      	ldr	r5, [r1, #16]
 800a0c6:	f101 0c14 	add.w	ip, r1, #20
 800a0ca:	f8dc 3000 	ldr.w	r3, [ip]
 800a0ce:	3001      	adds	r0, #1
 800a0d0:	b299      	uxth	r1, r3
 800a0d2:	fb02 6101 	mla	r1, r2, r1, r6
 800a0d6:	0c1e      	lsrs	r6, r3, #16
 800a0d8:	0c0b      	lsrs	r3, r1, #16
 800a0da:	fb02 3306 	mla	r3, r2, r6, r3
 800a0de:	b289      	uxth	r1, r1
 800a0e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a0e4:	4285      	cmp	r5, r0
 800a0e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a0ea:	f84c 1b04 	str.w	r1, [ip], #4
 800a0ee:	dcec      	bgt.n	800a0ca <__multadd+0x12>
 800a0f0:	b30e      	cbz	r6, 800a136 <__multadd+0x7e>
 800a0f2:	68a3      	ldr	r3, [r4, #8]
 800a0f4:	42ab      	cmp	r3, r5
 800a0f6:	dc19      	bgt.n	800a12c <__multadd+0x74>
 800a0f8:	6861      	ldr	r1, [r4, #4]
 800a0fa:	4638      	mov	r0, r7
 800a0fc:	3101      	adds	r1, #1
 800a0fe:	f7ff ff79 	bl	8009ff4 <_Balloc>
 800a102:	4680      	mov	r8, r0
 800a104:	b928      	cbnz	r0, 800a112 <__multadd+0x5a>
 800a106:	4602      	mov	r2, r0
 800a108:	21b5      	movs	r1, #181	; 0xb5
 800a10a:	4b0c      	ldr	r3, [pc, #48]	; (800a13c <__multadd+0x84>)
 800a10c:	480c      	ldr	r0, [pc, #48]	; (800a140 <__multadd+0x88>)
 800a10e:	f000 ff57 	bl	800afc0 <__assert_func>
 800a112:	6922      	ldr	r2, [r4, #16]
 800a114:	f104 010c 	add.w	r1, r4, #12
 800a118:	3202      	adds	r2, #2
 800a11a:	0092      	lsls	r2, r2, #2
 800a11c:	300c      	adds	r0, #12
 800a11e:	f7fe fc33 	bl	8008988 <memcpy>
 800a122:	4621      	mov	r1, r4
 800a124:	4638      	mov	r0, r7
 800a126:	f7ff ffa5 	bl	800a074 <_Bfree>
 800a12a:	4644      	mov	r4, r8
 800a12c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a130:	3501      	adds	r5, #1
 800a132:	615e      	str	r6, [r3, #20]
 800a134:	6125      	str	r5, [r4, #16]
 800a136:	4620      	mov	r0, r4
 800a138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a13c:	0800bcf0 	.word	0x0800bcf0
 800a140:	0800bd93 	.word	0x0800bd93

0800a144 <__s2b>:
 800a144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a148:	4615      	mov	r5, r2
 800a14a:	2209      	movs	r2, #9
 800a14c:	461f      	mov	r7, r3
 800a14e:	3308      	adds	r3, #8
 800a150:	460c      	mov	r4, r1
 800a152:	fb93 f3f2 	sdiv	r3, r3, r2
 800a156:	4606      	mov	r6, r0
 800a158:	2201      	movs	r2, #1
 800a15a:	2100      	movs	r1, #0
 800a15c:	429a      	cmp	r2, r3
 800a15e:	db09      	blt.n	800a174 <__s2b+0x30>
 800a160:	4630      	mov	r0, r6
 800a162:	f7ff ff47 	bl	8009ff4 <_Balloc>
 800a166:	b940      	cbnz	r0, 800a17a <__s2b+0x36>
 800a168:	4602      	mov	r2, r0
 800a16a:	21ce      	movs	r1, #206	; 0xce
 800a16c:	4b18      	ldr	r3, [pc, #96]	; (800a1d0 <__s2b+0x8c>)
 800a16e:	4819      	ldr	r0, [pc, #100]	; (800a1d4 <__s2b+0x90>)
 800a170:	f000 ff26 	bl	800afc0 <__assert_func>
 800a174:	0052      	lsls	r2, r2, #1
 800a176:	3101      	adds	r1, #1
 800a178:	e7f0      	b.n	800a15c <__s2b+0x18>
 800a17a:	9b08      	ldr	r3, [sp, #32]
 800a17c:	2d09      	cmp	r5, #9
 800a17e:	6143      	str	r3, [r0, #20]
 800a180:	f04f 0301 	mov.w	r3, #1
 800a184:	6103      	str	r3, [r0, #16]
 800a186:	dd16      	ble.n	800a1b6 <__s2b+0x72>
 800a188:	f104 0909 	add.w	r9, r4, #9
 800a18c:	46c8      	mov	r8, r9
 800a18e:	442c      	add	r4, r5
 800a190:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a194:	4601      	mov	r1, r0
 800a196:	220a      	movs	r2, #10
 800a198:	4630      	mov	r0, r6
 800a19a:	3b30      	subs	r3, #48	; 0x30
 800a19c:	f7ff ff8c 	bl	800a0b8 <__multadd>
 800a1a0:	45a0      	cmp	r8, r4
 800a1a2:	d1f5      	bne.n	800a190 <__s2b+0x4c>
 800a1a4:	f1a5 0408 	sub.w	r4, r5, #8
 800a1a8:	444c      	add	r4, r9
 800a1aa:	1b2d      	subs	r5, r5, r4
 800a1ac:	1963      	adds	r3, r4, r5
 800a1ae:	42bb      	cmp	r3, r7
 800a1b0:	db04      	blt.n	800a1bc <__s2b+0x78>
 800a1b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1b6:	2509      	movs	r5, #9
 800a1b8:	340a      	adds	r4, #10
 800a1ba:	e7f6      	b.n	800a1aa <__s2b+0x66>
 800a1bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a1c0:	4601      	mov	r1, r0
 800a1c2:	220a      	movs	r2, #10
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	3b30      	subs	r3, #48	; 0x30
 800a1c8:	f7ff ff76 	bl	800a0b8 <__multadd>
 800a1cc:	e7ee      	b.n	800a1ac <__s2b+0x68>
 800a1ce:	bf00      	nop
 800a1d0:	0800bcf0 	.word	0x0800bcf0
 800a1d4:	0800bd93 	.word	0x0800bd93

0800a1d8 <__hi0bits>:
 800a1d8:	0c02      	lsrs	r2, r0, #16
 800a1da:	0412      	lsls	r2, r2, #16
 800a1dc:	4603      	mov	r3, r0
 800a1de:	b9ca      	cbnz	r2, 800a214 <__hi0bits+0x3c>
 800a1e0:	0403      	lsls	r3, r0, #16
 800a1e2:	2010      	movs	r0, #16
 800a1e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a1e8:	bf04      	itt	eq
 800a1ea:	021b      	lsleq	r3, r3, #8
 800a1ec:	3008      	addeq	r0, #8
 800a1ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a1f2:	bf04      	itt	eq
 800a1f4:	011b      	lsleq	r3, r3, #4
 800a1f6:	3004      	addeq	r0, #4
 800a1f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a1fc:	bf04      	itt	eq
 800a1fe:	009b      	lsleq	r3, r3, #2
 800a200:	3002      	addeq	r0, #2
 800a202:	2b00      	cmp	r3, #0
 800a204:	db05      	blt.n	800a212 <__hi0bits+0x3a>
 800a206:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a20a:	f100 0001 	add.w	r0, r0, #1
 800a20e:	bf08      	it	eq
 800a210:	2020      	moveq	r0, #32
 800a212:	4770      	bx	lr
 800a214:	2000      	movs	r0, #0
 800a216:	e7e5      	b.n	800a1e4 <__hi0bits+0xc>

0800a218 <__lo0bits>:
 800a218:	6803      	ldr	r3, [r0, #0]
 800a21a:	4602      	mov	r2, r0
 800a21c:	f013 0007 	ands.w	r0, r3, #7
 800a220:	d00b      	beq.n	800a23a <__lo0bits+0x22>
 800a222:	07d9      	lsls	r1, r3, #31
 800a224:	d421      	bmi.n	800a26a <__lo0bits+0x52>
 800a226:	0798      	lsls	r0, r3, #30
 800a228:	bf49      	itett	mi
 800a22a:	085b      	lsrmi	r3, r3, #1
 800a22c:	089b      	lsrpl	r3, r3, #2
 800a22e:	2001      	movmi	r0, #1
 800a230:	6013      	strmi	r3, [r2, #0]
 800a232:	bf5c      	itt	pl
 800a234:	2002      	movpl	r0, #2
 800a236:	6013      	strpl	r3, [r2, #0]
 800a238:	4770      	bx	lr
 800a23a:	b299      	uxth	r1, r3
 800a23c:	b909      	cbnz	r1, 800a242 <__lo0bits+0x2a>
 800a23e:	2010      	movs	r0, #16
 800a240:	0c1b      	lsrs	r3, r3, #16
 800a242:	b2d9      	uxtb	r1, r3
 800a244:	b909      	cbnz	r1, 800a24a <__lo0bits+0x32>
 800a246:	3008      	adds	r0, #8
 800a248:	0a1b      	lsrs	r3, r3, #8
 800a24a:	0719      	lsls	r1, r3, #28
 800a24c:	bf04      	itt	eq
 800a24e:	091b      	lsreq	r3, r3, #4
 800a250:	3004      	addeq	r0, #4
 800a252:	0799      	lsls	r1, r3, #30
 800a254:	bf04      	itt	eq
 800a256:	089b      	lsreq	r3, r3, #2
 800a258:	3002      	addeq	r0, #2
 800a25a:	07d9      	lsls	r1, r3, #31
 800a25c:	d403      	bmi.n	800a266 <__lo0bits+0x4e>
 800a25e:	085b      	lsrs	r3, r3, #1
 800a260:	f100 0001 	add.w	r0, r0, #1
 800a264:	d003      	beq.n	800a26e <__lo0bits+0x56>
 800a266:	6013      	str	r3, [r2, #0]
 800a268:	4770      	bx	lr
 800a26a:	2000      	movs	r0, #0
 800a26c:	4770      	bx	lr
 800a26e:	2020      	movs	r0, #32
 800a270:	4770      	bx	lr
	...

0800a274 <__i2b>:
 800a274:	b510      	push	{r4, lr}
 800a276:	460c      	mov	r4, r1
 800a278:	2101      	movs	r1, #1
 800a27a:	f7ff febb 	bl	8009ff4 <_Balloc>
 800a27e:	4602      	mov	r2, r0
 800a280:	b928      	cbnz	r0, 800a28e <__i2b+0x1a>
 800a282:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a286:	4b04      	ldr	r3, [pc, #16]	; (800a298 <__i2b+0x24>)
 800a288:	4804      	ldr	r0, [pc, #16]	; (800a29c <__i2b+0x28>)
 800a28a:	f000 fe99 	bl	800afc0 <__assert_func>
 800a28e:	2301      	movs	r3, #1
 800a290:	6144      	str	r4, [r0, #20]
 800a292:	6103      	str	r3, [r0, #16]
 800a294:	bd10      	pop	{r4, pc}
 800a296:	bf00      	nop
 800a298:	0800bcf0 	.word	0x0800bcf0
 800a29c:	0800bd93 	.word	0x0800bd93

0800a2a0 <__multiply>:
 800a2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a4:	4691      	mov	r9, r2
 800a2a6:	690a      	ldr	r2, [r1, #16]
 800a2a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a2ac:	460c      	mov	r4, r1
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	bfbe      	ittt	lt
 800a2b2:	460b      	movlt	r3, r1
 800a2b4:	464c      	movlt	r4, r9
 800a2b6:	4699      	movlt	r9, r3
 800a2b8:	6927      	ldr	r7, [r4, #16]
 800a2ba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a2be:	68a3      	ldr	r3, [r4, #8]
 800a2c0:	6861      	ldr	r1, [r4, #4]
 800a2c2:	eb07 060a 	add.w	r6, r7, sl
 800a2c6:	42b3      	cmp	r3, r6
 800a2c8:	b085      	sub	sp, #20
 800a2ca:	bfb8      	it	lt
 800a2cc:	3101      	addlt	r1, #1
 800a2ce:	f7ff fe91 	bl	8009ff4 <_Balloc>
 800a2d2:	b930      	cbnz	r0, 800a2e2 <__multiply+0x42>
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	f240 115d 	movw	r1, #349	; 0x15d
 800a2da:	4b43      	ldr	r3, [pc, #268]	; (800a3e8 <__multiply+0x148>)
 800a2dc:	4843      	ldr	r0, [pc, #268]	; (800a3ec <__multiply+0x14c>)
 800a2de:	f000 fe6f 	bl	800afc0 <__assert_func>
 800a2e2:	f100 0514 	add.w	r5, r0, #20
 800a2e6:	462b      	mov	r3, r5
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a2ee:	4543      	cmp	r3, r8
 800a2f0:	d321      	bcc.n	800a336 <__multiply+0x96>
 800a2f2:	f104 0314 	add.w	r3, r4, #20
 800a2f6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a2fa:	f109 0314 	add.w	r3, r9, #20
 800a2fe:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a302:	9202      	str	r2, [sp, #8]
 800a304:	1b3a      	subs	r2, r7, r4
 800a306:	3a15      	subs	r2, #21
 800a308:	f022 0203 	bic.w	r2, r2, #3
 800a30c:	3204      	adds	r2, #4
 800a30e:	f104 0115 	add.w	r1, r4, #21
 800a312:	428f      	cmp	r7, r1
 800a314:	bf38      	it	cc
 800a316:	2204      	movcc	r2, #4
 800a318:	9201      	str	r2, [sp, #4]
 800a31a:	9a02      	ldr	r2, [sp, #8]
 800a31c:	9303      	str	r3, [sp, #12]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d80c      	bhi.n	800a33c <__multiply+0x9c>
 800a322:	2e00      	cmp	r6, #0
 800a324:	dd03      	ble.n	800a32e <__multiply+0x8e>
 800a326:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d059      	beq.n	800a3e2 <__multiply+0x142>
 800a32e:	6106      	str	r6, [r0, #16]
 800a330:	b005      	add	sp, #20
 800a332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a336:	f843 2b04 	str.w	r2, [r3], #4
 800a33a:	e7d8      	b.n	800a2ee <__multiply+0x4e>
 800a33c:	f8b3 a000 	ldrh.w	sl, [r3]
 800a340:	f1ba 0f00 	cmp.w	sl, #0
 800a344:	d023      	beq.n	800a38e <__multiply+0xee>
 800a346:	46a9      	mov	r9, r5
 800a348:	f04f 0c00 	mov.w	ip, #0
 800a34c:	f104 0e14 	add.w	lr, r4, #20
 800a350:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a354:	f8d9 1000 	ldr.w	r1, [r9]
 800a358:	fa1f fb82 	uxth.w	fp, r2
 800a35c:	b289      	uxth	r1, r1
 800a35e:	fb0a 110b 	mla	r1, sl, fp, r1
 800a362:	4461      	add	r1, ip
 800a364:	f8d9 c000 	ldr.w	ip, [r9]
 800a368:	0c12      	lsrs	r2, r2, #16
 800a36a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a36e:	fb0a c202 	mla	r2, sl, r2, ip
 800a372:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a376:	b289      	uxth	r1, r1
 800a378:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a37c:	4577      	cmp	r7, lr
 800a37e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a382:	f849 1b04 	str.w	r1, [r9], #4
 800a386:	d8e3      	bhi.n	800a350 <__multiply+0xb0>
 800a388:	9a01      	ldr	r2, [sp, #4]
 800a38a:	f845 c002 	str.w	ip, [r5, r2]
 800a38e:	9a03      	ldr	r2, [sp, #12]
 800a390:	3304      	adds	r3, #4
 800a392:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a396:	f1b9 0f00 	cmp.w	r9, #0
 800a39a:	d020      	beq.n	800a3de <__multiply+0x13e>
 800a39c:	46ae      	mov	lr, r5
 800a39e:	f04f 0a00 	mov.w	sl, #0
 800a3a2:	6829      	ldr	r1, [r5, #0]
 800a3a4:	f104 0c14 	add.w	ip, r4, #20
 800a3a8:	f8bc b000 	ldrh.w	fp, [ip]
 800a3ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a3b0:	b289      	uxth	r1, r1
 800a3b2:	fb09 220b 	mla	r2, r9, fp, r2
 800a3b6:	4492      	add	sl, r2
 800a3b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a3bc:	f84e 1b04 	str.w	r1, [lr], #4
 800a3c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a3c4:	f8be 1000 	ldrh.w	r1, [lr]
 800a3c8:	0c12      	lsrs	r2, r2, #16
 800a3ca:	fb09 1102 	mla	r1, r9, r2, r1
 800a3ce:	4567      	cmp	r7, ip
 800a3d0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a3d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a3d8:	d8e6      	bhi.n	800a3a8 <__multiply+0x108>
 800a3da:	9a01      	ldr	r2, [sp, #4]
 800a3dc:	50a9      	str	r1, [r5, r2]
 800a3de:	3504      	adds	r5, #4
 800a3e0:	e79b      	b.n	800a31a <__multiply+0x7a>
 800a3e2:	3e01      	subs	r6, #1
 800a3e4:	e79d      	b.n	800a322 <__multiply+0x82>
 800a3e6:	bf00      	nop
 800a3e8:	0800bcf0 	.word	0x0800bcf0
 800a3ec:	0800bd93 	.word	0x0800bd93

0800a3f0 <__pow5mult>:
 800a3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3f4:	4615      	mov	r5, r2
 800a3f6:	f012 0203 	ands.w	r2, r2, #3
 800a3fa:	4606      	mov	r6, r0
 800a3fc:	460f      	mov	r7, r1
 800a3fe:	d007      	beq.n	800a410 <__pow5mult+0x20>
 800a400:	4c25      	ldr	r4, [pc, #148]	; (800a498 <__pow5mult+0xa8>)
 800a402:	3a01      	subs	r2, #1
 800a404:	2300      	movs	r3, #0
 800a406:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a40a:	f7ff fe55 	bl	800a0b8 <__multadd>
 800a40e:	4607      	mov	r7, r0
 800a410:	10ad      	asrs	r5, r5, #2
 800a412:	d03d      	beq.n	800a490 <__pow5mult+0xa0>
 800a414:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a416:	b97c      	cbnz	r4, 800a438 <__pow5mult+0x48>
 800a418:	2010      	movs	r0, #16
 800a41a:	f7fe fa97 	bl	800894c <malloc>
 800a41e:	4602      	mov	r2, r0
 800a420:	6270      	str	r0, [r6, #36]	; 0x24
 800a422:	b928      	cbnz	r0, 800a430 <__pow5mult+0x40>
 800a424:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a428:	4b1c      	ldr	r3, [pc, #112]	; (800a49c <__pow5mult+0xac>)
 800a42a:	481d      	ldr	r0, [pc, #116]	; (800a4a0 <__pow5mult+0xb0>)
 800a42c:	f000 fdc8 	bl	800afc0 <__assert_func>
 800a430:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a434:	6004      	str	r4, [r0, #0]
 800a436:	60c4      	str	r4, [r0, #12]
 800a438:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a43c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a440:	b94c      	cbnz	r4, 800a456 <__pow5mult+0x66>
 800a442:	f240 2171 	movw	r1, #625	; 0x271
 800a446:	4630      	mov	r0, r6
 800a448:	f7ff ff14 	bl	800a274 <__i2b>
 800a44c:	2300      	movs	r3, #0
 800a44e:	4604      	mov	r4, r0
 800a450:	f8c8 0008 	str.w	r0, [r8, #8]
 800a454:	6003      	str	r3, [r0, #0]
 800a456:	f04f 0900 	mov.w	r9, #0
 800a45a:	07eb      	lsls	r3, r5, #31
 800a45c:	d50a      	bpl.n	800a474 <__pow5mult+0x84>
 800a45e:	4639      	mov	r1, r7
 800a460:	4622      	mov	r2, r4
 800a462:	4630      	mov	r0, r6
 800a464:	f7ff ff1c 	bl	800a2a0 <__multiply>
 800a468:	4680      	mov	r8, r0
 800a46a:	4639      	mov	r1, r7
 800a46c:	4630      	mov	r0, r6
 800a46e:	f7ff fe01 	bl	800a074 <_Bfree>
 800a472:	4647      	mov	r7, r8
 800a474:	106d      	asrs	r5, r5, #1
 800a476:	d00b      	beq.n	800a490 <__pow5mult+0xa0>
 800a478:	6820      	ldr	r0, [r4, #0]
 800a47a:	b938      	cbnz	r0, 800a48c <__pow5mult+0x9c>
 800a47c:	4622      	mov	r2, r4
 800a47e:	4621      	mov	r1, r4
 800a480:	4630      	mov	r0, r6
 800a482:	f7ff ff0d 	bl	800a2a0 <__multiply>
 800a486:	6020      	str	r0, [r4, #0]
 800a488:	f8c0 9000 	str.w	r9, [r0]
 800a48c:	4604      	mov	r4, r0
 800a48e:	e7e4      	b.n	800a45a <__pow5mult+0x6a>
 800a490:	4638      	mov	r0, r7
 800a492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a496:	bf00      	nop
 800a498:	0800bee0 	.word	0x0800bee0
 800a49c:	0800bd7c 	.word	0x0800bd7c
 800a4a0:	0800bd93 	.word	0x0800bd93

0800a4a4 <__lshift>:
 800a4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4a8:	460c      	mov	r4, r1
 800a4aa:	4607      	mov	r7, r0
 800a4ac:	4691      	mov	r9, r2
 800a4ae:	6923      	ldr	r3, [r4, #16]
 800a4b0:	6849      	ldr	r1, [r1, #4]
 800a4b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4b6:	68a3      	ldr	r3, [r4, #8]
 800a4b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4bc:	f108 0601 	add.w	r6, r8, #1
 800a4c0:	42b3      	cmp	r3, r6
 800a4c2:	db0b      	blt.n	800a4dc <__lshift+0x38>
 800a4c4:	4638      	mov	r0, r7
 800a4c6:	f7ff fd95 	bl	8009ff4 <_Balloc>
 800a4ca:	4605      	mov	r5, r0
 800a4cc:	b948      	cbnz	r0, 800a4e2 <__lshift+0x3e>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a4d4:	4b29      	ldr	r3, [pc, #164]	; (800a57c <__lshift+0xd8>)
 800a4d6:	482a      	ldr	r0, [pc, #168]	; (800a580 <__lshift+0xdc>)
 800a4d8:	f000 fd72 	bl	800afc0 <__assert_func>
 800a4dc:	3101      	adds	r1, #1
 800a4de:	005b      	lsls	r3, r3, #1
 800a4e0:	e7ee      	b.n	800a4c0 <__lshift+0x1c>
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	f100 0114 	add.w	r1, r0, #20
 800a4e8:	f100 0210 	add.w	r2, r0, #16
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	4553      	cmp	r3, sl
 800a4f0:	db37      	blt.n	800a562 <__lshift+0xbe>
 800a4f2:	6920      	ldr	r0, [r4, #16]
 800a4f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4f8:	f104 0314 	add.w	r3, r4, #20
 800a4fc:	f019 091f 	ands.w	r9, r9, #31
 800a500:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a504:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a508:	d02f      	beq.n	800a56a <__lshift+0xc6>
 800a50a:	468a      	mov	sl, r1
 800a50c:	f04f 0c00 	mov.w	ip, #0
 800a510:	f1c9 0e20 	rsb	lr, r9, #32
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	fa02 f209 	lsl.w	r2, r2, r9
 800a51a:	ea42 020c 	orr.w	r2, r2, ip
 800a51e:	f84a 2b04 	str.w	r2, [sl], #4
 800a522:	f853 2b04 	ldr.w	r2, [r3], #4
 800a526:	4298      	cmp	r0, r3
 800a528:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a52c:	d8f2      	bhi.n	800a514 <__lshift+0x70>
 800a52e:	1b03      	subs	r3, r0, r4
 800a530:	3b15      	subs	r3, #21
 800a532:	f023 0303 	bic.w	r3, r3, #3
 800a536:	3304      	adds	r3, #4
 800a538:	f104 0215 	add.w	r2, r4, #21
 800a53c:	4290      	cmp	r0, r2
 800a53e:	bf38      	it	cc
 800a540:	2304      	movcc	r3, #4
 800a542:	f841 c003 	str.w	ip, [r1, r3]
 800a546:	f1bc 0f00 	cmp.w	ip, #0
 800a54a:	d001      	beq.n	800a550 <__lshift+0xac>
 800a54c:	f108 0602 	add.w	r6, r8, #2
 800a550:	3e01      	subs	r6, #1
 800a552:	4638      	mov	r0, r7
 800a554:	4621      	mov	r1, r4
 800a556:	612e      	str	r6, [r5, #16]
 800a558:	f7ff fd8c 	bl	800a074 <_Bfree>
 800a55c:	4628      	mov	r0, r5
 800a55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a562:	f842 0f04 	str.w	r0, [r2, #4]!
 800a566:	3301      	adds	r3, #1
 800a568:	e7c1      	b.n	800a4ee <__lshift+0x4a>
 800a56a:	3904      	subs	r1, #4
 800a56c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a570:	4298      	cmp	r0, r3
 800a572:	f841 2f04 	str.w	r2, [r1, #4]!
 800a576:	d8f9      	bhi.n	800a56c <__lshift+0xc8>
 800a578:	e7ea      	b.n	800a550 <__lshift+0xac>
 800a57a:	bf00      	nop
 800a57c:	0800bcf0 	.word	0x0800bcf0
 800a580:	0800bd93 	.word	0x0800bd93

0800a584 <__mcmp>:
 800a584:	4603      	mov	r3, r0
 800a586:	690a      	ldr	r2, [r1, #16]
 800a588:	6900      	ldr	r0, [r0, #16]
 800a58a:	b530      	push	{r4, r5, lr}
 800a58c:	1a80      	subs	r0, r0, r2
 800a58e:	d10d      	bne.n	800a5ac <__mcmp+0x28>
 800a590:	3314      	adds	r3, #20
 800a592:	3114      	adds	r1, #20
 800a594:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a598:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a59c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a5a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a5a4:	4295      	cmp	r5, r2
 800a5a6:	d002      	beq.n	800a5ae <__mcmp+0x2a>
 800a5a8:	d304      	bcc.n	800a5b4 <__mcmp+0x30>
 800a5aa:	2001      	movs	r0, #1
 800a5ac:	bd30      	pop	{r4, r5, pc}
 800a5ae:	42a3      	cmp	r3, r4
 800a5b0:	d3f4      	bcc.n	800a59c <__mcmp+0x18>
 800a5b2:	e7fb      	b.n	800a5ac <__mcmp+0x28>
 800a5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b8:	e7f8      	b.n	800a5ac <__mcmp+0x28>
	...

0800a5bc <__mdiff>:
 800a5bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c0:	460d      	mov	r5, r1
 800a5c2:	4607      	mov	r7, r0
 800a5c4:	4611      	mov	r1, r2
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	4614      	mov	r4, r2
 800a5ca:	f7ff ffdb 	bl	800a584 <__mcmp>
 800a5ce:	1e06      	subs	r6, r0, #0
 800a5d0:	d111      	bne.n	800a5f6 <__mdiff+0x3a>
 800a5d2:	4631      	mov	r1, r6
 800a5d4:	4638      	mov	r0, r7
 800a5d6:	f7ff fd0d 	bl	8009ff4 <_Balloc>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	b928      	cbnz	r0, 800a5ea <__mdiff+0x2e>
 800a5de:	f240 2132 	movw	r1, #562	; 0x232
 800a5e2:	4b3a      	ldr	r3, [pc, #232]	; (800a6cc <__mdiff+0x110>)
 800a5e4:	483a      	ldr	r0, [pc, #232]	; (800a6d0 <__mdiff+0x114>)
 800a5e6:	f000 fceb 	bl	800afc0 <__assert_func>
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a5f0:	4610      	mov	r0, r2
 800a5f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f6:	bfa4      	itt	ge
 800a5f8:	4623      	movge	r3, r4
 800a5fa:	462c      	movge	r4, r5
 800a5fc:	4638      	mov	r0, r7
 800a5fe:	6861      	ldr	r1, [r4, #4]
 800a600:	bfa6      	itte	ge
 800a602:	461d      	movge	r5, r3
 800a604:	2600      	movge	r6, #0
 800a606:	2601      	movlt	r6, #1
 800a608:	f7ff fcf4 	bl	8009ff4 <_Balloc>
 800a60c:	4602      	mov	r2, r0
 800a60e:	b918      	cbnz	r0, 800a618 <__mdiff+0x5c>
 800a610:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a614:	4b2d      	ldr	r3, [pc, #180]	; (800a6cc <__mdiff+0x110>)
 800a616:	e7e5      	b.n	800a5e4 <__mdiff+0x28>
 800a618:	f102 0814 	add.w	r8, r2, #20
 800a61c:	46c2      	mov	sl, r8
 800a61e:	f04f 0c00 	mov.w	ip, #0
 800a622:	6927      	ldr	r7, [r4, #16]
 800a624:	60c6      	str	r6, [r0, #12]
 800a626:	692e      	ldr	r6, [r5, #16]
 800a628:	f104 0014 	add.w	r0, r4, #20
 800a62c:	f105 0914 	add.w	r9, r5, #20
 800a630:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a634:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a638:	3410      	adds	r4, #16
 800a63a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a63e:	f859 3b04 	ldr.w	r3, [r9], #4
 800a642:	fa1f f18b 	uxth.w	r1, fp
 800a646:	448c      	add	ip, r1
 800a648:	b299      	uxth	r1, r3
 800a64a:	0c1b      	lsrs	r3, r3, #16
 800a64c:	ebac 0101 	sub.w	r1, ip, r1
 800a650:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a654:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a658:	b289      	uxth	r1, r1
 800a65a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a65e:	454e      	cmp	r6, r9
 800a660:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a664:	f84a 3b04 	str.w	r3, [sl], #4
 800a668:	d8e7      	bhi.n	800a63a <__mdiff+0x7e>
 800a66a:	1b73      	subs	r3, r6, r5
 800a66c:	3b15      	subs	r3, #21
 800a66e:	f023 0303 	bic.w	r3, r3, #3
 800a672:	3515      	adds	r5, #21
 800a674:	3304      	adds	r3, #4
 800a676:	42ae      	cmp	r6, r5
 800a678:	bf38      	it	cc
 800a67a:	2304      	movcc	r3, #4
 800a67c:	4418      	add	r0, r3
 800a67e:	4443      	add	r3, r8
 800a680:	461e      	mov	r6, r3
 800a682:	4605      	mov	r5, r0
 800a684:	4575      	cmp	r5, lr
 800a686:	d30e      	bcc.n	800a6a6 <__mdiff+0xea>
 800a688:	f10e 0103 	add.w	r1, lr, #3
 800a68c:	1a09      	subs	r1, r1, r0
 800a68e:	f021 0103 	bic.w	r1, r1, #3
 800a692:	3803      	subs	r0, #3
 800a694:	4586      	cmp	lr, r0
 800a696:	bf38      	it	cc
 800a698:	2100      	movcc	r1, #0
 800a69a:	4419      	add	r1, r3
 800a69c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a6a0:	b18b      	cbz	r3, 800a6c6 <__mdiff+0x10a>
 800a6a2:	6117      	str	r7, [r2, #16]
 800a6a4:	e7a4      	b.n	800a5f0 <__mdiff+0x34>
 800a6a6:	f855 8b04 	ldr.w	r8, [r5], #4
 800a6aa:	fa1f f188 	uxth.w	r1, r8
 800a6ae:	4461      	add	r1, ip
 800a6b0:	140c      	asrs	r4, r1, #16
 800a6b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a6b6:	b289      	uxth	r1, r1
 800a6b8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a6bc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a6c0:	f846 1b04 	str.w	r1, [r6], #4
 800a6c4:	e7de      	b.n	800a684 <__mdiff+0xc8>
 800a6c6:	3f01      	subs	r7, #1
 800a6c8:	e7e8      	b.n	800a69c <__mdiff+0xe0>
 800a6ca:	bf00      	nop
 800a6cc:	0800bcf0 	.word	0x0800bcf0
 800a6d0:	0800bd93 	.word	0x0800bd93

0800a6d4 <__ulp>:
 800a6d4:	4b11      	ldr	r3, [pc, #68]	; (800a71c <__ulp+0x48>)
 800a6d6:	400b      	ands	r3, r1
 800a6d8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	dd02      	ble.n	800a6e6 <__ulp+0x12>
 800a6e0:	2000      	movs	r0, #0
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	4770      	bx	lr
 800a6e6:	425b      	negs	r3, r3
 800a6e8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a6ec:	f04f 0000 	mov.w	r0, #0
 800a6f0:	f04f 0100 	mov.w	r1, #0
 800a6f4:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a6f8:	da04      	bge.n	800a704 <__ulp+0x30>
 800a6fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a6fe:	fa43 f102 	asr.w	r1, r3, r2
 800a702:	4770      	bx	lr
 800a704:	f1a2 0314 	sub.w	r3, r2, #20
 800a708:	2b1e      	cmp	r3, #30
 800a70a:	bfd6      	itet	le
 800a70c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a710:	2301      	movgt	r3, #1
 800a712:	fa22 f303 	lsrle.w	r3, r2, r3
 800a716:	4618      	mov	r0, r3
 800a718:	4770      	bx	lr
 800a71a:	bf00      	nop
 800a71c:	7ff00000 	.word	0x7ff00000

0800a720 <__b2d>:
 800a720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a724:	6907      	ldr	r7, [r0, #16]
 800a726:	f100 0914 	add.w	r9, r0, #20
 800a72a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a72e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800a732:	f1a7 0804 	sub.w	r8, r7, #4
 800a736:	4630      	mov	r0, r6
 800a738:	f7ff fd4e 	bl	800a1d8 <__hi0bits>
 800a73c:	f1c0 0320 	rsb	r3, r0, #32
 800a740:	280a      	cmp	r0, #10
 800a742:	600b      	str	r3, [r1, #0]
 800a744:	491f      	ldr	r1, [pc, #124]	; (800a7c4 <__b2d+0xa4>)
 800a746:	dc17      	bgt.n	800a778 <__b2d+0x58>
 800a748:	45c1      	cmp	r9, r8
 800a74a:	bf28      	it	cs
 800a74c:	2200      	movcs	r2, #0
 800a74e:	f1c0 0c0b 	rsb	ip, r0, #11
 800a752:	fa26 f30c 	lsr.w	r3, r6, ip
 800a756:	bf38      	it	cc
 800a758:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a75c:	ea43 0501 	orr.w	r5, r3, r1
 800a760:	f100 0315 	add.w	r3, r0, #21
 800a764:	fa06 f303 	lsl.w	r3, r6, r3
 800a768:	fa22 f20c 	lsr.w	r2, r2, ip
 800a76c:	ea43 0402 	orr.w	r4, r3, r2
 800a770:	4620      	mov	r0, r4
 800a772:	4629      	mov	r1, r5
 800a774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a778:	45c1      	cmp	r9, r8
 800a77a:	bf2e      	itee	cs
 800a77c:	2200      	movcs	r2, #0
 800a77e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a782:	f1a7 0808 	subcc.w	r8, r7, #8
 800a786:	f1b0 030b 	subs.w	r3, r0, #11
 800a78a:	d016      	beq.n	800a7ba <__b2d+0x9a>
 800a78c:	f1c3 0720 	rsb	r7, r3, #32
 800a790:	fa22 f107 	lsr.w	r1, r2, r7
 800a794:	45c8      	cmp	r8, r9
 800a796:	fa06 f603 	lsl.w	r6, r6, r3
 800a79a:	ea46 0601 	orr.w	r6, r6, r1
 800a79e:	bf94      	ite	ls
 800a7a0:	2100      	movls	r1, #0
 800a7a2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800a7a6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800a7aa:	fa02 f003 	lsl.w	r0, r2, r3
 800a7ae:	40f9      	lsrs	r1, r7
 800a7b0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a7b4:	ea40 0401 	orr.w	r4, r0, r1
 800a7b8:	e7da      	b.n	800a770 <__b2d+0x50>
 800a7ba:	4614      	mov	r4, r2
 800a7bc:	ea46 0501 	orr.w	r5, r6, r1
 800a7c0:	e7d6      	b.n	800a770 <__b2d+0x50>
 800a7c2:	bf00      	nop
 800a7c4:	3ff00000 	.word	0x3ff00000

0800a7c8 <__d2b>:
 800a7c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a7cc:	2101      	movs	r1, #1
 800a7ce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a7d2:	4690      	mov	r8, r2
 800a7d4:	461d      	mov	r5, r3
 800a7d6:	f7ff fc0d 	bl	8009ff4 <_Balloc>
 800a7da:	4604      	mov	r4, r0
 800a7dc:	b930      	cbnz	r0, 800a7ec <__d2b+0x24>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	f240 310a 	movw	r1, #778	; 0x30a
 800a7e4:	4b24      	ldr	r3, [pc, #144]	; (800a878 <__d2b+0xb0>)
 800a7e6:	4825      	ldr	r0, [pc, #148]	; (800a87c <__d2b+0xb4>)
 800a7e8:	f000 fbea 	bl	800afc0 <__assert_func>
 800a7ec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a7f0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a7f4:	bb2d      	cbnz	r5, 800a842 <__d2b+0x7a>
 800a7f6:	9301      	str	r3, [sp, #4]
 800a7f8:	f1b8 0300 	subs.w	r3, r8, #0
 800a7fc:	d026      	beq.n	800a84c <__d2b+0x84>
 800a7fe:	4668      	mov	r0, sp
 800a800:	9300      	str	r3, [sp, #0]
 800a802:	f7ff fd09 	bl	800a218 <__lo0bits>
 800a806:	9900      	ldr	r1, [sp, #0]
 800a808:	b1f0      	cbz	r0, 800a848 <__d2b+0x80>
 800a80a:	9a01      	ldr	r2, [sp, #4]
 800a80c:	f1c0 0320 	rsb	r3, r0, #32
 800a810:	fa02 f303 	lsl.w	r3, r2, r3
 800a814:	430b      	orrs	r3, r1
 800a816:	40c2      	lsrs	r2, r0
 800a818:	6163      	str	r3, [r4, #20]
 800a81a:	9201      	str	r2, [sp, #4]
 800a81c:	9b01      	ldr	r3, [sp, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	bf14      	ite	ne
 800a822:	2102      	movne	r1, #2
 800a824:	2101      	moveq	r1, #1
 800a826:	61a3      	str	r3, [r4, #24]
 800a828:	6121      	str	r1, [r4, #16]
 800a82a:	b1c5      	cbz	r5, 800a85e <__d2b+0x96>
 800a82c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a830:	4405      	add	r5, r0
 800a832:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a836:	603d      	str	r5, [r7, #0]
 800a838:	6030      	str	r0, [r6, #0]
 800a83a:	4620      	mov	r0, r4
 800a83c:	b002      	add	sp, #8
 800a83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a846:	e7d6      	b.n	800a7f6 <__d2b+0x2e>
 800a848:	6161      	str	r1, [r4, #20]
 800a84a:	e7e7      	b.n	800a81c <__d2b+0x54>
 800a84c:	a801      	add	r0, sp, #4
 800a84e:	f7ff fce3 	bl	800a218 <__lo0bits>
 800a852:	2101      	movs	r1, #1
 800a854:	9b01      	ldr	r3, [sp, #4]
 800a856:	6121      	str	r1, [r4, #16]
 800a858:	6163      	str	r3, [r4, #20]
 800a85a:	3020      	adds	r0, #32
 800a85c:	e7e5      	b.n	800a82a <__d2b+0x62>
 800a85e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a862:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a866:	6038      	str	r0, [r7, #0]
 800a868:	6918      	ldr	r0, [r3, #16]
 800a86a:	f7ff fcb5 	bl	800a1d8 <__hi0bits>
 800a86e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a872:	6031      	str	r1, [r6, #0]
 800a874:	e7e1      	b.n	800a83a <__d2b+0x72>
 800a876:	bf00      	nop
 800a878:	0800bcf0 	.word	0x0800bcf0
 800a87c:	0800bd93 	.word	0x0800bd93

0800a880 <__ratio>:
 800a880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a884:	4688      	mov	r8, r1
 800a886:	4669      	mov	r1, sp
 800a888:	4681      	mov	r9, r0
 800a88a:	f7ff ff49 	bl	800a720 <__b2d>
 800a88e:	460f      	mov	r7, r1
 800a890:	4604      	mov	r4, r0
 800a892:	460d      	mov	r5, r1
 800a894:	4640      	mov	r0, r8
 800a896:	a901      	add	r1, sp, #4
 800a898:	f7ff ff42 	bl	800a720 <__b2d>
 800a89c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a8a0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a8a4:	468b      	mov	fp, r1
 800a8a6:	eba3 0c02 	sub.w	ip, r3, r2
 800a8aa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a8ae:	1a9b      	subs	r3, r3, r2
 800a8b0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	bfd5      	itete	le
 800a8b8:	460a      	movle	r2, r1
 800a8ba:	462a      	movgt	r2, r5
 800a8bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a8c0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a8c4:	bfd8      	it	le
 800a8c6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a8ca:	465b      	mov	r3, fp
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	4639      	mov	r1, r7
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	f7f5 ff2b 	bl	800072c <__aeabi_ddiv>
 800a8d6:	b003      	add	sp, #12
 800a8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a8dc <__copybits>:
 800a8dc:	3901      	subs	r1, #1
 800a8de:	b570      	push	{r4, r5, r6, lr}
 800a8e0:	1149      	asrs	r1, r1, #5
 800a8e2:	6914      	ldr	r4, [r2, #16]
 800a8e4:	3101      	adds	r1, #1
 800a8e6:	f102 0314 	add.w	r3, r2, #20
 800a8ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a8ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a8f2:	1f05      	subs	r5, r0, #4
 800a8f4:	42a3      	cmp	r3, r4
 800a8f6:	d30c      	bcc.n	800a912 <__copybits+0x36>
 800a8f8:	1aa3      	subs	r3, r4, r2
 800a8fa:	3b11      	subs	r3, #17
 800a8fc:	f023 0303 	bic.w	r3, r3, #3
 800a900:	3211      	adds	r2, #17
 800a902:	42a2      	cmp	r2, r4
 800a904:	bf88      	it	hi
 800a906:	2300      	movhi	r3, #0
 800a908:	4418      	add	r0, r3
 800a90a:	2300      	movs	r3, #0
 800a90c:	4288      	cmp	r0, r1
 800a90e:	d305      	bcc.n	800a91c <__copybits+0x40>
 800a910:	bd70      	pop	{r4, r5, r6, pc}
 800a912:	f853 6b04 	ldr.w	r6, [r3], #4
 800a916:	f845 6f04 	str.w	r6, [r5, #4]!
 800a91a:	e7eb      	b.n	800a8f4 <__copybits+0x18>
 800a91c:	f840 3b04 	str.w	r3, [r0], #4
 800a920:	e7f4      	b.n	800a90c <__copybits+0x30>

0800a922 <__any_on>:
 800a922:	f100 0214 	add.w	r2, r0, #20
 800a926:	6900      	ldr	r0, [r0, #16]
 800a928:	114b      	asrs	r3, r1, #5
 800a92a:	4298      	cmp	r0, r3
 800a92c:	b510      	push	{r4, lr}
 800a92e:	db11      	blt.n	800a954 <__any_on+0x32>
 800a930:	dd0a      	ble.n	800a948 <__any_on+0x26>
 800a932:	f011 011f 	ands.w	r1, r1, #31
 800a936:	d007      	beq.n	800a948 <__any_on+0x26>
 800a938:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a93c:	fa24 f001 	lsr.w	r0, r4, r1
 800a940:	fa00 f101 	lsl.w	r1, r0, r1
 800a944:	428c      	cmp	r4, r1
 800a946:	d10b      	bne.n	800a960 <__any_on+0x3e>
 800a948:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d803      	bhi.n	800a958 <__any_on+0x36>
 800a950:	2000      	movs	r0, #0
 800a952:	bd10      	pop	{r4, pc}
 800a954:	4603      	mov	r3, r0
 800a956:	e7f7      	b.n	800a948 <__any_on+0x26>
 800a958:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a95c:	2900      	cmp	r1, #0
 800a95e:	d0f5      	beq.n	800a94c <__any_on+0x2a>
 800a960:	2001      	movs	r0, #1
 800a962:	e7f6      	b.n	800a952 <__any_on+0x30>

0800a964 <_calloc_r>:
 800a964:	b570      	push	{r4, r5, r6, lr}
 800a966:	fba1 5402 	umull	r5, r4, r1, r2
 800a96a:	b934      	cbnz	r4, 800a97a <_calloc_r+0x16>
 800a96c:	4629      	mov	r1, r5
 800a96e:	f7fe f8a3 	bl	8008ab8 <_malloc_r>
 800a972:	4606      	mov	r6, r0
 800a974:	b928      	cbnz	r0, 800a982 <_calloc_r+0x1e>
 800a976:	4630      	mov	r0, r6
 800a978:	bd70      	pop	{r4, r5, r6, pc}
 800a97a:	220c      	movs	r2, #12
 800a97c:	2600      	movs	r6, #0
 800a97e:	6002      	str	r2, [r0, #0]
 800a980:	e7f9      	b.n	800a976 <_calloc_r+0x12>
 800a982:	462a      	mov	r2, r5
 800a984:	4621      	mov	r1, r4
 800a986:	f7fe f827 	bl	80089d8 <memset>
 800a98a:	e7f4      	b.n	800a976 <_calloc_r+0x12>

0800a98c <__ssputs_r>:
 800a98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a990:	688e      	ldr	r6, [r1, #8]
 800a992:	4682      	mov	sl, r0
 800a994:	429e      	cmp	r6, r3
 800a996:	460c      	mov	r4, r1
 800a998:	4690      	mov	r8, r2
 800a99a:	461f      	mov	r7, r3
 800a99c:	d838      	bhi.n	800aa10 <__ssputs_r+0x84>
 800a99e:	898a      	ldrh	r2, [r1, #12]
 800a9a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9a4:	d032      	beq.n	800aa0c <__ssputs_r+0x80>
 800a9a6:	6825      	ldr	r5, [r4, #0]
 800a9a8:	6909      	ldr	r1, [r1, #16]
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	eba5 0901 	sub.w	r9, r5, r1
 800a9b0:	6965      	ldr	r5, [r4, #20]
 800a9b2:	444b      	add	r3, r9
 800a9b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9bc:	106d      	asrs	r5, r5, #1
 800a9be:	429d      	cmp	r5, r3
 800a9c0:	bf38      	it	cc
 800a9c2:	461d      	movcc	r5, r3
 800a9c4:	0553      	lsls	r3, r2, #21
 800a9c6:	d531      	bpl.n	800aa2c <__ssputs_r+0xa0>
 800a9c8:	4629      	mov	r1, r5
 800a9ca:	f7fe f875 	bl	8008ab8 <_malloc_r>
 800a9ce:	4606      	mov	r6, r0
 800a9d0:	b950      	cbnz	r0, 800a9e8 <__ssputs_r+0x5c>
 800a9d2:	230c      	movs	r3, #12
 800a9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d8:	f8ca 3000 	str.w	r3, [sl]
 800a9dc:	89a3      	ldrh	r3, [r4, #12]
 800a9de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9e2:	81a3      	strh	r3, [r4, #12]
 800a9e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9e8:	464a      	mov	r2, r9
 800a9ea:	6921      	ldr	r1, [r4, #16]
 800a9ec:	f7fd ffcc 	bl	8008988 <memcpy>
 800a9f0:	89a3      	ldrh	r3, [r4, #12]
 800a9f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9fa:	81a3      	strh	r3, [r4, #12]
 800a9fc:	6126      	str	r6, [r4, #16]
 800a9fe:	444e      	add	r6, r9
 800aa00:	6026      	str	r6, [r4, #0]
 800aa02:	463e      	mov	r6, r7
 800aa04:	6165      	str	r5, [r4, #20]
 800aa06:	eba5 0509 	sub.w	r5, r5, r9
 800aa0a:	60a5      	str	r5, [r4, #8]
 800aa0c:	42be      	cmp	r6, r7
 800aa0e:	d900      	bls.n	800aa12 <__ssputs_r+0x86>
 800aa10:	463e      	mov	r6, r7
 800aa12:	4632      	mov	r2, r6
 800aa14:	4641      	mov	r1, r8
 800aa16:	6820      	ldr	r0, [r4, #0]
 800aa18:	f7fd ffc4 	bl	80089a4 <memmove>
 800aa1c:	68a3      	ldr	r3, [r4, #8]
 800aa1e:	2000      	movs	r0, #0
 800aa20:	1b9b      	subs	r3, r3, r6
 800aa22:	60a3      	str	r3, [r4, #8]
 800aa24:	6823      	ldr	r3, [r4, #0]
 800aa26:	4433      	add	r3, r6
 800aa28:	6023      	str	r3, [r4, #0]
 800aa2a:	e7db      	b.n	800a9e4 <__ssputs_r+0x58>
 800aa2c:	462a      	mov	r2, r5
 800aa2e:	f000 fafa 	bl	800b026 <_realloc_r>
 800aa32:	4606      	mov	r6, r0
 800aa34:	2800      	cmp	r0, #0
 800aa36:	d1e1      	bne.n	800a9fc <__ssputs_r+0x70>
 800aa38:	4650      	mov	r0, sl
 800aa3a:	6921      	ldr	r1, [r4, #16]
 800aa3c:	f7fd ffd4 	bl	80089e8 <_free_r>
 800aa40:	e7c7      	b.n	800a9d2 <__ssputs_r+0x46>
	...

0800aa44 <_svfiprintf_r>:
 800aa44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa48:	4698      	mov	r8, r3
 800aa4a:	898b      	ldrh	r3, [r1, #12]
 800aa4c:	4607      	mov	r7, r0
 800aa4e:	061b      	lsls	r3, r3, #24
 800aa50:	460d      	mov	r5, r1
 800aa52:	4614      	mov	r4, r2
 800aa54:	b09d      	sub	sp, #116	; 0x74
 800aa56:	d50e      	bpl.n	800aa76 <_svfiprintf_r+0x32>
 800aa58:	690b      	ldr	r3, [r1, #16]
 800aa5a:	b963      	cbnz	r3, 800aa76 <_svfiprintf_r+0x32>
 800aa5c:	2140      	movs	r1, #64	; 0x40
 800aa5e:	f7fe f82b 	bl	8008ab8 <_malloc_r>
 800aa62:	6028      	str	r0, [r5, #0]
 800aa64:	6128      	str	r0, [r5, #16]
 800aa66:	b920      	cbnz	r0, 800aa72 <_svfiprintf_r+0x2e>
 800aa68:	230c      	movs	r3, #12
 800aa6a:	603b      	str	r3, [r7, #0]
 800aa6c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa70:	e0d1      	b.n	800ac16 <_svfiprintf_r+0x1d2>
 800aa72:	2340      	movs	r3, #64	; 0x40
 800aa74:	616b      	str	r3, [r5, #20]
 800aa76:	2300      	movs	r3, #0
 800aa78:	9309      	str	r3, [sp, #36]	; 0x24
 800aa7a:	2320      	movs	r3, #32
 800aa7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa80:	2330      	movs	r3, #48	; 0x30
 800aa82:	f04f 0901 	mov.w	r9, #1
 800aa86:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ac30 <_svfiprintf_r+0x1ec>
 800aa8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa92:	4623      	mov	r3, r4
 800aa94:	469a      	mov	sl, r3
 800aa96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa9a:	b10a      	cbz	r2, 800aaa0 <_svfiprintf_r+0x5c>
 800aa9c:	2a25      	cmp	r2, #37	; 0x25
 800aa9e:	d1f9      	bne.n	800aa94 <_svfiprintf_r+0x50>
 800aaa0:	ebba 0b04 	subs.w	fp, sl, r4
 800aaa4:	d00b      	beq.n	800aabe <_svfiprintf_r+0x7a>
 800aaa6:	465b      	mov	r3, fp
 800aaa8:	4622      	mov	r2, r4
 800aaaa:	4629      	mov	r1, r5
 800aaac:	4638      	mov	r0, r7
 800aaae:	f7ff ff6d 	bl	800a98c <__ssputs_r>
 800aab2:	3001      	adds	r0, #1
 800aab4:	f000 80aa 	beq.w	800ac0c <_svfiprintf_r+0x1c8>
 800aab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aaba:	445a      	add	r2, fp
 800aabc:	9209      	str	r2, [sp, #36]	; 0x24
 800aabe:	f89a 3000 	ldrb.w	r3, [sl]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	f000 80a2 	beq.w	800ac0c <_svfiprintf_r+0x1c8>
 800aac8:	2300      	movs	r3, #0
 800aaca:	f04f 32ff 	mov.w	r2, #4294967295
 800aace:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aad2:	f10a 0a01 	add.w	sl, sl, #1
 800aad6:	9304      	str	r3, [sp, #16]
 800aad8:	9307      	str	r3, [sp, #28]
 800aada:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aade:	931a      	str	r3, [sp, #104]	; 0x68
 800aae0:	4654      	mov	r4, sl
 800aae2:	2205      	movs	r2, #5
 800aae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aae8:	4851      	ldr	r0, [pc, #324]	; (800ac30 <_svfiprintf_r+0x1ec>)
 800aaea:	f7fd ff3f 	bl	800896c <memchr>
 800aaee:	9a04      	ldr	r2, [sp, #16]
 800aaf0:	b9d8      	cbnz	r0, 800ab2a <_svfiprintf_r+0xe6>
 800aaf2:	06d0      	lsls	r0, r2, #27
 800aaf4:	bf44      	itt	mi
 800aaf6:	2320      	movmi	r3, #32
 800aaf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aafc:	0711      	lsls	r1, r2, #28
 800aafe:	bf44      	itt	mi
 800ab00:	232b      	movmi	r3, #43	; 0x2b
 800ab02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab06:	f89a 3000 	ldrb.w	r3, [sl]
 800ab0a:	2b2a      	cmp	r3, #42	; 0x2a
 800ab0c:	d015      	beq.n	800ab3a <_svfiprintf_r+0xf6>
 800ab0e:	4654      	mov	r4, sl
 800ab10:	2000      	movs	r0, #0
 800ab12:	f04f 0c0a 	mov.w	ip, #10
 800ab16:	9a07      	ldr	r2, [sp, #28]
 800ab18:	4621      	mov	r1, r4
 800ab1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab1e:	3b30      	subs	r3, #48	; 0x30
 800ab20:	2b09      	cmp	r3, #9
 800ab22:	d94e      	bls.n	800abc2 <_svfiprintf_r+0x17e>
 800ab24:	b1b0      	cbz	r0, 800ab54 <_svfiprintf_r+0x110>
 800ab26:	9207      	str	r2, [sp, #28]
 800ab28:	e014      	b.n	800ab54 <_svfiprintf_r+0x110>
 800ab2a:	eba0 0308 	sub.w	r3, r0, r8
 800ab2e:	fa09 f303 	lsl.w	r3, r9, r3
 800ab32:	4313      	orrs	r3, r2
 800ab34:	46a2      	mov	sl, r4
 800ab36:	9304      	str	r3, [sp, #16]
 800ab38:	e7d2      	b.n	800aae0 <_svfiprintf_r+0x9c>
 800ab3a:	9b03      	ldr	r3, [sp, #12]
 800ab3c:	1d19      	adds	r1, r3, #4
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	9103      	str	r1, [sp, #12]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	bfbb      	ittet	lt
 800ab46:	425b      	neglt	r3, r3
 800ab48:	f042 0202 	orrlt.w	r2, r2, #2
 800ab4c:	9307      	strge	r3, [sp, #28]
 800ab4e:	9307      	strlt	r3, [sp, #28]
 800ab50:	bfb8      	it	lt
 800ab52:	9204      	strlt	r2, [sp, #16]
 800ab54:	7823      	ldrb	r3, [r4, #0]
 800ab56:	2b2e      	cmp	r3, #46	; 0x2e
 800ab58:	d10c      	bne.n	800ab74 <_svfiprintf_r+0x130>
 800ab5a:	7863      	ldrb	r3, [r4, #1]
 800ab5c:	2b2a      	cmp	r3, #42	; 0x2a
 800ab5e:	d135      	bne.n	800abcc <_svfiprintf_r+0x188>
 800ab60:	9b03      	ldr	r3, [sp, #12]
 800ab62:	3402      	adds	r4, #2
 800ab64:	1d1a      	adds	r2, r3, #4
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	9203      	str	r2, [sp, #12]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	bfb8      	it	lt
 800ab6e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab72:	9305      	str	r3, [sp, #20]
 800ab74:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800ac34 <_svfiprintf_r+0x1f0>
 800ab78:	2203      	movs	r2, #3
 800ab7a:	4650      	mov	r0, sl
 800ab7c:	7821      	ldrb	r1, [r4, #0]
 800ab7e:	f7fd fef5 	bl	800896c <memchr>
 800ab82:	b140      	cbz	r0, 800ab96 <_svfiprintf_r+0x152>
 800ab84:	2340      	movs	r3, #64	; 0x40
 800ab86:	eba0 000a 	sub.w	r0, r0, sl
 800ab8a:	fa03 f000 	lsl.w	r0, r3, r0
 800ab8e:	9b04      	ldr	r3, [sp, #16]
 800ab90:	3401      	adds	r4, #1
 800ab92:	4303      	orrs	r3, r0
 800ab94:	9304      	str	r3, [sp, #16]
 800ab96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab9a:	2206      	movs	r2, #6
 800ab9c:	4826      	ldr	r0, [pc, #152]	; (800ac38 <_svfiprintf_r+0x1f4>)
 800ab9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aba2:	f7fd fee3 	bl	800896c <memchr>
 800aba6:	2800      	cmp	r0, #0
 800aba8:	d038      	beq.n	800ac1c <_svfiprintf_r+0x1d8>
 800abaa:	4b24      	ldr	r3, [pc, #144]	; (800ac3c <_svfiprintf_r+0x1f8>)
 800abac:	bb1b      	cbnz	r3, 800abf6 <_svfiprintf_r+0x1b2>
 800abae:	9b03      	ldr	r3, [sp, #12]
 800abb0:	3307      	adds	r3, #7
 800abb2:	f023 0307 	bic.w	r3, r3, #7
 800abb6:	3308      	adds	r3, #8
 800abb8:	9303      	str	r3, [sp, #12]
 800abba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abbc:	4433      	add	r3, r6
 800abbe:	9309      	str	r3, [sp, #36]	; 0x24
 800abc0:	e767      	b.n	800aa92 <_svfiprintf_r+0x4e>
 800abc2:	460c      	mov	r4, r1
 800abc4:	2001      	movs	r0, #1
 800abc6:	fb0c 3202 	mla	r2, ip, r2, r3
 800abca:	e7a5      	b.n	800ab18 <_svfiprintf_r+0xd4>
 800abcc:	2300      	movs	r3, #0
 800abce:	f04f 0c0a 	mov.w	ip, #10
 800abd2:	4619      	mov	r1, r3
 800abd4:	3401      	adds	r4, #1
 800abd6:	9305      	str	r3, [sp, #20]
 800abd8:	4620      	mov	r0, r4
 800abda:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abde:	3a30      	subs	r2, #48	; 0x30
 800abe0:	2a09      	cmp	r2, #9
 800abe2:	d903      	bls.n	800abec <_svfiprintf_r+0x1a8>
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d0c5      	beq.n	800ab74 <_svfiprintf_r+0x130>
 800abe8:	9105      	str	r1, [sp, #20]
 800abea:	e7c3      	b.n	800ab74 <_svfiprintf_r+0x130>
 800abec:	4604      	mov	r4, r0
 800abee:	2301      	movs	r3, #1
 800abf0:	fb0c 2101 	mla	r1, ip, r1, r2
 800abf4:	e7f0      	b.n	800abd8 <_svfiprintf_r+0x194>
 800abf6:	ab03      	add	r3, sp, #12
 800abf8:	9300      	str	r3, [sp, #0]
 800abfa:	462a      	mov	r2, r5
 800abfc:	4638      	mov	r0, r7
 800abfe:	4b10      	ldr	r3, [pc, #64]	; (800ac40 <_svfiprintf_r+0x1fc>)
 800ac00:	a904      	add	r1, sp, #16
 800ac02:	f3af 8000 	nop.w
 800ac06:	1c42      	adds	r2, r0, #1
 800ac08:	4606      	mov	r6, r0
 800ac0a:	d1d6      	bne.n	800abba <_svfiprintf_r+0x176>
 800ac0c:	89ab      	ldrh	r3, [r5, #12]
 800ac0e:	065b      	lsls	r3, r3, #25
 800ac10:	f53f af2c 	bmi.w	800aa6c <_svfiprintf_r+0x28>
 800ac14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac16:	b01d      	add	sp, #116	; 0x74
 800ac18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac1c:	ab03      	add	r3, sp, #12
 800ac1e:	9300      	str	r3, [sp, #0]
 800ac20:	462a      	mov	r2, r5
 800ac22:	4638      	mov	r0, r7
 800ac24:	4b06      	ldr	r3, [pc, #24]	; (800ac40 <_svfiprintf_r+0x1fc>)
 800ac26:	a904      	add	r1, sp, #16
 800ac28:	f000 f87c 	bl	800ad24 <_printf_i>
 800ac2c:	e7eb      	b.n	800ac06 <_svfiprintf_r+0x1c2>
 800ac2e:	bf00      	nop
 800ac30:	0800beec 	.word	0x0800beec
 800ac34:	0800bef2 	.word	0x0800bef2
 800ac38:	0800bef6 	.word	0x0800bef6
 800ac3c:	00000000 	.word	0x00000000
 800ac40:	0800a98d 	.word	0x0800a98d

0800ac44 <_printf_common>:
 800ac44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac48:	4616      	mov	r6, r2
 800ac4a:	4699      	mov	r9, r3
 800ac4c:	688a      	ldr	r2, [r1, #8]
 800ac4e:	690b      	ldr	r3, [r1, #16]
 800ac50:	4607      	mov	r7, r0
 800ac52:	4293      	cmp	r3, r2
 800ac54:	bfb8      	it	lt
 800ac56:	4613      	movlt	r3, r2
 800ac58:	6033      	str	r3, [r6, #0]
 800ac5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac5e:	460c      	mov	r4, r1
 800ac60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac64:	b10a      	cbz	r2, 800ac6a <_printf_common+0x26>
 800ac66:	3301      	adds	r3, #1
 800ac68:	6033      	str	r3, [r6, #0]
 800ac6a:	6823      	ldr	r3, [r4, #0]
 800ac6c:	0699      	lsls	r1, r3, #26
 800ac6e:	bf42      	ittt	mi
 800ac70:	6833      	ldrmi	r3, [r6, #0]
 800ac72:	3302      	addmi	r3, #2
 800ac74:	6033      	strmi	r3, [r6, #0]
 800ac76:	6825      	ldr	r5, [r4, #0]
 800ac78:	f015 0506 	ands.w	r5, r5, #6
 800ac7c:	d106      	bne.n	800ac8c <_printf_common+0x48>
 800ac7e:	f104 0a19 	add.w	sl, r4, #25
 800ac82:	68e3      	ldr	r3, [r4, #12]
 800ac84:	6832      	ldr	r2, [r6, #0]
 800ac86:	1a9b      	subs	r3, r3, r2
 800ac88:	42ab      	cmp	r3, r5
 800ac8a:	dc28      	bgt.n	800acde <_printf_common+0x9a>
 800ac8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac90:	1e13      	subs	r3, r2, #0
 800ac92:	6822      	ldr	r2, [r4, #0]
 800ac94:	bf18      	it	ne
 800ac96:	2301      	movne	r3, #1
 800ac98:	0692      	lsls	r2, r2, #26
 800ac9a:	d42d      	bmi.n	800acf8 <_printf_common+0xb4>
 800ac9c:	4649      	mov	r1, r9
 800ac9e:	4638      	mov	r0, r7
 800aca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aca4:	47c0      	blx	r8
 800aca6:	3001      	adds	r0, #1
 800aca8:	d020      	beq.n	800acec <_printf_common+0xa8>
 800acaa:	6823      	ldr	r3, [r4, #0]
 800acac:	68e5      	ldr	r5, [r4, #12]
 800acae:	f003 0306 	and.w	r3, r3, #6
 800acb2:	2b04      	cmp	r3, #4
 800acb4:	bf18      	it	ne
 800acb6:	2500      	movne	r5, #0
 800acb8:	6832      	ldr	r2, [r6, #0]
 800acba:	f04f 0600 	mov.w	r6, #0
 800acbe:	68a3      	ldr	r3, [r4, #8]
 800acc0:	bf08      	it	eq
 800acc2:	1aad      	subeq	r5, r5, r2
 800acc4:	6922      	ldr	r2, [r4, #16]
 800acc6:	bf08      	it	eq
 800acc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800accc:	4293      	cmp	r3, r2
 800acce:	bfc4      	itt	gt
 800acd0:	1a9b      	subgt	r3, r3, r2
 800acd2:	18ed      	addgt	r5, r5, r3
 800acd4:	341a      	adds	r4, #26
 800acd6:	42b5      	cmp	r5, r6
 800acd8:	d11a      	bne.n	800ad10 <_printf_common+0xcc>
 800acda:	2000      	movs	r0, #0
 800acdc:	e008      	b.n	800acf0 <_printf_common+0xac>
 800acde:	2301      	movs	r3, #1
 800ace0:	4652      	mov	r2, sl
 800ace2:	4649      	mov	r1, r9
 800ace4:	4638      	mov	r0, r7
 800ace6:	47c0      	blx	r8
 800ace8:	3001      	adds	r0, #1
 800acea:	d103      	bne.n	800acf4 <_printf_common+0xb0>
 800acec:	f04f 30ff 	mov.w	r0, #4294967295
 800acf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acf4:	3501      	adds	r5, #1
 800acf6:	e7c4      	b.n	800ac82 <_printf_common+0x3e>
 800acf8:	2030      	movs	r0, #48	; 0x30
 800acfa:	18e1      	adds	r1, r4, r3
 800acfc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad00:	1c5a      	adds	r2, r3, #1
 800ad02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad06:	4422      	add	r2, r4
 800ad08:	3302      	adds	r3, #2
 800ad0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad0e:	e7c5      	b.n	800ac9c <_printf_common+0x58>
 800ad10:	2301      	movs	r3, #1
 800ad12:	4622      	mov	r2, r4
 800ad14:	4649      	mov	r1, r9
 800ad16:	4638      	mov	r0, r7
 800ad18:	47c0      	blx	r8
 800ad1a:	3001      	adds	r0, #1
 800ad1c:	d0e6      	beq.n	800acec <_printf_common+0xa8>
 800ad1e:	3601      	adds	r6, #1
 800ad20:	e7d9      	b.n	800acd6 <_printf_common+0x92>
	...

0800ad24 <_printf_i>:
 800ad24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad28:	7e0f      	ldrb	r7, [r1, #24]
 800ad2a:	4691      	mov	r9, r2
 800ad2c:	2f78      	cmp	r7, #120	; 0x78
 800ad2e:	4680      	mov	r8, r0
 800ad30:	460c      	mov	r4, r1
 800ad32:	469a      	mov	sl, r3
 800ad34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad3a:	d807      	bhi.n	800ad4c <_printf_i+0x28>
 800ad3c:	2f62      	cmp	r7, #98	; 0x62
 800ad3e:	d80a      	bhi.n	800ad56 <_printf_i+0x32>
 800ad40:	2f00      	cmp	r7, #0
 800ad42:	f000 80d9 	beq.w	800aef8 <_printf_i+0x1d4>
 800ad46:	2f58      	cmp	r7, #88	; 0x58
 800ad48:	f000 80a4 	beq.w	800ae94 <_printf_i+0x170>
 800ad4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad54:	e03a      	b.n	800adcc <_printf_i+0xa8>
 800ad56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad5a:	2b15      	cmp	r3, #21
 800ad5c:	d8f6      	bhi.n	800ad4c <_printf_i+0x28>
 800ad5e:	a101      	add	r1, pc, #4	; (adr r1, 800ad64 <_printf_i+0x40>)
 800ad60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad64:	0800adbd 	.word	0x0800adbd
 800ad68:	0800add1 	.word	0x0800add1
 800ad6c:	0800ad4d 	.word	0x0800ad4d
 800ad70:	0800ad4d 	.word	0x0800ad4d
 800ad74:	0800ad4d 	.word	0x0800ad4d
 800ad78:	0800ad4d 	.word	0x0800ad4d
 800ad7c:	0800add1 	.word	0x0800add1
 800ad80:	0800ad4d 	.word	0x0800ad4d
 800ad84:	0800ad4d 	.word	0x0800ad4d
 800ad88:	0800ad4d 	.word	0x0800ad4d
 800ad8c:	0800ad4d 	.word	0x0800ad4d
 800ad90:	0800aedf 	.word	0x0800aedf
 800ad94:	0800ae01 	.word	0x0800ae01
 800ad98:	0800aec1 	.word	0x0800aec1
 800ad9c:	0800ad4d 	.word	0x0800ad4d
 800ada0:	0800ad4d 	.word	0x0800ad4d
 800ada4:	0800af01 	.word	0x0800af01
 800ada8:	0800ad4d 	.word	0x0800ad4d
 800adac:	0800ae01 	.word	0x0800ae01
 800adb0:	0800ad4d 	.word	0x0800ad4d
 800adb4:	0800ad4d 	.word	0x0800ad4d
 800adb8:	0800aec9 	.word	0x0800aec9
 800adbc:	682b      	ldr	r3, [r5, #0]
 800adbe:	1d1a      	adds	r2, r3, #4
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	602a      	str	r2, [r5, #0]
 800adc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800adcc:	2301      	movs	r3, #1
 800adce:	e0a4      	b.n	800af1a <_printf_i+0x1f6>
 800add0:	6820      	ldr	r0, [r4, #0]
 800add2:	6829      	ldr	r1, [r5, #0]
 800add4:	0606      	lsls	r6, r0, #24
 800add6:	f101 0304 	add.w	r3, r1, #4
 800adda:	d50a      	bpl.n	800adf2 <_printf_i+0xce>
 800addc:	680e      	ldr	r6, [r1, #0]
 800adde:	602b      	str	r3, [r5, #0]
 800ade0:	2e00      	cmp	r6, #0
 800ade2:	da03      	bge.n	800adec <_printf_i+0xc8>
 800ade4:	232d      	movs	r3, #45	; 0x2d
 800ade6:	4276      	negs	r6, r6
 800ade8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adec:	230a      	movs	r3, #10
 800adee:	485e      	ldr	r0, [pc, #376]	; (800af68 <_printf_i+0x244>)
 800adf0:	e019      	b.n	800ae26 <_printf_i+0x102>
 800adf2:	680e      	ldr	r6, [r1, #0]
 800adf4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800adf8:	602b      	str	r3, [r5, #0]
 800adfa:	bf18      	it	ne
 800adfc:	b236      	sxthne	r6, r6
 800adfe:	e7ef      	b.n	800ade0 <_printf_i+0xbc>
 800ae00:	682b      	ldr	r3, [r5, #0]
 800ae02:	6820      	ldr	r0, [r4, #0]
 800ae04:	1d19      	adds	r1, r3, #4
 800ae06:	6029      	str	r1, [r5, #0]
 800ae08:	0601      	lsls	r1, r0, #24
 800ae0a:	d501      	bpl.n	800ae10 <_printf_i+0xec>
 800ae0c:	681e      	ldr	r6, [r3, #0]
 800ae0e:	e002      	b.n	800ae16 <_printf_i+0xf2>
 800ae10:	0646      	lsls	r6, r0, #25
 800ae12:	d5fb      	bpl.n	800ae0c <_printf_i+0xe8>
 800ae14:	881e      	ldrh	r6, [r3, #0]
 800ae16:	2f6f      	cmp	r7, #111	; 0x6f
 800ae18:	bf0c      	ite	eq
 800ae1a:	2308      	moveq	r3, #8
 800ae1c:	230a      	movne	r3, #10
 800ae1e:	4852      	ldr	r0, [pc, #328]	; (800af68 <_printf_i+0x244>)
 800ae20:	2100      	movs	r1, #0
 800ae22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae26:	6865      	ldr	r5, [r4, #4]
 800ae28:	2d00      	cmp	r5, #0
 800ae2a:	bfa8      	it	ge
 800ae2c:	6821      	ldrge	r1, [r4, #0]
 800ae2e:	60a5      	str	r5, [r4, #8]
 800ae30:	bfa4      	itt	ge
 800ae32:	f021 0104 	bicge.w	r1, r1, #4
 800ae36:	6021      	strge	r1, [r4, #0]
 800ae38:	b90e      	cbnz	r6, 800ae3e <_printf_i+0x11a>
 800ae3a:	2d00      	cmp	r5, #0
 800ae3c:	d04d      	beq.n	800aeda <_printf_i+0x1b6>
 800ae3e:	4615      	mov	r5, r2
 800ae40:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae44:	fb03 6711 	mls	r7, r3, r1, r6
 800ae48:	5dc7      	ldrb	r7, [r0, r7]
 800ae4a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae4e:	4637      	mov	r7, r6
 800ae50:	42bb      	cmp	r3, r7
 800ae52:	460e      	mov	r6, r1
 800ae54:	d9f4      	bls.n	800ae40 <_printf_i+0x11c>
 800ae56:	2b08      	cmp	r3, #8
 800ae58:	d10b      	bne.n	800ae72 <_printf_i+0x14e>
 800ae5a:	6823      	ldr	r3, [r4, #0]
 800ae5c:	07de      	lsls	r6, r3, #31
 800ae5e:	d508      	bpl.n	800ae72 <_printf_i+0x14e>
 800ae60:	6923      	ldr	r3, [r4, #16]
 800ae62:	6861      	ldr	r1, [r4, #4]
 800ae64:	4299      	cmp	r1, r3
 800ae66:	bfde      	ittt	le
 800ae68:	2330      	movle	r3, #48	; 0x30
 800ae6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae72:	1b52      	subs	r2, r2, r5
 800ae74:	6122      	str	r2, [r4, #16]
 800ae76:	464b      	mov	r3, r9
 800ae78:	4621      	mov	r1, r4
 800ae7a:	4640      	mov	r0, r8
 800ae7c:	f8cd a000 	str.w	sl, [sp]
 800ae80:	aa03      	add	r2, sp, #12
 800ae82:	f7ff fedf 	bl	800ac44 <_printf_common>
 800ae86:	3001      	adds	r0, #1
 800ae88:	d14c      	bne.n	800af24 <_printf_i+0x200>
 800ae8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae8e:	b004      	add	sp, #16
 800ae90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae94:	4834      	ldr	r0, [pc, #208]	; (800af68 <_printf_i+0x244>)
 800ae96:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ae9a:	6829      	ldr	r1, [r5, #0]
 800ae9c:	6823      	ldr	r3, [r4, #0]
 800ae9e:	f851 6b04 	ldr.w	r6, [r1], #4
 800aea2:	6029      	str	r1, [r5, #0]
 800aea4:	061d      	lsls	r5, r3, #24
 800aea6:	d514      	bpl.n	800aed2 <_printf_i+0x1ae>
 800aea8:	07df      	lsls	r7, r3, #31
 800aeaa:	bf44      	itt	mi
 800aeac:	f043 0320 	orrmi.w	r3, r3, #32
 800aeb0:	6023      	strmi	r3, [r4, #0]
 800aeb2:	b91e      	cbnz	r6, 800aebc <_printf_i+0x198>
 800aeb4:	6823      	ldr	r3, [r4, #0]
 800aeb6:	f023 0320 	bic.w	r3, r3, #32
 800aeba:	6023      	str	r3, [r4, #0]
 800aebc:	2310      	movs	r3, #16
 800aebe:	e7af      	b.n	800ae20 <_printf_i+0xfc>
 800aec0:	6823      	ldr	r3, [r4, #0]
 800aec2:	f043 0320 	orr.w	r3, r3, #32
 800aec6:	6023      	str	r3, [r4, #0]
 800aec8:	2378      	movs	r3, #120	; 0x78
 800aeca:	4828      	ldr	r0, [pc, #160]	; (800af6c <_printf_i+0x248>)
 800aecc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aed0:	e7e3      	b.n	800ae9a <_printf_i+0x176>
 800aed2:	0659      	lsls	r1, r3, #25
 800aed4:	bf48      	it	mi
 800aed6:	b2b6      	uxthmi	r6, r6
 800aed8:	e7e6      	b.n	800aea8 <_printf_i+0x184>
 800aeda:	4615      	mov	r5, r2
 800aedc:	e7bb      	b.n	800ae56 <_printf_i+0x132>
 800aede:	682b      	ldr	r3, [r5, #0]
 800aee0:	6826      	ldr	r6, [r4, #0]
 800aee2:	1d18      	adds	r0, r3, #4
 800aee4:	6961      	ldr	r1, [r4, #20]
 800aee6:	6028      	str	r0, [r5, #0]
 800aee8:	0635      	lsls	r5, r6, #24
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	d501      	bpl.n	800aef2 <_printf_i+0x1ce>
 800aeee:	6019      	str	r1, [r3, #0]
 800aef0:	e002      	b.n	800aef8 <_printf_i+0x1d4>
 800aef2:	0670      	lsls	r0, r6, #25
 800aef4:	d5fb      	bpl.n	800aeee <_printf_i+0x1ca>
 800aef6:	8019      	strh	r1, [r3, #0]
 800aef8:	2300      	movs	r3, #0
 800aefa:	4615      	mov	r5, r2
 800aefc:	6123      	str	r3, [r4, #16]
 800aefe:	e7ba      	b.n	800ae76 <_printf_i+0x152>
 800af00:	682b      	ldr	r3, [r5, #0]
 800af02:	2100      	movs	r1, #0
 800af04:	1d1a      	adds	r2, r3, #4
 800af06:	602a      	str	r2, [r5, #0]
 800af08:	681d      	ldr	r5, [r3, #0]
 800af0a:	6862      	ldr	r2, [r4, #4]
 800af0c:	4628      	mov	r0, r5
 800af0e:	f7fd fd2d 	bl	800896c <memchr>
 800af12:	b108      	cbz	r0, 800af18 <_printf_i+0x1f4>
 800af14:	1b40      	subs	r0, r0, r5
 800af16:	6060      	str	r0, [r4, #4]
 800af18:	6863      	ldr	r3, [r4, #4]
 800af1a:	6123      	str	r3, [r4, #16]
 800af1c:	2300      	movs	r3, #0
 800af1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af22:	e7a8      	b.n	800ae76 <_printf_i+0x152>
 800af24:	462a      	mov	r2, r5
 800af26:	4649      	mov	r1, r9
 800af28:	4640      	mov	r0, r8
 800af2a:	6923      	ldr	r3, [r4, #16]
 800af2c:	47d0      	blx	sl
 800af2e:	3001      	adds	r0, #1
 800af30:	d0ab      	beq.n	800ae8a <_printf_i+0x166>
 800af32:	6823      	ldr	r3, [r4, #0]
 800af34:	079b      	lsls	r3, r3, #30
 800af36:	d413      	bmi.n	800af60 <_printf_i+0x23c>
 800af38:	68e0      	ldr	r0, [r4, #12]
 800af3a:	9b03      	ldr	r3, [sp, #12]
 800af3c:	4298      	cmp	r0, r3
 800af3e:	bfb8      	it	lt
 800af40:	4618      	movlt	r0, r3
 800af42:	e7a4      	b.n	800ae8e <_printf_i+0x16a>
 800af44:	2301      	movs	r3, #1
 800af46:	4632      	mov	r2, r6
 800af48:	4649      	mov	r1, r9
 800af4a:	4640      	mov	r0, r8
 800af4c:	47d0      	blx	sl
 800af4e:	3001      	adds	r0, #1
 800af50:	d09b      	beq.n	800ae8a <_printf_i+0x166>
 800af52:	3501      	adds	r5, #1
 800af54:	68e3      	ldr	r3, [r4, #12]
 800af56:	9903      	ldr	r1, [sp, #12]
 800af58:	1a5b      	subs	r3, r3, r1
 800af5a:	42ab      	cmp	r3, r5
 800af5c:	dcf2      	bgt.n	800af44 <_printf_i+0x220>
 800af5e:	e7eb      	b.n	800af38 <_printf_i+0x214>
 800af60:	2500      	movs	r5, #0
 800af62:	f104 0619 	add.w	r6, r4, #25
 800af66:	e7f5      	b.n	800af54 <_printf_i+0x230>
 800af68:	0800befd 	.word	0x0800befd
 800af6c:	0800bf0e 	.word	0x0800bf0e

0800af70 <nan>:
 800af70:	2000      	movs	r0, #0
 800af72:	4901      	ldr	r1, [pc, #4]	; (800af78 <nan+0x8>)
 800af74:	4770      	bx	lr
 800af76:	bf00      	nop
 800af78:	7ff80000 	.word	0x7ff80000

0800af7c <strncmp>:
 800af7c:	4603      	mov	r3, r0
 800af7e:	b510      	push	{r4, lr}
 800af80:	b172      	cbz	r2, 800afa0 <strncmp+0x24>
 800af82:	3901      	subs	r1, #1
 800af84:	1884      	adds	r4, r0, r2
 800af86:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af8a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800af8e:	4290      	cmp	r0, r2
 800af90:	d101      	bne.n	800af96 <strncmp+0x1a>
 800af92:	42a3      	cmp	r3, r4
 800af94:	d101      	bne.n	800af9a <strncmp+0x1e>
 800af96:	1a80      	subs	r0, r0, r2
 800af98:	bd10      	pop	{r4, pc}
 800af9a:	2800      	cmp	r0, #0
 800af9c:	d1f3      	bne.n	800af86 <strncmp+0xa>
 800af9e:	e7fa      	b.n	800af96 <strncmp+0x1a>
 800afa0:	4610      	mov	r0, r2
 800afa2:	e7f9      	b.n	800af98 <strncmp+0x1c>

0800afa4 <__ascii_wctomb>:
 800afa4:	4603      	mov	r3, r0
 800afa6:	4608      	mov	r0, r1
 800afa8:	b141      	cbz	r1, 800afbc <__ascii_wctomb+0x18>
 800afaa:	2aff      	cmp	r2, #255	; 0xff
 800afac:	d904      	bls.n	800afb8 <__ascii_wctomb+0x14>
 800afae:	228a      	movs	r2, #138	; 0x8a
 800afb0:	f04f 30ff 	mov.w	r0, #4294967295
 800afb4:	601a      	str	r2, [r3, #0]
 800afb6:	4770      	bx	lr
 800afb8:	2001      	movs	r0, #1
 800afba:	700a      	strb	r2, [r1, #0]
 800afbc:	4770      	bx	lr
	...

0800afc0 <__assert_func>:
 800afc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afc2:	4614      	mov	r4, r2
 800afc4:	461a      	mov	r2, r3
 800afc6:	4b09      	ldr	r3, [pc, #36]	; (800afec <__assert_func+0x2c>)
 800afc8:	4605      	mov	r5, r0
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	68d8      	ldr	r0, [r3, #12]
 800afce:	b14c      	cbz	r4, 800afe4 <__assert_func+0x24>
 800afd0:	4b07      	ldr	r3, [pc, #28]	; (800aff0 <__assert_func+0x30>)
 800afd2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800afd6:	9100      	str	r1, [sp, #0]
 800afd8:	462b      	mov	r3, r5
 800afda:	4906      	ldr	r1, [pc, #24]	; (800aff4 <__assert_func+0x34>)
 800afdc:	f000 f80e 	bl	800affc <fiprintf>
 800afe0:	f7fd fc82 	bl	80088e8 <abort>
 800afe4:	4b04      	ldr	r3, [pc, #16]	; (800aff8 <__assert_func+0x38>)
 800afe6:	461c      	mov	r4, r3
 800afe8:	e7f3      	b.n	800afd2 <__assert_func+0x12>
 800afea:	bf00      	nop
 800afec:	2000017c 	.word	0x2000017c
 800aff0:	0800bf1f 	.word	0x0800bf1f
 800aff4:	0800bf2c 	.word	0x0800bf2c
 800aff8:	0800bf5a 	.word	0x0800bf5a

0800affc <fiprintf>:
 800affc:	b40e      	push	{r1, r2, r3}
 800affe:	b503      	push	{r0, r1, lr}
 800b000:	4601      	mov	r1, r0
 800b002:	ab03      	add	r3, sp, #12
 800b004:	4805      	ldr	r0, [pc, #20]	; (800b01c <fiprintf+0x20>)
 800b006:	f853 2b04 	ldr.w	r2, [r3], #4
 800b00a:	6800      	ldr	r0, [r0, #0]
 800b00c:	9301      	str	r3, [sp, #4]
 800b00e:	f000 f861 	bl	800b0d4 <_vfiprintf_r>
 800b012:	b002      	add	sp, #8
 800b014:	f85d eb04 	ldr.w	lr, [sp], #4
 800b018:	b003      	add	sp, #12
 800b01a:	4770      	bx	lr
 800b01c:	2000017c 	.word	0x2000017c

0800b020 <__retarget_lock_init_recursive>:
 800b020:	4770      	bx	lr

0800b022 <__retarget_lock_acquire_recursive>:
 800b022:	4770      	bx	lr

0800b024 <__retarget_lock_release_recursive>:
 800b024:	4770      	bx	lr

0800b026 <_realloc_r>:
 800b026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b02a:	4680      	mov	r8, r0
 800b02c:	4614      	mov	r4, r2
 800b02e:	460e      	mov	r6, r1
 800b030:	b921      	cbnz	r1, 800b03c <_realloc_r+0x16>
 800b032:	4611      	mov	r1, r2
 800b034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b038:	f7fd bd3e 	b.w	8008ab8 <_malloc_r>
 800b03c:	b92a      	cbnz	r2, 800b04a <_realloc_r+0x24>
 800b03e:	f7fd fcd3 	bl	80089e8 <_free_r>
 800b042:	4625      	mov	r5, r4
 800b044:	4628      	mov	r0, r5
 800b046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b04a:	f000 fc4b 	bl	800b8e4 <_malloc_usable_size_r>
 800b04e:	4284      	cmp	r4, r0
 800b050:	4607      	mov	r7, r0
 800b052:	d802      	bhi.n	800b05a <_realloc_r+0x34>
 800b054:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b058:	d812      	bhi.n	800b080 <_realloc_r+0x5a>
 800b05a:	4621      	mov	r1, r4
 800b05c:	4640      	mov	r0, r8
 800b05e:	f7fd fd2b 	bl	8008ab8 <_malloc_r>
 800b062:	4605      	mov	r5, r0
 800b064:	2800      	cmp	r0, #0
 800b066:	d0ed      	beq.n	800b044 <_realloc_r+0x1e>
 800b068:	42bc      	cmp	r4, r7
 800b06a:	4622      	mov	r2, r4
 800b06c:	4631      	mov	r1, r6
 800b06e:	bf28      	it	cs
 800b070:	463a      	movcs	r2, r7
 800b072:	f7fd fc89 	bl	8008988 <memcpy>
 800b076:	4631      	mov	r1, r6
 800b078:	4640      	mov	r0, r8
 800b07a:	f7fd fcb5 	bl	80089e8 <_free_r>
 800b07e:	e7e1      	b.n	800b044 <_realloc_r+0x1e>
 800b080:	4635      	mov	r5, r6
 800b082:	e7df      	b.n	800b044 <_realloc_r+0x1e>

0800b084 <__sfputc_r>:
 800b084:	6893      	ldr	r3, [r2, #8]
 800b086:	b410      	push	{r4}
 800b088:	3b01      	subs	r3, #1
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	6093      	str	r3, [r2, #8]
 800b08e:	da07      	bge.n	800b0a0 <__sfputc_r+0x1c>
 800b090:	6994      	ldr	r4, [r2, #24]
 800b092:	42a3      	cmp	r3, r4
 800b094:	db01      	blt.n	800b09a <__sfputc_r+0x16>
 800b096:	290a      	cmp	r1, #10
 800b098:	d102      	bne.n	800b0a0 <__sfputc_r+0x1c>
 800b09a:	bc10      	pop	{r4}
 800b09c:	f000 b94a 	b.w	800b334 <__swbuf_r>
 800b0a0:	6813      	ldr	r3, [r2, #0]
 800b0a2:	1c58      	adds	r0, r3, #1
 800b0a4:	6010      	str	r0, [r2, #0]
 800b0a6:	7019      	strb	r1, [r3, #0]
 800b0a8:	4608      	mov	r0, r1
 800b0aa:	bc10      	pop	{r4}
 800b0ac:	4770      	bx	lr

0800b0ae <__sfputs_r>:
 800b0ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b0:	4606      	mov	r6, r0
 800b0b2:	460f      	mov	r7, r1
 800b0b4:	4614      	mov	r4, r2
 800b0b6:	18d5      	adds	r5, r2, r3
 800b0b8:	42ac      	cmp	r4, r5
 800b0ba:	d101      	bne.n	800b0c0 <__sfputs_r+0x12>
 800b0bc:	2000      	movs	r0, #0
 800b0be:	e007      	b.n	800b0d0 <__sfputs_r+0x22>
 800b0c0:	463a      	mov	r2, r7
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0c8:	f7ff ffdc 	bl	800b084 <__sfputc_r>
 800b0cc:	1c43      	adds	r3, r0, #1
 800b0ce:	d1f3      	bne.n	800b0b8 <__sfputs_r+0xa>
 800b0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0d4 <_vfiprintf_r>:
 800b0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d8:	460d      	mov	r5, r1
 800b0da:	4614      	mov	r4, r2
 800b0dc:	4698      	mov	r8, r3
 800b0de:	4606      	mov	r6, r0
 800b0e0:	b09d      	sub	sp, #116	; 0x74
 800b0e2:	b118      	cbz	r0, 800b0ec <_vfiprintf_r+0x18>
 800b0e4:	6983      	ldr	r3, [r0, #24]
 800b0e6:	b90b      	cbnz	r3, 800b0ec <_vfiprintf_r+0x18>
 800b0e8:	f000 fafa 	bl	800b6e0 <__sinit>
 800b0ec:	4b89      	ldr	r3, [pc, #548]	; (800b314 <_vfiprintf_r+0x240>)
 800b0ee:	429d      	cmp	r5, r3
 800b0f0:	d11b      	bne.n	800b12a <_vfiprintf_r+0x56>
 800b0f2:	6875      	ldr	r5, [r6, #4]
 800b0f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0f6:	07d9      	lsls	r1, r3, #31
 800b0f8:	d405      	bmi.n	800b106 <_vfiprintf_r+0x32>
 800b0fa:	89ab      	ldrh	r3, [r5, #12]
 800b0fc:	059a      	lsls	r2, r3, #22
 800b0fe:	d402      	bmi.n	800b106 <_vfiprintf_r+0x32>
 800b100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b102:	f7ff ff8e 	bl	800b022 <__retarget_lock_acquire_recursive>
 800b106:	89ab      	ldrh	r3, [r5, #12]
 800b108:	071b      	lsls	r3, r3, #28
 800b10a:	d501      	bpl.n	800b110 <_vfiprintf_r+0x3c>
 800b10c:	692b      	ldr	r3, [r5, #16]
 800b10e:	b9eb      	cbnz	r3, 800b14c <_vfiprintf_r+0x78>
 800b110:	4629      	mov	r1, r5
 800b112:	4630      	mov	r0, r6
 800b114:	f000 f960 	bl	800b3d8 <__swsetup_r>
 800b118:	b1c0      	cbz	r0, 800b14c <_vfiprintf_r+0x78>
 800b11a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b11c:	07dc      	lsls	r4, r3, #31
 800b11e:	d50e      	bpl.n	800b13e <_vfiprintf_r+0x6a>
 800b120:	f04f 30ff 	mov.w	r0, #4294967295
 800b124:	b01d      	add	sp, #116	; 0x74
 800b126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b12a:	4b7b      	ldr	r3, [pc, #492]	; (800b318 <_vfiprintf_r+0x244>)
 800b12c:	429d      	cmp	r5, r3
 800b12e:	d101      	bne.n	800b134 <_vfiprintf_r+0x60>
 800b130:	68b5      	ldr	r5, [r6, #8]
 800b132:	e7df      	b.n	800b0f4 <_vfiprintf_r+0x20>
 800b134:	4b79      	ldr	r3, [pc, #484]	; (800b31c <_vfiprintf_r+0x248>)
 800b136:	429d      	cmp	r5, r3
 800b138:	bf08      	it	eq
 800b13a:	68f5      	ldreq	r5, [r6, #12]
 800b13c:	e7da      	b.n	800b0f4 <_vfiprintf_r+0x20>
 800b13e:	89ab      	ldrh	r3, [r5, #12]
 800b140:	0598      	lsls	r0, r3, #22
 800b142:	d4ed      	bmi.n	800b120 <_vfiprintf_r+0x4c>
 800b144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b146:	f7ff ff6d 	bl	800b024 <__retarget_lock_release_recursive>
 800b14a:	e7e9      	b.n	800b120 <_vfiprintf_r+0x4c>
 800b14c:	2300      	movs	r3, #0
 800b14e:	9309      	str	r3, [sp, #36]	; 0x24
 800b150:	2320      	movs	r3, #32
 800b152:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b156:	2330      	movs	r3, #48	; 0x30
 800b158:	f04f 0901 	mov.w	r9, #1
 800b15c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b160:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b320 <_vfiprintf_r+0x24c>
 800b164:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b168:	4623      	mov	r3, r4
 800b16a:	469a      	mov	sl, r3
 800b16c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b170:	b10a      	cbz	r2, 800b176 <_vfiprintf_r+0xa2>
 800b172:	2a25      	cmp	r2, #37	; 0x25
 800b174:	d1f9      	bne.n	800b16a <_vfiprintf_r+0x96>
 800b176:	ebba 0b04 	subs.w	fp, sl, r4
 800b17a:	d00b      	beq.n	800b194 <_vfiprintf_r+0xc0>
 800b17c:	465b      	mov	r3, fp
 800b17e:	4622      	mov	r2, r4
 800b180:	4629      	mov	r1, r5
 800b182:	4630      	mov	r0, r6
 800b184:	f7ff ff93 	bl	800b0ae <__sfputs_r>
 800b188:	3001      	adds	r0, #1
 800b18a:	f000 80aa 	beq.w	800b2e2 <_vfiprintf_r+0x20e>
 800b18e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b190:	445a      	add	r2, fp
 800b192:	9209      	str	r2, [sp, #36]	; 0x24
 800b194:	f89a 3000 	ldrb.w	r3, [sl]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f000 80a2 	beq.w	800b2e2 <_vfiprintf_r+0x20e>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b1a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1a8:	f10a 0a01 	add.w	sl, sl, #1
 800b1ac:	9304      	str	r3, [sp, #16]
 800b1ae:	9307      	str	r3, [sp, #28]
 800b1b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1b4:	931a      	str	r3, [sp, #104]	; 0x68
 800b1b6:	4654      	mov	r4, sl
 800b1b8:	2205      	movs	r2, #5
 800b1ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1be:	4858      	ldr	r0, [pc, #352]	; (800b320 <_vfiprintf_r+0x24c>)
 800b1c0:	f7fd fbd4 	bl	800896c <memchr>
 800b1c4:	9a04      	ldr	r2, [sp, #16]
 800b1c6:	b9d8      	cbnz	r0, 800b200 <_vfiprintf_r+0x12c>
 800b1c8:	06d1      	lsls	r1, r2, #27
 800b1ca:	bf44      	itt	mi
 800b1cc:	2320      	movmi	r3, #32
 800b1ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1d2:	0713      	lsls	r3, r2, #28
 800b1d4:	bf44      	itt	mi
 800b1d6:	232b      	movmi	r3, #43	; 0x2b
 800b1d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b1e0:	2b2a      	cmp	r3, #42	; 0x2a
 800b1e2:	d015      	beq.n	800b210 <_vfiprintf_r+0x13c>
 800b1e4:	4654      	mov	r4, sl
 800b1e6:	2000      	movs	r0, #0
 800b1e8:	f04f 0c0a 	mov.w	ip, #10
 800b1ec:	9a07      	ldr	r2, [sp, #28]
 800b1ee:	4621      	mov	r1, r4
 800b1f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1f4:	3b30      	subs	r3, #48	; 0x30
 800b1f6:	2b09      	cmp	r3, #9
 800b1f8:	d94e      	bls.n	800b298 <_vfiprintf_r+0x1c4>
 800b1fa:	b1b0      	cbz	r0, 800b22a <_vfiprintf_r+0x156>
 800b1fc:	9207      	str	r2, [sp, #28]
 800b1fe:	e014      	b.n	800b22a <_vfiprintf_r+0x156>
 800b200:	eba0 0308 	sub.w	r3, r0, r8
 800b204:	fa09 f303 	lsl.w	r3, r9, r3
 800b208:	4313      	orrs	r3, r2
 800b20a:	46a2      	mov	sl, r4
 800b20c:	9304      	str	r3, [sp, #16]
 800b20e:	e7d2      	b.n	800b1b6 <_vfiprintf_r+0xe2>
 800b210:	9b03      	ldr	r3, [sp, #12]
 800b212:	1d19      	adds	r1, r3, #4
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	9103      	str	r1, [sp, #12]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	bfbb      	ittet	lt
 800b21c:	425b      	neglt	r3, r3
 800b21e:	f042 0202 	orrlt.w	r2, r2, #2
 800b222:	9307      	strge	r3, [sp, #28]
 800b224:	9307      	strlt	r3, [sp, #28]
 800b226:	bfb8      	it	lt
 800b228:	9204      	strlt	r2, [sp, #16]
 800b22a:	7823      	ldrb	r3, [r4, #0]
 800b22c:	2b2e      	cmp	r3, #46	; 0x2e
 800b22e:	d10c      	bne.n	800b24a <_vfiprintf_r+0x176>
 800b230:	7863      	ldrb	r3, [r4, #1]
 800b232:	2b2a      	cmp	r3, #42	; 0x2a
 800b234:	d135      	bne.n	800b2a2 <_vfiprintf_r+0x1ce>
 800b236:	9b03      	ldr	r3, [sp, #12]
 800b238:	3402      	adds	r4, #2
 800b23a:	1d1a      	adds	r2, r3, #4
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	9203      	str	r2, [sp, #12]
 800b240:	2b00      	cmp	r3, #0
 800b242:	bfb8      	it	lt
 800b244:	f04f 33ff 	movlt.w	r3, #4294967295
 800b248:	9305      	str	r3, [sp, #20]
 800b24a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b324 <_vfiprintf_r+0x250>
 800b24e:	2203      	movs	r2, #3
 800b250:	4650      	mov	r0, sl
 800b252:	7821      	ldrb	r1, [r4, #0]
 800b254:	f7fd fb8a 	bl	800896c <memchr>
 800b258:	b140      	cbz	r0, 800b26c <_vfiprintf_r+0x198>
 800b25a:	2340      	movs	r3, #64	; 0x40
 800b25c:	eba0 000a 	sub.w	r0, r0, sl
 800b260:	fa03 f000 	lsl.w	r0, r3, r0
 800b264:	9b04      	ldr	r3, [sp, #16]
 800b266:	3401      	adds	r4, #1
 800b268:	4303      	orrs	r3, r0
 800b26a:	9304      	str	r3, [sp, #16]
 800b26c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b270:	2206      	movs	r2, #6
 800b272:	482d      	ldr	r0, [pc, #180]	; (800b328 <_vfiprintf_r+0x254>)
 800b274:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b278:	f7fd fb78 	bl	800896c <memchr>
 800b27c:	2800      	cmp	r0, #0
 800b27e:	d03f      	beq.n	800b300 <_vfiprintf_r+0x22c>
 800b280:	4b2a      	ldr	r3, [pc, #168]	; (800b32c <_vfiprintf_r+0x258>)
 800b282:	bb1b      	cbnz	r3, 800b2cc <_vfiprintf_r+0x1f8>
 800b284:	9b03      	ldr	r3, [sp, #12]
 800b286:	3307      	adds	r3, #7
 800b288:	f023 0307 	bic.w	r3, r3, #7
 800b28c:	3308      	adds	r3, #8
 800b28e:	9303      	str	r3, [sp, #12]
 800b290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b292:	443b      	add	r3, r7
 800b294:	9309      	str	r3, [sp, #36]	; 0x24
 800b296:	e767      	b.n	800b168 <_vfiprintf_r+0x94>
 800b298:	460c      	mov	r4, r1
 800b29a:	2001      	movs	r0, #1
 800b29c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2a0:	e7a5      	b.n	800b1ee <_vfiprintf_r+0x11a>
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	f04f 0c0a 	mov.w	ip, #10
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	3401      	adds	r4, #1
 800b2ac:	9305      	str	r3, [sp, #20]
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2b4:	3a30      	subs	r2, #48	; 0x30
 800b2b6:	2a09      	cmp	r2, #9
 800b2b8:	d903      	bls.n	800b2c2 <_vfiprintf_r+0x1ee>
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d0c5      	beq.n	800b24a <_vfiprintf_r+0x176>
 800b2be:	9105      	str	r1, [sp, #20]
 800b2c0:	e7c3      	b.n	800b24a <_vfiprintf_r+0x176>
 800b2c2:	4604      	mov	r4, r0
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2ca:	e7f0      	b.n	800b2ae <_vfiprintf_r+0x1da>
 800b2cc:	ab03      	add	r3, sp, #12
 800b2ce:	9300      	str	r3, [sp, #0]
 800b2d0:	462a      	mov	r2, r5
 800b2d2:	4630      	mov	r0, r6
 800b2d4:	4b16      	ldr	r3, [pc, #88]	; (800b330 <_vfiprintf_r+0x25c>)
 800b2d6:	a904      	add	r1, sp, #16
 800b2d8:	f3af 8000 	nop.w
 800b2dc:	4607      	mov	r7, r0
 800b2de:	1c78      	adds	r0, r7, #1
 800b2e0:	d1d6      	bne.n	800b290 <_vfiprintf_r+0x1bc>
 800b2e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2e4:	07d9      	lsls	r1, r3, #31
 800b2e6:	d405      	bmi.n	800b2f4 <_vfiprintf_r+0x220>
 800b2e8:	89ab      	ldrh	r3, [r5, #12]
 800b2ea:	059a      	lsls	r2, r3, #22
 800b2ec:	d402      	bmi.n	800b2f4 <_vfiprintf_r+0x220>
 800b2ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2f0:	f7ff fe98 	bl	800b024 <__retarget_lock_release_recursive>
 800b2f4:	89ab      	ldrh	r3, [r5, #12]
 800b2f6:	065b      	lsls	r3, r3, #25
 800b2f8:	f53f af12 	bmi.w	800b120 <_vfiprintf_r+0x4c>
 800b2fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2fe:	e711      	b.n	800b124 <_vfiprintf_r+0x50>
 800b300:	ab03      	add	r3, sp, #12
 800b302:	9300      	str	r3, [sp, #0]
 800b304:	462a      	mov	r2, r5
 800b306:	4630      	mov	r0, r6
 800b308:	4b09      	ldr	r3, [pc, #36]	; (800b330 <_vfiprintf_r+0x25c>)
 800b30a:	a904      	add	r1, sp, #16
 800b30c:	f7ff fd0a 	bl	800ad24 <_printf_i>
 800b310:	e7e4      	b.n	800b2dc <_vfiprintf_r+0x208>
 800b312:	bf00      	nop
 800b314:	0800c07c 	.word	0x0800c07c
 800b318:	0800c09c 	.word	0x0800c09c
 800b31c:	0800c05c 	.word	0x0800c05c
 800b320:	0800beec 	.word	0x0800beec
 800b324:	0800bef2 	.word	0x0800bef2
 800b328:	0800bef6 	.word	0x0800bef6
 800b32c:	00000000 	.word	0x00000000
 800b330:	0800b0af 	.word	0x0800b0af

0800b334 <__swbuf_r>:
 800b334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b336:	460e      	mov	r6, r1
 800b338:	4614      	mov	r4, r2
 800b33a:	4605      	mov	r5, r0
 800b33c:	b118      	cbz	r0, 800b346 <__swbuf_r+0x12>
 800b33e:	6983      	ldr	r3, [r0, #24]
 800b340:	b90b      	cbnz	r3, 800b346 <__swbuf_r+0x12>
 800b342:	f000 f9cd 	bl	800b6e0 <__sinit>
 800b346:	4b21      	ldr	r3, [pc, #132]	; (800b3cc <__swbuf_r+0x98>)
 800b348:	429c      	cmp	r4, r3
 800b34a:	d12b      	bne.n	800b3a4 <__swbuf_r+0x70>
 800b34c:	686c      	ldr	r4, [r5, #4]
 800b34e:	69a3      	ldr	r3, [r4, #24]
 800b350:	60a3      	str	r3, [r4, #8]
 800b352:	89a3      	ldrh	r3, [r4, #12]
 800b354:	071a      	lsls	r2, r3, #28
 800b356:	d52f      	bpl.n	800b3b8 <__swbuf_r+0x84>
 800b358:	6923      	ldr	r3, [r4, #16]
 800b35a:	b36b      	cbz	r3, 800b3b8 <__swbuf_r+0x84>
 800b35c:	6923      	ldr	r3, [r4, #16]
 800b35e:	6820      	ldr	r0, [r4, #0]
 800b360:	b2f6      	uxtb	r6, r6
 800b362:	1ac0      	subs	r0, r0, r3
 800b364:	6963      	ldr	r3, [r4, #20]
 800b366:	4637      	mov	r7, r6
 800b368:	4283      	cmp	r3, r0
 800b36a:	dc04      	bgt.n	800b376 <__swbuf_r+0x42>
 800b36c:	4621      	mov	r1, r4
 800b36e:	4628      	mov	r0, r5
 800b370:	f000 f922 	bl	800b5b8 <_fflush_r>
 800b374:	bb30      	cbnz	r0, 800b3c4 <__swbuf_r+0x90>
 800b376:	68a3      	ldr	r3, [r4, #8]
 800b378:	3001      	adds	r0, #1
 800b37a:	3b01      	subs	r3, #1
 800b37c:	60a3      	str	r3, [r4, #8]
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	1c5a      	adds	r2, r3, #1
 800b382:	6022      	str	r2, [r4, #0]
 800b384:	701e      	strb	r6, [r3, #0]
 800b386:	6963      	ldr	r3, [r4, #20]
 800b388:	4283      	cmp	r3, r0
 800b38a:	d004      	beq.n	800b396 <__swbuf_r+0x62>
 800b38c:	89a3      	ldrh	r3, [r4, #12]
 800b38e:	07db      	lsls	r3, r3, #31
 800b390:	d506      	bpl.n	800b3a0 <__swbuf_r+0x6c>
 800b392:	2e0a      	cmp	r6, #10
 800b394:	d104      	bne.n	800b3a0 <__swbuf_r+0x6c>
 800b396:	4621      	mov	r1, r4
 800b398:	4628      	mov	r0, r5
 800b39a:	f000 f90d 	bl	800b5b8 <_fflush_r>
 800b39e:	b988      	cbnz	r0, 800b3c4 <__swbuf_r+0x90>
 800b3a0:	4638      	mov	r0, r7
 800b3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3a4:	4b0a      	ldr	r3, [pc, #40]	; (800b3d0 <__swbuf_r+0x9c>)
 800b3a6:	429c      	cmp	r4, r3
 800b3a8:	d101      	bne.n	800b3ae <__swbuf_r+0x7a>
 800b3aa:	68ac      	ldr	r4, [r5, #8]
 800b3ac:	e7cf      	b.n	800b34e <__swbuf_r+0x1a>
 800b3ae:	4b09      	ldr	r3, [pc, #36]	; (800b3d4 <__swbuf_r+0xa0>)
 800b3b0:	429c      	cmp	r4, r3
 800b3b2:	bf08      	it	eq
 800b3b4:	68ec      	ldreq	r4, [r5, #12]
 800b3b6:	e7ca      	b.n	800b34e <__swbuf_r+0x1a>
 800b3b8:	4621      	mov	r1, r4
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	f000 f80c 	bl	800b3d8 <__swsetup_r>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	d0cb      	beq.n	800b35c <__swbuf_r+0x28>
 800b3c4:	f04f 37ff 	mov.w	r7, #4294967295
 800b3c8:	e7ea      	b.n	800b3a0 <__swbuf_r+0x6c>
 800b3ca:	bf00      	nop
 800b3cc:	0800c07c 	.word	0x0800c07c
 800b3d0:	0800c09c 	.word	0x0800c09c
 800b3d4:	0800c05c 	.word	0x0800c05c

0800b3d8 <__swsetup_r>:
 800b3d8:	4b32      	ldr	r3, [pc, #200]	; (800b4a4 <__swsetup_r+0xcc>)
 800b3da:	b570      	push	{r4, r5, r6, lr}
 800b3dc:	681d      	ldr	r5, [r3, #0]
 800b3de:	4606      	mov	r6, r0
 800b3e0:	460c      	mov	r4, r1
 800b3e2:	b125      	cbz	r5, 800b3ee <__swsetup_r+0x16>
 800b3e4:	69ab      	ldr	r3, [r5, #24]
 800b3e6:	b913      	cbnz	r3, 800b3ee <__swsetup_r+0x16>
 800b3e8:	4628      	mov	r0, r5
 800b3ea:	f000 f979 	bl	800b6e0 <__sinit>
 800b3ee:	4b2e      	ldr	r3, [pc, #184]	; (800b4a8 <__swsetup_r+0xd0>)
 800b3f0:	429c      	cmp	r4, r3
 800b3f2:	d10f      	bne.n	800b414 <__swsetup_r+0x3c>
 800b3f4:	686c      	ldr	r4, [r5, #4]
 800b3f6:	89a3      	ldrh	r3, [r4, #12]
 800b3f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3fc:	0719      	lsls	r1, r3, #28
 800b3fe:	d42c      	bmi.n	800b45a <__swsetup_r+0x82>
 800b400:	06dd      	lsls	r5, r3, #27
 800b402:	d411      	bmi.n	800b428 <__swsetup_r+0x50>
 800b404:	2309      	movs	r3, #9
 800b406:	6033      	str	r3, [r6, #0]
 800b408:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b40c:	f04f 30ff 	mov.w	r0, #4294967295
 800b410:	81a3      	strh	r3, [r4, #12]
 800b412:	e03e      	b.n	800b492 <__swsetup_r+0xba>
 800b414:	4b25      	ldr	r3, [pc, #148]	; (800b4ac <__swsetup_r+0xd4>)
 800b416:	429c      	cmp	r4, r3
 800b418:	d101      	bne.n	800b41e <__swsetup_r+0x46>
 800b41a:	68ac      	ldr	r4, [r5, #8]
 800b41c:	e7eb      	b.n	800b3f6 <__swsetup_r+0x1e>
 800b41e:	4b24      	ldr	r3, [pc, #144]	; (800b4b0 <__swsetup_r+0xd8>)
 800b420:	429c      	cmp	r4, r3
 800b422:	bf08      	it	eq
 800b424:	68ec      	ldreq	r4, [r5, #12]
 800b426:	e7e6      	b.n	800b3f6 <__swsetup_r+0x1e>
 800b428:	0758      	lsls	r0, r3, #29
 800b42a:	d512      	bpl.n	800b452 <__swsetup_r+0x7a>
 800b42c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b42e:	b141      	cbz	r1, 800b442 <__swsetup_r+0x6a>
 800b430:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b434:	4299      	cmp	r1, r3
 800b436:	d002      	beq.n	800b43e <__swsetup_r+0x66>
 800b438:	4630      	mov	r0, r6
 800b43a:	f7fd fad5 	bl	80089e8 <_free_r>
 800b43e:	2300      	movs	r3, #0
 800b440:	6363      	str	r3, [r4, #52]	; 0x34
 800b442:	89a3      	ldrh	r3, [r4, #12]
 800b444:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b448:	81a3      	strh	r3, [r4, #12]
 800b44a:	2300      	movs	r3, #0
 800b44c:	6063      	str	r3, [r4, #4]
 800b44e:	6923      	ldr	r3, [r4, #16]
 800b450:	6023      	str	r3, [r4, #0]
 800b452:	89a3      	ldrh	r3, [r4, #12]
 800b454:	f043 0308 	orr.w	r3, r3, #8
 800b458:	81a3      	strh	r3, [r4, #12]
 800b45a:	6923      	ldr	r3, [r4, #16]
 800b45c:	b94b      	cbnz	r3, 800b472 <__swsetup_r+0x9a>
 800b45e:	89a3      	ldrh	r3, [r4, #12]
 800b460:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b468:	d003      	beq.n	800b472 <__swsetup_r+0x9a>
 800b46a:	4621      	mov	r1, r4
 800b46c:	4630      	mov	r0, r6
 800b46e:	f000 f9f9 	bl	800b864 <__smakebuf_r>
 800b472:	89a0      	ldrh	r0, [r4, #12]
 800b474:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b478:	f010 0301 	ands.w	r3, r0, #1
 800b47c:	d00a      	beq.n	800b494 <__swsetup_r+0xbc>
 800b47e:	2300      	movs	r3, #0
 800b480:	60a3      	str	r3, [r4, #8]
 800b482:	6963      	ldr	r3, [r4, #20]
 800b484:	425b      	negs	r3, r3
 800b486:	61a3      	str	r3, [r4, #24]
 800b488:	6923      	ldr	r3, [r4, #16]
 800b48a:	b943      	cbnz	r3, 800b49e <__swsetup_r+0xc6>
 800b48c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b490:	d1ba      	bne.n	800b408 <__swsetup_r+0x30>
 800b492:	bd70      	pop	{r4, r5, r6, pc}
 800b494:	0781      	lsls	r1, r0, #30
 800b496:	bf58      	it	pl
 800b498:	6963      	ldrpl	r3, [r4, #20]
 800b49a:	60a3      	str	r3, [r4, #8]
 800b49c:	e7f4      	b.n	800b488 <__swsetup_r+0xb0>
 800b49e:	2000      	movs	r0, #0
 800b4a0:	e7f7      	b.n	800b492 <__swsetup_r+0xba>
 800b4a2:	bf00      	nop
 800b4a4:	2000017c 	.word	0x2000017c
 800b4a8:	0800c07c 	.word	0x0800c07c
 800b4ac:	0800c09c 	.word	0x0800c09c
 800b4b0:	0800c05c 	.word	0x0800c05c

0800b4b4 <__sflush_r>:
 800b4b4:	898a      	ldrh	r2, [r1, #12]
 800b4b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4b8:	4605      	mov	r5, r0
 800b4ba:	0710      	lsls	r0, r2, #28
 800b4bc:	460c      	mov	r4, r1
 800b4be:	d457      	bmi.n	800b570 <__sflush_r+0xbc>
 800b4c0:	684b      	ldr	r3, [r1, #4]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	dc04      	bgt.n	800b4d0 <__sflush_r+0x1c>
 800b4c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	dc01      	bgt.n	800b4d0 <__sflush_r+0x1c>
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4d2:	2e00      	cmp	r6, #0
 800b4d4:	d0fa      	beq.n	800b4cc <__sflush_r+0x18>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b4dc:	682f      	ldr	r7, [r5, #0]
 800b4de:	602b      	str	r3, [r5, #0]
 800b4e0:	d032      	beq.n	800b548 <__sflush_r+0x94>
 800b4e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b4e4:	89a3      	ldrh	r3, [r4, #12]
 800b4e6:	075a      	lsls	r2, r3, #29
 800b4e8:	d505      	bpl.n	800b4f6 <__sflush_r+0x42>
 800b4ea:	6863      	ldr	r3, [r4, #4]
 800b4ec:	1ac0      	subs	r0, r0, r3
 800b4ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b4f0:	b10b      	cbz	r3, 800b4f6 <__sflush_r+0x42>
 800b4f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4f4:	1ac0      	subs	r0, r0, r3
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	6a21      	ldr	r1, [r4, #32]
 800b500:	47b0      	blx	r6
 800b502:	1c43      	adds	r3, r0, #1
 800b504:	89a3      	ldrh	r3, [r4, #12]
 800b506:	d106      	bne.n	800b516 <__sflush_r+0x62>
 800b508:	6829      	ldr	r1, [r5, #0]
 800b50a:	291d      	cmp	r1, #29
 800b50c:	d82c      	bhi.n	800b568 <__sflush_r+0xb4>
 800b50e:	4a29      	ldr	r2, [pc, #164]	; (800b5b4 <__sflush_r+0x100>)
 800b510:	40ca      	lsrs	r2, r1
 800b512:	07d6      	lsls	r6, r2, #31
 800b514:	d528      	bpl.n	800b568 <__sflush_r+0xb4>
 800b516:	2200      	movs	r2, #0
 800b518:	6062      	str	r2, [r4, #4]
 800b51a:	6922      	ldr	r2, [r4, #16]
 800b51c:	04d9      	lsls	r1, r3, #19
 800b51e:	6022      	str	r2, [r4, #0]
 800b520:	d504      	bpl.n	800b52c <__sflush_r+0x78>
 800b522:	1c42      	adds	r2, r0, #1
 800b524:	d101      	bne.n	800b52a <__sflush_r+0x76>
 800b526:	682b      	ldr	r3, [r5, #0]
 800b528:	b903      	cbnz	r3, 800b52c <__sflush_r+0x78>
 800b52a:	6560      	str	r0, [r4, #84]	; 0x54
 800b52c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b52e:	602f      	str	r7, [r5, #0]
 800b530:	2900      	cmp	r1, #0
 800b532:	d0cb      	beq.n	800b4cc <__sflush_r+0x18>
 800b534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b538:	4299      	cmp	r1, r3
 800b53a:	d002      	beq.n	800b542 <__sflush_r+0x8e>
 800b53c:	4628      	mov	r0, r5
 800b53e:	f7fd fa53 	bl	80089e8 <_free_r>
 800b542:	2000      	movs	r0, #0
 800b544:	6360      	str	r0, [r4, #52]	; 0x34
 800b546:	e7c2      	b.n	800b4ce <__sflush_r+0x1a>
 800b548:	6a21      	ldr	r1, [r4, #32]
 800b54a:	2301      	movs	r3, #1
 800b54c:	4628      	mov	r0, r5
 800b54e:	47b0      	blx	r6
 800b550:	1c41      	adds	r1, r0, #1
 800b552:	d1c7      	bne.n	800b4e4 <__sflush_r+0x30>
 800b554:	682b      	ldr	r3, [r5, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d0c4      	beq.n	800b4e4 <__sflush_r+0x30>
 800b55a:	2b1d      	cmp	r3, #29
 800b55c:	d001      	beq.n	800b562 <__sflush_r+0xae>
 800b55e:	2b16      	cmp	r3, #22
 800b560:	d101      	bne.n	800b566 <__sflush_r+0xb2>
 800b562:	602f      	str	r7, [r5, #0]
 800b564:	e7b2      	b.n	800b4cc <__sflush_r+0x18>
 800b566:	89a3      	ldrh	r3, [r4, #12]
 800b568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b56c:	81a3      	strh	r3, [r4, #12]
 800b56e:	e7ae      	b.n	800b4ce <__sflush_r+0x1a>
 800b570:	690f      	ldr	r7, [r1, #16]
 800b572:	2f00      	cmp	r7, #0
 800b574:	d0aa      	beq.n	800b4cc <__sflush_r+0x18>
 800b576:	0793      	lsls	r3, r2, #30
 800b578:	bf18      	it	ne
 800b57a:	2300      	movne	r3, #0
 800b57c:	680e      	ldr	r6, [r1, #0]
 800b57e:	bf08      	it	eq
 800b580:	694b      	ldreq	r3, [r1, #20]
 800b582:	1bf6      	subs	r6, r6, r7
 800b584:	600f      	str	r7, [r1, #0]
 800b586:	608b      	str	r3, [r1, #8]
 800b588:	2e00      	cmp	r6, #0
 800b58a:	dd9f      	ble.n	800b4cc <__sflush_r+0x18>
 800b58c:	4633      	mov	r3, r6
 800b58e:	463a      	mov	r2, r7
 800b590:	4628      	mov	r0, r5
 800b592:	6a21      	ldr	r1, [r4, #32]
 800b594:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b598:	47e0      	blx	ip
 800b59a:	2800      	cmp	r0, #0
 800b59c:	dc06      	bgt.n	800b5ac <__sflush_r+0xf8>
 800b59e:	89a3      	ldrh	r3, [r4, #12]
 800b5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5a8:	81a3      	strh	r3, [r4, #12]
 800b5aa:	e790      	b.n	800b4ce <__sflush_r+0x1a>
 800b5ac:	4407      	add	r7, r0
 800b5ae:	1a36      	subs	r6, r6, r0
 800b5b0:	e7ea      	b.n	800b588 <__sflush_r+0xd4>
 800b5b2:	bf00      	nop
 800b5b4:	20400001 	.word	0x20400001

0800b5b8 <_fflush_r>:
 800b5b8:	b538      	push	{r3, r4, r5, lr}
 800b5ba:	690b      	ldr	r3, [r1, #16]
 800b5bc:	4605      	mov	r5, r0
 800b5be:	460c      	mov	r4, r1
 800b5c0:	b913      	cbnz	r3, 800b5c8 <_fflush_r+0x10>
 800b5c2:	2500      	movs	r5, #0
 800b5c4:	4628      	mov	r0, r5
 800b5c6:	bd38      	pop	{r3, r4, r5, pc}
 800b5c8:	b118      	cbz	r0, 800b5d2 <_fflush_r+0x1a>
 800b5ca:	6983      	ldr	r3, [r0, #24]
 800b5cc:	b90b      	cbnz	r3, 800b5d2 <_fflush_r+0x1a>
 800b5ce:	f000 f887 	bl	800b6e0 <__sinit>
 800b5d2:	4b14      	ldr	r3, [pc, #80]	; (800b624 <_fflush_r+0x6c>)
 800b5d4:	429c      	cmp	r4, r3
 800b5d6:	d11b      	bne.n	800b610 <_fflush_r+0x58>
 800b5d8:	686c      	ldr	r4, [r5, #4]
 800b5da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d0ef      	beq.n	800b5c2 <_fflush_r+0xa>
 800b5e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b5e4:	07d0      	lsls	r0, r2, #31
 800b5e6:	d404      	bmi.n	800b5f2 <_fflush_r+0x3a>
 800b5e8:	0599      	lsls	r1, r3, #22
 800b5ea:	d402      	bmi.n	800b5f2 <_fflush_r+0x3a>
 800b5ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5ee:	f7ff fd18 	bl	800b022 <__retarget_lock_acquire_recursive>
 800b5f2:	4628      	mov	r0, r5
 800b5f4:	4621      	mov	r1, r4
 800b5f6:	f7ff ff5d 	bl	800b4b4 <__sflush_r>
 800b5fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5fc:	4605      	mov	r5, r0
 800b5fe:	07da      	lsls	r2, r3, #31
 800b600:	d4e0      	bmi.n	800b5c4 <_fflush_r+0xc>
 800b602:	89a3      	ldrh	r3, [r4, #12]
 800b604:	059b      	lsls	r3, r3, #22
 800b606:	d4dd      	bmi.n	800b5c4 <_fflush_r+0xc>
 800b608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b60a:	f7ff fd0b 	bl	800b024 <__retarget_lock_release_recursive>
 800b60e:	e7d9      	b.n	800b5c4 <_fflush_r+0xc>
 800b610:	4b05      	ldr	r3, [pc, #20]	; (800b628 <_fflush_r+0x70>)
 800b612:	429c      	cmp	r4, r3
 800b614:	d101      	bne.n	800b61a <_fflush_r+0x62>
 800b616:	68ac      	ldr	r4, [r5, #8]
 800b618:	e7df      	b.n	800b5da <_fflush_r+0x22>
 800b61a:	4b04      	ldr	r3, [pc, #16]	; (800b62c <_fflush_r+0x74>)
 800b61c:	429c      	cmp	r4, r3
 800b61e:	bf08      	it	eq
 800b620:	68ec      	ldreq	r4, [r5, #12]
 800b622:	e7da      	b.n	800b5da <_fflush_r+0x22>
 800b624:	0800c07c 	.word	0x0800c07c
 800b628:	0800c09c 	.word	0x0800c09c
 800b62c:	0800c05c 	.word	0x0800c05c

0800b630 <std>:
 800b630:	2300      	movs	r3, #0
 800b632:	b510      	push	{r4, lr}
 800b634:	4604      	mov	r4, r0
 800b636:	e9c0 3300 	strd	r3, r3, [r0]
 800b63a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b63e:	6083      	str	r3, [r0, #8]
 800b640:	8181      	strh	r1, [r0, #12]
 800b642:	6643      	str	r3, [r0, #100]	; 0x64
 800b644:	81c2      	strh	r2, [r0, #14]
 800b646:	6183      	str	r3, [r0, #24]
 800b648:	4619      	mov	r1, r3
 800b64a:	2208      	movs	r2, #8
 800b64c:	305c      	adds	r0, #92	; 0x5c
 800b64e:	f7fd f9c3 	bl	80089d8 <memset>
 800b652:	4b05      	ldr	r3, [pc, #20]	; (800b668 <std+0x38>)
 800b654:	6224      	str	r4, [r4, #32]
 800b656:	6263      	str	r3, [r4, #36]	; 0x24
 800b658:	4b04      	ldr	r3, [pc, #16]	; (800b66c <std+0x3c>)
 800b65a:	62a3      	str	r3, [r4, #40]	; 0x28
 800b65c:	4b04      	ldr	r3, [pc, #16]	; (800b670 <std+0x40>)
 800b65e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b660:	4b04      	ldr	r3, [pc, #16]	; (800b674 <std+0x44>)
 800b662:	6323      	str	r3, [r4, #48]	; 0x30
 800b664:	bd10      	pop	{r4, pc}
 800b666:	bf00      	nop
 800b668:	0800b8f5 	.word	0x0800b8f5
 800b66c:	0800b917 	.word	0x0800b917
 800b670:	0800b94f 	.word	0x0800b94f
 800b674:	0800b973 	.word	0x0800b973

0800b678 <_cleanup_r>:
 800b678:	4901      	ldr	r1, [pc, #4]	; (800b680 <_cleanup_r+0x8>)
 800b67a:	f000 b8af 	b.w	800b7dc <_fwalk_reent>
 800b67e:	bf00      	nop
 800b680:	0800b5b9 	.word	0x0800b5b9

0800b684 <__sfmoreglue>:
 800b684:	2268      	movs	r2, #104	; 0x68
 800b686:	b570      	push	{r4, r5, r6, lr}
 800b688:	1e4d      	subs	r5, r1, #1
 800b68a:	4355      	muls	r5, r2
 800b68c:	460e      	mov	r6, r1
 800b68e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b692:	f7fd fa11 	bl	8008ab8 <_malloc_r>
 800b696:	4604      	mov	r4, r0
 800b698:	b140      	cbz	r0, 800b6ac <__sfmoreglue+0x28>
 800b69a:	2100      	movs	r1, #0
 800b69c:	e9c0 1600 	strd	r1, r6, [r0]
 800b6a0:	300c      	adds	r0, #12
 800b6a2:	60a0      	str	r0, [r4, #8]
 800b6a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b6a8:	f7fd f996 	bl	80089d8 <memset>
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	bd70      	pop	{r4, r5, r6, pc}

0800b6b0 <__sfp_lock_acquire>:
 800b6b0:	4801      	ldr	r0, [pc, #4]	; (800b6b8 <__sfp_lock_acquire+0x8>)
 800b6b2:	f7ff bcb6 	b.w	800b022 <__retarget_lock_acquire_recursive>
 800b6b6:	bf00      	nop
 800b6b8:	200015c1 	.word	0x200015c1

0800b6bc <__sfp_lock_release>:
 800b6bc:	4801      	ldr	r0, [pc, #4]	; (800b6c4 <__sfp_lock_release+0x8>)
 800b6be:	f7ff bcb1 	b.w	800b024 <__retarget_lock_release_recursive>
 800b6c2:	bf00      	nop
 800b6c4:	200015c1 	.word	0x200015c1

0800b6c8 <__sinit_lock_acquire>:
 800b6c8:	4801      	ldr	r0, [pc, #4]	; (800b6d0 <__sinit_lock_acquire+0x8>)
 800b6ca:	f7ff bcaa 	b.w	800b022 <__retarget_lock_acquire_recursive>
 800b6ce:	bf00      	nop
 800b6d0:	200015c2 	.word	0x200015c2

0800b6d4 <__sinit_lock_release>:
 800b6d4:	4801      	ldr	r0, [pc, #4]	; (800b6dc <__sinit_lock_release+0x8>)
 800b6d6:	f7ff bca5 	b.w	800b024 <__retarget_lock_release_recursive>
 800b6da:	bf00      	nop
 800b6dc:	200015c2 	.word	0x200015c2

0800b6e0 <__sinit>:
 800b6e0:	b510      	push	{r4, lr}
 800b6e2:	4604      	mov	r4, r0
 800b6e4:	f7ff fff0 	bl	800b6c8 <__sinit_lock_acquire>
 800b6e8:	69a3      	ldr	r3, [r4, #24]
 800b6ea:	b11b      	cbz	r3, 800b6f4 <__sinit+0x14>
 800b6ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6f0:	f7ff bff0 	b.w	800b6d4 <__sinit_lock_release>
 800b6f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b6f8:	6523      	str	r3, [r4, #80]	; 0x50
 800b6fa:	4b13      	ldr	r3, [pc, #76]	; (800b748 <__sinit+0x68>)
 800b6fc:	4a13      	ldr	r2, [pc, #76]	; (800b74c <__sinit+0x6c>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	62a2      	str	r2, [r4, #40]	; 0x28
 800b702:	42a3      	cmp	r3, r4
 800b704:	bf08      	it	eq
 800b706:	2301      	moveq	r3, #1
 800b708:	4620      	mov	r0, r4
 800b70a:	bf08      	it	eq
 800b70c:	61a3      	streq	r3, [r4, #24]
 800b70e:	f000 f81f 	bl	800b750 <__sfp>
 800b712:	6060      	str	r0, [r4, #4]
 800b714:	4620      	mov	r0, r4
 800b716:	f000 f81b 	bl	800b750 <__sfp>
 800b71a:	60a0      	str	r0, [r4, #8]
 800b71c:	4620      	mov	r0, r4
 800b71e:	f000 f817 	bl	800b750 <__sfp>
 800b722:	2200      	movs	r2, #0
 800b724:	2104      	movs	r1, #4
 800b726:	60e0      	str	r0, [r4, #12]
 800b728:	6860      	ldr	r0, [r4, #4]
 800b72a:	f7ff ff81 	bl	800b630 <std>
 800b72e:	2201      	movs	r2, #1
 800b730:	2109      	movs	r1, #9
 800b732:	68a0      	ldr	r0, [r4, #8]
 800b734:	f7ff ff7c 	bl	800b630 <std>
 800b738:	2202      	movs	r2, #2
 800b73a:	2112      	movs	r1, #18
 800b73c:	68e0      	ldr	r0, [r4, #12]
 800b73e:	f7ff ff77 	bl	800b630 <std>
 800b742:	2301      	movs	r3, #1
 800b744:	61a3      	str	r3, [r4, #24]
 800b746:	e7d1      	b.n	800b6ec <__sinit+0xc>
 800b748:	0800bc8c 	.word	0x0800bc8c
 800b74c:	0800b679 	.word	0x0800b679

0800b750 <__sfp>:
 800b750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b752:	4607      	mov	r7, r0
 800b754:	f7ff ffac 	bl	800b6b0 <__sfp_lock_acquire>
 800b758:	4b1e      	ldr	r3, [pc, #120]	; (800b7d4 <__sfp+0x84>)
 800b75a:	681e      	ldr	r6, [r3, #0]
 800b75c:	69b3      	ldr	r3, [r6, #24]
 800b75e:	b913      	cbnz	r3, 800b766 <__sfp+0x16>
 800b760:	4630      	mov	r0, r6
 800b762:	f7ff ffbd 	bl	800b6e0 <__sinit>
 800b766:	3648      	adds	r6, #72	; 0x48
 800b768:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b76c:	3b01      	subs	r3, #1
 800b76e:	d503      	bpl.n	800b778 <__sfp+0x28>
 800b770:	6833      	ldr	r3, [r6, #0]
 800b772:	b30b      	cbz	r3, 800b7b8 <__sfp+0x68>
 800b774:	6836      	ldr	r6, [r6, #0]
 800b776:	e7f7      	b.n	800b768 <__sfp+0x18>
 800b778:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b77c:	b9d5      	cbnz	r5, 800b7b4 <__sfp+0x64>
 800b77e:	4b16      	ldr	r3, [pc, #88]	; (800b7d8 <__sfp+0x88>)
 800b780:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b784:	60e3      	str	r3, [r4, #12]
 800b786:	6665      	str	r5, [r4, #100]	; 0x64
 800b788:	f7ff fc4a 	bl	800b020 <__retarget_lock_init_recursive>
 800b78c:	f7ff ff96 	bl	800b6bc <__sfp_lock_release>
 800b790:	2208      	movs	r2, #8
 800b792:	4629      	mov	r1, r5
 800b794:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b798:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b79c:	6025      	str	r5, [r4, #0]
 800b79e:	61a5      	str	r5, [r4, #24]
 800b7a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b7a4:	f7fd f918 	bl	80089d8 <memset>
 800b7a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b7ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7b4:	3468      	adds	r4, #104	; 0x68
 800b7b6:	e7d9      	b.n	800b76c <__sfp+0x1c>
 800b7b8:	2104      	movs	r1, #4
 800b7ba:	4638      	mov	r0, r7
 800b7bc:	f7ff ff62 	bl	800b684 <__sfmoreglue>
 800b7c0:	4604      	mov	r4, r0
 800b7c2:	6030      	str	r0, [r6, #0]
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	d1d5      	bne.n	800b774 <__sfp+0x24>
 800b7c8:	f7ff ff78 	bl	800b6bc <__sfp_lock_release>
 800b7cc:	230c      	movs	r3, #12
 800b7ce:	603b      	str	r3, [r7, #0]
 800b7d0:	e7ee      	b.n	800b7b0 <__sfp+0x60>
 800b7d2:	bf00      	nop
 800b7d4:	0800bc8c 	.word	0x0800bc8c
 800b7d8:	ffff0001 	.word	0xffff0001

0800b7dc <_fwalk_reent>:
 800b7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7e0:	4606      	mov	r6, r0
 800b7e2:	4688      	mov	r8, r1
 800b7e4:	2700      	movs	r7, #0
 800b7e6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b7ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7ee:	f1b9 0901 	subs.w	r9, r9, #1
 800b7f2:	d505      	bpl.n	800b800 <_fwalk_reent+0x24>
 800b7f4:	6824      	ldr	r4, [r4, #0]
 800b7f6:	2c00      	cmp	r4, #0
 800b7f8:	d1f7      	bne.n	800b7ea <_fwalk_reent+0xe>
 800b7fa:	4638      	mov	r0, r7
 800b7fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b800:	89ab      	ldrh	r3, [r5, #12]
 800b802:	2b01      	cmp	r3, #1
 800b804:	d907      	bls.n	800b816 <_fwalk_reent+0x3a>
 800b806:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b80a:	3301      	adds	r3, #1
 800b80c:	d003      	beq.n	800b816 <_fwalk_reent+0x3a>
 800b80e:	4629      	mov	r1, r5
 800b810:	4630      	mov	r0, r6
 800b812:	47c0      	blx	r8
 800b814:	4307      	orrs	r7, r0
 800b816:	3568      	adds	r5, #104	; 0x68
 800b818:	e7e9      	b.n	800b7ee <_fwalk_reent+0x12>

0800b81a <__swhatbuf_r>:
 800b81a:	b570      	push	{r4, r5, r6, lr}
 800b81c:	460e      	mov	r6, r1
 800b81e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b822:	4614      	mov	r4, r2
 800b824:	2900      	cmp	r1, #0
 800b826:	461d      	mov	r5, r3
 800b828:	b096      	sub	sp, #88	; 0x58
 800b82a:	da08      	bge.n	800b83e <__swhatbuf_r+0x24>
 800b82c:	2200      	movs	r2, #0
 800b82e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b832:	602a      	str	r2, [r5, #0]
 800b834:	061a      	lsls	r2, r3, #24
 800b836:	d410      	bmi.n	800b85a <__swhatbuf_r+0x40>
 800b838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b83c:	e00e      	b.n	800b85c <__swhatbuf_r+0x42>
 800b83e:	466a      	mov	r2, sp
 800b840:	f000 f8be 	bl	800b9c0 <_fstat_r>
 800b844:	2800      	cmp	r0, #0
 800b846:	dbf1      	blt.n	800b82c <__swhatbuf_r+0x12>
 800b848:	9a01      	ldr	r2, [sp, #4]
 800b84a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b84e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b852:	425a      	negs	r2, r3
 800b854:	415a      	adcs	r2, r3
 800b856:	602a      	str	r2, [r5, #0]
 800b858:	e7ee      	b.n	800b838 <__swhatbuf_r+0x1e>
 800b85a:	2340      	movs	r3, #64	; 0x40
 800b85c:	2000      	movs	r0, #0
 800b85e:	6023      	str	r3, [r4, #0]
 800b860:	b016      	add	sp, #88	; 0x58
 800b862:	bd70      	pop	{r4, r5, r6, pc}

0800b864 <__smakebuf_r>:
 800b864:	898b      	ldrh	r3, [r1, #12]
 800b866:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b868:	079d      	lsls	r5, r3, #30
 800b86a:	4606      	mov	r6, r0
 800b86c:	460c      	mov	r4, r1
 800b86e:	d507      	bpl.n	800b880 <__smakebuf_r+0x1c>
 800b870:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b874:	6023      	str	r3, [r4, #0]
 800b876:	6123      	str	r3, [r4, #16]
 800b878:	2301      	movs	r3, #1
 800b87a:	6163      	str	r3, [r4, #20]
 800b87c:	b002      	add	sp, #8
 800b87e:	bd70      	pop	{r4, r5, r6, pc}
 800b880:	466a      	mov	r2, sp
 800b882:	ab01      	add	r3, sp, #4
 800b884:	f7ff ffc9 	bl	800b81a <__swhatbuf_r>
 800b888:	9900      	ldr	r1, [sp, #0]
 800b88a:	4605      	mov	r5, r0
 800b88c:	4630      	mov	r0, r6
 800b88e:	f7fd f913 	bl	8008ab8 <_malloc_r>
 800b892:	b948      	cbnz	r0, 800b8a8 <__smakebuf_r+0x44>
 800b894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b898:	059a      	lsls	r2, r3, #22
 800b89a:	d4ef      	bmi.n	800b87c <__smakebuf_r+0x18>
 800b89c:	f023 0303 	bic.w	r3, r3, #3
 800b8a0:	f043 0302 	orr.w	r3, r3, #2
 800b8a4:	81a3      	strh	r3, [r4, #12]
 800b8a6:	e7e3      	b.n	800b870 <__smakebuf_r+0xc>
 800b8a8:	4b0d      	ldr	r3, [pc, #52]	; (800b8e0 <__smakebuf_r+0x7c>)
 800b8aa:	62b3      	str	r3, [r6, #40]	; 0x28
 800b8ac:	89a3      	ldrh	r3, [r4, #12]
 800b8ae:	6020      	str	r0, [r4, #0]
 800b8b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8b4:	81a3      	strh	r3, [r4, #12]
 800b8b6:	9b00      	ldr	r3, [sp, #0]
 800b8b8:	6120      	str	r0, [r4, #16]
 800b8ba:	6163      	str	r3, [r4, #20]
 800b8bc:	9b01      	ldr	r3, [sp, #4]
 800b8be:	b15b      	cbz	r3, 800b8d8 <__smakebuf_r+0x74>
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8c6:	f000 f88d 	bl	800b9e4 <_isatty_r>
 800b8ca:	b128      	cbz	r0, 800b8d8 <__smakebuf_r+0x74>
 800b8cc:	89a3      	ldrh	r3, [r4, #12]
 800b8ce:	f023 0303 	bic.w	r3, r3, #3
 800b8d2:	f043 0301 	orr.w	r3, r3, #1
 800b8d6:	81a3      	strh	r3, [r4, #12]
 800b8d8:	89a0      	ldrh	r0, [r4, #12]
 800b8da:	4305      	orrs	r5, r0
 800b8dc:	81a5      	strh	r5, [r4, #12]
 800b8de:	e7cd      	b.n	800b87c <__smakebuf_r+0x18>
 800b8e0:	0800b679 	.word	0x0800b679

0800b8e4 <_malloc_usable_size_r>:
 800b8e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8e8:	1f18      	subs	r0, r3, #4
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	bfbc      	itt	lt
 800b8ee:	580b      	ldrlt	r3, [r1, r0]
 800b8f0:	18c0      	addlt	r0, r0, r3
 800b8f2:	4770      	bx	lr

0800b8f4 <__sread>:
 800b8f4:	b510      	push	{r4, lr}
 800b8f6:	460c      	mov	r4, r1
 800b8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8fc:	f000 f894 	bl	800ba28 <_read_r>
 800b900:	2800      	cmp	r0, #0
 800b902:	bfab      	itete	ge
 800b904:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b906:	89a3      	ldrhlt	r3, [r4, #12]
 800b908:	181b      	addge	r3, r3, r0
 800b90a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b90e:	bfac      	ite	ge
 800b910:	6563      	strge	r3, [r4, #84]	; 0x54
 800b912:	81a3      	strhlt	r3, [r4, #12]
 800b914:	bd10      	pop	{r4, pc}

0800b916 <__swrite>:
 800b916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b91a:	461f      	mov	r7, r3
 800b91c:	898b      	ldrh	r3, [r1, #12]
 800b91e:	4605      	mov	r5, r0
 800b920:	05db      	lsls	r3, r3, #23
 800b922:	460c      	mov	r4, r1
 800b924:	4616      	mov	r6, r2
 800b926:	d505      	bpl.n	800b934 <__swrite+0x1e>
 800b928:	2302      	movs	r3, #2
 800b92a:	2200      	movs	r2, #0
 800b92c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b930:	f000 f868 	bl	800ba04 <_lseek_r>
 800b934:	89a3      	ldrh	r3, [r4, #12]
 800b936:	4632      	mov	r2, r6
 800b938:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b93c:	81a3      	strh	r3, [r4, #12]
 800b93e:	4628      	mov	r0, r5
 800b940:	463b      	mov	r3, r7
 800b942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b94a:	f000 b817 	b.w	800b97c <_write_r>

0800b94e <__sseek>:
 800b94e:	b510      	push	{r4, lr}
 800b950:	460c      	mov	r4, r1
 800b952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b956:	f000 f855 	bl	800ba04 <_lseek_r>
 800b95a:	1c43      	adds	r3, r0, #1
 800b95c:	89a3      	ldrh	r3, [r4, #12]
 800b95e:	bf15      	itete	ne
 800b960:	6560      	strne	r0, [r4, #84]	; 0x54
 800b962:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b966:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b96a:	81a3      	strheq	r3, [r4, #12]
 800b96c:	bf18      	it	ne
 800b96e:	81a3      	strhne	r3, [r4, #12]
 800b970:	bd10      	pop	{r4, pc}

0800b972 <__sclose>:
 800b972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b976:	f000 b813 	b.w	800b9a0 <_close_r>
	...

0800b97c <_write_r>:
 800b97c:	b538      	push	{r3, r4, r5, lr}
 800b97e:	4604      	mov	r4, r0
 800b980:	4608      	mov	r0, r1
 800b982:	4611      	mov	r1, r2
 800b984:	2200      	movs	r2, #0
 800b986:	4d05      	ldr	r5, [pc, #20]	; (800b99c <_write_r+0x20>)
 800b988:	602a      	str	r2, [r5, #0]
 800b98a:	461a      	mov	r2, r3
 800b98c:	f7f9 fb4a 	bl	8005024 <_write>
 800b990:	1c43      	adds	r3, r0, #1
 800b992:	d102      	bne.n	800b99a <_write_r+0x1e>
 800b994:	682b      	ldr	r3, [r5, #0]
 800b996:	b103      	cbz	r3, 800b99a <_write_r+0x1e>
 800b998:	6023      	str	r3, [r4, #0]
 800b99a:	bd38      	pop	{r3, r4, r5, pc}
 800b99c:	200015bc 	.word	0x200015bc

0800b9a0 <_close_r>:
 800b9a0:	b538      	push	{r3, r4, r5, lr}
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	4d05      	ldr	r5, [pc, #20]	; (800b9bc <_close_r+0x1c>)
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	4608      	mov	r0, r1
 800b9aa:	602b      	str	r3, [r5, #0]
 800b9ac:	f7f9 fb48 	bl	8005040 <_close>
 800b9b0:	1c43      	adds	r3, r0, #1
 800b9b2:	d102      	bne.n	800b9ba <_close_r+0x1a>
 800b9b4:	682b      	ldr	r3, [r5, #0]
 800b9b6:	b103      	cbz	r3, 800b9ba <_close_r+0x1a>
 800b9b8:	6023      	str	r3, [r4, #0]
 800b9ba:	bd38      	pop	{r3, r4, r5, pc}
 800b9bc:	200015bc 	.word	0x200015bc

0800b9c0 <_fstat_r>:
 800b9c0:	b538      	push	{r3, r4, r5, lr}
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	4d06      	ldr	r5, [pc, #24]	; (800b9e0 <_fstat_r+0x20>)
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	4608      	mov	r0, r1
 800b9ca:	4611      	mov	r1, r2
 800b9cc:	602b      	str	r3, [r5, #0]
 800b9ce:	f7f9 fb3a 	bl	8005046 <_fstat>
 800b9d2:	1c43      	adds	r3, r0, #1
 800b9d4:	d102      	bne.n	800b9dc <_fstat_r+0x1c>
 800b9d6:	682b      	ldr	r3, [r5, #0]
 800b9d8:	b103      	cbz	r3, 800b9dc <_fstat_r+0x1c>
 800b9da:	6023      	str	r3, [r4, #0]
 800b9dc:	bd38      	pop	{r3, r4, r5, pc}
 800b9de:	bf00      	nop
 800b9e0:	200015bc 	.word	0x200015bc

0800b9e4 <_isatty_r>:
 800b9e4:	b538      	push	{r3, r4, r5, lr}
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	4d05      	ldr	r5, [pc, #20]	; (800ba00 <_isatty_r+0x1c>)
 800b9ea:	4604      	mov	r4, r0
 800b9ec:	4608      	mov	r0, r1
 800b9ee:	602b      	str	r3, [r5, #0]
 800b9f0:	f7f9 fb2e 	bl	8005050 <_isatty>
 800b9f4:	1c43      	adds	r3, r0, #1
 800b9f6:	d102      	bne.n	800b9fe <_isatty_r+0x1a>
 800b9f8:	682b      	ldr	r3, [r5, #0]
 800b9fa:	b103      	cbz	r3, 800b9fe <_isatty_r+0x1a>
 800b9fc:	6023      	str	r3, [r4, #0]
 800b9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ba00:	200015bc 	.word	0x200015bc

0800ba04 <_lseek_r>:
 800ba04:	b538      	push	{r3, r4, r5, lr}
 800ba06:	4604      	mov	r4, r0
 800ba08:	4608      	mov	r0, r1
 800ba0a:	4611      	mov	r1, r2
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	4d05      	ldr	r5, [pc, #20]	; (800ba24 <_lseek_r+0x20>)
 800ba10:	602a      	str	r2, [r5, #0]
 800ba12:	461a      	mov	r2, r3
 800ba14:	f7f9 fb1e 	bl	8005054 <_lseek>
 800ba18:	1c43      	adds	r3, r0, #1
 800ba1a:	d102      	bne.n	800ba22 <_lseek_r+0x1e>
 800ba1c:	682b      	ldr	r3, [r5, #0]
 800ba1e:	b103      	cbz	r3, 800ba22 <_lseek_r+0x1e>
 800ba20:	6023      	str	r3, [r4, #0]
 800ba22:	bd38      	pop	{r3, r4, r5, pc}
 800ba24:	200015bc 	.word	0x200015bc

0800ba28 <_read_r>:
 800ba28:	b538      	push	{r3, r4, r5, lr}
 800ba2a:	4604      	mov	r4, r0
 800ba2c:	4608      	mov	r0, r1
 800ba2e:	4611      	mov	r1, r2
 800ba30:	2200      	movs	r2, #0
 800ba32:	4d05      	ldr	r5, [pc, #20]	; (800ba48 <_read_r+0x20>)
 800ba34:	602a      	str	r2, [r5, #0]
 800ba36:	461a      	mov	r2, r3
 800ba38:	f7f9 fae6 	bl	8005008 <_read>
 800ba3c:	1c43      	adds	r3, r0, #1
 800ba3e:	d102      	bne.n	800ba46 <_read_r+0x1e>
 800ba40:	682b      	ldr	r3, [r5, #0]
 800ba42:	b103      	cbz	r3, 800ba46 <_read_r+0x1e>
 800ba44:	6023      	str	r3, [r4, #0]
 800ba46:	bd38      	pop	{r3, r4, r5, pc}
 800ba48:	200015bc 	.word	0x200015bc

0800ba4c <_init>:
 800ba4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba4e:	bf00      	nop
 800ba50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba52:	bc08      	pop	{r3}
 800ba54:	469e      	mov	lr, r3
 800ba56:	4770      	bx	lr

0800ba58 <_fini>:
 800ba58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba5a:	bf00      	nop
 800ba5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba5e:	bc08      	pop	{r3}
 800ba60:	469e      	mov	lr, r3
 800ba62:	4770      	bx	lr
