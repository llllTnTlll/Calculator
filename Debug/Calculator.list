
Calculator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc0c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  0800bd20  0800bd20  0001bd20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000001bc  0800c35c  0800c35c  0001c35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000003b0  0800c518  0800c518  0001c518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8c8  0800c8c8  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800c8c8  0800c8c8  0001c8c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  0800c8d4  0800c8d4  0001c8d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800c8e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000128c  20000350  0800cc30  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015dc  0800cc30  000215dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003925e  00000000  00000000  00020379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005adc  00000000  00000000  000595d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  0005f0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001948  00000000  00000000  000607c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f54e  00000000  00000000  00062108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b2c3  00000000  00000000  00081656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a313a  00000000  00000000  0009c919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013fa53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007970  00000000  00000000  0013faa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000ac43  00000000  00000000  00147414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bd04 	.word	0x0800bd04

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	0800bd04 	.word	0x0800bd04

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2lz>:
 8000a4c:	b538      	push	{r3, r4, r5, lr}
 8000a4e:	4605      	mov	r5, r0
 8000a50:	460c      	mov	r4, r1
 8000a52:	2200      	movs	r2, #0
 8000a54:	2300      	movs	r3, #0
 8000a56:	4628      	mov	r0, r5
 8000a58:	4621      	mov	r1, r4
 8000a5a:	f7ff ffaf 	bl	80009bc <__aeabi_dcmplt>
 8000a5e:	b928      	cbnz	r0, 8000a6c <__aeabi_d2lz+0x20>
 8000a60:	4628      	mov	r0, r5
 8000a62:	4621      	mov	r1, r4
 8000a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a68:	f000 b80a 	b.w	8000a80 <__aeabi_d2ulz>
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000a72:	f000 f805 	bl	8000a80 <__aeabi_d2ulz>
 8000a76:	4240      	negs	r0, r0
 8000a78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a7c:	bd38      	pop	{r3, r4, r5, pc}
 8000a7e:	bf00      	nop

08000a80 <__aeabi_d2ulz>:
 8000a80:	b5d0      	push	{r4, r6, r7, lr}
 8000a82:	2200      	movs	r2, #0
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <__aeabi_d2ulz+0x34>)
 8000a86:	4606      	mov	r6, r0
 8000a88:	460f      	mov	r7, r1
 8000a8a:	f7ff fd25 	bl	80004d8 <__aeabi_dmul>
 8000a8e:	f7ff ffbd 	bl	8000a0c <__aeabi_d2uiz>
 8000a92:	4604      	mov	r4, r0
 8000a94:	f7ff fca6 	bl	80003e4 <__aeabi_ui2d>
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <__aeabi_d2ulz+0x38>)
 8000a9c:	f7ff fd1c 	bl	80004d8 <__aeabi_dmul>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	4630      	mov	r0, r6
 8000aa6:	4639      	mov	r1, r7
 8000aa8:	f7ff fb5e 	bl	8000168 <__aeabi_dsub>
 8000aac:	f7ff ffae 	bl	8000a0c <__aeabi_d2uiz>
 8000ab0:	4621      	mov	r1, r4
 8000ab2:	bdd0      	pop	{r4, r6, r7, pc}
 8000ab4:	3df00000 	.word	0x3df00000
 8000ab8:	41f00000 	.word	0x41f00000

08000abc <selfrel_offset31>:
 8000abc:	6803      	ldr	r3, [r0, #0]
 8000abe:	005a      	lsls	r2, r3, #1
 8000ac0:	bf4c      	ite	mi
 8000ac2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	4418      	add	r0, r3
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <search_EIT_table>:
 8000ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ad4:	b339      	cbz	r1, 8000b26 <search_EIT_table+0x56>
 8000ad6:	1e4f      	subs	r7, r1, #1
 8000ad8:	4604      	mov	r4, r0
 8000ada:	4615      	mov	r5, r2
 8000adc:	463e      	mov	r6, r7
 8000ade:	f04f 0800 	mov.w	r8, #0
 8000ae2:	eb08 0106 	add.w	r1, r8, r6
 8000ae6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000aea:	1049      	asrs	r1, r1, #1
 8000aec:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000af0:	4648      	mov	r0, r9
 8000af2:	f7ff ffe3 	bl	8000abc <selfrel_offset31>
 8000af6:	4603      	mov	r3, r0
 8000af8:	00c8      	lsls	r0, r1, #3
 8000afa:	3008      	adds	r0, #8
 8000afc:	428f      	cmp	r7, r1
 8000afe:	4420      	add	r0, r4
 8000b00:	d00b      	beq.n	8000b1a <search_EIT_table+0x4a>
 8000b02:	42ab      	cmp	r3, r5
 8000b04:	d80b      	bhi.n	8000b1e <search_EIT_table+0x4e>
 8000b06:	f7ff ffd9 	bl	8000abc <selfrel_offset31>
 8000b0a:	3801      	subs	r0, #1
 8000b0c:	42a8      	cmp	r0, r5
 8000b0e:	f101 0801 	add.w	r8, r1, #1
 8000b12:	d3e6      	bcc.n	8000ae2 <search_EIT_table+0x12>
 8000b14:	4648      	mov	r0, r9
 8000b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b1a:	42ab      	cmp	r3, r5
 8000b1c:	d9fa      	bls.n	8000b14 <search_EIT_table+0x44>
 8000b1e:	4588      	cmp	r8, r1
 8000b20:	d001      	beq.n	8000b26 <search_EIT_table+0x56>
 8000b22:	1e4e      	subs	r6, r1, #1
 8000b24:	e7dd      	b.n	8000ae2 <search_EIT_table+0x12>
 8000b26:	f04f 0900 	mov.w	r9, #0
 8000b2a:	4648      	mov	r0, r9
 8000b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000b30 <__gnu_unwind_get_pr_addr>:
 8000b30:	2801      	cmp	r0, #1
 8000b32:	d007      	beq.n	8000b44 <__gnu_unwind_get_pr_addr+0x14>
 8000b34:	2802      	cmp	r0, #2
 8000b36:	d007      	beq.n	8000b48 <__gnu_unwind_get_pr_addr+0x18>
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <__gnu_unwind_get_pr_addr+0x1c>)
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	bf0c      	ite	eq
 8000b3e:	4618      	moveq	r0, r3
 8000b40:	2000      	movne	r0, #0
 8000b42:	4770      	bx	lr
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <__gnu_unwind_get_pr_addr+0x20>)
 8000b46:	4770      	bx	lr
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <__gnu_unwind_get_pr_addr+0x24>)
 8000b4a:	4770      	bx	lr
 8000b4c:	08001221 	.word	0x08001221
 8000b50:	08001225 	.word	0x08001225
 8000b54:	08001229 	.word	0x08001229

08000b58 <get_eit_entry>:
 8000b58:	b530      	push	{r4, r5, lr}
 8000b5a:	4b24      	ldr	r3, [pc, #144]	; (8000bec <get_eit_entry+0x94>)
 8000b5c:	4604      	mov	r4, r0
 8000b5e:	b083      	sub	sp, #12
 8000b60:	1e8d      	subs	r5, r1, #2
 8000b62:	b33b      	cbz	r3, 8000bb4 <get_eit_entry+0x5c>
 8000b64:	4628      	mov	r0, r5
 8000b66:	a901      	add	r1, sp, #4
 8000b68:	f3af 8000 	nop.w
 8000b6c:	b1e8      	cbz	r0, 8000baa <get_eit_entry+0x52>
 8000b6e:	9901      	ldr	r1, [sp, #4]
 8000b70:	462a      	mov	r2, r5
 8000b72:	f7ff ffad 	bl	8000ad0 <search_EIT_table>
 8000b76:	4601      	mov	r1, r0
 8000b78:	b1b8      	cbz	r0, 8000baa <get_eit_entry+0x52>
 8000b7a:	f7ff ff9f 	bl	8000abc <selfrel_offset31>
 8000b7e:	684b      	ldr	r3, [r1, #4]
 8000b80:	64a0      	str	r0, [r4, #72]	; 0x48
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d02e      	beq.n	8000be4 <get_eit_entry+0x8c>
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db27      	blt.n	8000bda <get_eit_entry+0x82>
 8000b8a:	1d08      	adds	r0, r1, #4
 8000b8c:	f7ff ff96 	bl	8000abc <selfrel_offset31>
 8000b90:	2300      	movs	r3, #0
 8000b92:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000b96:	6803      	ldr	r3, [r0, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	db12      	blt.n	8000bc2 <get_eit_entry+0x6a>
 8000b9c:	f7ff ff8e 	bl	8000abc <selfrel_offset31>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	6123      	str	r3, [r4, #16]
 8000ba6:	b003      	add	sp, #12
 8000ba8:	bd30      	pop	{r4, r5, pc}
 8000baa:	2300      	movs	r3, #0
 8000bac:	2009      	movs	r0, #9
 8000bae:	6123      	str	r3, [r4, #16]
 8000bb0:	b003      	add	sp, #12
 8000bb2:	bd30      	pop	{r4, r5, pc}
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <get_eit_entry+0x98>)
 8000bb6:	490f      	ldr	r1, [pc, #60]	; (8000bf4 <get_eit_entry+0x9c>)
 8000bb8:	4618      	mov	r0, r3
 8000bba:	1ac9      	subs	r1, r1, r3
 8000bbc:	10c9      	asrs	r1, r1, #3
 8000bbe:	9101      	str	r1, [sp, #4]
 8000bc0:	e7d6      	b.n	8000b70 <get_eit_entry+0x18>
 8000bc2:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000bc6:	f7ff ffb3 	bl	8000b30 <__gnu_unwind_get_pr_addr>
 8000bca:	2800      	cmp	r0, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	bf14      	ite	ne
 8000bd0:	2000      	movne	r0, #0
 8000bd2:	2009      	moveq	r0, #9
 8000bd4:	6123      	str	r3, [r4, #16]
 8000bd6:	b003      	add	sp, #12
 8000bd8:	bd30      	pop	{r4, r5, pc}
 8000bda:	2301      	movs	r3, #1
 8000bdc:	1d08      	adds	r0, r1, #4
 8000bde:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000be2:	e7d8      	b.n	8000b96 <get_eit_entry+0x3e>
 8000be4:	2300      	movs	r3, #0
 8000be6:	2005      	movs	r0, #5
 8000be8:	6123      	str	r3, [r4, #16]
 8000bea:	e7dc      	b.n	8000ba6 <get_eit_entry+0x4e>
 8000bec:	00000000 	.word	0x00000000
 8000bf0:	0800c518 	.word	0x0800c518
 8000bf4:	0800c8c8 	.word	0x0800c8c8

08000bf8 <restore_non_core_regs>:
 8000bf8:	6803      	ldr	r3, [r0, #0]
 8000bfa:	b510      	push	{r4, lr}
 8000bfc:	07da      	lsls	r2, r3, #31
 8000bfe:	4604      	mov	r4, r0
 8000c00:	d406      	bmi.n	8000c10 <restore_non_core_regs+0x18>
 8000c02:	079b      	lsls	r3, r3, #30
 8000c04:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000c08:	d509      	bpl.n	8000c1e <restore_non_core_regs+0x26>
 8000c0a:	f000 fc5d 	bl	80014c8 <__gnu_Unwind_Restore_VFP_D>
 8000c0e:	6823      	ldr	r3, [r4, #0]
 8000c10:	0759      	lsls	r1, r3, #29
 8000c12:	d509      	bpl.n	8000c28 <restore_non_core_regs+0x30>
 8000c14:	071a      	lsls	r2, r3, #28
 8000c16:	d50e      	bpl.n	8000c36 <restore_non_core_regs+0x3e>
 8000c18:	06db      	lsls	r3, r3, #27
 8000c1a:	d513      	bpl.n	8000c44 <restore_non_core_regs+0x4c>
 8000c1c:	bd10      	pop	{r4, pc}
 8000c1e:	f000 fc4b 	bl	80014b8 <__gnu_Unwind_Restore_VFP>
 8000c22:	6823      	ldr	r3, [r4, #0]
 8000c24:	0759      	lsls	r1, r3, #29
 8000c26:	d4f5      	bmi.n	8000c14 <restore_non_core_regs+0x1c>
 8000c28:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000c2c:	f000 fc54 	bl	80014d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000c30:	6823      	ldr	r3, [r4, #0]
 8000c32:	071a      	lsls	r2, r3, #28
 8000c34:	d4f0      	bmi.n	8000c18 <restore_non_core_regs+0x20>
 8000c36:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000c3a:	f000 fc55 	bl	80014e8 <__gnu_Unwind_Restore_WMMXD>
 8000c3e:	6823      	ldr	r3, [r4, #0]
 8000c40:	06db      	lsls	r3, r3, #27
 8000c42:	d4eb      	bmi.n	8000c1c <restore_non_core_regs+0x24>
 8000c44:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c4c:	f000 bc90 	b.w	8001570 <__gnu_Unwind_Restore_WMMXC>

08000c50 <__gnu_unwind_24bit.constprop.0>:
 8000c50:	2009      	movs	r0, #9
 8000c52:	4770      	bx	lr

08000c54 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8000c54:	4603      	mov	r3, r0
 8000c56:	6800      	ldr	r0, [r0, #0]
 8000c58:	b100      	cbz	r0, 8000c5c <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8000c5a:	4418      	add	r0, r3
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop

08000c60 <_Unwind_DebugHook>:
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <unwind_phase2>:
 8000c64:	b570      	push	{r4, r5, r6, lr}
 8000c66:	4604      	mov	r4, r0
 8000c68:	460e      	mov	r6, r1
 8000c6a:	4620      	mov	r0, r4
 8000c6c:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000c6e:	f7ff ff73 	bl	8000b58 <get_eit_entry>
 8000c72:	4605      	mov	r5, r0
 8000c74:	b998      	cbnz	r0, 8000c9e <unwind_phase2+0x3a>
 8000c76:	f8d6 c040 	ldr.w	ip, [r6, #64]	; 0x40
 8000c7a:	4632      	mov	r2, r6
 8000c7c:	4621      	mov	r1, r4
 8000c7e:	2001      	movs	r0, #1
 8000c80:	6923      	ldr	r3, [r4, #16]
 8000c82:	f8c4 c014 	str.w	ip, [r4, #20]
 8000c86:	4798      	blx	r3
 8000c88:	2808      	cmp	r0, #8
 8000c8a:	d0ee      	beq.n	8000c6a <unwind_phase2+0x6>
 8000c8c:	2807      	cmp	r0, #7
 8000c8e:	d106      	bne.n	8000c9e <unwind_phase2+0x3a>
 8000c90:	4628      	mov	r0, r5
 8000c92:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000c94:	f7ff ffe4 	bl	8000c60 <_Unwind_DebugHook>
 8000c98:	1d30      	adds	r0, r6, #4
 8000c9a:	f000 fc01 	bl	80014a0 <__restore_core_regs>
 8000c9e:	f007 ff7f 	bl	8008ba0 <abort>
 8000ca2:	bf00      	nop

08000ca4 <unwind_phase2_forced>:
 8000ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca8:	f04f 0a00 	mov.w	sl, #0
 8000cac:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000cb0:	f10d 0e0c 	add.w	lr, sp, #12
 8000cb4:	f101 0c04 	add.w	ip, r1, #4
 8000cb8:	68c7      	ldr	r7, [r0, #12]
 8000cba:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	4614      	mov	r4, r2
 8000cc2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000cc6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000cca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000cce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000cd2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000cd6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000cda:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000cde:	ad02      	add	r5, sp, #8
 8000ce0:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000ce4:	f8c5 a000 	str.w	sl, [r5]
 8000ce8:	e021      	b.n	8000d2e <unwind_phase2_forced+0x8a>
 8000cea:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000cec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000cf0:	4629      	mov	r1, r5
 8000cf2:	6173      	str	r3, [r6, #20]
 8000cf4:	a87a      	add	r0, sp, #488	; 0x1e8
 8000cf6:	f007 ffa3 	bl	8008c40 <memcpy>
 8000cfa:	4631      	mov	r1, r6
 8000cfc:	4650      	mov	r0, sl
 8000cfe:	6933      	ldr	r3, [r6, #16]
 8000d00:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000d02:	4798      	blx	r3
 8000d04:	9c88      	ldr	r4, [sp, #544]	; 0x220
 8000d06:	4682      	mov	sl, r0
 8000d08:	646c      	str	r4, [r5, #68]	; 0x44
 8000d0a:	4633      	mov	r3, r6
 8000d0c:	4632      	mov	r2, r6
 8000d0e:	4649      	mov	r1, r9
 8000d10:	2001      	movs	r0, #1
 8000d12:	e9cd 5800 	strd	r5, r8, [sp]
 8000d16:	47b8      	blx	r7
 8000d18:	4604      	mov	r4, r0
 8000d1a:	b9f0      	cbnz	r0, 8000d5a <unwind_phase2_forced+0xb6>
 8000d1c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000d20:	4628      	mov	r0, r5
 8000d22:	a97a      	add	r1, sp, #488	; 0x1e8
 8000d24:	f007 ff8c 	bl	8008c40 <memcpy>
 8000d28:	f1ba 0f08 	cmp.w	sl, #8
 8000d2c:	d11b      	bne.n	8000d66 <unwind_phase2_forced+0xc2>
 8000d2e:	4630      	mov	r0, r6
 8000d30:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000d32:	f7ff ff11 	bl	8000b58 <get_eit_entry>
 8000d36:	f104 0909 	add.w	r9, r4, #9
 8000d3a:	fa5f fa89 	uxtb.w	sl, r9
 8000d3e:	4604      	mov	r4, r0
 8000d40:	2800      	cmp	r0, #0
 8000d42:	d0d2      	beq.n	8000cea <unwind_phase2_forced+0x46>
 8000d44:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8000d46:	4633      	mov	r3, r6
 8000d48:	6469      	str	r1, [r5, #68]	; 0x44
 8000d4a:	4632      	mov	r2, r6
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	e9cd 5800 	strd	r5, r8, [sp]
 8000d52:	f04a 0110 	orr.w	r1, sl, #16
 8000d56:	47b8      	blx	r7
 8000d58:	b100      	cbz	r0, 8000d5c <unwind_phase2_forced+0xb8>
 8000d5a:	2409      	movs	r4, #9
 8000d5c:	4620      	mov	r0, r4
 8000d5e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	f1ba 0f07 	cmp.w	sl, #7
 8000d6a:	d1f6      	bne.n	8000d5a <unwind_phase2_forced+0xb6>
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000d70:	f7ff ff76 	bl	8000c60 <_Unwind_DebugHook>
 8000d74:	a803      	add	r0, sp, #12
 8000d76:	f000 fb93 	bl	80014a0 <__restore_core_regs>
 8000d7a:	bf00      	nop

08000d7c <_Unwind_GetCFA>:
 8000d7c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000d7e:	4770      	bx	lr

08000d80 <__gnu_Unwind_RaiseException>:
 8000d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d82:	f04f 37ff 	mov.w	r7, #4294967295
 8000d86:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000d88:	b0f9      	sub	sp, #484	; 0x1e4
 8000d8a:	640b      	str	r3, [r1, #64]	; 0x40
 8000d8c:	ac01      	add	r4, sp, #4
 8000d8e:	f101 0c04 	add.w	ip, r1, #4
 8000d92:	460e      	mov	r6, r1
 8000d94:	4605      	mov	r5, r0
 8000d96:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000da0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da8:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000db0:	9700      	str	r7, [sp, #0]
 8000db2:	e006      	b.n	8000dc2 <__gnu_Unwind_RaiseException+0x42>
 8000db4:	466a      	mov	r2, sp
 8000db6:	4629      	mov	r1, r5
 8000db8:	692b      	ldr	r3, [r5, #16]
 8000dba:	4798      	blx	r3
 8000dbc:	2808      	cmp	r0, #8
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	d108      	bne.n	8000dd4 <__gnu_Unwind_RaiseException+0x54>
 8000dc2:	4628      	mov	r0, r5
 8000dc4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000dc6:	f7ff fec7 	bl	8000b58 <get_eit_entry>
 8000dca:	2800      	cmp	r0, #0
 8000dcc:	d0f2      	beq.n	8000db4 <__gnu_Unwind_RaiseException+0x34>
 8000dce:	2009      	movs	r0, #9
 8000dd0:	b079      	add	sp, #484	; 0x1e4
 8000dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dd4:	4668      	mov	r0, sp
 8000dd6:	f7ff ff0f 	bl	8000bf8 <restore_non_core_regs>
 8000dda:	2c06      	cmp	r4, #6
 8000ddc:	d1f7      	bne.n	8000dce <__gnu_Unwind_RaiseException+0x4e>
 8000dde:	4631      	mov	r1, r6
 8000de0:	4628      	mov	r0, r5
 8000de2:	f7ff ff3f 	bl	8000c64 <unwind_phase2>
 8000de6:	bf00      	nop

08000de8 <__gnu_Unwind_ForcedUnwind>:
 8000de8:	b410      	push	{r4}
 8000dea:	4614      	mov	r4, r2
 8000dec:	6184      	str	r4, [r0, #24]
 8000dee:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8000df0:	60c1      	str	r1, [r0, #12]
 8000df2:	2200      	movs	r2, #0
 8000df4:	641c      	str	r4, [r3, #64]	; 0x40
 8000df6:	4619      	mov	r1, r3
 8000df8:	bc10      	pop	{r4}
 8000dfa:	e753      	b.n	8000ca4 <unwind_phase2_forced>

08000dfc <__gnu_Unwind_Resume>:
 8000dfc:	b570      	push	{r4, r5, r6, lr}
 8000dfe:	6943      	ldr	r3, [r0, #20]
 8000e00:	68c6      	ldr	r6, [r0, #12]
 8000e02:	640b      	str	r3, [r1, #64]	; 0x40
 8000e04:	b9ae      	cbnz	r6, 8000e32 <__gnu_Unwind_Resume+0x36>
 8000e06:	460a      	mov	r2, r1
 8000e08:	6903      	ldr	r3, [r0, #16]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	460d      	mov	r5, r1
 8000e0e:	4601      	mov	r1, r0
 8000e10:	2002      	movs	r0, #2
 8000e12:	4798      	blx	r3
 8000e14:	2807      	cmp	r0, #7
 8000e16:	d005      	beq.n	8000e24 <__gnu_Unwind_Resume+0x28>
 8000e18:	2808      	cmp	r0, #8
 8000e1a:	d10f      	bne.n	8000e3c <__gnu_Unwind_Resume+0x40>
 8000e1c:	4629      	mov	r1, r5
 8000e1e:	4620      	mov	r0, r4
 8000e20:	f7ff ff20 	bl	8000c64 <unwind_phase2>
 8000e24:	4630      	mov	r0, r6
 8000e26:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000e28:	f7ff ff1a 	bl	8000c60 <_Unwind_DebugHook>
 8000e2c:	1d28      	adds	r0, r5, #4
 8000e2e:	f000 fb37 	bl	80014a0 <__restore_core_regs>
 8000e32:	2201      	movs	r2, #1
 8000e34:	f7ff ff36 	bl	8000ca4 <unwind_phase2_forced>
 8000e38:	f007 feb2 	bl	8008ba0 <abort>
 8000e3c:	f007 feb0 	bl	8008ba0 <abort>

08000e40 <__gnu_Unwind_Resume_or_Rethrow>:
 8000e40:	68c2      	ldr	r2, [r0, #12]
 8000e42:	b12a      	cbz	r2, 8000e50 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8000e44:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
 8000e4e:	e729      	b.n	8000ca4 <unwind_phase2_forced>
 8000e50:	e796      	b.n	8000d80 <__gnu_Unwind_RaiseException>
 8000e52:	bf00      	nop

08000e54 <_Unwind_Complete>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <_Unwind_DeleteException>:
 8000e58:	6883      	ldr	r3, [r0, #8]
 8000e5a:	4601      	mov	r1, r0
 8000e5c:	b10b      	cbz	r3, 8000e62 <_Unwind_DeleteException+0xa>
 8000e5e:	2001      	movs	r0, #1
 8000e60:	4718      	bx	r3
 8000e62:	4770      	bx	lr

08000e64 <_Unwind_VRS_Get>:
 8000e64:	2901      	cmp	r1, #1
 8000e66:	d012      	beq.n	8000e8e <_Unwind_VRS_Get+0x2a>
 8000e68:	d809      	bhi.n	8000e7e <_Unwind_VRS_Get+0x1a>
 8000e6a:	b973      	cbnz	r3, 8000e8a <_Unwind_VRS_Get+0x26>
 8000e6c:	2a0f      	cmp	r2, #15
 8000e6e:	d80c      	bhi.n	8000e8a <_Unwind_VRS_Get+0x26>
 8000e70:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8000e74:	6842      	ldr	r2, [r0, #4]
 8000e76:	4618      	mov	r0, r3
 8000e78:	9b00      	ldr	r3, [sp, #0]
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	4770      	bx	lr
 8000e7e:	3903      	subs	r1, #3
 8000e80:	2901      	cmp	r1, #1
 8000e82:	bf94      	ite	ls
 8000e84:	2001      	movls	r0, #1
 8000e86:	2002      	movhi	r0, #2
 8000e88:	4770      	bx	lr
 8000e8a:	2002      	movs	r0, #2
 8000e8c:	4770      	bx	lr
 8000e8e:	4608      	mov	r0, r1
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <_Unwind_GetGR>:
 8000e94:	2300      	movs	r3, #0
 8000e96:	b500      	push	{lr}
 8000e98:	b085      	sub	sp, #20
 8000e9a:	460a      	mov	r2, r1
 8000e9c:	a903      	add	r1, sp, #12
 8000e9e:	9100      	str	r1, [sp, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f7ff ffdf 	bl	8000e64 <_Unwind_VRS_Get>
 8000ea6:	9803      	ldr	r0, [sp, #12]
 8000ea8:	b005      	add	sp, #20
 8000eaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8000eae:	bf00      	nop

08000eb0 <_Unwind_VRS_Set>:
 8000eb0:	2901      	cmp	r1, #1
 8000eb2:	d012      	beq.n	8000eda <_Unwind_VRS_Set+0x2a>
 8000eb4:	d809      	bhi.n	8000eca <_Unwind_VRS_Set+0x1a>
 8000eb6:	b973      	cbnz	r3, 8000ed6 <_Unwind_VRS_Set+0x26>
 8000eb8:	2a0f      	cmp	r2, #15
 8000eba:	d80c      	bhi.n	8000ed6 <_Unwind_VRS_Set+0x26>
 8000ebc:	9900      	ldr	r1, [sp, #0]
 8000ebe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000ec2:	6809      	ldr	r1, [r1, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	6051      	str	r1, [r2, #4]
 8000ec8:	4770      	bx	lr
 8000eca:	3903      	subs	r1, #3
 8000ecc:	2901      	cmp	r1, #1
 8000ece:	bf94      	ite	ls
 8000ed0:	2001      	movls	r0, #1
 8000ed2:	2002      	movhi	r0, #2
 8000ed4:	4770      	bx	lr
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	4770      	bx	lr
 8000eda:	4608      	mov	r0, r1
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <_Unwind_SetGR>:
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	b510      	push	{r4, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	ac03      	add	r4, sp, #12
 8000ee8:	9203      	str	r2, [sp, #12]
 8000eea:	9400      	str	r4, [sp, #0]
 8000eec:	460a      	mov	r2, r1
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f7ff ffde 	bl	8000eb0 <_Unwind_VRS_Set>
 8000ef4:	b004      	add	sp, #16
 8000ef6:	bd10      	pop	{r4, pc}

08000ef8 <__gnu_Unwind_Backtrace>:
 8000ef8:	b570      	push	{r4, r5, r6, lr}
 8000efa:	f04f 36ff 	mov.w	r6, #4294967295
 8000efe:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000f00:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 8000f0a:	f102 0c04 	add.w	ip, r2, #4
 8000f0e:	4605      	mov	r5, r0
 8000f10:	460c      	mov	r4, r1
 8000f12:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000f16:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000f1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000f1e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000f22:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000f26:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000f2a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000f2e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000f32:	9616      	str	r6, [sp, #88]	; 0x58
 8000f34:	e012      	b.n	8000f5c <__gnu_Unwind_Backtrace+0x64>
 8000f36:	210c      	movs	r1, #12
 8000f38:	a816      	add	r0, sp, #88	; 0x58
 8000f3a:	466a      	mov	r2, sp
 8000f3c:	f7ff ffd0 	bl	8000ee0 <_Unwind_SetGR>
 8000f40:	4621      	mov	r1, r4
 8000f42:	a816      	add	r0, sp, #88	; 0x58
 8000f44:	47a8      	blx	r5
 8000f46:	b978      	cbnz	r0, 8000f68 <__gnu_Unwind_Backtrace+0x70>
 8000f48:	4669      	mov	r1, sp
 8000f4a:	2008      	movs	r0, #8
 8000f4c:	9b04      	ldr	r3, [sp, #16]
 8000f4e:	aa16      	add	r2, sp, #88	; 0x58
 8000f50:	4798      	blx	r3
 8000f52:	2805      	cmp	r0, #5
 8000f54:	4606      	mov	r6, r0
 8000f56:	d008      	beq.n	8000f6a <__gnu_Unwind_Backtrace+0x72>
 8000f58:	2809      	cmp	r0, #9
 8000f5a:	d005      	beq.n	8000f68 <__gnu_Unwind_Backtrace+0x70>
 8000f5c:	4668      	mov	r0, sp
 8000f5e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000f60:	f7ff fdfa 	bl	8000b58 <get_eit_entry>
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__gnu_Unwind_Backtrace+0x3e>
 8000f68:	2609      	movs	r6, #9
 8000f6a:	a816      	add	r0, sp, #88	; 0x58
 8000f6c:	f7ff fe44 	bl	8000bf8 <restore_non_core_regs>
 8000f70:	4630      	mov	r0, r6
 8000f72:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8000f76:	bd70      	pop	{r4, r5, r6, pc}

08000f78 <__gnu_unwind_pr_common>:
 8000f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f7c:	461e      	mov	r6, r3
 8000f7e:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000f80:	b089      	sub	sp, #36	; 0x24
 8000f82:	f854 3b04 	ldr.w	r3, [r4], #4
 8000f86:	460d      	mov	r5, r1
 8000f88:	4617      	mov	r7, r2
 8000f8a:	f000 0803 	and.w	r8, r0, #3
 8000f8e:	9406      	str	r4, [sp, #24]
 8000f90:	2e00      	cmp	r6, #0
 8000f92:	d079      	beq.n	8001088 <__gnu_unwind_pr_common+0x110>
 8000f94:	2202      	movs	r2, #2
 8000f96:	f88d 201c 	strb.w	r2, [sp, #28]
 8000f9a:	0c1a      	lsrs	r2, r3, #16
 8000f9c:	f88d 201d 	strb.w	r2, [sp, #29]
 8000fa0:	041b      	lsls	r3, r3, #16
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	9305      	str	r3, [sp, #20]
 8000fa6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000faa:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000fac:	f1b8 0f02 	cmp.w	r8, #2
 8000fb0:	bf08      	it	eq
 8000fb2:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000fb4:	f013 0301 	ands.w	r3, r3, #1
 8000fb8:	d00c      	beq.n	8000fd4 <__gnu_unwind_pr_common+0x5c>
 8000fba:	4638      	mov	r0, r7
 8000fbc:	a905      	add	r1, sp, #20
 8000fbe:	f000 fb71 	bl	80016a4 <__gnu_unwind_execute>
 8000fc2:	b918      	cbnz	r0, 8000fcc <__gnu_unwind_pr_common+0x54>
 8000fc4:	2008      	movs	r0, #8
 8000fc6:	b009      	add	sp, #36	; 0x24
 8000fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fcc:	2009      	movs	r0, #9
 8000fce:	b009      	add	sp, #36	; 0x24
 8000fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fd4:	f8d4 a000 	ldr.w	sl, [r4]
 8000fd8:	f1ba 0f00 	cmp.w	sl, #0
 8000fdc:	d0ed      	beq.n	8000fba <__gnu_unwind_pr_common+0x42>
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	f000 0308 	and.w	r3, r0, #8
 8000fe4:	9302      	str	r3, [sp, #8]
 8000fe6:	2e02      	cmp	r6, #2
 8000fe8:	d04a      	beq.n	8001080 <__gnu_unwind_pr_common+0x108>
 8000fea:	f8b4 a000 	ldrh.w	sl, [r4]
 8000fee:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000ff2:	3404      	adds	r4, #4
 8000ff4:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8000ff6:	210f      	movs	r1, #15
 8000ff8:	4638      	mov	r0, r7
 8000ffa:	f029 0b01 	bic.w	fp, r9, #1
 8000ffe:	4493      	add	fp, r2
 8001000:	f7ff ff48 	bl	8000e94 <_Unwind_GetGR>
 8001004:	4583      	cmp	fp, r0
 8001006:	d839      	bhi.n	800107c <__gnu_unwind_pr_common+0x104>
 8001008:	f02a 0201 	bic.w	r2, sl, #1
 800100c:	445a      	add	r2, fp
 800100e:	4282      	cmp	r2, r0
 8001010:	bf94      	ite	ls
 8001012:	2000      	movls	r0, #0
 8001014:	2001      	movhi	r0, #1
 8001016:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	f00a 0a01 	and.w	sl, sl, #1
 8001022:	ea43 030a 	orr.w	r3, r3, sl
 8001026:	2b01      	cmp	r3, #1
 8001028:	d049      	beq.n	80010be <__gnu_unwind_pr_common+0x146>
 800102a:	2b02      	cmp	r3, #2
 800102c:	d032      	beq.n	8001094 <__gnu_unwind_pr_common+0x11c>
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1cc      	bne.n	8000fcc <__gnu_unwind_pr_common+0x54>
 8001032:	f1b8 0f00 	cmp.w	r8, #0
 8001036:	d002      	beq.n	800103e <__gnu_unwind_pr_common+0xc6>
 8001038:	2800      	cmp	r0, #0
 800103a:	f040 80ce 	bne.w	80011da <__gnu_unwind_pr_common+0x262>
 800103e:	3404      	adds	r4, #4
 8001040:	f8d4 a000 	ldr.w	sl, [r4]
 8001044:	f1ba 0f00 	cmp.w	sl, #0
 8001048:	d1cd      	bne.n	8000fe6 <__gnu_unwind_pr_common+0x6e>
 800104a:	4638      	mov	r0, r7
 800104c:	a905      	add	r1, sp, #20
 800104e:	f000 fb29 	bl	80016a4 <__gnu_unwind_execute>
 8001052:	2800      	cmp	r0, #0
 8001054:	d1ba      	bne.n	8000fcc <__gnu_unwind_pr_common+0x54>
 8001056:	9b01      	ldr	r3, [sp, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0b3      	beq.n	8000fc4 <__gnu_unwind_pr_common+0x4c>
 800105c:	210f      	movs	r1, #15
 800105e:	4638      	mov	r0, r7
 8001060:	f7ff ff18 	bl	8000e94 <_Unwind_GetGR>
 8001064:	210e      	movs	r1, #14
 8001066:	4602      	mov	r2, r0
 8001068:	4638      	mov	r0, r7
 800106a:	f7ff ff39 	bl	8000ee0 <_Unwind_SetGR>
 800106e:	4638      	mov	r0, r7
 8001070:	210f      	movs	r1, #15
 8001072:	4a6a      	ldr	r2, [pc, #424]	; (800121c <__gnu_unwind_pr_common+0x2a4>)
 8001074:	f7ff ff34 	bl	8000ee0 <_Unwind_SetGR>
 8001078:	2007      	movs	r0, #7
 800107a:	e7a8      	b.n	8000fce <__gnu_unwind_pr_common+0x56>
 800107c:	2000      	movs	r0, #0
 800107e:	e7ca      	b.n	8001016 <__gnu_unwind_pr_common+0x9e>
 8001080:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8001084:	3408      	adds	r4, #8
 8001086:	e7b5      	b.n	8000ff4 <__gnu_unwind_pr_common+0x7c>
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	9305      	str	r3, [sp, #20]
 800108c:	2303      	movs	r3, #3
 800108e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8001092:	e78a      	b.n	8000faa <__gnu_unwind_pr_common+0x32>
 8001094:	6823      	ldr	r3, [r4, #0]
 8001096:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800109a:	f1b8 0f00 	cmp.w	r8, #0
 800109e:	d145      	bne.n	800112c <__gnu_unwind_pr_common+0x1b4>
 80010a0:	b128      	cbz	r0, 80010ae <__gnu_unwind_pr_common+0x136>
 80010a2:	9a02      	ldr	r2, [sp, #8]
 80010a4:	2a00      	cmp	r2, #0
 80010a6:	d05c      	beq.n	8001162 <__gnu_unwind_pr_common+0x1ea>
 80010a8:	f1bb 0f00 	cmp.w	fp, #0
 80010ac:	d074      	beq.n	8001198 <__gnu_unwind_pr_common+0x220>
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	da00      	bge.n	80010b4 <__gnu_unwind_pr_common+0x13c>
 80010b2:	3404      	adds	r4, #4
 80010b4:	f10b 0b01 	add.w	fp, fp, #1
 80010b8:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 80010bc:	e7c0      	b.n	8001040 <__gnu_unwind_pr_common+0xc8>
 80010be:	f1b8 0f00 	cmp.w	r8, #0
 80010c2:	d119      	bne.n	80010f8 <__gnu_unwind_pr_common+0x180>
 80010c4:	b1b0      	cbz	r0, 80010f4 <__gnu_unwind_pr_common+0x17c>
 80010c6:	6863      	ldr	r3, [r4, #4]
 80010c8:	6822      	ldr	r2, [r4, #0]
 80010ca:	1c99      	adds	r1, r3, #2
 80010cc:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80010d0:	f43f af7c 	beq.w	8000fcc <__gnu_unwind_pr_common+0x54>
 80010d4:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80010d8:	3301      	adds	r3, #1
 80010da:	9104      	str	r1, [sp, #16]
 80010dc:	f000 8091 	beq.w	8001202 <__gnu_unwind_pr_common+0x28a>
 80010e0:	1d20      	adds	r0, r4, #4
 80010e2:	f7ff fdb7 	bl	8000c54 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80010e6:	ab04      	add	r3, sp, #16
 80010e8:	4601      	mov	r1, r0
 80010ea:	4628      	mov	r0, r5
 80010ec:	f3af 8000 	nop.w
 80010f0:	2800      	cmp	r0, #0
 80010f2:	d15c      	bne.n	80011ae <__gnu_unwind_pr_common+0x236>
 80010f4:	3408      	adds	r4, #8
 80010f6:	e7a3      	b.n	8001040 <__gnu_unwind_pr_common+0xc8>
 80010f8:	210d      	movs	r1, #13
 80010fa:	4638      	mov	r0, r7
 80010fc:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8001100:	f7ff fec8 	bl	8000e94 <_Unwind_GetGR>
 8001104:	4581      	cmp	r9, r0
 8001106:	d1f5      	bne.n	80010f4 <__gnu_unwind_pr_common+0x17c>
 8001108:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800110a:	429c      	cmp	r4, r3
 800110c:	d1f2      	bne.n	80010f4 <__gnu_unwind_pr_common+0x17c>
 800110e:	4620      	mov	r0, r4
 8001110:	f7ff fcd4 	bl	8000abc <selfrel_offset31>
 8001114:	210f      	movs	r1, #15
 8001116:	4602      	mov	r2, r0
 8001118:	4638      	mov	r0, r7
 800111a:	f7ff fee1 	bl	8000ee0 <_Unwind_SetGR>
 800111e:	4638      	mov	r0, r7
 8001120:	462a      	mov	r2, r5
 8001122:	2100      	movs	r1, #0
 8001124:	f7ff fedc 	bl	8000ee0 <_Unwind_SetGR>
 8001128:	2007      	movs	r0, #7
 800112a:	e750      	b.n	8000fce <__gnu_unwind_pr_common+0x56>
 800112c:	210d      	movs	r1, #13
 800112e:	4638      	mov	r0, r7
 8001130:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8001134:	f7ff feae 	bl	8000e94 <_Unwind_GetGR>
 8001138:	4581      	cmp	r9, r0
 800113a:	d001      	beq.n	8001140 <__gnu_unwind_pr_common+0x1c8>
 800113c:	6823      	ldr	r3, [r4, #0]
 800113e:	e7b6      	b.n	80010ae <__gnu_unwind_pr_common+0x136>
 8001140:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001142:	429c      	cmp	r4, r3
 8001144:	d1fa      	bne.n	800113c <__gnu_unwind_pr_common+0x1c4>
 8001146:	2304      	movs	r3, #4
 8001148:	2200      	movs	r2, #0
 800114a:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 800114e:	18e3      	adds	r3, r4, r3
 8001150:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8001154:	636b      	str	r3, [r5, #52]	; 0x34
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db5a      	blt.n	8001212 <__gnu_unwind_pr_common+0x29a>
 800115c:	2301      	movs	r3, #1
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	e7a8      	b.n	80010b4 <__gnu_unwind_pr_common+0x13c>
 8001162:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8001166:	f8cd 800c 	str.w	r8, [sp, #12]
 800116a:	4691      	mov	r9, r2
 800116c:	46b0      	mov	r8, r6
 800116e:	f104 0a04 	add.w	sl, r4, #4
 8001172:	461e      	mov	r6, r3
 8001174:	e00e      	b.n	8001194 <__gnu_unwind_pr_common+0x21c>
 8001176:	4650      	mov	r0, sl
 8001178:	9604      	str	r6, [sp, #16]
 800117a:	f7ff fd6b 	bl	8000c54 <_Unwind_decode_typeinfo_ptr.constprop.0>
 800117e:	2200      	movs	r2, #0
 8001180:	4601      	mov	r1, r0
 8001182:	ab04      	add	r3, sp, #16
 8001184:	4628      	mov	r0, r5
 8001186:	f109 0901 	add.w	r9, r9, #1
 800118a:	f10a 0a04 	add.w	sl, sl, #4
 800118e:	f3af 8000 	nop.w
 8001192:	b9e8      	cbnz	r0, 80011d0 <__gnu_unwind_pr_common+0x258>
 8001194:	45d9      	cmp	r9, fp
 8001196:	d1ee      	bne.n	8001176 <__gnu_unwind_pr_common+0x1fe>
 8001198:	210d      	movs	r1, #13
 800119a:	4638      	mov	r0, r7
 800119c:	f7ff fe7a 	bl	8000e94 <_Unwind_GetGR>
 80011a0:	4603      	mov	r3, r0
 80011a2:	9a04      	ldr	r2, [sp, #16]
 80011a4:	2006      	movs	r0, #6
 80011a6:	e9c5 2409 	strd	r2, r4, [r5, #36]	; 0x24
 80011aa:	622b      	str	r3, [r5, #32]
 80011ac:	e70f      	b.n	8000fce <__gnu_unwind_pr_common+0x56>
 80011ae:	4681      	mov	r9, r0
 80011b0:	210d      	movs	r1, #13
 80011b2:	4638      	mov	r0, r7
 80011b4:	f7ff fe6e 	bl	8000e94 <_Unwind_GetGR>
 80011b8:	f1b9 0f02 	cmp.w	r9, #2
 80011bc:	6228      	str	r0, [r5, #32]
 80011be:	d125      	bne.n	800120c <__gnu_unwind_pr_common+0x294>
 80011c0:	462b      	mov	r3, r5
 80011c2:	9a04      	ldr	r2, [sp, #16]
 80011c4:	f843 2f2c 	str.w	r2, [r3, #44]!
 80011c8:	626b      	str	r3, [r5, #36]	; 0x24
 80011ca:	2006      	movs	r0, #6
 80011cc:	62ac      	str	r4, [r5, #40]	; 0x28
 80011ce:	e6fe      	b.n	8000fce <__gnu_unwind_pr_common+0x56>
 80011d0:	4646      	mov	r6, r8
 80011d2:	6823      	ldr	r3, [r4, #0]
 80011d4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80011d8:	e769      	b.n	80010ae <__gnu_unwind_pr_common+0x136>
 80011da:	4620      	mov	r0, r4
 80011dc:	f7ff fc6e 	bl	8000abc <selfrel_offset31>
 80011e0:	4602      	mov	r2, r0
 80011e2:	3404      	adds	r4, #4
 80011e4:	63ac      	str	r4, [r5, #56]	; 0x38
 80011e6:	4628      	mov	r0, r5
 80011e8:	4614      	mov	r4, r2
 80011ea:	f3af 8000 	nop.w
 80011ee:	2800      	cmp	r0, #0
 80011f0:	f43f aeec 	beq.w	8000fcc <__gnu_unwind_pr_common+0x54>
 80011f4:	4638      	mov	r0, r7
 80011f6:	4622      	mov	r2, r4
 80011f8:	210f      	movs	r1, #15
 80011fa:	f7ff fe71 	bl	8000ee0 <_Unwind_SetGR>
 80011fe:	2007      	movs	r0, #7
 8001200:	e6e5      	b.n	8000fce <__gnu_unwind_pr_common+0x56>
 8001202:	210d      	movs	r1, #13
 8001204:	4638      	mov	r0, r7
 8001206:	f7ff fe45 	bl	8000e94 <_Unwind_GetGR>
 800120a:	6228      	str	r0, [r5, #32]
 800120c:	9b04      	ldr	r3, [sp, #16]
 800120e:	626b      	str	r3, [r5, #36]	; 0x24
 8001210:	e7db      	b.n	80011ca <__gnu_unwind_pr_common+0x252>
 8001212:	f10b 0001 	add.w	r0, fp, #1
 8001216:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800121a:	e779      	b.n	8001110 <__gnu_unwind_pr_common+0x198>
 800121c:	00000000 	.word	0x00000000

08001220 <__aeabi_unwind_cpp_pr0>:
 8001220:	2300      	movs	r3, #0
 8001222:	e6a9      	b.n	8000f78 <__gnu_unwind_pr_common>

08001224 <__aeabi_unwind_cpp_pr1>:
 8001224:	2301      	movs	r3, #1
 8001226:	e6a7      	b.n	8000f78 <__gnu_unwind_pr_common>

08001228 <__aeabi_unwind_cpp_pr2>:
 8001228:	2302      	movs	r3, #2
 800122a:	e6a5      	b.n	8000f78 <__gnu_unwind_pr_common>

0800122c <_Unwind_VRS_Pop>:
 800122c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001230:	4606      	mov	r6, r0
 8001232:	4615      	mov	r5, r2
 8001234:	461c      	mov	r4, r3
 8001236:	b0c3      	sub	sp, #268	; 0x10c
 8001238:	2904      	cmp	r1, #4
 800123a:	f200 80b8 	bhi.w	80013ae <_Unwind_VRS_Pop+0x182>
 800123e:	e8df f001 	tbb	[pc, r1]
 8001242:	569c      	.short	0x569c
 8001244:	2db6      	.short	0x2db6
 8001246:	03          	.byte	0x03
 8001247:	00          	.byte	0x00
 8001248:	2c00      	cmp	r4, #0
 800124a:	f040 80b0 	bne.w	80013ae <_Unwind_VRS_Pop+0x182>
 800124e:	2a10      	cmp	r2, #16
 8001250:	f200 80ad 	bhi.w	80013ae <_Unwind_VRS_Pop+0x182>
 8001254:	6803      	ldr	r3, [r0, #0]
 8001256:	06d8      	lsls	r0, r3, #27
 8001258:	f100 80f1 	bmi.w	800143e <_Unwind_VRS_Pop+0x212>
 800125c:	af20      	add	r7, sp, #128	; 0x80
 800125e:	4638      	mov	r0, r7
 8001260:	f000 f990 	bl	8001584 <__gnu_Unwind_Save_WMMXC>
 8001264:	2401      	movs	r4, #1
 8001266:	4638      	mov	r0, r7
 8001268:	2300      	movs	r3, #0
 800126a:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 800126c:	fa04 f203 	lsl.w	r2, r4, r3
 8001270:	422a      	tst	r2, r5
 8001272:	f103 0301 	add.w	r3, r3, #1
 8001276:	d005      	beq.n	8001284 <_Unwind_VRS_Pop+0x58>
 8001278:	460a      	mov	r2, r1
 800127a:	f852 cb04 	ldr.w	ip, [r2], #4
 800127e:	4611      	mov	r1, r2
 8001280:	f8c0 c000 	str.w	ip, [r0]
 8001284:	2b04      	cmp	r3, #4
 8001286:	f100 0004 	add.w	r0, r0, #4
 800128a:	d1ef      	bne.n	800126c <_Unwind_VRS_Pop+0x40>
 800128c:	4638      	mov	r0, r7
 800128e:	63b1      	str	r1, [r6, #56]	; 0x38
 8001290:	f000 f96e 	bl	8001570 <__gnu_Unwind_Restore_WMMXC>
 8001294:	2000      	movs	r0, #0
 8001296:	b043      	add	sp, #268	; 0x10c
 8001298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800129c:	2c03      	cmp	r4, #3
 800129e:	f040 8086 	bne.w	80013ae <_Unwind_VRS_Pop+0x182>
 80012a2:	b294      	uxth	r4, r2
 80012a4:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 80012a8:	2b10      	cmp	r3, #16
 80012aa:	ea4f 4512 	mov.w	r5, r2, lsr #16
 80012ae:	d87e      	bhi.n	80013ae <_Unwind_VRS_Pop+0x182>
 80012b0:	6803      	ldr	r3, [r0, #0]
 80012b2:	071f      	lsls	r7, r3, #28
 80012b4:	f100 80cb 	bmi.w	800144e <_Unwind_VRS_Pop+0x222>
 80012b8:	af20      	add	r7, sp, #128	; 0x80
 80012ba:	4638      	mov	r0, r7
 80012bc:	f000 f936 	bl	800152c <__gnu_Unwind_Save_WMMXD>
 80012c0:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80012c2:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 80012c6:	b154      	cbz	r4, 80012de <_Unwind_VRS_Pop+0xb2>
 80012c8:	460b      	mov	r3, r1
 80012ca:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80012ce:	1ad0      	subs	r0, r2, r3
 80012d0:	00e4      	lsls	r4, r4, #3
 80012d2:	581d      	ldr	r5, [r3, r0]
 80012d4:	f843 5b04 	str.w	r5, [r3], #4
 80012d8:	428b      	cmp	r3, r1
 80012da:	d1fa      	bne.n	80012d2 <_Unwind_VRS_Pop+0xa6>
 80012dc:	4422      	add	r2, r4
 80012de:	4638      	mov	r0, r7
 80012e0:	63b2      	str	r2, [r6, #56]	; 0x38
 80012e2:	f000 f901 	bl	80014e8 <__gnu_Unwind_Restore_WMMXD>
 80012e6:	2000      	movs	r0, #0
 80012e8:	b043      	add	sp, #268	; 0x10c
 80012ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012ee:	2c01      	cmp	r4, #1
 80012f0:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80012f4:	b295      	uxth	r5, r2
 80012f6:	d056      	beq.n	80013a6 <_Unwind_VRS_Pop+0x17a>
 80012f8:	2c05      	cmp	r4, #5
 80012fa:	d158      	bne.n	80013ae <_Unwind_VRS_Pop+0x182>
 80012fc:	eb08 0905 	add.w	r9, r8, r5
 8001300:	f1b9 0f20 	cmp.w	r9, #32
 8001304:	d853      	bhi.n	80013ae <_Unwind_VRS_Pop+0x182>
 8001306:	f1b8 0f0f 	cmp.w	r8, #15
 800130a:	d973      	bls.n	80013f4 <_Unwind_VRS_Pop+0x1c8>
 800130c:	46a9      	mov	r9, r5
 800130e:	2d00      	cmp	r5, #0
 8001310:	f040 8084 	bne.w	800141c <_Unwind_VRS_Pop+0x1f0>
 8001314:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001316:	b365      	cbz	r5, 8001372 <_Unwind_VRS_Pop+0x146>
 8001318:	af20      	add	r7, sp, #128	; 0x80
 800131a:	f04f 0900 	mov.w	r9, #0
 800131e:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8001322:	3f04      	subs	r7, #4
 8001324:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8001328:	f853 1b04 	ldr.w	r1, [r3], #4
 800132c:	42ab      	cmp	r3, r5
 800132e:	f847 1f04 	str.w	r1, [r7, #4]!
 8001332:	d1f9      	bne.n	8001328 <_Unwind_VRS_Pop+0xfc>
 8001334:	f1b9 0f00 	cmp.w	r9, #0
 8001338:	d00f      	beq.n	800135a <_Unwind_VRS_Pop+0x12e>
 800133a:	466f      	mov	r7, sp
 800133c:	4641      	mov	r1, r8
 800133e:	2910      	cmp	r1, #16
 8001340:	bf38      	it	cc
 8001342:	2110      	movcc	r1, #16
 8001344:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8001348:	3984      	subs	r1, #132	; 0x84
 800134a:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 800134e:	f853 0b04 	ldr.w	r0, [r3], #4
 8001352:	42ab      	cmp	r3, r5
 8001354:	f841 0f04 	str.w	r0, [r1, #4]!
 8001358:	d1f9      	bne.n	800134e <_Unwind_VRS_Pop+0x122>
 800135a:	2c01      	cmp	r4, #1
 800135c:	d07f      	beq.n	800145e <_Unwind_VRS_Pop+0x232>
 800135e:	f1b8 0f0f 	cmp.w	r8, #15
 8001362:	63b5      	str	r5, [r6, #56]	; 0x38
 8001364:	d942      	bls.n	80013ec <_Unwind_VRS_Pop+0x1c0>
 8001366:	f1b9 0f00 	cmp.w	r9, #0
 800136a:	d002      	beq.n	8001372 <_Unwind_VRS_Pop+0x146>
 800136c:	4668      	mov	r0, sp
 800136e:	f000 f8b3 	bl	80014d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001372:	2000      	movs	r0, #0
 8001374:	b043      	add	sp, #268	; 0x10c
 8001376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800137a:	b9c4      	cbnz	r4, 80013ae <_Unwind_VRS_Pop+0x182>
 800137c:	4623      	mov	r3, r4
 800137e:	2401      	movs	r4, #1
 8001380:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001382:	1d37      	adds	r7, r6, #4
 8001384:	b2a8      	uxth	r0, r5
 8001386:	fa04 f103 	lsl.w	r1, r4, r3
 800138a:	4201      	tst	r1, r0
 800138c:	bf1c      	itt	ne
 800138e:	f852 1b04 	ldrne.w	r1, [r2], #4
 8001392:	f847 1023 	strne.w	r1, [r7, r3, lsl #2]
 8001396:	3301      	adds	r3, #1
 8001398:	2b10      	cmp	r3, #16
 800139a:	d1f4      	bne.n	8001386 <_Unwind_VRS_Pop+0x15a>
 800139c:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 80013a0:	d1e7      	bne.n	8001372 <_Unwind_VRS_Pop+0x146>
 80013a2:	63b2      	str	r2, [r6, #56]	; 0x38
 80013a4:	e004      	b.n	80013b0 <_Unwind_VRS_Pop+0x184>
 80013a6:	eb08 0305 	add.w	r3, r8, r5
 80013aa:	2b10      	cmp	r3, #16
 80013ac:	d903      	bls.n	80013b6 <_Unwind_VRS_Pop+0x18a>
 80013ae:	2002      	movs	r0, #2
 80013b0:	b043      	add	sp, #268	; 0x10c
 80013b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013b6:	f1b8 0f0f 	cmp.w	r8, #15
 80013ba:	d8f8      	bhi.n	80013ae <_Unwind_VRS_Pop+0x182>
 80013bc:	6833      	ldr	r3, [r6, #0]
 80013be:	07da      	lsls	r2, r3, #31
 80013c0:	d506      	bpl.n	80013d0 <_Unwind_VRS_Pop+0x1a4>
 80013c2:	4630      	mov	r0, r6
 80013c4:	f023 0303 	bic.w	r3, r3, #3
 80013c8:	f840 3b48 	str.w	r3, [r0], #72
 80013cc:	f000 f878 	bl	80014c0 <__gnu_Unwind_Save_VFP>
 80013d0:	af20      	add	r7, sp, #128	; 0x80
 80013d2:	4638      	mov	r0, r7
 80013d4:	f000 f874 	bl	80014c0 <__gnu_Unwind_Save_VFP>
 80013d8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80013da:	2d00      	cmp	r5, #0
 80013dc:	d19d      	bne.n	800131a <_Unwind_VRS_Pop+0xee>
 80013de:	461d      	mov	r5, r3
 80013e0:	3504      	adds	r5, #4
 80013e2:	4638      	mov	r0, r7
 80013e4:	63b5      	str	r5, [r6, #56]	; 0x38
 80013e6:	f000 f867 	bl	80014b8 <__gnu_Unwind_Restore_VFP>
 80013ea:	e7c2      	b.n	8001372 <_Unwind_VRS_Pop+0x146>
 80013ec:	a820      	add	r0, sp, #128	; 0x80
 80013ee:	f000 f86b 	bl	80014c8 <__gnu_Unwind_Restore_VFP_D>
 80013f2:	e7b8      	b.n	8001366 <_Unwind_VRS_Pop+0x13a>
 80013f4:	f1b9 0f10 	cmp.w	r9, #16
 80013f8:	d93f      	bls.n	800147a <_Unwind_VRS_Pop+0x24e>
 80013fa:	f1a9 0910 	sub.w	r9, r9, #16
 80013fe:	6833      	ldr	r3, [r6, #0]
 8001400:	07d9      	lsls	r1, r3, #31
 8001402:	d508      	bpl.n	8001416 <_Unwind_VRS_Pop+0x1ea>
 8001404:	4630      	mov	r0, r6
 8001406:	f023 0301 	bic.w	r3, r3, #1
 800140a:	f043 0302 	orr.w	r3, r3, #2
 800140e:	f840 3b48 	str.w	r3, [r0], #72
 8001412:	f000 f85d 	bl	80014d0 <__gnu_Unwind_Save_VFP_D>
 8001416:	f1b9 0f00 	cmp.w	r9, #0
 800141a:	d031      	beq.n	8001480 <_Unwind_VRS_Pop+0x254>
 800141c:	6833      	ldr	r3, [r6, #0]
 800141e:	075a      	lsls	r2, r3, #29
 8001420:	d41f      	bmi.n	8001462 <_Unwind_VRS_Pop+0x236>
 8001422:	f1b8 0f0f 	cmp.w	r8, #15
 8001426:	d924      	bls.n	8001472 <_Unwind_VRS_Pop+0x246>
 8001428:	466f      	mov	r7, sp
 800142a:	f1c8 0510 	rsb	r5, r8, #16
 800142e:	4638      	mov	r0, r7
 8001430:	f000 f856 	bl	80014e0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001434:	2d00      	cmp	r5, #0
 8001436:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001438:	dd80      	ble.n	800133c <_Unwind_VRS_Pop+0x110>
 800143a:	af20      	add	r7, sp, #128	; 0x80
 800143c:	e76f      	b.n	800131e <_Unwind_VRS_Pop+0xf2>
 800143e:	f023 0310 	bic.w	r3, r3, #16
 8001442:	6033      	str	r3, [r6, #0]
 8001444:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8001448:	f000 f89c 	bl	8001584 <__gnu_Unwind_Save_WMMXC>
 800144c:	e706      	b.n	800125c <_Unwind_VRS_Pop+0x30>
 800144e:	f023 0308 	bic.w	r3, r3, #8
 8001452:	6003      	str	r3, [r0, #0]
 8001454:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8001458:	f000 f868 	bl	800152c <__gnu_Unwind_Save_WMMXD>
 800145c:	e72c      	b.n	80012b8 <_Unwind_VRS_Pop+0x8c>
 800145e:	af20      	add	r7, sp, #128	; 0x80
 8001460:	e7be      	b.n	80013e0 <_Unwind_VRS_Pop+0x1b4>
 8001462:	4630      	mov	r0, r6
 8001464:	f023 0304 	bic.w	r3, r3, #4
 8001468:	f840 3bd0 	str.w	r3, [r0], #208
 800146c:	f000 f838 	bl	80014e0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001470:	e7d7      	b.n	8001422 <_Unwind_VRS_Pop+0x1f6>
 8001472:	a820      	add	r0, sp, #128	; 0x80
 8001474:	f000 f82c 	bl	80014d0 <__gnu_Unwind_Save_VFP_D>
 8001478:	e7d6      	b.n	8001428 <_Unwind_VRS_Pop+0x1fc>
 800147a:	f04f 0900 	mov.w	r9, #0
 800147e:	e7be      	b.n	80013fe <_Unwind_VRS_Pop+0x1d2>
 8001480:	f1b8 0f0f 	cmp.w	r8, #15
 8001484:	f63f af46 	bhi.w	8001314 <_Unwind_VRS_Pop+0xe8>
 8001488:	af20      	add	r7, sp, #128	; 0x80
 800148a:	4638      	mov	r0, r7
 800148c:	f000 f820 	bl	80014d0 <__gnu_Unwind_Save_VFP_D>
 8001490:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001492:	2d00      	cmp	r5, #0
 8001494:	f47f af41 	bne.w	800131a <_Unwind_VRS_Pop+0xee>
 8001498:	4638      	mov	r0, r7
 800149a:	f000 f815 	bl	80014c8 <__gnu_Unwind_Restore_VFP_D>
 800149e:	e768      	b.n	8001372 <_Unwind_VRS_Pop+0x146>

080014a0 <__restore_core_regs>:
 80014a0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80014a4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80014a8:	469c      	mov	ip, r3
 80014aa:	46a6      	mov	lr, r4
 80014ac:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80014b0:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80014b4:	46e5      	mov	sp, ip
 80014b6:	bd00      	pop	{pc}

080014b8 <__gnu_Unwind_Restore_VFP>:
 80014b8:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop

080014c0 <__gnu_Unwind_Save_VFP>:
 80014c0:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop

080014c8 <__gnu_Unwind_Restore_VFP_D>:
 80014c8:	ec90 0b20 	vldmia	r0, {d0-d15}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop

080014d0 <__gnu_Unwind_Save_VFP_D>:
 80014d0:	ec80 0b20 	vstmia	r0, {d0-d15}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop

080014d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80014d8:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop

080014e0 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80014e0:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop

080014e8 <__gnu_Unwind_Restore_WMMXD>:
 80014e8:	ecf0 0102 	ldfe	f0, [r0], #8
 80014ec:	ecf0 1102 	ldfe	f1, [r0], #8
 80014f0:	ecf0 2102 	ldfe	f2, [r0], #8
 80014f4:	ecf0 3102 	ldfe	f3, [r0], #8
 80014f8:	ecf0 4102 	ldfe	f4, [r0], #8
 80014fc:	ecf0 5102 	ldfe	f5, [r0], #8
 8001500:	ecf0 6102 	ldfe	f6, [r0], #8
 8001504:	ecf0 7102 	ldfe	f7, [r0], #8
 8001508:	ecf0 8102 	ldfp	f0, [r0], #8
 800150c:	ecf0 9102 	ldfp	f1, [r0], #8
 8001510:	ecf0 a102 	ldfp	f2, [r0], #8
 8001514:	ecf0 b102 	ldfp	f3, [r0], #8
 8001518:	ecf0 c102 	ldfp	f4, [r0], #8
 800151c:	ecf0 d102 	ldfp	f5, [r0], #8
 8001520:	ecf0 e102 	ldfp	f6, [r0], #8
 8001524:	ecf0 f102 	ldfp	f7, [r0], #8
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop

0800152c <__gnu_Unwind_Save_WMMXD>:
 800152c:	ece0 0102 	stfe	f0, [r0], #8
 8001530:	ece0 1102 	stfe	f1, [r0], #8
 8001534:	ece0 2102 	stfe	f2, [r0], #8
 8001538:	ece0 3102 	stfe	f3, [r0], #8
 800153c:	ece0 4102 	stfe	f4, [r0], #8
 8001540:	ece0 5102 	stfe	f5, [r0], #8
 8001544:	ece0 6102 	stfe	f6, [r0], #8
 8001548:	ece0 7102 	stfe	f7, [r0], #8
 800154c:	ece0 8102 	stfp	f0, [r0], #8
 8001550:	ece0 9102 	stfp	f1, [r0], #8
 8001554:	ece0 a102 	stfp	f2, [r0], #8
 8001558:	ece0 b102 	stfp	f3, [r0], #8
 800155c:	ece0 c102 	stfp	f4, [r0], #8
 8001560:	ece0 d102 	stfp	f5, [r0], #8
 8001564:	ece0 e102 	stfp	f6, [r0], #8
 8001568:	ece0 f102 	stfp	f7, [r0], #8
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop

08001570 <__gnu_Unwind_Restore_WMMXC>:
 8001570:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001574:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001578:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 800157c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop

08001584 <__gnu_Unwind_Save_WMMXC>:
 8001584:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001588:	fca0 9101 	stc2	1, cr9, [r0], #4
 800158c:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001590:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop

08001598 <_Unwind_RaiseException>:
 8001598:	46ec      	mov	ip, sp
 800159a:	b500      	push	{lr}
 800159c:	e92d 5000 	stmdb	sp!, {ip, lr}
 80015a0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80015ac:	a901      	add	r1, sp, #4
 80015ae:	f7ff fbe7 	bl	8000d80 <__gnu_Unwind_RaiseException>
 80015b2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80015b6:	b012      	add	sp, #72	; 0x48
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop

080015bc <_Unwind_Resume>:
 80015bc:	46ec      	mov	ip, sp
 80015be:	b500      	push	{lr}
 80015c0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80015c4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80015c8:	f04f 0300 	mov.w	r3, #0
 80015cc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80015d0:	a901      	add	r1, sp, #4
 80015d2:	f7ff fc13 	bl	8000dfc <__gnu_Unwind_Resume>
 80015d6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80015da:	b012      	add	sp, #72	; 0x48
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop

080015e0 <_Unwind_Resume_or_Rethrow>:
 80015e0:	46ec      	mov	ip, sp
 80015e2:	b500      	push	{lr}
 80015e4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80015e8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80015f4:	a901      	add	r1, sp, #4
 80015f6:	f7ff fc23 	bl	8000e40 <__gnu_Unwind_Resume_or_Rethrow>
 80015fa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80015fe:	b012      	add	sp, #72	; 0x48
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop

08001604 <_Unwind_ForcedUnwind>:
 8001604:	46ec      	mov	ip, sp
 8001606:	b500      	push	{lr}
 8001608:	e92d 5000 	stmdb	sp!, {ip, lr}
 800160c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001618:	ab01      	add	r3, sp, #4
 800161a:	f7ff fbe5 	bl	8000de8 <__gnu_Unwind_ForcedUnwind>
 800161e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001622:	b012      	add	sp, #72	; 0x48
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop

08001628 <_Unwind_Backtrace>:
 8001628:	46ec      	mov	ip, sp
 800162a:	b500      	push	{lr}
 800162c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001630:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	e92d 000c 	stmdb	sp!, {r2, r3}
 800163c:	aa01      	add	r2, sp, #4
 800163e:	f7ff fc5b 	bl	8000ef8 <__gnu_Unwind_Backtrace>
 8001642:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001646:	b012      	add	sp, #72	; 0x48
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop

0800164c <next_unwind_byte>:
 800164c:	7a02      	ldrb	r2, [r0, #8]
 800164e:	4603      	mov	r3, r0
 8001650:	b97a      	cbnz	r2, 8001672 <next_unwind_byte+0x26>
 8001652:	7a42      	ldrb	r2, [r0, #9]
 8001654:	b1a2      	cbz	r2, 8001680 <next_unwind_byte+0x34>
 8001656:	f04f 0c03 	mov.w	ip, #3
 800165a:	6841      	ldr	r1, [r0, #4]
 800165c:	3a01      	subs	r2, #1
 800165e:	7242      	strb	r2, [r0, #9]
 8001660:	6808      	ldr	r0, [r1, #0]
 8001662:	1d0a      	adds	r2, r1, #4
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	0202      	lsls	r2, r0, #8
 8001668:	f883 c008 	strb.w	ip, [r3, #8]
 800166c:	0e00      	lsrs	r0, r0, #24
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	4770      	bx	lr
 8001672:	6800      	ldr	r0, [r0, #0]
 8001674:	3a01      	subs	r2, #1
 8001676:	721a      	strb	r2, [r3, #8]
 8001678:	0202      	lsls	r2, r0, #8
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	0e00      	lsrs	r0, r0, #24
 800167e:	4770      	bx	lr
 8001680:	20b0      	movs	r0, #176	; 0xb0
 8001682:	4770      	bx	lr

08001684 <_Unwind_GetGR.constprop.0>:
 8001684:	2300      	movs	r3, #0
 8001686:	b500      	push	{lr}
 8001688:	b085      	sub	sp, #20
 800168a:	a903      	add	r1, sp, #12
 800168c:	9100      	str	r1, [sp, #0]
 800168e:	220c      	movs	r2, #12
 8001690:	4619      	mov	r1, r3
 8001692:	f7ff fbe7 	bl	8000e64 <_Unwind_VRS_Get>
 8001696:	9803      	ldr	r0, [sp, #12]
 8001698:	b005      	add	sp, #20
 800169a:	f85d fb04 	ldr.w	pc, [sp], #4
 800169e:	bf00      	nop

080016a0 <unwind_UCB_from_context>:
 80016a0:	e7f0      	b.n	8001684 <_Unwind_GetGR.constprop.0>
 80016a2:	bf00      	nop

080016a4 <__gnu_unwind_execute>:
 80016a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016a8:	f04f 0800 	mov.w	r8, #0
 80016ac:	4605      	mov	r5, r0
 80016ae:	460e      	mov	r6, r1
 80016b0:	b085      	sub	sp, #20
 80016b2:	4630      	mov	r0, r6
 80016b4:	f7ff ffca 	bl	800164c <next_unwind_byte>
 80016b8:	28b0      	cmp	r0, #176	; 0xb0
 80016ba:	4604      	mov	r4, r0
 80016bc:	f000 80ba 	beq.w	8001834 <__gnu_unwind_execute+0x190>
 80016c0:	0607      	lsls	r7, r0, #24
 80016c2:	d520      	bpl.n	8001706 <__gnu_unwind_execute+0x62>
 80016c4:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80016c8:	2b80      	cmp	r3, #128	; 0x80
 80016ca:	d04d      	beq.n	8001768 <__gnu_unwind_execute+0xc4>
 80016cc:	2b90      	cmp	r3, #144	; 0x90
 80016ce:	d036      	beq.n	800173e <__gnu_unwind_execute+0x9a>
 80016d0:	2ba0      	cmp	r3, #160	; 0xa0
 80016d2:	d060      	beq.n	8001796 <__gnu_unwind_execute+0xf2>
 80016d4:	2bb0      	cmp	r3, #176	; 0xb0
 80016d6:	d073      	beq.n	80017c0 <__gnu_unwind_execute+0x11c>
 80016d8:	2bc0      	cmp	r3, #192	; 0xc0
 80016da:	f000 808a 	beq.w	80017f2 <__gnu_unwind_execute+0x14e>
 80016de:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80016e2:	2bd0      	cmp	r3, #208	; 0xd0
 80016e4:	d10b      	bne.n	80016fe <__gnu_unwind_execute+0x5a>
 80016e6:	f000 0207 	and.w	r2, r0, #7
 80016ea:	3201      	adds	r2, #1
 80016ec:	2305      	movs	r3, #5
 80016ee:	2101      	movs	r1, #1
 80016f0:	4628      	mov	r0, r5
 80016f2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80016f6:	f7ff fd99 	bl	800122c <_Unwind_VRS_Pop>
 80016fa:	2800      	cmp	r0, #0
 80016fc:	d0d9      	beq.n	80016b2 <__gnu_unwind_execute+0xe>
 80016fe:	2009      	movs	r0, #9
 8001700:	b005      	add	sp, #20
 8001702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001706:	0083      	lsls	r3, r0, #2
 8001708:	b2db      	uxtb	r3, r3
 800170a:	1d1f      	adds	r7, r3, #4
 800170c:	2300      	movs	r3, #0
 800170e:	f10d 090c 	add.w	r9, sp, #12
 8001712:	4619      	mov	r1, r3
 8001714:	220d      	movs	r2, #13
 8001716:	4628      	mov	r0, r5
 8001718:	f8cd 9000 	str.w	r9, [sp]
 800171c:	f7ff fba2 	bl	8000e64 <_Unwind_VRS_Get>
 8001720:	9b03      	ldr	r3, [sp, #12]
 8001722:	0660      	lsls	r0, r4, #25
 8001724:	bf4c      	ite	mi
 8001726:	1bdf      	submi	r7, r3, r7
 8001728:	18ff      	addpl	r7, r7, r3
 800172a:	2300      	movs	r3, #0
 800172c:	220d      	movs	r2, #13
 800172e:	4628      	mov	r0, r5
 8001730:	4619      	mov	r1, r3
 8001732:	f8cd 9000 	str.w	r9, [sp]
 8001736:	9703      	str	r7, [sp, #12]
 8001738:	f7ff fbba 	bl	8000eb0 <_Unwind_VRS_Set>
 800173c:	e7b9      	b.n	80016b2 <__gnu_unwind_execute+0xe>
 800173e:	f000 030d 	and.w	r3, r0, #13
 8001742:	2b0d      	cmp	r3, #13
 8001744:	d0db      	beq.n	80016fe <__gnu_unwind_execute+0x5a>
 8001746:	2300      	movs	r3, #0
 8001748:	af03      	add	r7, sp, #12
 800174a:	4619      	mov	r1, r3
 800174c:	f000 020f 	and.w	r2, r0, #15
 8001750:	9700      	str	r7, [sp, #0]
 8001752:	4628      	mov	r0, r5
 8001754:	f7ff fb86 	bl	8000e64 <_Unwind_VRS_Get>
 8001758:	2300      	movs	r3, #0
 800175a:	220d      	movs	r2, #13
 800175c:	4628      	mov	r0, r5
 800175e:	4619      	mov	r1, r3
 8001760:	9700      	str	r7, [sp, #0]
 8001762:	f7ff fba5 	bl	8000eb0 <_Unwind_VRS_Set>
 8001766:	e7a4      	b.n	80016b2 <__gnu_unwind_execute+0xe>
 8001768:	4630      	mov	r0, r6
 800176a:	f7ff ff6f 	bl	800164c <next_unwind_byte>
 800176e:	0224      	lsls	r4, r4, #8
 8001770:	4320      	orrs	r0, r4
 8001772:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001776:	d0c2      	beq.n	80016fe <__gnu_unwind_execute+0x5a>
 8001778:	2300      	movs	r3, #0
 800177a:	0104      	lsls	r4, r0, #4
 800177c:	4619      	mov	r1, r3
 800177e:	4628      	mov	r0, r5
 8001780:	b2a2      	uxth	r2, r4
 8001782:	f7ff fd53 	bl	800122c <_Unwind_VRS_Pop>
 8001786:	2800      	cmp	r0, #0
 8001788:	d1b9      	bne.n	80016fe <__gnu_unwind_execute+0x5a>
 800178a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800178e:	bf18      	it	ne
 8001790:	f04f 0801 	movne.w	r8, #1
 8001794:	e78d      	b.n	80016b2 <__gnu_unwind_execute+0xe>
 8001796:	43c3      	mvns	r3, r0
 8001798:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	411a      	asrs	r2, r3
 80017a2:	2300      	movs	r3, #0
 80017a4:	0701      	lsls	r1, r0, #28
 80017a6:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80017aa:	bf48      	it	mi
 80017ac:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80017b0:	4628      	mov	r0, r5
 80017b2:	4619      	mov	r1, r3
 80017b4:	f7ff fd3a 	bl	800122c <_Unwind_VRS_Pop>
 80017b8:	2800      	cmp	r0, #0
 80017ba:	f43f af7a 	beq.w	80016b2 <__gnu_unwind_execute+0xe>
 80017be:	e79e      	b.n	80016fe <__gnu_unwind_execute+0x5a>
 80017c0:	28b1      	cmp	r0, #177	; 0xb1
 80017c2:	d03c      	beq.n	800183e <__gnu_unwind_execute+0x19a>
 80017c4:	28b2      	cmp	r0, #178	; 0xb2
 80017c6:	f000 80b0 	beq.w	800192a <__gnu_unwind_execute+0x286>
 80017ca:	28b3      	cmp	r0, #179	; 0xb3
 80017cc:	d04a      	beq.n	8001864 <__gnu_unwind_execute+0x1c0>
 80017ce:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80017d2:	2bb4      	cmp	r3, #180	; 0xb4
 80017d4:	d093      	beq.n	80016fe <__gnu_unwind_execute+0x5a>
 80017d6:	2301      	movs	r3, #1
 80017d8:	f000 0207 	and.w	r2, r0, #7
 80017dc:	441a      	add	r2, r3
 80017de:	4628      	mov	r0, r5
 80017e0:	4619      	mov	r1, r3
 80017e2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80017e6:	f7ff fd21 	bl	800122c <_Unwind_VRS_Pop>
 80017ea:	2800      	cmp	r0, #0
 80017ec:	f43f af61 	beq.w	80016b2 <__gnu_unwind_execute+0xe>
 80017f0:	e785      	b.n	80016fe <__gnu_unwind_execute+0x5a>
 80017f2:	28c6      	cmp	r0, #198	; 0xc6
 80017f4:	d04f      	beq.n	8001896 <__gnu_unwind_execute+0x1f2>
 80017f6:	28c7      	cmp	r0, #199	; 0xc7
 80017f8:	d061      	beq.n	80018be <__gnu_unwind_execute+0x21a>
 80017fa:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80017fe:	2bc0      	cmp	r3, #192	; 0xc0
 8001800:	d070      	beq.n	80018e4 <__gnu_unwind_execute+0x240>
 8001802:	28c8      	cmp	r0, #200	; 0xc8
 8001804:	d07c      	beq.n	8001900 <__gnu_unwind_execute+0x25c>
 8001806:	28c9      	cmp	r0, #201	; 0xc9
 8001808:	f47f af79 	bne.w	80016fe <__gnu_unwind_execute+0x5a>
 800180c:	4630      	mov	r0, r6
 800180e:	f7ff ff1d 	bl	800164c <next_unwind_byte>
 8001812:	2305      	movs	r3, #5
 8001814:	4602      	mov	r2, r0
 8001816:	2101      	movs	r1, #1
 8001818:	4628      	mov	r0, r5
 800181a:	0314      	lsls	r4, r2, #12
 800181c:	f002 020f 	and.w	r2, r2, #15
 8001820:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8001824:	440a      	add	r2, r1
 8001826:	4322      	orrs	r2, r4
 8001828:	f7ff fd00 	bl	800122c <_Unwind_VRS_Pop>
 800182c:	2800      	cmp	r0, #0
 800182e:	f43f af40 	beq.w	80016b2 <__gnu_unwind_execute+0xe>
 8001832:	e764      	b.n	80016fe <__gnu_unwind_execute+0x5a>
 8001834:	f1b8 0f00 	cmp.w	r8, #0
 8001838:	d01c      	beq.n	8001874 <__gnu_unwind_execute+0x1d0>
 800183a:	2000      	movs	r0, #0
 800183c:	e760      	b.n	8001700 <__gnu_unwind_execute+0x5c>
 800183e:	4630      	mov	r0, r6
 8001840:	f7ff ff04 	bl	800164c <next_unwind_byte>
 8001844:	4602      	mov	r2, r0
 8001846:	2800      	cmp	r0, #0
 8001848:	f43f af59 	beq.w	80016fe <__gnu_unwind_execute+0x5a>
 800184c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001850:	f47f af55 	bne.w	80016fe <__gnu_unwind_execute+0x5a>
 8001854:	4619      	mov	r1, r3
 8001856:	4628      	mov	r0, r5
 8001858:	f7ff fce8 	bl	800122c <_Unwind_VRS_Pop>
 800185c:	2800      	cmp	r0, #0
 800185e:	f43f af28 	beq.w	80016b2 <__gnu_unwind_execute+0xe>
 8001862:	e74c      	b.n	80016fe <__gnu_unwind_execute+0x5a>
 8001864:	4630      	mov	r0, r6
 8001866:	f7ff fef1 	bl	800164c <next_unwind_byte>
 800186a:	2301      	movs	r3, #1
 800186c:	4602      	mov	r2, r0
 800186e:	4619      	mov	r1, r3
 8001870:	4628      	mov	r0, r5
 8001872:	e7d2      	b.n	800181a <__gnu_unwind_execute+0x176>
 8001874:	ac03      	add	r4, sp, #12
 8001876:	4643      	mov	r3, r8
 8001878:	220e      	movs	r2, #14
 800187a:	4641      	mov	r1, r8
 800187c:	4628      	mov	r0, r5
 800187e:	9400      	str	r4, [sp, #0]
 8001880:	f7ff faf0 	bl	8000e64 <_Unwind_VRS_Get>
 8001884:	4643      	mov	r3, r8
 8001886:	220f      	movs	r2, #15
 8001888:	4628      	mov	r0, r5
 800188a:	4641      	mov	r1, r8
 800188c:	9400      	str	r4, [sp, #0]
 800188e:	f7ff fb0f 	bl	8000eb0 <_Unwind_VRS_Set>
 8001892:	4640      	mov	r0, r8
 8001894:	e734      	b.n	8001700 <__gnu_unwind_execute+0x5c>
 8001896:	4630      	mov	r0, r6
 8001898:	f7ff fed8 	bl	800164c <next_unwind_byte>
 800189c:	4602      	mov	r2, r0
 800189e:	2303      	movs	r3, #3
 80018a0:	0314      	lsls	r4, r2, #12
 80018a2:	f002 020f 	and.w	r2, r2, #15
 80018a6:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 80018aa:	3201      	adds	r2, #1
 80018ac:	4628      	mov	r0, r5
 80018ae:	4619      	mov	r1, r3
 80018b0:	4322      	orrs	r2, r4
 80018b2:	f7ff fcbb 	bl	800122c <_Unwind_VRS_Pop>
 80018b6:	2800      	cmp	r0, #0
 80018b8:	f43f aefb 	beq.w	80016b2 <__gnu_unwind_execute+0xe>
 80018bc:	e71f      	b.n	80016fe <__gnu_unwind_execute+0x5a>
 80018be:	4630      	mov	r0, r6
 80018c0:	f7ff fec4 	bl	800164c <next_unwind_byte>
 80018c4:	4602      	mov	r2, r0
 80018c6:	2800      	cmp	r0, #0
 80018c8:	f43f af19 	beq.w	80016fe <__gnu_unwind_execute+0x5a>
 80018cc:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80018d0:	f47f af15 	bne.w	80016fe <__gnu_unwind_execute+0x5a>
 80018d4:	2104      	movs	r1, #4
 80018d6:	4628      	mov	r0, r5
 80018d8:	f7ff fca8 	bl	800122c <_Unwind_VRS_Pop>
 80018dc:	2800      	cmp	r0, #0
 80018de:	f43f aee8 	beq.w	80016b2 <__gnu_unwind_execute+0xe>
 80018e2:	e70c      	b.n	80016fe <__gnu_unwind_execute+0x5a>
 80018e4:	2303      	movs	r3, #3
 80018e6:	f000 020f 	and.w	r2, r0, #15
 80018ea:	3201      	adds	r2, #1
 80018ec:	4628      	mov	r0, r5
 80018ee:	4619      	mov	r1, r3
 80018f0:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80018f4:	f7ff fc9a 	bl	800122c <_Unwind_VRS_Pop>
 80018f8:	2800      	cmp	r0, #0
 80018fa:	f43f aeda 	beq.w	80016b2 <__gnu_unwind_execute+0xe>
 80018fe:	e6fe      	b.n	80016fe <__gnu_unwind_execute+0x5a>
 8001900:	4630      	mov	r0, r6
 8001902:	f7ff fea3 	bl	800164c <next_unwind_byte>
 8001906:	4602      	mov	r2, r0
 8001908:	2101      	movs	r1, #1
 800190a:	f002 04f0 	and.w	r4, r2, #240	; 0xf0
 800190e:	f002 020f 	and.w	r2, r2, #15
 8001912:	3410      	adds	r4, #16
 8001914:	440a      	add	r2, r1
 8001916:	2305      	movs	r3, #5
 8001918:	4628      	mov	r0, r5
 800191a:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 800191e:	f7ff fc85 	bl	800122c <_Unwind_VRS_Pop>
 8001922:	2800      	cmp	r0, #0
 8001924:	f43f aec5 	beq.w	80016b2 <__gnu_unwind_execute+0xe>
 8001928:	e6e9      	b.n	80016fe <__gnu_unwind_execute+0x5a>
 800192a:	2300      	movs	r3, #0
 800192c:	f10d 090c 	add.w	r9, sp, #12
 8001930:	220d      	movs	r2, #13
 8001932:	4619      	mov	r1, r3
 8001934:	4628      	mov	r0, r5
 8001936:	f8cd 9000 	str.w	r9, [sp]
 800193a:	f7ff fa93 	bl	8000e64 <_Unwind_VRS_Get>
 800193e:	4630      	mov	r0, r6
 8001940:	f7ff fe84 	bl	800164c <next_unwind_byte>
 8001944:	0602      	lsls	r2, r0, #24
 8001946:	f04f 0402 	mov.w	r4, #2
 800194a:	d50c      	bpl.n	8001966 <__gnu_unwind_execute+0x2c2>
 800194c:	9b03      	ldr	r3, [sp, #12]
 800194e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001952:	40a0      	lsls	r0, r4
 8001954:	4418      	add	r0, r3
 8001956:	9003      	str	r0, [sp, #12]
 8001958:	4630      	mov	r0, r6
 800195a:	f7ff fe77 	bl	800164c <next_unwind_byte>
 800195e:	0603      	lsls	r3, r0, #24
 8001960:	f104 0407 	add.w	r4, r4, #7
 8001964:	d4f2      	bmi.n	800194c <__gnu_unwind_execute+0x2a8>
 8001966:	9b03      	ldr	r3, [sp, #12]
 8001968:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800196c:	40a2      	lsls	r2, r4
 800196e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001972:	441a      	add	r2, r3
 8001974:	2300      	movs	r3, #0
 8001976:	9203      	str	r2, [sp, #12]
 8001978:	4628      	mov	r0, r5
 800197a:	220d      	movs	r2, #13
 800197c:	4619      	mov	r1, r3
 800197e:	f8cd 9000 	str.w	r9, [sp]
 8001982:	f7ff fa95 	bl	8000eb0 <_Unwind_VRS_Set>
 8001986:	e694      	b.n	80016b2 <__gnu_unwind_execute+0xe>

08001988 <__gnu_unwind_frame>:
 8001988:	460b      	mov	r3, r1
 800198a:	f04f 0c03 	mov.w	ip, #3
 800198e:	b500      	push	{lr}
 8001990:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001992:	4618      	mov	r0, r3
 8001994:	6853      	ldr	r3, [r2, #4]
 8001996:	b085      	sub	sp, #20
 8001998:	3208      	adds	r2, #8
 800199a:	9202      	str	r2, [sp, #8]
 800199c:	a901      	add	r1, sp, #4
 800199e:	0e1a      	lsrs	r2, r3, #24
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	f88d c00c 	strb.w	ip, [sp, #12]
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	f88d 200d 	strb.w	r2, [sp, #13]
 80019ac:	f7ff fe7a 	bl	80016a4 <__gnu_unwind_execute>
 80019b0:	b005      	add	sp, #20
 80019b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80019b6:	bf00      	nop

080019b8 <_Unwind_GetRegionStart>:
 80019b8:	b508      	push	{r3, lr}
 80019ba:	f7ff fe71 	bl	80016a0 <unwind_UCB_from_context>
 80019be:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80019c0:	bd08      	pop	{r3, pc}
 80019c2:	bf00      	nop

080019c4 <_Unwind_GetLanguageSpecificData>:
 80019c4:	b508      	push	{r3, lr}
 80019c6:	f7ff fe6b 	bl	80016a0 <unwind_UCB_from_context>
 80019ca:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80019cc:	79c3      	ldrb	r3, [r0, #7]
 80019ce:	3302      	adds	r3, #2
 80019d0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80019d4:	bd08      	pop	{r3, pc}
 80019d6:	bf00      	nop

080019d8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr

080019ee <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019fc:	d205      	bcs.n	8001a0a <_ZSt16__deque_buf_sizej+0x1c>
 80019fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a08:	e000      	b.n	8001a0c <_ZSt16__deque_buf_sizej+0x1e>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
	...

08001a18 <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>:
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); }
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f007 f831 	bl	8008a8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	4905      	ldr	r1, [pc, #20]	; (8001a44 <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj+0x2c>)
 8001a2e:	4806      	ldr	r0, [pc, #24]	; (8001a48 <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj+0x30>)
 8001a30:	f000 fb6a 	bl	8002108 <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	0800bd20 	.word	0x0800bd20
 8001a48:	08009b19 	.word	0x08009b19

08001a4c <_ZNSt7__cxx119to_stringEd>:
					   "%f", __val);
  }

  inline string
  to_string(double __val)
  {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af02      	add	r7, sp, #8
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	e9c7 2300 	strd	r2, r3, [r7]
    const int __n = 
 8001a58:	f44f 73a4 	mov.w	r3, #328	; 0x148
 8001a5c:	617b      	str	r3, [r7, #20]
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
					   "%f", __val);
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a64:	e9cd 2300 	strd	r2, r3, [sp]
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <_ZNSt7__cxx119to_stringEd+0x30>)
 8001a6a:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8001a6e:	4904      	ldr	r1, [pc, #16]	; (8001a80 <_ZNSt7__cxx119to_stringEd+0x34>)
 8001a70:	f000 fb96 	bl	80021a0 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
  }
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	0800bd28 	.word	0x0800bd28
 8001a80:	08009b89 	.word	0x08009b89

08001a84 <_ZN9Calculate11addToSuffixERc>:
 */

#include "calculate.hpp"


void Calculate::addToSuffix(char& c) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
	suffix += c;
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	4619      	mov	r1, r3
 8001a96:	4610      	mov	r0, r2
 8001a98:	f006 ff37 	bl	800890a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
	if (c != ' ') {
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b20      	cmp	r3, #32
 8001aa2:	d004      	beq.n	8001aae <_ZN9Calculate11addToSuffixERc+0x2a>
		suffix += ' ';
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2120      	movs	r1, #32
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f006 ff2e 	bl	800890a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
	}
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <_ZN9Calculate11addToSuffixERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Calculate::addToSuffix(std::string& str) {
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
	suffix += str;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6839      	ldr	r1, [r7, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f006 ffdc 	bl	8008a82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
	if (!str.empty()) {
 8001aca:	6838      	ldr	r0, [r7, #0]
 8001acc:	f006 fef8 	bl	80088c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f083 0301 	eor.w	r3, r3, #1
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d004      	beq.n	8001ae6 <_ZN9Calculate11addToSuffixERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x30>
		suffix += ' ';
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2120      	movs	r1, #32
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f006 ff12 	bl	800890a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
	}
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <_ZN9Calculate16getNumStackValueEv>:

double Calculate::getNumStackValue() {
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
	double n = numStack.top();
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3358      	adds	r3, #88	; 0x58
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 fb87 	bl	800220e <_ZNSt5stackIdSt5dequeIdSaIdEEE3topEv>
 8001b00:	4603      	mov	r3, r0
 8001b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b06:	e9c7 2302 	strd	r2, r3, [r7, #8]
	numStack.pop();
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3358      	adds	r3, #88	; 0x58
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 fb8a 	bl	8002228 <_ZNSt5stackIdSt5dequeIdSaIdEEE3popEv>
	return n;
 8001b14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_ZN9Calculate8clrStackEv>:

void Calculate::clrStack() {
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
	while (!optStack.empty())
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3330      	adds	r3, #48	; 0x30
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 fb86 	bl	8002240 <_ZNKSt5stackIcSt5dequeIcSaIcEEE5emptyEv>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f083 0301 	eor.w	r3, r3, #1
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <_ZN9Calculate8clrStackEv+0x2a>
		optStack.pop();
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3330      	adds	r3, #48	; 0x30
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 fb88 	bl	800225a <_ZNSt5stackIcSt5dequeIcSaIcEEE3popEv>
	while (!optStack.empty())
 8001b4a:	e7ee      	b.n	8001b2a <_ZN9Calculate8clrStackEv+0x8>
	while (!numStack.empty())
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3358      	adds	r3, #88	; 0x58
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 fb8e 	bl	8002272 <_ZNKSt5stackIdSt5dequeIdSaIdEEE5emptyEv>
 8001b56:	4603      	mov	r3, r0
 8001b58:	f083 0301 	eor.w	r3, r3, #1
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d005      	beq.n	8001b6e <_ZN9Calculate8clrStackEv+0x4c>
		numStack.pop();
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3358      	adds	r3, #88	; 0x58
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 fb5e 	bl	8002228 <_ZNSt5stackIdSt5dequeIdSaIdEEE3popEv>
	while (!numStack.empty())
 8001b6c:	e7ee      	b.n	8001b4c <_ZN9Calculate8clrStackEv+0x2a>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <_ZN9Calculate8isNumberERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool Calculate::isNumber(std::string& str) {
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b086      	sub	sp, #24
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	6039      	str	r1, [r7, #0]
	for (char c : str) {
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	6978      	ldr	r0, [r7, #20]
 8001b86:	f006 fe95 	bl	80088b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	6978      	ldr	r0, [r7, #20]
 8001b90:	f006 fe92 	bl	80088b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 8001b94:	4603      	mov	r3, r0
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	f107 0208 	add.w	r2, r7, #8
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	4611      	mov	r1, r2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 fb72 	bl	800228c <_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d013      	beq.n	8001bd6 <_ZN9Calculate8isNumberERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x60>
 8001bae:	f107 030c 	add.w	r3, r7, #12
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 fb91 	bl	80022da <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	74fb      	strb	r3, [r7, #19]
		if (!std::isdigit(c)) {
 8001bbe:	7cfb      	ldrb	r3, [r7, #19]
 8001bc0:	3b30      	subs	r3, #48	; 0x30
 8001bc2:	2b09      	cmp	r3, #9
 8001bc4:	d901      	bls.n	8001bca <_ZN9Calculate8isNumberERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54>
			return false;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e006      	b.n	8001bd8 <_ZN9Calculate8isNumberERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
	for (char c : str) {
 8001bca:	f107 030c 	add.w	r3, r7, #12
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 fb74 	bl	80022bc <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 8001bd4:	e7e0      	b.n	8001b98 <_ZN9Calculate8isNumberERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22>
		}
	}
	return true;
 8001bd6:	2301      	movs	r3, #1
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <_ZNK9Calculate8getLevelERc>:

int Calculate::getLevel(char& opt) const {
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
	switch (opt) {
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	3b28      	subs	r3, #40	; 0x28
 8001bf0:	2b07      	cmp	r3, #7
 8001bf2:	d81b      	bhi.n	8001c2c <_ZNK9Calculate8getLevelERc+0x4c>
 8001bf4:	a201      	add	r2, pc, #4	; (adr r2, 8001bfc <_ZNK9Calculate8getLevelERc+0x1c>)
 8001bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bfa:	bf00      	nop
 8001bfc:	08001c1d 	.word	0x08001c1d
 8001c00:	08001c29 	.word	0x08001c29
 8001c04:	08001c25 	.word	0x08001c25
 8001c08:	08001c21 	.word	0x08001c21
 8001c0c:	08001c2d 	.word	0x08001c2d
 8001c10:	08001c21 	.word	0x08001c21
 8001c14:	08001c2d 	.word	0x08001c2d
 8001c18:	08001c25 	.word	0x08001c25
	case '(':
		return 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	e007      	b.n	8001c30 <_ZNK9Calculate8getLevelERc+0x50>
	case '+':
	case '-':
		return 1;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e005      	b.n	8001c30 <_ZNK9Calculate8getLevelERc+0x50>
	case '*':
	case '/':
		return 2;
 8001c24:	2302      	movs	r3, #2
 8001c26:	e003      	b.n	8001c30 <_ZNK9Calculate8getLevelERc+0x50>
	case ')':
		return 3;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e001      	b.n	8001c30 <_ZNK9Calculate8getLevelERc+0x50>
	}
	return -1;
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop

08001c3c <_ZN9Calculate7doCalcuEv>:

bool Calculate::doCalcu() {
 8001c3c:	b5b0      	push	{r4, r5, r7, lr}
 8001c3e:	b0ac      	sub	sp, #176	; 0xb0
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	2400      	movs	r4, #0
	clrStack();
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff ff6b 	bl	8001b22 <_ZN9Calculate8clrStackEv>

	size_t startPos = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	size_t spacePos = suffix.find(' ', startPos);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001c58:	2120      	movs	r1, #32
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f006 ff17 	bl	8008a8e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 8001c60:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	while (spacePos != std::string::npos) {
 8001c64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6c:	f000 8117 	beq.w	8001e9e <_ZN9Calculate7doCalcuEv+0x262>
		std::string word = suffix.substr(startPos, spacePos - startPos);
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001c76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	f107 0008 	add.w	r0, r7, #8
 8001c80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001c84:	f006 ff6e 	bl	8008b64 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
		if (isNumber(word)) {
 8001c88:	f107 0308 	add.w	r3, r7, #8
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ff71 	bl	8001b76 <_ZN9Calculate8isNumberERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d013      	beq.n	8001cc2 <_ZN9Calculate7doCalcuEv+0x86>
			numStack.push(std::stod(word));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f103 0558 	add.w	r5, r3, #88	; 0x58
 8001ca0:	f107 0308 	add.w	r3, r7, #8
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff feb6 	bl	8001a18 <_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001cb4:	f107 0320 	add.w	r3, r7, #32
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4628      	mov	r0, r5
 8001cbc:	f000 fb18 	bl	80022f0 <_ZNSt5stackIdSt5dequeIdSaIdEEE4pushEOd>
 8001cc0:	e0d6      	b.n	8001e70 <_ZN9Calculate7doCalcuEv+0x234>
		}
		else {
			char opt = word[0];
 8001cc2:	f107 0308 	add.w	r3, r7, #8
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f006 fdfe 	bl	80088ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			switch (opt) {
 8001cd6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001cda:	3b2a      	subs	r3, #42	; 0x2a
 8001cdc:	2b05      	cmp	r3, #5
 8001cde:	f200 80c7 	bhi.w	8001e70 <_ZN9Calculate7doCalcuEv+0x234>
 8001ce2:	a201      	add	r2, pc, #4	; (adr r2, 8001ce8 <_ZN9Calculate7doCalcuEv+0xac>)
 8001ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce8:	08001db9 	.word	0x08001db9
 8001cec:	08001d01 	.word	0x08001d01
 8001cf0:	08001e71 	.word	0x08001e71
 8001cf4:	08001d5d 	.word	0x08001d5d
 8001cf8:	08001e71 	.word	0x08001e71
 8001cfc:	08001e15 	.word	0x08001e15
			case '+': {
				if (numStack.size() >= 2) {
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3358      	adds	r3, #88	; 0x58
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 fb05 	bl	8002314 <_ZNKSt5stackIdSt5dequeIdSaIdEEE4sizeEv>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	bf8c      	ite	hi
 8001d10:	2301      	movhi	r3, #1
 8001d12:	2300      	movls	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d01d      	beq.n	8001d56 <_ZN9Calculate7doCalcuEv+0x11a>
					double n2 = getNumStackValue();
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff fee7 	bl	8001aee <_ZN9Calculate16getNumStackValueEv>
 8001d20:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
					double n1 = getNumStackValue();
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff fee2 	bl	8001aee <_ZN9Calculate16getNumStackValueEv>
 8001d2a:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
					numStack.push(n1 + n2);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f103 0558 	add.w	r5, r3, #88	; 0x58
 8001d34:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001d38:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001d3c:	f7fe fa16 	bl	800016c <__adddf3>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001d48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4628      	mov	r0, r5
 8001d50:	f000 face 	bl	80022f0 <_ZNSt5stackIdSt5dequeIdSaIdEEE4pushEOd>
				}
				else {
					return false;
				}
				break;
 8001d54:	e08c      	b.n	8001e70 <_ZN9Calculate7doCalcuEv+0x234>
					return false;
 8001d56:	2400      	movs	r4, #0
 8001d58:	2500      	movs	r5, #0
 8001d5a:	e098      	b.n	8001e8e <_ZN9Calculate7doCalcuEv+0x252>
			}
			case '-': {
				if (numStack.size() >= 2) {
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3358      	adds	r3, #88	; 0x58
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 fad7 	bl	8002314 <_ZNKSt5stackIdSt5dequeIdSaIdEEE4sizeEv>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	bf8c      	ite	hi
 8001d6c:	2301      	movhi	r3, #1
 8001d6e:	2300      	movls	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d01d      	beq.n	8001db2 <_ZN9Calculate7doCalcuEv+0x176>
					double n2 = getNumStackValue();
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff feb9 	bl	8001aee <_ZN9Calculate16getNumStackValueEv>
 8001d7c:	e9c7 0122 	strd	r0, r1, [r7, #136]	; 0x88
					double n1 = getNumStackValue();
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff feb4 	bl	8001aee <_ZN9Calculate16getNumStackValueEv>
 8001d86:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
					numStack.push(n1 - n2);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f103 0558 	add.w	r5, r3, #88	; 0x58
 8001d90:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001d94:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001d98:	f7fe f9e6 	bl	8000168 <__aeabi_dsub>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001da4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001da8:	4619      	mov	r1, r3
 8001daa:	4628      	mov	r0, r5
 8001dac:	f000 faa0 	bl	80022f0 <_ZNSt5stackIdSt5dequeIdSaIdEEE4pushEOd>
				}
				else {
					return false;
				}
				break;
 8001db0:	e05e      	b.n	8001e70 <_ZN9Calculate7doCalcuEv+0x234>
					return false;
 8001db2:	2400      	movs	r4, #0
 8001db4:	2500      	movs	r5, #0
 8001db6:	e06a      	b.n	8001e8e <_ZN9Calculate7doCalcuEv+0x252>
			}
			case '*': {
				if (numStack.size() >= 2) {
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3358      	adds	r3, #88	; 0x58
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f000 faa9 	bl	8002314 <_ZNKSt5stackIdSt5dequeIdSaIdEEE4sizeEv>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	bf8c      	ite	hi
 8001dc8:	2301      	movhi	r3, #1
 8001dca:	2300      	movls	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d01d      	beq.n	8001e0e <_ZN9Calculate7doCalcuEv+0x1d2>
					double n2 = getNumStackValue();
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff fe8b 	bl	8001aee <_ZN9Calculate16getNumStackValueEv>
 8001dd8:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
					double n1 = getNumStackValue();
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff fe86 	bl	8001aee <_ZN9Calculate16getNumStackValueEv>
 8001de2:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
					numStack.push(n1 * n2);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f103 0558 	add.w	r5, r3, #88	; 0x58
 8001dec:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001df0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001df4:	f7fe fb70 	bl	80004d8 <__aeabi_dmul>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001e00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e04:	4619      	mov	r1, r3
 8001e06:	4628      	mov	r0, r5
 8001e08:	f000 fa72 	bl	80022f0 <_ZNSt5stackIdSt5dequeIdSaIdEEE4pushEOd>
				}
				else {
					return false;
				}
				break;
 8001e0c:	e030      	b.n	8001e70 <_ZN9Calculate7doCalcuEv+0x234>
					return false;
 8001e0e:	2400      	movs	r4, #0
 8001e10:	2500      	movs	r5, #0
 8001e12:	e03c      	b.n	8001e8e <_ZN9Calculate7doCalcuEv+0x252>
			}
			case '/': {
				if (numStack.size() >= 2) {
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3358      	adds	r3, #88	; 0x58
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 fa7b 	bl	8002314 <_ZNKSt5stackIdSt5dequeIdSaIdEEE4sizeEv>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	bf8c      	ite	hi
 8001e24:	2301      	movhi	r3, #1
 8001e26:	2300      	movls	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d01d      	beq.n	8001e6a <_ZN9Calculate7doCalcuEv+0x22e>
					double n2 = getNumStackValue();
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff fe5d 	bl	8001aee <_ZN9Calculate16getNumStackValueEv>
 8001e34:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
					double n1 = getNumStackValue();
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff fe58 	bl	8001aee <_ZN9Calculate16getNumStackValueEv>
 8001e3e:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
					numStack.push(n1 / n2);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f103 0558 	add.w	r5, r3, #88	; 0x58
 8001e48:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001e4c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001e50:	f7fe fc6c 	bl	800072c <__aeabi_ddiv>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001e5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e60:	4619      	mov	r1, r3
 8001e62:	4628      	mov	r0, r5
 8001e64:	f000 fa44 	bl	80022f0 <_ZNSt5stackIdSt5dequeIdSaIdEEE4pushEOd>
				}
				else {
					return false;
				}
				break;
 8001e68:	e002      	b.n	8001e70 <_ZN9Calculate7doCalcuEv+0x234>
					return false;
 8001e6a:	2400      	movs	r4, #0
 8001e6c:	2500      	movs	r5, #0
 8001e6e:	e00e      	b.n	8001e8e <_ZN9Calculate7doCalcuEv+0x252>
			}
			}
		}
		startPos = spacePos + 1;
 8001e70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e74:	3301      	adds	r3, #1
 8001e76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		spacePos = suffix.find(' ', startPos);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001e80:	2120      	movs	r1, #32
 8001e82:	4618      	mov	r0, r3
 8001e84:	f006 fe03 	bl	8008a8e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 8001e88:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8001e8c:	2501      	movs	r5, #1
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	4618      	mov	r0, r3
 8001e94:	f006 fce0 	bl	8008858 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001e98:	2d01      	cmp	r5, #1
 8001e9a:	d12e      	bne.n	8001efa <_ZN9Calculate7doCalcuEv+0x2be>
	while (spacePos != std::string::npos) {
 8001e9c:	e6e2      	b.n	8001c64 <_ZN9Calculate7doCalcuEv+0x28>
	}
	if (numStack.size() == 1) {
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3358      	adds	r3, #88	; 0x58
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 fa36 	bl	8002314 <_ZNKSt5stackIdSt5dequeIdSaIdEEE4sizeEv>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	bf0c      	ite	eq
 8001eae:	2301      	moveq	r3, #1
 8001eb0:	2300      	movne	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d01f      	beq.n	8001ef8 <_ZN9Calculate7doCalcuEv+0x2bc>
		operand = std::to_string(numStack.top());
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f103 0418 	add.w	r4, r3, #24
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3358      	adds	r3, #88	; 0x58
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f9a3 	bl	800220e <_ZNSt5stackIdSt5dequeIdSaIdEEE3topEv>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ece:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001ed2:	4608      	mov	r0, r1
 8001ed4:	f7ff fdba 	bl	8001a4c <_ZNSt7__cxx119to_stringEd>
 8001ed8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001edc:	4619      	mov	r1, r3
 8001ede:	4620      	mov	r0, r4
 8001ee0:	f006 fcc0 	bl	8008864 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001ee4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f006 fcb5 	bl	8008858 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		clrStack();
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff fe17 	bl	8001b22 <_ZN9Calculate8clrStackEv>
		return true;
 8001ef4:	2401      	movs	r4, #1
 8001ef6:	e000      	b.n	8001efa <_ZN9Calculate7doCalcuEv+0x2be>
	}
	return false;
 8001ef8:	2400      	movs	r4, #0
}
 8001efa:	4623      	mov	r3, r4
 8001efc:	4618      	mov	r0, r3
 8001efe:	37b0      	adds	r7, #176	; 0xb0
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bdb0      	pop	{r4, r5, r7, pc}

08001f04 <_ZN9Calculate8getInputEc>:

void Calculate::getInput(char opt) {
 8001f04:	b590      	push	{r4, r7, lr}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	70fb      	strb	r3, [r7, #3]
	//若输入字符是未完成的状态将其写入数字缓存区
	if (std::isdigit(opt)) {
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	3b30      	subs	r3, #48	; 0x30
 8001f14:	2b09      	cmp	r3, #9
 8001f16:	bf94      	ite	ls
 8001f18:	2301      	movls	r3, #1
 8001f1a:	2300      	movhi	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d007      	beq.n	8001f32 <_ZN9Calculate8getInputEc+0x2e>
		operand += opt;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3318      	adds	r3, #24
 8001f26:	78fa      	ldrb	r2, [r7, #3]
 8001f28:	4611      	mov	r1, r2
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f006 fced 	bl	800890a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
				optStack.pop();
			}
			optStack.push(opt);
		}
	}
}
 8001f30:	e099      	b.n	8002066 <_ZN9Calculate8getInputEc+0x162>
		addToSuffix(operand);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3318      	adds	r3, #24
 8001f36:	4619      	mov	r1, r3
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff fdbc 	bl	8001ab6 <_ZN9Calculate11addToSuffixERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
		operand = "";
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3318      	adds	r3, #24
 8001f42:	494b      	ldr	r1, [pc, #300]	; (8002070 <_ZN9Calculate8getInputEc+0x16c>)
 8001f44:	4618      	mov	r0, r3
 8001f46:	f006 fd72 	bl	8008a2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
		if (opt == '=') {
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	2b3d      	cmp	r3, #61	; 0x3d
 8001f4e:	d11e      	bne.n	8001f8e <_ZN9Calculate8getInputEc+0x8a>
			while (!optStack.empty()) {
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3330      	adds	r3, #48	; 0x30
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 f973 	bl	8002240 <_ZNKSt5stackIcSt5dequeIcSaIcEEE5emptyEv>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f083 0301 	eor.w	r3, r3, #1
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00f      	beq.n	8001f86 <_ZN9Calculate8getInputEc+0x82>
				addToSuffix(optStack.top());
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3330      	adds	r3, #48	; 0x30
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f9df 	bl	800232e <_ZNSt5stackIcSt5dequeIcSaIcEEE3topEv>
 8001f70:	4603      	mov	r3, r0
 8001f72:	4619      	mov	r1, r3
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff fd85 	bl	8001a84 <_ZN9Calculate11addToSuffixERc>
				optStack.pop();
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3330      	adds	r3, #48	; 0x30
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f96b 	bl	800225a <_ZNSt5stackIcSt5dequeIcSaIcEEE3popEv>
			while (!optStack.empty()) {
 8001f84:	e7e4      	b.n	8001f50 <_ZN9Calculate8getInputEc+0x4c>
			doCalcu();
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff fe58 	bl	8001c3c <_ZN9Calculate7doCalcuEv>
}
 8001f8c:	e06b      	b.n	8002066 <_ZN9Calculate8getInputEc+0x162>
		else if (opt == '(') {
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	2b28      	cmp	r3, #40	; 0x28
 8001f92:	d107      	bne.n	8001fa4 <_ZN9Calculate8getInputEc+0xa0>
			optStack.push(opt);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3330      	adds	r3, #48	; 0x30
 8001f98:	1cfa      	adds	r2, r7, #3
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 f9d3 	bl	8002348 <_ZNSt5stackIcSt5dequeIcSaIcEEE4pushERKc>
}
 8001fa2:	e060      	b.n	8002066 <_ZN9Calculate8getInputEc+0x162>
		else if (opt == ')') {
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	2b29      	cmp	r3, #41	; 0x29
 8001fa8:	d123      	bne.n	8001ff2 <_ZN9Calculate8getInputEc+0xee>
			while (optStack.top() != '(') {
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3330      	adds	r3, #48	; 0x30
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 f9bd 	bl	800232e <_ZNSt5stackIcSt5dequeIcSaIcEEE3topEv>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b28      	cmp	r3, #40	; 0x28
 8001fba:	bf14      	ite	ne
 8001fbc:	2301      	movne	r3, #1
 8001fbe:	2300      	moveq	r3, #0
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00f      	beq.n	8001fe6 <_ZN9Calculate8getInputEc+0xe2>
				addToSuffix(optStack.top());
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3330      	adds	r3, #48	; 0x30
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 f9af 	bl	800232e <_ZNSt5stackIcSt5dequeIcSaIcEEE3topEv>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff fd55 	bl	8001a84 <_ZN9Calculate11addToSuffixERc>
				optStack.pop();
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3330      	adds	r3, #48	; 0x30
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 f93b 	bl	800225a <_ZNSt5stackIcSt5dequeIcSaIcEEE3popEv>
			while (optStack.top() != '(') {
 8001fe4:	e7e1      	b.n	8001faa <_ZN9Calculate8getInputEc+0xa6>
			optStack.pop();
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3330      	adds	r3, #48	; 0x30
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 f935 	bl	800225a <_ZNSt5stackIcSt5dequeIcSaIcEEE3popEv>
}
 8001ff0:	e039      	b.n	8002066 <_ZN9Calculate8getInputEc+0x162>
			while (!optStack.empty() && getLevel(opt) <= getLevel(optStack.top())) {
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3330      	adds	r3, #48	; 0x30
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f922 	bl	8002240 <_ZNKSt5stackIcSt5dequeIcSaIcEEE5emptyEv>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f083 0301 	eor.w	r3, r3, #1
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d014      	beq.n	8002032 <_ZN9Calculate8getInputEc+0x12e>
 8002008:	1cfb      	adds	r3, r7, #3
 800200a:	4619      	mov	r1, r3
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff fde7 	bl	8001be0 <_ZNK9Calculate8getLevelERc>
 8002012:	4604      	mov	r4, r0
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3330      	adds	r3, #48	; 0x30
 8002018:	4618      	mov	r0, r3
 800201a:	f000 f988 	bl	800232e <_ZNSt5stackIcSt5dequeIcSaIcEEE3topEv>
 800201e:	4603      	mov	r3, r0
 8002020:	4619      	mov	r1, r3
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff fddc 	bl	8001be0 <_ZNK9Calculate8getLevelERc>
 8002028:	4603      	mov	r3, r0
 800202a:	429c      	cmp	r4, r3
 800202c:	dc01      	bgt.n	8002032 <_ZN9Calculate8getInputEc+0x12e>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <_ZN9Calculate8getInputEc+0x130>
 8002032:	2300      	movs	r3, #0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00f      	beq.n	8002058 <_ZN9Calculate8getInputEc+0x154>
				addToSuffix(optStack.top());
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3330      	adds	r3, #48	; 0x30
 800203c:	4618      	mov	r0, r3
 800203e:	f000 f976 	bl	800232e <_ZNSt5stackIcSt5dequeIcSaIcEEE3topEv>
 8002042:	4603      	mov	r3, r0
 8002044:	4619      	mov	r1, r3
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff fd1c 	bl	8001a84 <_ZN9Calculate11addToSuffixERc>
				optStack.pop();
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3330      	adds	r3, #48	; 0x30
 8002050:	4618      	mov	r0, r3
 8002052:	f000 f902 	bl	800225a <_ZNSt5stackIcSt5dequeIcSaIcEEE3popEv>
			while (!optStack.empty() && getLevel(opt) <= getLevel(optStack.top())) {
 8002056:	e7cc      	b.n	8001ff2 <_ZN9Calculate8getInputEc+0xee>
			optStack.push(opt);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3330      	adds	r3, #48	; 0x30
 800205c:	1cfa      	adds	r2, r7, #3
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f000 f971 	bl	8002348 <_ZNSt5stackIcSt5dequeIcSaIcEEE4pushERKc>
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	bd90      	pop	{r4, r7, pc}
 800206e:	bf00      	nop
 8002070:	0800bd2c 	.word	0x0800bd2c

08002074 <_ZNK9Calculate10getOperandB5cxx11Ev>:

std::string Calculate::getOperand() const {
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
	std::string o = operand;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	3318      	adds	r3, #24
 8002082:	4619      	mov	r1, r3
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f006 fd19 	bl	8008abc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	return o;
 800208a:	bf00      	nop
}
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	f006 fd88 	bl	8008bb0 <__errno>
 80020a0:	4603      	mov	r3, r0
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	f006 fd82 	bl	8008bb0 <__errno>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	f006 fd74 	bl	8008bb0 <__errno>
 80020c8:	4603      	mov	r3, r0
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	bf0c      	ite	eq
 80020d0:	2301      	moveq	r3, #1
 80020d2:	2300      	movne	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 80020da:	f006 fd69 	bl	8008bb0 <__errno>
 80020de:	4602      	mov	r2, r0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEdSt17integral_constantIbLb0EE>:
	int _M_errno;
      } const __save_errno;

      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80020fa:	713a      	strb	r2, [r7, #4]
 80020fc:	2300      	movs	r3, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr

08002108 <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8002108:	b5b0      	push	{r4, r5, r7, lr}
 800210a:	b08c      	sub	sp, #48	; 0x30
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8002116:	f107 0314 	add.w	r3, r7, #20
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff ffba 	bl	8002094 <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
	  }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8002120:	f107 0218 	add.w	r2, r7, #24
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4611      	mov	r1, r2
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	4798      	blx	r3
 800212c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28

      if (__endptr == __str)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	d102      	bne.n	800213e <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x36>
	std::__throw_invalid_argument(__name);
 8002138:	68b8      	ldr	r0, [r7, #8]
 800213a:	f006 fa0a 	bl	8008552 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 800213e:	f006 fd37 	bl	8008bb0 <__errno>
 8002142:	4603      	mov	r3, r0
 8002144:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8002146:	2b22      	cmp	r3, #34	; 0x22
 8002148:	d007      	beq.n	800215a <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 800214a:	4622      	mov	r2, r4
 800214c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002150:	f7ff ffce 	bl	80020f0 <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEdSt17integral_constantIbLb0EE>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x56>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x58>
 800215e:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x62>
	std::__throw_out_of_range(__name);
 8002164:	68b8      	ldr	r0, [r7, #8]
 8002166:	f006 f9fa 	bl	800855e <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 800216a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800216e:	e9c7 2308 	strd	r2, r3, [r7, #32]

      if (__idx)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <_ZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x7c>
	*__idx = __endptr - __str;
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	461a      	mov	r2, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	601a      	str	r2, [r3, #0]

      return __ret;
 8002184:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
      } const __save_errno;
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff95 	bl	80020bc <_ZZN9__gnu_cxx6__stoaIddcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8002192:	4622      	mov	r2, r4
 8002194:	462b      	mov	r3, r5
    }
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	3730      	adds	r7, #48	; 0x30
 800219c:	46bd      	mov	sp, r7
 800219e:	bdb0      	pop	{r4, r5, r7, pc}

080021a0 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 80021a0:	b408      	push	{r3}
 80021a2:	b590      	push	{r4, r7, lr}
 80021a4:	b088      	sub	sp, #32
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3307      	adds	r3, #7
 80021b2:	08db      	lsrs	r3, r3, #3
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	ebad 0d03 	sub.w	sp, sp, r3
 80021ba:	466b      	mov	r3, sp
 80021bc:	3307      	adds	r3, #7
 80021be:	08db      	lsrs	r3, r3, #3
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 80021c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021c8:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 80021ca:	68bc      	ldr	r4, [r7, #8]
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	69f8      	ldr	r0, [r7, #28]
 80021d4:	47a0      	blx	r4
 80021d6:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	69fa      	ldr	r2, [r7, #28]
 80021dc:	18d4      	adds	r4, r2, r3
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	4618      	mov	r0, r3
 80021e4:	f006 f9ad 	bl	8008542 <_ZNSaIcEC1Ev>
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	4622      	mov	r2, r4
 80021ee:	69f9      	ldr	r1, [r7, #28]
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 f8b7 	bl	8002364 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	4618      	mov	r0, r3
 80021fc:	f006 f9a2 	bl	8008544 <_ZNSaIcED1Ev>
    }
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	3720      	adds	r7, #32
 8002204:	46bd      	mov	sp, r7
 8002206:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800220a:	b001      	add	sp, #4
 800220c:	4770      	bx	lr

0800220e <_ZNSt5stackIdSt5dequeIdSaIdEEE3topEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %stack.
       */
      reference
      top()
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return c.back();
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4618      	mov	r0, r3
 800221a:	f000 f8be 	bl	800239a <_ZNSt5dequeIdSaIdEE4backEv>
 800221e:	4603      	mov	r3, r0
      }
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <_ZNSt5stackIdSt5dequeIdSaIdEEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_back();
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f8ca 	bl	80023cc <_ZNSt5dequeIdSaIdEE8pop_backEv>
      }
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <_ZNKSt5stackIcSt5dequeIcSaIcEEE5emptyEv>:
      empty() const
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4618      	mov	r0, r3
 800224c:	f000 f8e1 	bl	8002412 <_ZNKSt5dequeIcSaIcEE5emptyEv>
 8002250:	4603      	mov	r3, r0
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <_ZNSt5stackIcSt5dequeIcSaIcEEE3popEv>:
      pop()
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
	c.pop_back();
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4618      	mov	r0, r3
 8002266:	f000 f8e6 	bl	8002436 <_ZNSt5dequeIcSaIcEE8pop_backEv>
      }
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <_ZNKSt5stackIdSt5dequeIdSaIdEEE5emptyEv>:
      empty() const
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4618      	mov	r0, r3
 800227e:	f000 f8fc 	bl	800247a <_ZNKSt5dequeIdSaIdEE5emptyEv>
 8002282:	4603      	mov	r3, r0
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800228c:	b590      	push	{r4, r7, lr}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f901 	bl	800249e <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800229c:	4603      	mov	r3, r0
 800229e:	681c      	ldr	r4, [r3, #0]
 80022a0:	6838      	ldr	r0, [r7, #0]
 80022a2:	f000 f8fc 	bl	800249e <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80022a6:	4603      	mov	r3, r0
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	429c      	cmp	r4, r3
 80022ac:	bf14      	ite	ne
 80022ae:	2301      	movne	r3, #1
 80022b0:	2300      	moveq	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd90      	pop	{r4, r7, pc}

080022bc <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	++_M_current;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	601a      	str	r2, [r3, #0]
	return *this;
 80022ce:	687b      	ldr	r3, [r7, #4]
      }
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr

080022da <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr

080022f0 <_ZNSt5stackIdSt5dequeIdSaIdEEE4pushEOd>:
      push(value_type&& __x)
 80022f0:	b590      	push	{r4, r7, lr}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 80022fa:	687c      	ldr	r4, [r7, #4]
 80022fc:	6838      	ldr	r0, [r7, #0]
 80022fe:	f000 f8d8 	bl	80024b2 <_ZSt4moveIRdEONSt16remove_referenceIT_E4typeEOS2_>
 8002302:	4603      	mov	r3, r0
 8002304:	4619      	mov	r1, r3
 8002306:	4620      	mov	r0, r4
 8002308:	f000 f8dd 	bl	80024c6 <_ZNSt5dequeIdSaIdEE9push_backEOd>
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	bd90      	pop	{r4, r7, pc}

08002314 <_ZNKSt5stackIdSt5dequeIdSaIdEEE4sizeEv>:
      size() const
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
      { return c.size(); }
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f8e2 	bl	80024e8 <_ZNKSt5dequeIdSaIdEE4sizeEv>
 8002324:	4603      	mov	r3, r0
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <_ZNSt5stackIcSt5dequeIcSaIcEEE3topEv>:
      top()
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
	return c.back();
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4618      	mov	r0, r3
 800233a:	f000 f8e7 	bl	800250c <_ZNSt5dequeIcSaIcEE4backEv>
 800233e:	4603      	mov	r3, r0
      }
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <_ZNSt5stackIcSt5dequeIcSaIcEEE4pushERKc>:
      push(const value_type& __x)
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6839      	ldr	r1, [r7, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f000 f8f1 	bl	800253e <_ZNSt5dequeIcSaIcEE9push_backERKc>
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8002372:	68fc      	ldr	r4, [r7, #12]
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f006 f9b4 	bl	80086e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 800237a:	4603      	mov	r3, r0
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	4619      	mov	r1, r3
 8002380:	4620      	mov	r0, r4
 8002382:	f006 fb99 	bl	8008ab8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 f8f8 	bl	8002580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	bd90      	pop	{r4, r7, pc}

0800239a <_ZNSt5dequeIdSaIdEE4backEv>:
      /**
       *  Returns a read/write reference to the data at the last element of the
       *  %deque.
       */
      reference
      back() _GLIBCXX_NOEXCEPT
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	iterator __tmp = end();
 80023a2:	f107 0308 	add.w	r3, r7, #8
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 f8f8 	bl	800259e <_ZNSt5dequeIdSaIdEE3endEv>
	--__tmp;
 80023ae:	f107 0308 	add.w	r3, r7, #8
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 f91d 	bl	80025f2 <_ZNSt15_Deque_iteratorIdRdPdEmmEv>
	return *__tmp;
 80023b8:	f107 0308 	add.w	r3, r7, #8
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 f938 	bl	8002632 <_ZNKSt15_Deque_iteratorIdRdPdEdeEv>
 80023c2:	4603      	mov	r3, r0
      }
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <_ZNSt5dequeIdSaIdEE8pop_backEv>:
       *
       *  Note that no data is returned, and if the last element's data is
       *  needed, it should be retrieved before pop_back() is called.
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_finish._M_cur
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_first)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69db      	ldr	r3, [r3, #28]
	if (this->_M_impl._M_finish._M_cur
 80023dc:	429a      	cmp	r2, r3
 80023de:	d011      	beq.n	8002404 <_ZNSt5dequeIdSaIdEE8pop_backEv+0x38>
	  {
	    --this->_M_impl._M_finish._M_cur;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f1a3 0208 	sub.w	r2, r3, #8
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	619a      	str	r2, [r3, #24]
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 f92a 	bl	8002648 <_ZNSt11_Deque_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80023f4:	4602      	mov	r2, r0
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	4619      	mov	r1, r3
 80023fc:	4610      	mov	r0, r2
 80023fe:	f000 f92d 	bl	800265c <_ZNSt16allocator_traitsISaIdEE7destroyIdEEvRS0_PT_>
				   this->_M_impl._M_finish._M_cur);
	  }
	else
	  _M_pop_back_aux();
      }
 8002402:	e002      	b.n	800240a <_ZNSt5dequeIdSaIdEE8pop_backEv+0x3e>
	  _M_pop_back_aux();
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f936 	bl	8002676 <_ZNSt5dequeIdSaIdEE15_M_pop_back_auxEv>
      }
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <_ZNKSt5dequeIcSaIcEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f103 0218 	add.w	r2, r3, #24
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3308      	adds	r3, #8
 8002424:	4619      	mov	r1, r3
 8002426:	4610      	mov	r0, r2
 8002428:	f000 f94f 	bl	80026ca <_ZSteqRKSt15_Deque_iteratorIcRcPcES4_>
 800242c:	4603      	mov	r3, r0
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <_ZNSt5dequeIcSaIcEE8pop_backEv>:
      pop_back() _GLIBCXX_NOEXCEPT
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_finish._M_cur
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_first)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69db      	ldr	r3, [r3, #28]
	if (this->_M_impl._M_finish._M_cur
 8002446:	429a      	cmp	r2, r3
 8002448:	d010      	beq.n	800246c <_ZNSt5dequeIcSaIcEE8pop_backEv+0x36>
	    --this->_M_impl._M_finish._M_cur;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	1e5a      	subs	r2, r3, #1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	619a      	str	r2, [r3, #24]
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f94a 	bl	80026f0 <_ZNSt11_Deque_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800245c:	4602      	mov	r2, r0
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	4619      	mov	r1, r3
 8002464:	4610      	mov	r0, r2
 8002466:	f000 f94d 	bl	8002704 <_ZNSt16allocator_traitsISaIcEE7destroyIcEEvRS0_PT_>
      }
 800246a:	e002      	b.n	8002472 <_ZNSt5dequeIcSaIcEE8pop_backEv+0x3c>
	  _M_pop_back_aux();
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f956 	bl	800271e <_ZNSt5dequeIcSaIcEE15_M_pop_back_auxEv>
      }
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <_ZNKSt5dequeIdSaIdEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f103 0218 	add.w	r2, r3, #24
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3308      	adds	r3, #8
 800248c:	4619      	mov	r1, r3
 800248e:	4610      	mov	r0, r2
 8002490:	f000 f96e 	bl	8002770 <_ZSteqRKSt15_Deque_iteratorIdRdPdES4_>
 8002494:	4603      	mov	r3, r0
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4618      	mov	r0, r3
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <_ZSt4moveIRdEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr

080024c6 <_ZNSt5dequeIdSaIdEE9push_backEOd>:
      push_back(value_type&& __x)
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80024d0:	6838      	ldr	r0, [r7, #0]
 80024d2:	f7ff ffee 	bl	80024b2 <_ZSt4moveIRdEONSt16remove_referenceIT_E4typeEOS2_>
 80024d6:	4603      	mov	r3, r0
 80024d8:	4619      	mov	r1, r3
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f95b 	bl	8002796 <_ZNSt5dequeIdSaIdEE12emplace_backIJdEEEvDpOT_>
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <_ZNKSt5dequeIdSaIdEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f103 0218 	add.w	r2, r3, #24
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3308      	adds	r3, #8
 80024fa:	4619      	mov	r1, r3
 80024fc:	4610      	mov	r0, r2
 80024fe:	f000 f975 	bl	80027ec <_ZStmiRKSt15_Deque_iteratorIdRdPdES4_>
 8002502:	4603      	mov	r3, r0
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <_ZNSt5dequeIcSaIcEE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	iterator __tmp = end();
 8002514:	f107 0308 	add.w	r3, r7, #8
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f9a8 	bl	8002870 <_ZNSt5dequeIcSaIcEE3endEv>
	--__tmp;
 8002520:	f107 0308 	add.w	r3, r7, #8
 8002524:	4618      	mov	r0, r3
 8002526:	f000 f9cd 	bl	80028c4 <_ZNSt15_Deque_iteratorIcRcPcEmmEv>
	return *__tmp;
 800252a:	f107 0308 	add.w	r3, r7, #8
 800252e:	4618      	mov	r0, r3
 8002530:	f000 f9e7 	bl	8002902 <_ZNKSt15_Deque_iteratorIcRcPcEdeEv>
 8002534:	4603      	mov	r3, r0
      }
 8002536:	4618      	mov	r0, r3
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <_ZNSt5dequeIcSaIcEE9push_backERKc>:
      push_back(const value_type& __x)
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	3b01      	subs	r3, #1
	if (this->_M_impl._M_finish._M_cur
 8002552:	429a      	cmp	r2, r3
 8002554:	d00c      	beq.n	8002570 <_ZNSt5dequeIcSaIcEE9push_backERKc+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	4619      	mov	r1, r3
 8002560:	f000 f9da 	bl	8002918 <_ZNSt16allocator_traitsISaIcEE9constructIcJRKcEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	619a      	str	r2, [r3, #24]
      }
 800256e:	e003      	b.n	8002578 <_ZNSt5dequeIcSaIcEE9push_backERKc+0x3a>
	  _M_push_back_aux(__x);
 8002570:	6839      	ldr	r1, [r7, #0]
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f9e4 	bl	8002940 <_ZNSt5dequeIcSaIcEE16_M_push_back_auxIJRKcEEEvDpOT_>
      }
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	68b9      	ldr	r1, [r7, #8]
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 fa19 	bl	80029c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <_ZNSt5dequeIdSaIdEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	3318      	adds	r3, #24
 80025ac:	4619      	mov	r1, r3
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f804 	bl	80025bc <_ZNSt15_Deque_iteratorIdRdPdEC1ERKS2_>
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <_ZNSt15_Deque_iteratorIdRdPdEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	609a      	str	r2, [r3, #8]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <_ZNSt15_Deque_iteratorIdRdPdEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
	if (_M_cur == _M_first)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	429a      	cmp	r2, r3
 8002604:	d10a      	bne.n	800261c <_ZNSt15_Deque_iteratorIdRdPdEmmEv+0x2a>
	    _M_set_node(_M_node - 1);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	3b04      	subs	r3, #4
 800260c:	4619      	mov	r1, r3
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f9eb 	bl	80029ea <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>
	    _M_cur = _M_last;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	601a      	str	r2, [r3, #0]
	--_M_cur;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f1a3 0208 	sub.w	r2, r3, #8
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	601a      	str	r2, [r3, #0]
	return *this;
 8002628:	687b      	ldr	r3, [r7, #4]
      }
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <_ZNKSt15_Deque_iteratorIdRdPdEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <_ZNSt11_Deque_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr

0800265c <_ZNSt16allocator_traitsISaIdEE7destroyIdEEvRS0_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8002666:	6839      	ldr	r1, [r7, #0]
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f9d7 	bl	8002a1c <_ZN9__gnu_cxx13new_allocatorIdE7destroyIdEEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <_ZNSt5dequeIdSaIdEE15_M_pop_back_auxEv>:
	  }
      }

  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_first.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
    _M_pop_back_aux()
    {
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	4619      	mov	r1, r3
 8002686:	4610      	mov	r0, r2
 8002688:	f000 f9d2 	bl	8002a30 <_ZNSt11_Deque_baseIdSaIdEE18_M_deallocate_nodeEPd>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f103 0218 	add.w	r2, r3, #24
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	3b04      	subs	r3, #4
 8002698:	4619      	mov	r1, r3
 800269a:	4610      	mov	r0, r2
 800269c:	f000 f9a5 	bl	80029ea <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	f1a3 0208 	sub.w	r2, r3, #8
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	619a      	str	r2, [r3, #24]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff ffca 	bl	8002648 <_ZNSt11_Deque_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80026b4:	4602      	mov	r2, r0
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	4619      	mov	r1, r3
 80026bc:	4610      	mov	r0, r2
 80026be:	f7ff ffcd 	bl	800265c <_ZNSt16allocator_traitsISaIdEE7destroyIdEEvRS0_PT_>
			     this->_M_impl._M_finish._M_cur);
    }
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <_ZSteqRKSt15_Deque_iteratorIcRcPcES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	bf0c      	ite	eq
 80026e0:	2301      	moveq	r3, #1
 80026e2:	2300      	movne	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <_ZNSt11_Deque_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr

08002704 <_ZNSt16allocator_traitsISaIcEE7destroyIcEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800270e:	6839      	ldr	r1, [r7, #0]
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f9a0 	bl	8002a56 <_ZN9__gnu_cxx13new_allocatorIcE7destroyIcEEvPT_>
	}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <_ZNSt5dequeIcSaIcEE15_M_pop_back_auxEv>:
    void deque<_Tp, _Alloc>::
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	4619      	mov	r1, r3
 800272e:	4610      	mov	r0, r2
 8002730:	f000 f99b 	bl	8002a6a <_ZNSt11_Deque_baseIcSaIcEE18_M_deallocate_nodeEPc>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f103 0218 	add.w	r2, r3, #24
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	3b04      	subs	r3, #4
 8002740:	4619      	mov	r1, r3
 8002742:	4610      	mov	r0, r2
 8002744:	f000 f9a4 	bl	8002a90 <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	1e5a      	subs	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	619a      	str	r2, [r3, #24]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ffcb 	bl	80026f0 <_ZNSt11_Deque_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800275a:	4602      	mov	r2, r0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	4619      	mov	r1, r3
 8002762:	4610      	mov	r0, r2
 8002764:	f7ff ffce 	bl	8002704 <_ZNSt16allocator_traitsISaIcEE7destroyIcEEvRS0_PT_>
    }
 8002768:	bf00      	nop
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <_ZSteqRKSt15_Deque_iteratorIdRdPdES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	bf0c      	ite	eq
 8002786:	2301      	moveq	r3, #1
 8002788:	2300      	movne	r3, #0
 800278a:	b2db      	uxtb	r3, r3
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr

08002796 <_ZNSt5dequeIdSaIdEE12emplace_backIJdEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8002796:	b5b0      	push	{r4, r5, r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	3b08      	subs	r3, #8
	if (this->_M_impl._M_finish._M_cur
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d012      	beq.n	80027d4 <_ZNSt5dequeIdSaIdEE12emplace_backIJdEEEvDpOT_+0x3e>
	    _Alloc_traits::construct(this->_M_impl,
 80027ae:	687c      	ldr	r4, [r7, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699d      	ldr	r5, [r3, #24]
 80027b4:	6838      	ldr	r0, [r7, #0]
 80027b6:	f000 f983 	bl	8002ac0 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 80027ba:	4603      	mov	r3, r0
 80027bc:	461a      	mov	r2, r3
 80027be:	4629      	mov	r1, r5
 80027c0:	4620      	mov	r0, r4
 80027c2:	f000 f987 	bl	8002ad4 <_ZNSt16allocator_traitsISaIdEE9constructIdJdEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	f103 0208 	add.w	r2, r3, #8
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	619a      	str	r2, [r3, #24]
      }
 80027d2:	e007      	b.n	80027e4 <_ZNSt5dequeIdSaIdEE12emplace_backIJdEEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 80027d4:	6838      	ldr	r0, [r7, #0]
 80027d6:	f000 f973 	bl	8002ac0 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 80027da:	4603      	mov	r3, r0
 80027dc:	4619      	mov	r1, r3
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f98c 	bl	8002afc <_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJdEEEvDpOT_>
      }
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bdb0      	pop	{r4, r5, r7, pc}

080027ec <_ZStmiRKSt15_Deque_iteratorIdRdPdES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 80027f6:	f000 f9c5 	bl	8002b84 <_ZNSt15_Deque_iteratorIdRdPdE14_S_buffer_sizeEv>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	109b      	asrs	r3, r3, #2
 800280a:	3b01      	subs	r3, #1
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6811      	ldr	r1, [r2, #0]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6852      	ldr	r2, [r2, #4]
 8002818:	1a8a      	subs	r2, r1, r2
 800281a:	10d2      	asrs	r2, r2, #3
 800281c:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	6891      	ldr	r1, [r2, #8]
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	1a8a      	subs	r2, r1, r2
 8002828:	10d2      	asrs	r2, r2, #3
 800282a:	4413      	add	r3, r2
      }
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	68b9      	ldr	r1, [r7, #8]
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f9a5 	bl	8002b94 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>
 800284a:	bf00      	nop
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800285c:	2200      	movs	r2, #0
 800285e:	6839      	ldr	r1, [r7, #0]
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f9a5 	bl	8002bb0 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>
 8002866:	4603      	mov	r3, r0
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <_ZNSt5dequeIcSaIcEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	3318      	adds	r3, #24
 800287e:	4619      	mov	r1, r3
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f804 	bl	800288e <_ZNSt15_Deque_iteratorIcRcPcEC1ERKS2_>
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <_ZNSt15_Deque_iteratorIcRcPcEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	68da      	ldr	r2, [r3, #12]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	60da      	str	r2, [r3, #12]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <_ZNSt15_Deque_iteratorIcRcPcEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
	if (_M_cur == _M_first)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d10a      	bne.n	80028ee <_ZNSt15_Deque_iteratorIcRcPcEmmEv+0x2a>
	    _M_set_node(_M_node - 1);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	3b04      	subs	r3, #4
 80028de:	4619      	mov	r1, r3
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f8d5 	bl	8002a90 <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>
	    _M_cur = _M_last;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	601a      	str	r2, [r3, #0]
	--_M_cur;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	1e5a      	subs	r2, r3, #1
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	601a      	str	r2, [r3, #0]
	return *this;
 80028f8:	687b      	ldr	r3, [r7, #4]
      }
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <_ZNKSt15_Deque_iteratorIcRcPcEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <_ZNSt16allocator_traitsISaIcEE9constructIcJRKcEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f95f 	bl	8002be8 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
 800292a:	4603      	mov	r3, r0
 800292c:	461a      	mov	r2, r3
 800292e:	68b9      	ldr	r1, [r7, #8]
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 f963 	bl	8002bfc <_ZN9__gnu_cxx13new_allocatorIcE9constructIcJRKcEEEvPT_DpOT0_>
	}
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <_ZNSt5dequeIcSaIcEE16_M_push_back_auxIJRKcEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8002940:	b5b0      	push	{r4, r5, r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f96d 	bl	8002c2a <_ZNKSt5dequeIcSaIcEE4sizeEv>
 8002950:	4604      	mov	r4, r0
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f97b 	bl	8002c4e <_ZNKSt5dequeIcSaIcEE8max_sizeEv>
 8002958:	4603      	mov	r3, r0
 800295a:	429c      	cmp	r4, r3
 800295c:	bf0c      	ite	eq
 800295e:	2301      	moveq	r3, #1
 8002960:	2300      	movne	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d002      	beq.n	800296e <_ZNSt5dequeIcSaIcEE16_M_push_back_auxIJRKcEEEvDpOT_+0x2e>
	  __throw_length_error(
 8002968:	4816      	ldr	r0, [pc, #88]	; (80029c4 <_ZNSt5dequeIcSaIcEE16_M_push_back_auxIJRKcEEEvDpOT_+0x84>)
 800296a:	f005 fdf5 	bl	8008558 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 800296e:	2101      	movs	r1, #1
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 f97d 	bl	8002c70 <_ZNSt5dequeIcSaIcEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	1d1c      	adds	r4, r3, #4
 800297e:	4610      	mov	r0, r2
 8002980:	f000 f991 	bl	8002ca6 <_ZNSt11_Deque_baseIcSaIcEE16_M_allocate_nodeEv>
 8002984:	4603      	mov	r3, r0
 8002986:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8002988:	687c      	ldr	r4, [r7, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699d      	ldr	r5, [r3, #24]
 800298e:	6838      	ldr	r0, [r7, #0]
 8002990:	f000 f92a 	bl	8002be8 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
 8002994:	4603      	mov	r3, r0
 8002996:	461a      	mov	r2, r3
 8002998:	4629      	mov	r1, r5
 800299a:	4620      	mov	r0, r4
 800299c:	f7ff ffbc 	bl	8002918 <_ZNSt16allocator_traitsISaIcEE9constructIcJRKcEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f103 0218 	add.w	r2, r3, #24
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	3304      	adds	r3, #4
 80029ac:	4619      	mov	r1, r3
 80029ae:	4610      	mov	r0, r2
 80029b0:	f000 f86e 	bl	8002a90 <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69da      	ldr	r2, [r3, #28]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	619a      	str	r2, [r3, #24]
      }
 80029bc:	bf00      	nop
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bdb0      	pop	{r4, r5, r7, pc}
 80029c4:	0800bd30 	.word	0x0800bd30

080029c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 80029c8:	b590      	push	{r4, r7, lr}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 80029d6:	4623      	mov	r3, r4
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	68b9      	ldr	r1, [r7, #8]
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 f975 	bl	8002ccc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 80029e2:	bf00      	nop
 80029e4:	371c      	adds	r7, #28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd90      	pop	{r4, r7, pc}

080029ea <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80029ea:	b590      	push	{r4, r7, lr}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685c      	ldr	r4, [r3, #4]
 8002a06:	f000 f8bd 	bl	8002b84 <_ZNSt15_Deque_iteratorIdRdPdE14_S_buffer_sizeEv>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	18e2      	adds	r2, r4, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	609a      	str	r2, [r3, #8]
      }
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd90      	pop	{r4, r7, pc}

08002a1c <_ZN9__gnu_cxx13new_allocatorIdE7destroyIdEEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <_ZNSt11_Deque_baseIdSaIdEE18_M_deallocate_nodeEPd>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8002a30:	b590      	push	{r4, r7, lr}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8002a3a:	687c      	ldr	r4, [r7, #4]
 8002a3c:	2008      	movs	r0, #8
 8002a3e:	f7fe ffd6 	bl	80019ee <_ZSt16__deque_buf_sizej>
 8002a42:	4603      	mov	r3, r0
 8002a44:	461a      	mov	r2, r3
 8002a46:	6839      	ldr	r1, [r7, #0]
 8002a48:	4620      	mov	r0, r4
 8002a4a:	f000 f987 	bl	8002d5c <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>
      }
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd90      	pop	{r4, r7, pc}

08002a56 <_ZN9__gnu_cxx13new_allocatorIcE7destroyIcEEvPT_>:
	destroy(_Up* __p)
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr

08002a6a <_ZNSt11_Deque_baseIcSaIcEE18_M_deallocate_nodeEPc>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8002a6a:	b590      	push	{r4, r7, lr}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8002a74:	687c      	ldr	r4, [r7, #4]
 8002a76:	2001      	movs	r0, #1
 8002a78:	f7fe ffb9 	bl	80019ee <_ZSt16__deque_buf_sizej>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	461a      	mov	r2, r3
 8002a80:	6839      	ldr	r1, [r7, #0]
 8002a82:	4620      	mov	r0, r4
 8002a84:	f7ff fed6 	bl	8002834 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>
      }
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd90      	pop	{r4, r7, pc}

08002a90 <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8002a90:	b590      	push	{r4, r7, lr}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685c      	ldr	r4, [r3, #4]
 8002aac:	f000 f965 	bl	8002d7a <_ZNSt15_Deque_iteratorIcRcPcE14_S_buffer_sizeEv>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	18e2      	adds	r2, r4, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
      }
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd90      	pop	{r4, r7, pc}

08002ac0 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <_ZNSt16allocator_traitsISaIdEE9constructIdJdEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff ffed 	bl	8002ac0 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	461a      	mov	r2, r3
 8002aea:	68b9      	ldr	r1, [r7, #8]
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f94c 	bl	8002d8a <_ZN9__gnu_cxx13new_allocatorIdE9constructIdJdEEEvPT_DpOT0_>
	}
 8002af2:	bf00      	nop
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJdEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8002afc:	b5b0      	push	{r4, r5, r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff fcee 	bl	80024e8 <_ZNKSt5dequeIdSaIdEE4sizeEv>
 8002b0c:	4604      	mov	r4, r0
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f953 	bl	8002dba <_ZNKSt5dequeIdSaIdEE8max_sizeEv>
 8002b14:	4603      	mov	r3, r0
 8002b16:	429c      	cmp	r4, r3
 8002b18:	bf0c      	ite	eq
 8002b1a:	2301      	moveq	r3, #1
 8002b1c:	2300      	movne	r3, #0
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJdEEEvDpOT_+0x2e>
	  __throw_length_error(
 8002b24:	4816      	ldr	r0, [pc, #88]	; (8002b80 <_ZNSt5dequeIdSaIdEE16_M_push_back_auxIJdEEEvDpOT_+0x84>)
 8002b26:	f005 fd17 	bl	8008558 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f955 	bl	8002ddc <_ZNSt5dequeIdSaIdEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	1d1c      	adds	r4, r3, #4
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	f000 f969 	bl	8002e12 <_ZNSt11_Deque_baseIdSaIdEE16_M_allocate_nodeEv>
 8002b40:	4603      	mov	r3, r0
 8002b42:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8002b44:	687c      	ldr	r4, [r7, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699d      	ldr	r5, [r3, #24]
 8002b4a:	6838      	ldr	r0, [r7, #0]
 8002b4c:	f7ff ffb8 	bl	8002ac0 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 8002b50:	4603      	mov	r3, r0
 8002b52:	461a      	mov	r2, r3
 8002b54:	4629      	mov	r1, r5
 8002b56:	4620      	mov	r0, r4
 8002b58:	f7ff ffbc 	bl	8002ad4 <_ZNSt16allocator_traitsISaIdEE9constructIdJdEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f103 0218 	add.w	r2, r3, #24
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	3304      	adds	r3, #4
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	f7ff ff3d 	bl	80029ea <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69da      	ldr	r2, [r3, #28]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	619a      	str	r2, [r3, #24]
      }
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b80:	0800bd30 	.word	0x0800bd30

08002b84 <_ZNSt15_Deque_iteratorIdRdPdE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8002b88:	2008      	movs	r0, #8
 8002b8a:	f7fe ff30 	bl	80019ee <_ZSt16__deque_buf_sizej>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	4618      	mov	r0, r3
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>:
      deallocate(_Tp* __p, size_type __t)
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	68b8      	ldr	r0, [r7, #8]
 8002ba4:	f005 fcba 	bl	800851c <_ZdlPvj>
      }
 8002ba8:	bf00      	nop
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f93a 	bl	8002e36 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	bf8c      	ite	hi
 8002bca:	2301      	movhi	r3, #1
 8002bcc:	2300      	movls	r3, #0
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002bd4:	f005 fcb7 	bl	8008546 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002bd8:	68b8      	ldr	r0, [r7, #8]
 8002bda:	f005 fca1 	bl	8008520 <_Znwj>
 8002bde:	4603      	mov	r3, r0
      }
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <_ZN9__gnu_cxx13new_allocatorIcE9constructIcJRKcEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002bfc:	b590      	push	{r4, r7, lr}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff ffed 	bl	8002be8 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	781c      	ldrb	r4, [r3, #0]
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	4619      	mov	r1, r3
 8002c16:	2001      	movs	r0, #1
 8002c18:	f7fe fede 	bl	80019d8 <_ZnwjPv>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	4622      	mov	r2, r4
 8002c20:	701a      	strb	r2, [r3, #0]
 8002c22:	bf00      	nop
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd90      	pop	{r4, r7, pc}

08002c2a <_ZNKSt5dequeIcSaIcEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f103 0218 	add.w	r2, r3, #24
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3308      	adds	r3, #8
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4610      	mov	r0, r2
 8002c40:	f000 f904 	bl	8002e4c <_ZStmiRKSt15_Deque_iteratorIcRcPcES4_>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <_ZNKSt5dequeIcSaIcEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 f933 	bl	8002ec4 <_ZNKSt11_Deque_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 f915 	bl	8002e90 <_ZNSt5dequeIcSaIcEE11_S_max_sizeERKS0_>
 8002c66:	4603      	mov	r3, r0
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <_ZNSt5dequeIcSaIcEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	6809      	ldr	r1, [r1, #0]
 8002c8a:	1a41      	subs	r1, r0, r1
 8002c8c:	1089      	asrs	r1, r1, #2
 8002c8e:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d904      	bls.n	8002c9e <_ZNSt5dequeIcSaIcEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8002c94:	2200      	movs	r2, #0
 8002c96:	6839      	ldr	r1, [r7, #0]
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f91d 	bl	8002ed8 <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb>
      }
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <_ZNSt11_Deque_baseIcSaIcEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8002ca6:	b590      	push	{r4, r7, lr}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8002cae:	687c      	ldr	r4, [r7, #4]
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	f7fe fe9c 	bl	80019ee <_ZSt16__deque_buf_sizej>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4620      	mov	r0, r4
 8002cbc:	f7ff fdc9 	bl	8002852 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>
 8002cc0:	4603      	mov	r3, r0
      }
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd90      	pop	{r4, r7, pc}
	...

08002ccc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8002cda:	68b8      	ldr	r0, [r7, #8]
 8002cdc:	f000 f996 	bl	800300c <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d005      	beq.n	8002cf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d001      	beq.n	8002cf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8002cf8:	4817      	ldr	r0, [pc, #92]	; (8002d58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8002cfa:	f005 fc27 	bl	800854c <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	68b8      	ldr	r0, [r7, #8]
 8002d02:	f000 f992 	bl	800302a <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8002d06:	4603      	mov	r3, r0
 8002d08:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2b0f      	cmp	r3, #15
 8002d0e:	d910      	bls.n	8002d32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	2200      	movs	r2, #0
 8002d16:	4619      	mov	r1, r3
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f005 fceb 	bl	80086f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4619      	mov	r1, r3
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f005 fcd9 	bl	80086da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f005 fcda 	bl	80086e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f005 fcd3 	bl	80086de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f005 fd3e 	bl	80087c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	4619      	mov	r1, r3
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f005 fcce 	bl	80086ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8002d4e:	bf00      	nop
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	0800bd60 	.word	0x0800bd60

08002d5c <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	68b9      	ldr	r1, [r7, #8]
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 f970 	bl	8003052 <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>
 8002d72:	bf00      	nop
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <_ZNSt15_Deque_iteratorIcRcPcE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8002d7e:	2001      	movs	r0, #1
 8002d80:	f7fe fe35 	bl	80019ee <_ZSt16__deque_buf_sizej>
 8002d84:	4603      	mov	r3, r0
 8002d86:	4618      	mov	r0, r3
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <_ZN9__gnu_cxx13new_allocatorIdE9constructIdJdEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002d8a:	b5b0      	push	{r4, r5, r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff fe92 	bl	8002ac0 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	4619      	mov	r1, r3
 8002da6:	2008      	movs	r0, #8
 8002da8:	f7fe fe16 	bl	80019d8 <_ZnwjPv>
 8002dac:	4603      	mov	r3, r0
 8002dae:	e9c3 4500 	strd	r4, r5, [r3]
 8002db2:	bf00      	nop
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bdb0      	pop	{r4, r5, r7, pc}

08002dba <_ZNKSt5dequeIdSaIdEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 f96e 	bl	80030a6 <_ZNKSt11_Deque_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 f950 	bl	8003072 <_ZNSt5dequeIdSaIdEE11_S_max_sizeERKS0_>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <_ZNSt5dequeIdSaIdEE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	6809      	ldr	r1, [r1, #0]
 8002df6:	1a41      	subs	r1, r0, r1
 8002df8:	1089      	asrs	r1, r1, #2
 8002dfa:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d904      	bls.n	8002e0a <_ZNSt5dequeIdSaIdEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8002e00:	2200      	movs	r2, #0
 8002e02:	6839      	ldr	r1, [r7, #0]
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f958 	bl	80030ba <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb>
      }
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <_ZNSt11_Deque_baseIdSaIdEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8002e12:	b590      	push	{r4, r7, lr}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8002e1a:	687c      	ldr	r4, [r7, #4]
 8002e1c:	2008      	movs	r0, #8
 8002e1e:	f7fe fde6 	bl	80019ee <_ZSt16__deque_buf_sizej>
 8002e22:	4603      	mov	r3, r0
 8002e24:	4619      	mov	r1, r3
 8002e26:	4620      	mov	r0, r4
 8002e28:	f000 f9e1 	bl	80031ee <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>
 8002e2c:	4603      	mov	r3, r0
      }
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd90      	pop	{r4, r7, pc}

08002e36 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002e3e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <_ZStmiRKSt15_Deque_iteratorIcRcPcES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8002e56:	f7ff ff90 	bl	8002d7a <_ZNSt15_Deque_iteratorIcRcPcE14_S_buffer_sizeEv>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	109b      	asrs	r3, r3, #2
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	fb03 f201 	mul.w	r2, r3, r1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6819      	ldr	r1, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	1acb      	subs	r3, r1, r3
 8002e7a:	441a      	add	r2, r3
	  + (__y._M_last - __y._M_cur);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6899      	ldr	r1, [r3, #8]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	1acb      	subs	r3, r1, r3
 8002e86:	4413      	add	r3, r2
      }
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <_ZNSt5dequeIcSaIcEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8002e98:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002e9c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f9b4 	bl	800320c <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002ea8:	f107 0208 	add.w	r2, r7, #8
 8002eac:	f107 030c 	add.w	r3, r7, #12
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 f9b6 	bl	8003224 <_ZSt3minIjERKT_S2_S2_>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	681b      	ldr	r3, [r3, #0]
      }
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <_ZNKSt11_Deque_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8002ed8:	b590      	push	{r4, r7, lr}
 8002eda:	b08b      	sub	sp, #44	; 0x2c
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	109b      	asrs	r3, r3, #2
 8002ef2:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8002ef4:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	6a3a      	ldr	r2, [r7, #32]
 8002efa:	4413      	add	r3, r2
 8002efc:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d92d      	bls.n	8002f66 <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	1acb      	subs	r3, r1, r3
 8002f16:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002f18:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb+0x4e>
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	e000      	b.n	8002f28 <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb+0x50>
 8002f26:	2300      	movs	r3, #0
 8002f28:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002f2a:	4413      	add	r3, r2
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d209      	bcs.n	8002f4c <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8002f40:	3304      	adds	r3, #4
 8002f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f44:	4619      	mov	r1, r3
 8002f46:	f000 f980 	bl	800324a <_ZSt4copyIPPcS1_ET0_T_S3_S2_>
 8002f4a:	e048      	b.n	8002fde <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002f54:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5c:	4413      	add	r3, r2
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f000 f98b 	bl	800327a <_ZSt13copy_backwardIPPcS1_ET0_T_S3_S2_>
 8002f64:	e03b      	b.n	8002fde <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	f107 0208 	add.w	r2, r7, #8
 8002f72:	4611      	mov	r1, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 f998 	bl	80032aa <_ZSt3maxIjERKT_S2_S2_>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8002f80:	3302      	adds	r3, #2
 8002f82:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	69b9      	ldr	r1, [r7, #24]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 f9a1 	bl	80032d0 <_ZNSt11_Deque_baseIcSaIcEE15_M_allocate_mapEj>
 8002f8e:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	085b      	lsrs	r3, r3, #1
 8002f98:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb+0xce>
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	e000      	b.n	8002fa8 <_ZNSt5dequeIcSaIcEE17_M_reallocate_mapEjb+0xd0>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4413      	add	r3, r2
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8002fb8:	3304      	adds	r3, #4
 8002fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	f000 f944 	bl	800324a <_ZSt4copyIPPcS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6819      	ldr	r1, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f000 f99c 	bl	800330a <_ZNSt11_Deque_baseIcSaIcEE17_M_deallocate_mapEPPcj>

	  this->_M_impl._M_map = __new_map;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	3308      	adds	r3, #8
 8002fe2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fd53 	bl	8002a90 <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f103 0018 	add.w	r0, r3, #24
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffc:	4413      	add	r3, r2
 8002ffe:	4619      	mov	r1, r3
 8003000:	f7ff fd46 	bl	8002a90 <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>
    }
 8003004:	bf00      	nop
 8003006:	372c      	adds	r7, #44	; 0x2c
 8003008:	46bd      	mov	sp, r7
 800300a:	bd90      	pop	{r4, r7, pc}

0800300c <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	bf0c      	ite	eq
 800301a:	2301      	moveq	r3, #1
 800301c:	2300      	movne	r3, #0
 800301e:	b2db      	uxtb	r3, r3
 8003020:	4618      	mov	r0, r3
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr

0800302a <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800302a:	b5b0      	push	{r4, r5, r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
 8003032:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8003034:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8003036:	1d3b      	adds	r3, r7, #4
 8003038:	4618      	mov	r0, r3
 800303a:	f000 f982 	bl	8003342 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 800303e:	462a      	mov	r2, r5
 8003040:	6839      	ldr	r1, [r7, #0]
 8003042:	4620      	mov	r0, r4
 8003044:	f000 f987 	bl	8003356 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8003048:	4603      	mov	r3, r0
    }
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bdb0      	pop	{r4, r5, r7, pc}

08003052 <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>:
      deallocate(_Tp* __p, size_type __t)
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4619      	mov	r1, r3
 8003064:	68b8      	ldr	r0, [r7, #8]
 8003066:	f005 fa59 	bl	800851c <_ZdlPvj>
      }
 800306a:	bf00      	nop
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <_ZNSt5dequeIdSaIdEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 800307a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800307e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f976 	bl	8003372 <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>
 8003086:	4603      	mov	r3, r0
 8003088:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800308a:	f107 0208 	add.w	r2, r7, #8
 800308e:	f107 030c 	add.w	r3, r7, #12
 8003092:	4611      	mov	r1, r2
 8003094:	4618      	mov	r0, r3
 8003096:	f000 f8c5 	bl	8003224 <_ZSt3minIjERKT_S2_S2_>
 800309a:	4603      	mov	r3, r0
 800309c:	681b      	ldr	r3, [r3, #0]
      }
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <_ZNKSt11_Deque_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr

080030ba <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 80030ba:	b590      	push	{r4, r7, lr}
 80030bc:	b08b      	sub	sp, #44	; 0x2c
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	4613      	mov	r3, r2
 80030c6:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	109b      	asrs	r3, r3, #2
 80030d4:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 80030d6:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	6a3a      	ldr	r2, [r7, #32]
 80030dc:	4413      	add	r3, r2
 80030de:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d92d      	bls.n	8003148 <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	1acb      	subs	r3, r1, r3
 80030f8:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80030fa:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb+0x4e>
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	e000      	b.n	800310a <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb+0x50>
 8003108:	2300      	movs	r3, #0
 800310a:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800310c:	4413      	add	r3, r2
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003116:	429a      	cmp	r2, r3
 8003118:	d209      	bcs.n	800312e <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8003122:	3304      	adds	r3, #4
 8003124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003126:	4619      	mov	r1, r3
 8003128:	f000 f92f 	bl	800338a <_ZSt4copyIPPdS1_ET0_T_S3_S2_>
 800312c:	e048      	b.n	80031c0 <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8003136:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800313c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313e:	4413      	add	r3, r2
 8003140:	461a      	mov	r2, r3
 8003142:	f000 f93a 	bl	80033ba <_ZSt13copy_backwardIPPdS1_ET0_T_S3_S2_>
 8003146:	e03b      	b.n	80031c0 <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	3304      	adds	r3, #4
 8003150:	f107 0208 	add.w	r2, r7, #8
 8003154:	4611      	mov	r1, r2
 8003156:	4618      	mov	r0, r3
 8003158:	f000 f8a7 	bl	80032aa <_ZSt3maxIjERKT_S2_S2_>
 800315c:	4603      	mov	r3, r0
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8003162:	3302      	adds	r3, #2
 8003164:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	69b9      	ldr	r1, [r7, #24]
 800316a:	4618      	mov	r0, r3
 800316c:	f000 f93d 	bl	80033ea <_ZNSt11_Deque_baseIdSaIdEE15_M_allocate_mapEj>
 8003170:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	085b      	lsrs	r3, r3, #1
 800317a:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb+0xce>
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	e000      	b.n	800318a <_ZNSt5dequeIdSaIdEE17_M_reallocate_mapEjb+0xd0>
 8003188:	2300      	movs	r3, #0
 800318a:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	4413      	add	r3, r2
 8003190:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800319a:	3304      	adds	r3, #4
 800319c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319e:	4619      	mov	r1, r3
 80031a0:	f000 f8f3 	bl	800338a <_ZSt4copyIPPdS1_ET0_T_S3_S2_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6819      	ldr	r1, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	461a      	mov	r2, r3
 80031b0:	f000 f938 	bl	8003424 <_ZNSt11_Deque_baseIdSaIdEE17_M_deallocate_mapEPPdj>
	  this->_M_impl._M_map = __new_map;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	3308      	adds	r3, #8
 80031c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff fc0f 	bl	80029ea <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f103 0018 	add.w	r0, r3, #24
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031d8:	3b01      	subs	r3, #1
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031de:	4413      	add	r3, r2
 80031e0:	4619      	mov	r1, r3
 80031e2:	f7ff fc02 	bl	80029ea <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>
    }
 80031e6:	bf00      	nop
 80031e8:	372c      	adds	r7, #44	; 0x2c
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd90      	pop	{r4, r7, pc}

080031ee <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80031f8:	2200      	movs	r2, #0
 80031fa:	6839      	ldr	r1, [r7, #0]
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f92d 	bl	800345c <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>
 8003202:	4603      	mov	r3, r0
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus <= 201703L
	return __a.max_size();
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f93f 	bl	8003498 <_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv>
 800321a:	4603      	mov	r3, r0
#else
	return size_t(-1) / sizeof(value_type);
#endif
      }
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d201      	bcs.n	800323e <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	e000      	b.n	8003240 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800323e:	687b      	ldr	r3, [r7, #4]
    }
 8003240:	4618      	mov	r0, r3
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr

0800324a <_ZSt4copyIPPcS1_ET0_T_S3_S2_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800324a:	b590      	push	{r4, r7, lr}
 800324c:	b085      	sub	sp, #20
 800324e:	af00      	add	r7, sp, #0
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 f92a 	bl	80034b0 <_ZSt12__miter_baseIPPcET_S2_>
 800325c:	4604      	mov	r4, r0
 800325e:	68b8      	ldr	r0, [r7, #8]
 8003260:	f000 f926 	bl	80034b0 <_ZSt12__miter_baseIPPcET_S2_>
 8003264:	4603      	mov	r3, r0
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	4619      	mov	r1, r3
 800326a:	4620      	mov	r0, r4
 800326c:	f000 f92a 	bl	80034c4 <_ZSt13__copy_move_aILb0EPPcS1_ET1_T0_S3_S2_>
 8003270:	4603      	mov	r3, r0
    }
 8003272:	4618      	mov	r0, r3
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	bd90      	pop	{r4, r7, pc}

0800327a <_ZSt13copy_backwardIPPcS1_ET0_T_S3_S2_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800327a:	b590      	push	{r4, r7, lr}
 800327c:	b085      	sub	sp, #20
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 f912 	bl	80034b0 <_ZSt12__miter_baseIPPcET_S2_>
 800328c:	4604      	mov	r4, r0
 800328e:	68b8      	ldr	r0, [r7, #8]
 8003290:	f000 f90e 	bl	80034b0 <_ZSt12__miter_baseIPPcET_S2_>
 8003294:	4603      	mov	r3, r0
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	4619      	mov	r1, r3
 800329a:	4620      	mov	r0, r4
 800329c:	f000 f935 	bl	800350a <_ZSt22__copy_move_backward_aILb0EPPcS1_ET1_T0_S3_S2_>
 80032a0:	4603      	mov	r3, r0
    }
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd90      	pop	{r4, r7, pc}

080032aa <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
 80032b2:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d201      	bcs.n	80032c4 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	e000      	b.n	80032c6 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80032c4:	687b      	ldr	r3, [r7, #4]
    }
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr

080032d0 <_ZNSt11_Deque_baseIcSaIcEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80032da:	f107 030c 	add.w	r3, r7, #12
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 f935 	bl	8003550 <_ZNKSt11_Deque_baseIcSaIcEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80032e6:	f107 030c 	add.w	r3, r7, #12
 80032ea:	6839      	ldr	r1, [r7, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 f94c 	bl	800358a <_ZNSt16allocator_traitsISaIPcEE8allocateERS1_j>
 80032f2:	4604      	mov	r4, r0
 80032f4:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80032f6:	f107 030c 	add.w	r3, r7, #12
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 f939 	bl	8003572 <_ZNSaIPcED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003300:	4623      	mov	r3, r4
      }
 8003302:	4618      	mov	r0, r3
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	bd90      	pop	{r4, r7, pc}

0800330a <_ZNSt11_Deque_baseIcSaIcEE17_M_deallocate_mapEPPcj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 800330a:	b580      	push	{r7, lr}
 800330c:	b086      	sub	sp, #24
 800330e:	af00      	add	r7, sp, #0
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003316:	f107 0314 	add.w	r3, r7, #20
 800331a:	68f9      	ldr	r1, [r7, #12]
 800331c:	4618      	mov	r0, r3
 800331e:	f000 f917 	bl	8003550 <_ZNKSt11_Deque_baseIcSaIcEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8003322:	f107 0314 	add.w	r3, r7, #20
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	68b9      	ldr	r1, [r7, #8]
 800332a:	4618      	mov	r0, r3
 800332c:	f000 f93c 	bl	80035a8 <_ZNSt16allocator_traitsISaIPcEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003330:	f107 0314 	add.w	r3, r7, #20
 8003334:	4618      	mov	r0, r3
 8003336:	f000 f91c 	bl	8003572 <_ZNSaIPcED1Ev>
      }
 800333a:	bf00      	nop
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800334a:	bf00      	nop
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr

08003356 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8003356:	b480      	push	{r7}
 8003358:	b085      	sub	sp, #20
 800335a:	af00      	add	r7, sp, #0
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	1ad3      	subs	r3, r2, r3
    }
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr

08003372 <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8003372:	b580      	push	{r7, lr}
 8003374:	b082      	sub	sp, #8
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f923 	bl	80035c6 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 8003380:	4603      	mov	r3, r0
      }
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <_ZSt4copyIPPdS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 800338a:	b590      	push	{r4, r7, lr}
 800338c:	b085      	sub	sp, #20
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f921 	bl	80035de <_ZSt12__miter_baseIPPdET_S2_>
 800339c:	4604      	mov	r4, r0
 800339e:	68b8      	ldr	r0, [r7, #8]
 80033a0:	f000 f91d 	bl	80035de <_ZSt12__miter_baseIPPdET_S2_>
 80033a4:	4603      	mov	r3, r0
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	4619      	mov	r1, r3
 80033aa:	4620      	mov	r0, r4
 80033ac:	f000 f921 	bl	80035f2 <_ZSt13__copy_move_aILb0EPPdS1_ET1_T0_S3_S2_>
 80033b0:	4603      	mov	r3, r0
    }
 80033b2:	4618      	mov	r0, r3
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd90      	pop	{r4, r7, pc}

080033ba <_ZSt13copy_backwardIPPdS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80033ba:	b590      	push	{r4, r7, lr}
 80033bc:	b085      	sub	sp, #20
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f909 	bl	80035de <_ZSt12__miter_baseIPPdET_S2_>
 80033cc:	4604      	mov	r4, r0
 80033ce:	68b8      	ldr	r0, [r7, #8]
 80033d0:	f000 f905 	bl	80035de <_ZSt12__miter_baseIPPdET_S2_>
 80033d4:	4603      	mov	r3, r0
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	4619      	mov	r1, r3
 80033da:	4620      	mov	r0, r4
 80033dc:	f000 f92c 	bl	8003638 <_ZSt22__copy_move_backward_aILb0EPPdS1_ET1_T0_S3_S2_>
 80033e0:	4603      	mov	r3, r0
    }
 80033e2:	4618      	mov	r0, r3
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd90      	pop	{r4, r7, pc}

080033ea <_ZNSt11_Deque_baseIdSaIdEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80033ea:	b590      	push	{r4, r7, lr}
 80033ec:	b085      	sub	sp, #20
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80033f4:	f107 030c 	add.w	r3, r7, #12
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 f93f 	bl	800367e <_ZNKSt11_Deque_baseIdSaIdEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003400:	f107 030c 	add.w	r3, r7, #12
 8003404:	6839      	ldr	r1, [r7, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f956 	bl	80036b8 <_ZNSt16allocator_traitsISaIPdEE8allocateERS1_j>
 800340c:	4604      	mov	r4, r0
 800340e:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003410:	f107 030c 	add.w	r3, r7, #12
 8003414:	4618      	mov	r0, r3
 8003416:	f000 f943 	bl	80036a0 <_ZNSaIPdED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800341a:	4623      	mov	r3, r4
      }
 800341c:	4618      	mov	r0, r3
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	bd90      	pop	{r4, r7, pc}

08003424 <_ZNSt11_Deque_baseIdSaIdEE17_M_deallocate_mapEPPdj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003430:	f107 0314 	add.w	r3, r7, #20
 8003434:	68f9      	ldr	r1, [r7, #12]
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f921 	bl	800367e <_ZNKSt11_Deque_baseIdSaIdEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 800343c:	f107 0314 	add.w	r3, r7, #20
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	68b9      	ldr	r1, [r7, #8]
 8003444:	4618      	mov	r0, r3
 8003446:	f000 f946 	bl	80036d6 <_ZNSt16allocator_traitsISaIPdEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800344a:	f107 0314 	add.w	r3, r7, #20
 800344e:	4618      	mov	r0, r3
 8003450:	f000 f926 	bl	80036a0 <_ZNSaIPdED1Ev>
      }
 8003454:	bf00      	nop
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 f943 	bl	80036f4 <_ZNK9__gnu_cxx13new_allocatorIdE11_M_max_sizeEv>
 800346e:	4602      	mov	r2, r0
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	4293      	cmp	r3, r2
 8003474:	bf8c      	ite	hi
 8003476:	2301      	movhi	r3, #1
 8003478:	2300      	movls	r3, #0
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003480:	f005 f861 	bl	8008546 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4618      	mov	r0, r3
 800348a:	f005 f849 	bl	8008520 <_Znwj>
 800348e:	4603      	mov	r3, r0
      }
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff fcc8 	bl	8002e36 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>
 80034a6:	4603      	mov	r3, r0
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <_ZSt12__miter_baseIPPcET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
    { return __it; }
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4618      	mov	r0, r3
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr

080034c4 <_ZSt13__copy_move_aILb0EPPcS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80034c4:	b5b0      	push	{r4, r5, r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f91a 	bl	800370a <_ZSt12__niter_baseIPPcET_S2_>
 80034d6:	4604      	mov	r4, r0
 80034d8:	68b8      	ldr	r0, [r7, #8]
 80034da:	f000 f916 	bl	800370a <_ZSt12__niter_baseIPPcET_S2_>
 80034de:	4605      	mov	r5, r0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 f911 	bl	800370a <_ZSt12__niter_baseIPPcET_S2_>
 80034e8:	4603      	mov	r3, r0
 80034ea:	461a      	mov	r2, r3
 80034ec:	4629      	mov	r1, r5
 80034ee:	4620      	mov	r0, r4
 80034f0:	f000 f915 	bl	800371e <_ZSt14__copy_move_a1ILb0EPPcS1_ET1_T0_S3_S2_>
 80034f4:	4602      	mov	r2, r0
 80034f6:	1d3b      	adds	r3, r7, #4
 80034f8:	4611      	mov	r1, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 f91f 	bl	800373e <_ZSt12__niter_wrapIPPcET_RKS2_S2_>
 8003500:	4603      	mov	r3, r0
    }
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bdb0      	pop	{r4, r5, r7, pc}

0800350a <_ZSt22__copy_move_backward_aILb0EPPcS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800350a:	b5b0      	push	{r4, r5, r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f8f7 	bl	800370a <_ZSt12__niter_baseIPPcET_S2_>
 800351c:	4604      	mov	r4, r0
 800351e:	68b8      	ldr	r0, [r7, #8]
 8003520:	f000 f8f3 	bl	800370a <_ZSt12__niter_baseIPPcET_S2_>
 8003524:	4605      	mov	r5, r0
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4618      	mov	r0, r3
 800352a:	f000 f8ee 	bl	800370a <_ZSt12__niter_baseIPPcET_S2_>
 800352e:	4603      	mov	r3, r0
 8003530:	461a      	mov	r2, r3
 8003532:	4629      	mov	r1, r5
 8003534:	4620      	mov	r0, r4
 8003536:	f000 f90d 	bl	8003754 <_ZSt23__copy_move_backward_a1ILb0EPPcS1_ET1_T0_S3_S2_>
 800353a:	4602      	mov	r2, r0
 800353c:	1d3b      	adds	r3, r7, #4
 800353e:	4611      	mov	r1, r2
 8003540:	4618      	mov	r0, r3
 8003542:	f000 f8fc 	bl	800373e <_ZSt12__niter_wrapIPPcET_RKS2_S2_>
 8003546:	4603      	mov	r3, r0
    }
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bdb0      	pop	{r4, r5, r7, pc}

08003550 <_ZNKSt11_Deque_baseIcSaIcEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 800355a:	6838      	ldr	r0, [r7, #0]
 800355c:	f7ff fcb2 	bl	8002ec4 <_ZNKSt11_Deque_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8003560:	4603      	mov	r3, r0
 8003562:	4619      	mov	r1, r3
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f905 	bl	8003774 <_ZNSaIPcEC1IcEERKSaIT_E>
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <_ZNSaIPcED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f907 	bl	800378e <_ZN9__gnu_cxx13new_allocatorIPcED1Ev>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <_ZNSt16allocator_traitsISaIPcEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003594:	2200      	movs	r2, #0
 8003596:	6839      	ldr	r1, [r7, #0]
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f902 	bl	80037a2 <_ZN9__gnu_cxx13new_allocatorIPcE8allocateEjPKv>
 800359e:	4603      	mov	r3, r0
 80035a0:	4618      	mov	r0, r3
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <_ZNSt16allocator_traitsISaIPcEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	68b9      	ldr	r1, [r7, #8]
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 f910 	bl	80037de <_ZN9__gnu_cxx13new_allocatorIPcE10deallocateEPS1_j>
 80035be:	bf00      	nop
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f890 	bl	80036f4 <_ZNK9__gnu_cxx13new_allocatorIdE11_M_max_sizeEv>
 80035d4:	4603      	mov	r3, r0
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <_ZSt12__miter_baseIPPdET_S2_>:
    __miter_base(_Iterator __it)
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
    { return __it; }
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4618      	mov	r0, r3
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr

080035f2 <_ZSt13__copy_move_aILb0EPPdS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80035f2:	b5b0      	push	{r4, r5, r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	60f8      	str	r0, [r7, #12]
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f8fd 	bl	80037fe <_ZSt12__niter_baseIPPdET_S2_>
 8003604:	4604      	mov	r4, r0
 8003606:	68b8      	ldr	r0, [r7, #8]
 8003608:	f000 f8f9 	bl	80037fe <_ZSt12__niter_baseIPPdET_S2_>
 800360c:	4605      	mov	r5, r0
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4618      	mov	r0, r3
 8003612:	f000 f8f4 	bl	80037fe <_ZSt12__niter_baseIPPdET_S2_>
 8003616:	4603      	mov	r3, r0
 8003618:	461a      	mov	r2, r3
 800361a:	4629      	mov	r1, r5
 800361c:	4620      	mov	r0, r4
 800361e:	f000 f8f8 	bl	8003812 <_ZSt14__copy_move_a1ILb0EPPdS1_ET1_T0_S3_S2_>
 8003622:	4602      	mov	r2, r0
 8003624:	1d3b      	adds	r3, r7, #4
 8003626:	4611      	mov	r1, r2
 8003628:	4618      	mov	r0, r3
 800362a:	f000 f902 	bl	8003832 <_ZSt12__niter_wrapIPPdET_RKS2_S2_>
 800362e:	4603      	mov	r3, r0
    }
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bdb0      	pop	{r4, r5, r7, pc}

08003638 <_ZSt22__copy_move_backward_aILb0EPPdS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8003638:	b5b0      	push	{r4, r5, r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 f8da 	bl	80037fe <_ZSt12__niter_baseIPPdET_S2_>
 800364a:	4604      	mov	r4, r0
 800364c:	68b8      	ldr	r0, [r7, #8]
 800364e:	f000 f8d6 	bl	80037fe <_ZSt12__niter_baseIPPdET_S2_>
 8003652:	4605      	mov	r5, r0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4618      	mov	r0, r3
 8003658:	f000 f8d1 	bl	80037fe <_ZSt12__niter_baseIPPdET_S2_>
 800365c:	4603      	mov	r3, r0
 800365e:	461a      	mov	r2, r3
 8003660:	4629      	mov	r1, r5
 8003662:	4620      	mov	r0, r4
 8003664:	f000 f8f0 	bl	8003848 <_ZSt23__copy_move_backward_a1ILb0EPPdS1_ET1_T0_S3_S2_>
 8003668:	4602      	mov	r2, r0
 800366a:	1d3b      	adds	r3, r7, #4
 800366c:	4611      	mov	r1, r2
 800366e:	4618      	mov	r0, r3
 8003670:	f000 f8df 	bl	8003832 <_ZSt12__niter_wrapIPPdET_RKS2_S2_>
 8003674:	4603      	mov	r3, r0
    }
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bdb0      	pop	{r4, r5, r7, pc}

0800367e <_ZNKSt11_Deque_baseIdSaIdEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8003688:	6838      	ldr	r0, [r7, #0]
 800368a:	f7ff fd0c 	bl	80030a6 <_ZNKSt11_Deque_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 800368e:	4603      	mov	r3, r0
 8003690:	4619      	mov	r1, r3
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f8e8 	bl	8003868 <_ZNSaIPdEC1IdEERKSaIT_E>
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <_ZNSaIPdED1Ev>:
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f8ea 	bl	8003882 <_ZN9__gnu_cxx13new_allocatorIPdED1Ev>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4618      	mov	r0, r3
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <_ZNSt16allocator_traitsISaIPdEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80036c2:	2200      	movs	r2, #0
 80036c4:	6839      	ldr	r1, [r7, #0]
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f8e5 	bl	8003896 <_ZN9__gnu_cxx13new_allocatorIPdE8allocateEjPKv>
 80036cc:	4603      	mov	r3, r0
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <_ZNSt16allocator_traitsISaIPdEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	68b9      	ldr	r1, [r7, #8]
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 f8f3 	bl	80038d2 <_ZN9__gnu_cxx13new_allocatorIPdE10deallocateEPS1_j>
 80036ec:	bf00      	nop
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <_ZNK9__gnu_cxx13new_allocatorIdE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80036fc:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8003700:	4618      	mov	r0, r3
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <_ZSt12__niter_baseIPPcET_S2_>:
    __niter_base(_Iterator __it)
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4618      	mov	r0, r3
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr

0800371e <_ZSt14__copy_move_a1ILb0EPPcS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800371e:	b580      	push	{r7, lr}
 8003720:	b084      	sub	sp, #16
 8003722:	af00      	add	r7, sp, #0
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 f8df 	bl	80038f2 <_ZSt14__copy_move_a2ILb0EPPcS1_ET1_T0_S3_S2_>
 8003734:	4603      	mov	r3, r0
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <_ZSt12__niter_wrapIPPcET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
    { return __res; }
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr

08003754 <_ZSt23__copy_move_backward_a1ILb0EPPcS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f8d4 	bl	8003912 <_ZSt23__copy_move_backward_a2ILb0EPPcS1_ET1_T0_S3_S2_>
 800376a:	4603      	mov	r3, r0
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <_ZNSaIPcEC1IcEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f8d7 	bl	8003932 <_ZN9__gnu_cxx13new_allocatorIPcEC1Ev>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <_ZN9__gnu_cxx13new_allocatorIPcED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4618      	mov	r0, r3
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr

080037a2 <_ZN9__gnu_cxx13new_allocatorIPcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b084      	sub	sp, #16
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 f8c9 	bl	8003946 <_ZNK9__gnu_cxx13new_allocatorIPcE11_M_max_sizeEv>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	4293      	cmp	r3, r2
 80037ba:	bf8c      	ite	hi
 80037bc:	2301      	movhi	r3, #1
 80037be:	2300      	movls	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <_ZN9__gnu_cxx13new_allocatorIPcE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80037c6:	f004 febe 	bl	8008546 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4618      	mov	r0, r3
 80037d0:	f004 fea6 	bl	8008520 <_Znwj>
 80037d4:	4603      	mov	r3, r0
      }
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <_ZN9__gnu_cxx13new_allocatorIPcE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4619      	mov	r1, r3
 80037f0:	68b8      	ldr	r0, [r7, #8]
 80037f2:	f004 fe93 	bl	800851c <_ZdlPvj>
      }
 80037f6:	bf00      	nop
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <_ZSt12__niter_baseIPPdET_S2_>:
    __niter_base(_Iterator __it)
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr

08003812 <_ZSt14__copy_move_a1ILb0EPPdS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8003812:	b580      	push	{r7, lr}
 8003814:	b084      	sub	sp, #16
 8003816:	af00      	add	r7, sp, #0
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	68b9      	ldr	r1, [r7, #8]
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f89a 	bl	800395c <_ZSt14__copy_move_a2ILb0EPPdS1_ET1_T0_S3_S2_>
 8003828:	4603      	mov	r3, r0
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <_ZSt12__niter_wrapIPPdET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <_ZSt23__copy_move_backward_a1ILb0EPPdS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	68b9      	ldr	r1, [r7, #8]
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 f88f 	bl	800397c <_ZSt23__copy_move_backward_a2ILb0EPPdS1_ET1_T0_S3_S2_>
 800385e:	4603      	mov	r3, r0
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <_ZNSaIPdEC1IdEERKSaIT_E>:
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f892 	bl	800399c <_ZN9__gnu_cxx13new_allocatorIPdEC1Ev>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <_ZN9__gnu_cxx13new_allocatorIPdED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr

08003896 <_ZN9__gnu_cxx13new_allocatorIPdE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 f884 	bl	80039b0 <_ZNK9__gnu_cxx13new_allocatorIPdE11_M_max_sizeEv>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	4293      	cmp	r3, r2
 80038ae:	bf8c      	ite	hi
 80038b0:	2301      	movhi	r3, #1
 80038b2:	2300      	movls	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <_ZN9__gnu_cxx13new_allocatorIPdE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80038ba:	f004 fe44 	bl	8008546 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4618      	mov	r0, r3
 80038c4:	f004 fe2c 	bl	8008520 <_Znwj>
 80038c8:	4603      	mov	r3, r0
      }
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <_ZN9__gnu_cxx13new_allocatorIPdE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b084      	sub	sp, #16
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4619      	mov	r1, r3
 80038e4:	68b8      	ldr	r0, [r7, #8]
 80038e6:	f004 fe19 	bl	800851c <_ZdlPvj>
      }
 80038ea:	bf00      	nop
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <_ZSt14__copy_move_a2ILb0EPPcS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	68b9      	ldr	r1, [r7, #8]
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 f85f 	bl	80039c6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPcEEPT_PKS4_S7_S5_>
 8003908:	4603      	mov	r3, r0
    }
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <_ZSt23__copy_move_backward_a2ILb0EPPcS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8003912:	b580      	push	{r7, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 f86c 	bl	8003a00 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPcEEPT_PKS4_S7_S5_>
 8003928:	4603      	mov	r3, r0
    }
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <_ZN9__gnu_cxx13new_allocatorIPcEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4618      	mov	r0, r3
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr

08003946 <_ZNK9__gnu_cxx13new_allocatorIPcE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800394e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8003952:	4618      	mov	r0, r3
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr

0800395c <_ZSt14__copy_move_a2ILb0EPPdS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 f869 	bl	8003a44 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPdEEPT_PKS4_S7_S5_>
 8003972:	4603      	mov	r3, r0
    }
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <_ZSt23__copy_move_backward_a2ILb0EPPdS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	68b9      	ldr	r1, [r7, #8]
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 f876 	bl	8003a7e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPdEEPT_PKS4_S7_S5_>
 8003992:	4603      	mov	r3, r0
    }
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <_ZN9__gnu_cxx13new_allocatorIPdEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4618      	mov	r0, r3
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr

080039b0 <_ZNK9__gnu_cxx13new_allocatorIPdE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80039b8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc80      	pop	{r7}
 80039c4:	4770      	bx	lr

080039c6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPcEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b086      	sub	sp, #24
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	60f8      	str	r0, [r7, #12]
 80039ce:	60b9      	str	r1, [r7, #8]
 80039d0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	109b      	asrs	r3, r3, #2
 80039da:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d006      	beq.n	80039f0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPcEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	461a      	mov	r2, r3
 80039e8:	68f9      	ldr	r1, [r7, #12]
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f005 f936 	bl	8008c5c <memmove>
	  return __result + _Num;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	4413      	add	r3, r2
	}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPcEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	109b      	asrs	r3, r3, #2
 8003a14:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPcEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	425b      	negs	r3, r3
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	18d0      	adds	r0, r2, r3
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68f9      	ldr	r1, [r7, #12]
 8003a2e:	f005 f915 	bl	8008c5c <memmove>
	  return __result - _Num;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	425b      	negs	r3, r3
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	4413      	add	r3, r2
	}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPdEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	109b      	asrs	r3, r3, #2
 8003a58:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d006      	beq.n	8003a6e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPdEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	461a      	mov	r2, r3
 8003a66:	68f9      	ldr	r1, [r7, #12]
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f005 f8f7 	bl	8008c5c <memmove>
	  return __result + _Num;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	4413      	add	r3, r2
	}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPdEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b086      	sub	sp, #24
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	109b      	asrs	r3, r3, #2
 8003a92:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPdEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	425b      	negs	r3, r3
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	18d0      	adds	r0, r2, r3
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	68f9      	ldr	r1, [r7, #12]
 8003aac:	f005 f8d6 	bl	8008c5c <memmove>
	  return __result - _Num;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	425b      	negs	r3, r3
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	4413      	add	r3, r2
	}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
	...

08003ac4 <delayUSecs>:

#ifdef __cplusplus
extern "C" {
#endif

void delayUSecs(uint32_t us){
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
	SysTick->CTRL = 0;
 8003acc:	4b12      	ldr	r3, [pc, #72]	; (8003b18 <delayUSecs+0x54>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = SYSTEMCLOCKS_PER_SEC / 1000000 * us - 1;
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4413      	add	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4a0e      	ldr	r2, [pc, #56]	; (8003b18 <delayUSecs+0x54>)
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8003ae2:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <delayUSecs+0x54>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <delayUSecs+0x54>)
 8003aea:	2205      	movs	r2, #5
 8003aec:	601a      	str	r2, [r3, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8003aee:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <delayUSecs+0x54>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	bf0c      	ite	eq
 8003afa:	2301      	moveq	r3, #1
 8003afc:	2300      	movne	r3, #0
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d000      	beq.n	8003b06 <delayUSecs+0x42>
 8003b04:	e7f3      	b.n	8003aee <delayUSecs+0x2a>
	SysTick->CTRL = 0;
 8003b06:	4b04      	ldr	r3, [pc, #16]	; (8003b18 <delayUSecs+0x54>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	e000e010 	.word	0xe000e010

08003b1c <keepUSBVisable>:
	SysTick->CTRL = 5;
	while((SysTick->CTRL & 0x00010000) == 0);
	SysTick->CTRL = 0;
}

void keepUSBVisable(){
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b22:	f107 0308 	add.w	r3, r7, #8
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	605a      	str	r2, [r3, #4]
 8003b2c:	609a      	str	r2, [r3, #8]
 8003b2e:	60da      	str	r2, [r3, #12]
	/* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b30:	4b1b      	ldr	r3, [pc, #108]	; (8003ba0 <keepUSBVisable+0x84>)
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	4a1a      	ldr	r2, [pc, #104]	; (8003ba0 <keepUSBVisable+0x84>)
 8003b36:	f043 0304 	orr.w	r3, r3, #4
 8003b3a:	6193      	str	r3, [r2, #24]
 8003b3c:	4b18      	ldr	r3, [pc, #96]	; (8003ba0 <keepUSBVisable+0x84>)
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	607b      	str	r3, [r7, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b4e:	4815      	ldr	r0, [pc, #84]	; (8003ba4 <keepUSBVisable+0x88>)
 8003b50:	f001 f866 	bl	8004c20 <HAL_GPIO_WritePin>
	/*Configure GPIO pin : PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b58:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b5e:	2302      	movs	r3, #2
 8003b60:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b62:	2302      	movs	r3, #2
 8003b64:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b66:	f107 0308 	add.w	r3, r7, #8
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	480d      	ldr	r0, [pc, #52]	; (8003ba4 <keepUSBVisable+0x88>)
 8003b6e:	f000 ff1d 	bl	80049ac <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8003b72:	2200      	movs	r2, #0
 8003b74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b78:	480a      	ldr	r0, [pc, #40]	; (8003ba4 <keepUSBVisable+0x88>)
 8003b7a:	f001 f851 	bl	8004c20 <HAL_GPIO_WritePin>
	HAL_Delay(65);
 8003b7e:	2041      	movs	r0, #65	; 0x41
 8003b80:	f000 fe96 	bl	80048b0 <HAL_Delay>
	//先把PA12拉低再拉高，利用D+模拟USB的拔插动作
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8003b84:	2201      	movs	r2, #1
 8003b86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b8a:	4806      	ldr	r0, [pc, #24]	; (8003ba4 <keepUSBVisable+0x88>)
 8003b8c:	f001 f848 	bl	8004c20 <HAL_GPIO_WritePin>
	HAL_Delay(65);
 8003b90:	2041      	movs	r0, #65	; 0x41
 8003b92:	f000 fe8d 	bl	80048b0 <HAL_Delay>
}
 8003b96:	bf00      	nop
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	40010800 	.word	0x40010800

08003ba8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f82f 	bl	8003c14 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 f812 	bl	8003bf4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff ffeb 	bl	8003bc0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4618      	mov	r0, r3
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f833 	bl	8003c68 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 f83b 	bl	8003c80 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataC1Ev>
	{ }
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f842 	bl	8003ca6 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4618      	mov	r0, r3
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	10db      	asrs	r3, r3, #3
 8003c44:	4a07      	ldr	r2, [pc, #28]	; (8003c64 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x38>)
 8003c46:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f834 	bl	8003cba <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      }
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff ffa7 	bl	8003ba8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	aaaaaaab 	.word	0xaaaaaaab

08003c68 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f835 	bl	8003ce0 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	605a      	str	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	609a      	str	r2, [r3, #8]
	{ }
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bc80      	pop	{r7}
 8003ca4:	4770      	bx	lr

08003ca6 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr

08003cba <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b084      	sub	sp, #16
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
	if (__p)
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68b9      	ldr	r1, [r7, #8]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 f80e 	bl	8003cf4 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 8003cd8:	bf00      	nop
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4618      	mov	r0, r3
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr

08003cf4 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	68b9      	ldr	r1, [r7, #8]
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 f81c 	bl	8003d42 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 8003d0a:	bf00      	nop
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr

08003d26 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8003d32:	68b9      	ldr	r1, [r7, #8]
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 f817 	bl	8003d68 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 8003d3a:	bf00      	nop
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __t)
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b084      	sub	sp, #16
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	60f8      	str	r0, [r7, #12]
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	4613      	mov	r3, r2
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	4413      	add	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4619      	mov	r1, r3
 8003d5a:	68b8      	ldr	r0, [r7, #8]
 8003d5c:	f004 fbde 	bl	800851c <_ZdlPvj>
      }
 8003d60:	bf00      	nop
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8003d72:	6839      	ldr	r1, [r7, #0]
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f804 	bl	8003d82 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 8003d7a:	bf00      	nop
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b082      	sub	sp, #8
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d00a      	beq.n	8003daa <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f80c 	bl	8003db2 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 f812 	bl	8003dc6 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3318      	adds	r3, #24
 8003da6:	607b      	str	r3, [r7, #4]
 8003da8:	e7f0      	b.n	8003d8c <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr

08003dc6 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f004 fd42 	bl	8008858 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 8003dd4:	bf00      	nop
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <_Z41__static_initialization_and_destruction_0ii>:

void Log::DisplayMsg(){
	for (auto it = msgBuffer.begin(); it != msgBuffer.end(); ++it) {
		sendStringViaCDC(*it);
	}
}
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d107      	bne.n	8003dfc <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d102      	bne.n	8003dfc <_Z41__static_initialization_and_destruction_0ii+0x20>
std::vector<std::string> Log::msgBuffer;
 8003df6:	4809      	ldr	r0, [pc, #36]	; (8003e1c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003df8:	f7ff feef 	bl	8003bda <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d107      	bne.n	8003e12 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d102      	bne.n	8003e12 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003e0c:	4803      	ldr	r0, [pc, #12]	; (8003e1c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003e0e:	f000 f807 	bl	8003e20 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
}
 8003e12:	bf00      	nop
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	2000036c 	.word	0x2000036c

08003e20 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8003e20:	b5b0      	push	{r4, r5, r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681c      	ldr	r4, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff ff6d 	bl	8003d12 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8003e38:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	4629      	mov	r1, r5
 8003e3e:	4620      	mov	r0, r4
 8003e40:	f7ff ff71 	bl	8003d26 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff fef0 	bl	8003c2c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bdb0      	pop	{r4, r5, r7, pc}

08003e56 <_GLOBAL__sub_I_delayUSecs>:
 8003e56:	b580      	push	{r7, lr}
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e5e:	2001      	movs	r0, #1
 8003e60:	f7ff ffbc 	bl	8003ddc <_Z41__static_initialization_and_destruction_0ii>
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <_GLOBAL__sub_D_delayUSecs>:
 8003e66:	b580      	push	{r7, lr}
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e6e:	2000      	movs	r0, #0
 8003e70:	f7ff ffb4 	bl	8003ddc <_Z41__static_initialization_and_destruction_0ii>
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003e78:	b530      	push	{r4, r5, lr}
 8003e7a:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e7c:	2400      	movs	r4, #0
 8003e7e:	9402      	str	r4, [sp, #8]
 8003e80:	9403      	str	r4, [sp, #12]
 8003e82:	9404      	str	r4, [sp, #16]
 8003e84:	9405      	str	r4, [sp, #20]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e86:	4b13      	ldr	r3, [pc, #76]	; (8003ed4 <MX_GPIO_Init+0x5c>)
 8003e88:	699a      	ldr	r2, [r3, #24]
 8003e8a:	f042 0220 	orr.w	r2, r2, #32
 8003e8e:	619a      	str	r2, [r3, #24]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	f002 0220 	and.w	r2, r2, #32
 8003e96:	9200      	str	r2, [sp, #0]
 8003e98:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e9a:	699a      	ldr	r2, [r3, #24]
 8003e9c:	f042 0204 	orr.w	r2, r2, #4
 8003ea0:	619a      	str	r2, [r3, #24]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	9301      	str	r3, [sp, #4]
 8003eaa:	9b01      	ldr	r3, [sp, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8003eac:	4d0a      	ldr	r5, [pc, #40]	; (8003ed8 <MX_GPIO_Init+0x60>)
 8003eae:	2201      	movs	r2, #1
 8003eb0:	2140      	movs	r1, #64	; 0x40
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	f000 feb4 	bl	8004c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8003eb8:	2340      	movs	r3, #64	; 0x40
 8003eba:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec0:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8003ec6:	a902      	add	r1, sp, #8
 8003ec8:	4628      	mov	r0, r5
 8003eca:	f000 fd6f 	bl	80049ac <HAL_GPIO_Init>

}
 8003ece:	b007      	add	sp, #28
 8003ed0:	bd30      	pop	{r4, r5, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	40010800 	.word	0x40010800

08003edc <_ZN9CalculateC1Ev>:
#define INC_CALCULATE_HPP_

#include <stack>
#include <string>

class Calculate {
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f004 fcaf 	bl	800884a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3318      	adds	r3, #24
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f004 fcaa 	bl	800884a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3330      	adds	r3, #48	; 0x30
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 f8fa 	bl	80040f4 <_ZNSt5stackIcSt5dequeIcSaIcEEEC1IS2_vEEv>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3358      	adds	r3, #88	; 0x58
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 f916 	bl	8004136 <_ZNSt5stackIdSt5dequeIdSaIdEEEC1IS2_vEEv>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b0a8      	sub	sp, #160	; 0xa0
 8003f18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f1a:	f000 fca5 	bl	8004868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f1e:	f000 f86d 	bl	8003ffc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f22:	f7ff ffa9 	bl	8003e78 <MX_GPIO_Init>
  keepUSBVisable();
 8003f26:	f7ff fdf9 	bl	8003b1c <keepUSBVisable>
  MX_USB_DEVICE_Init();
 8003f2a:	f004 f911 	bl	8008150 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8003f2e:	f000 fb71 	bl	8004614 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MAX7219 Max7219;
  Calculate Calcu;
 8003f32:	1d3b      	adds	r3, r7, #4
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff ffd1 	bl	8003edc <_ZN9CalculateC1Ev>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Max7219.max7219Init();
 8003f3a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 fb1c 	bl	800457c <_ZN7MAX721911max7219InitEv>
  //2*(3+5)+7/1-4
  Calcu.getInput('2');
 8003f44:	1d3b      	adds	r3, r7, #4
 8003f46:	2132      	movs	r1, #50	; 0x32
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fd ffdb 	bl	8001f04 <_ZN9Calculate8getInputEc>
  Calcu.getInput('*');
 8003f4e:	1d3b      	adds	r3, r7, #4
 8003f50:	212a      	movs	r1, #42	; 0x2a
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fd ffd6 	bl	8001f04 <_ZN9Calculate8getInputEc>
  Calcu.getInput('(');
 8003f58:	1d3b      	adds	r3, r7, #4
 8003f5a:	2128      	movs	r1, #40	; 0x28
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fd ffd1 	bl	8001f04 <_ZN9Calculate8getInputEc>
  Calcu.getInput('3');
 8003f62:	1d3b      	adds	r3, r7, #4
 8003f64:	2133      	movs	r1, #51	; 0x33
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fd ffcc 	bl	8001f04 <_ZN9Calculate8getInputEc>
  Calcu.getInput('+');
 8003f6c:	1d3b      	adds	r3, r7, #4
 8003f6e:	212b      	movs	r1, #43	; 0x2b
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fd ffc7 	bl	8001f04 <_ZN9Calculate8getInputEc>
  Calcu.getInput('5');
 8003f76:	1d3b      	adds	r3, r7, #4
 8003f78:	2135      	movs	r1, #53	; 0x35
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fd ffc2 	bl	8001f04 <_ZN9Calculate8getInputEc>
  Calcu.getInput(')');
 8003f80:	1d3b      	adds	r3, r7, #4
 8003f82:	2129      	movs	r1, #41	; 0x29
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fd ffbd 	bl	8001f04 <_ZN9Calculate8getInputEc>
  Calcu.getInput('+');
 8003f8a:	1d3b      	adds	r3, r7, #4
 8003f8c:	212b      	movs	r1, #43	; 0x2b
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fd ffb8 	bl	8001f04 <_ZN9Calculate8getInputEc>
  Calcu.getInput('7');
 8003f94:	1d3b      	adds	r3, r7, #4
 8003f96:	2137      	movs	r1, #55	; 0x37
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fd ffb3 	bl	8001f04 <_ZN9Calculate8getInputEc>
  Calcu.getInput('/');
 8003f9e:	1d3b      	adds	r3, r7, #4
 8003fa0:	212f      	movs	r1, #47	; 0x2f
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fd ffae 	bl	8001f04 <_ZN9Calculate8getInputEc>
  Calcu.getInput('1');
 8003fa8:	1d3b      	adds	r3, r7, #4
 8003faa:	2131      	movs	r1, #49	; 0x31
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fd ffa9 	bl	8001f04 <_ZN9Calculate8getInputEc>
  Calcu.getInput('-');
 8003fb2:	1d3b      	adds	r3, r7, #4
 8003fb4:	212d      	movs	r1, #45	; 0x2d
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fd ffa4 	bl	8001f04 <_ZN9Calculate8getInputEc>
  Calcu.getInput('4');
 8003fbc:	1d3b      	adds	r3, r7, #4
 8003fbe:	2134      	movs	r1, #52	; 0x34
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fd ff9f 	bl	8001f04 <_ZN9Calculate8getInputEc>
  Calcu.getInput('=');
 8003fc6:	1d3b      	adds	r3, r7, #4
 8003fc8:	213d      	movs	r1, #61	; 0x3d
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fd ff9a 	bl	8001f04 <_ZN9Calculate8getInputEc>

  s = Calcu.getOperand();
 8003fd0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003fd4:	1d3a      	adds	r2, r7, #4
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fe f84b 	bl	8002074 <_ZNK9Calculate10getOperandB5cxx11Ev>
 8003fde:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4804      	ldr	r0, [pc, #16]	; (8003ff8 <main+0xe4>)
 8003fe6:	f004 fc3d 	bl	8008864 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003fea:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f004 fc32 	bl	8008858 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  while (1)
 8003ff4:	e7fe      	b.n	8003ff4 <main+0xe0>
 8003ff6:	bf00      	nop
 8003ff8:	20000378 	.word	0x20000378

08003ffc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b094      	sub	sp, #80	; 0x50
 8004000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004002:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004006:	2228      	movs	r2, #40	; 0x28
 8004008:	2100      	movs	r1, #0
 800400a:	4618      	mov	r0, r3
 800400c:	f004 fe40 	bl	8008c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004010:	f107 0314 	add.w	r3, r7, #20
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	605a      	str	r2, [r3, #4]
 800401a:	609a      	str	r2, [r3, #8]
 800401c:	60da      	str	r2, [r3, #12]
 800401e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004020:	1d3b      	adds	r3, r7, #4
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	605a      	str	r2, [r3, #4]
 8004028:	609a      	str	r2, [r3, #8]
 800402a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800402c:	2301      	movs	r3, #1
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004030:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004034:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004036:	2300      	movs	r3, #0
 8004038:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800403a:	2301      	movs	r3, #1
 800403c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800403e:	2302      	movs	r3, #2
 8004040:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004042:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004046:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8004048:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800404c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800404e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004052:	4618      	mov	r0, r3
 8004054:	f001 fe26 	bl	8005ca4 <HAL_RCC_OscConfig>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	bf14      	ite	ne
 800405e:	2301      	movne	r3, #1
 8004060:	2300      	moveq	r3, #0
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8004068:	f000 f832 	bl	80040d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800406c:	230f      	movs	r3, #15
 800406e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004070:	2302      	movs	r3, #2
 8004072:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004074:	2300      	movs	r3, #0
 8004076:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800407c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800407e:	2300      	movs	r3, #0
 8004080:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004082:	f107 0314 	add.w	r3, r7, #20
 8004086:	2101      	movs	r1, #1
 8004088:	4618      	mov	r0, r3
 800408a:	f002 f84b 	bl	8006124 <HAL_RCC_ClockConfig>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	bf14      	ite	ne
 8004094:	2301      	movne	r3, #1
 8004096:	2300      	moveq	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800409e:	f000 f817 	bl	80040d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80040a2:	2310      	movs	r3, #16
 80040a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80040a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040aa:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040ac:	1d3b      	adds	r3, r7, #4
 80040ae:	4618      	mov	r0, r3
 80040b0:	f002 f8f0 	bl	8006294 <HAL_RCCEx_PeriphCLKConfig>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	bf14      	ite	ne
 80040ba:	2301      	movne	r3, #1
 80040bc:	2300      	moveq	r3, #0
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 80040c4:	f000 f804 	bl	80040d0 <Error_Handler>
  }
}
 80040c8:	bf00      	nop
 80040ca:	3750      	adds	r7, #80	; 0x50
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80040d4:	b672      	cpsid	i
}
 80040d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80040d8:	e7fe      	b.n	80040d8 <Error_Handler+0x8>

080040da <_ZNSt5dequeIcSaIcEEC1Ev>:
      deque() = default;
 80040da:	b580      	push	{r7, lr}
 80040dc:	b082      	sub	sp, #8
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 f83a 	bl	800415e <_ZNSt11_Deque_baseIcSaIcEEC1Ev>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4618      	mov	r0, r3
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <_ZNSt5stackIcSt5dequeIcSaIcEEEC1IS2_vEEv>:
	stack()
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
	: c() { }
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4618      	mov	r0, r3
 8004100:	2328      	movs	r3, #40	; 0x28
 8004102:	461a      	mov	r2, r3
 8004104:	2100      	movs	r1, #0
 8004106:	f004 fdc3 	bl	8008c90 <memset>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff ffe4 	bl	80040da <_ZNSt5dequeIcSaIcEEC1Ev>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4618      	mov	r0, r3
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <_ZNSt5dequeIdSaIdEEC1Ev>:
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4618      	mov	r0, r3
 8004128:	f000 f82a 	bl	8004180 <_ZNSt11_Deque_baseIdSaIdEEC1Ev>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <_ZNSt5stackIdSt5dequeIdSaIdEEEC1IS2_vEEv>:
	stack()
 8004136:	b580      	push	{r7, lr}
 8004138:	b082      	sub	sp, #8
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
	: c() { }
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4618      	mov	r0, r3
 8004142:	2328      	movs	r3, #40	; 0x28
 8004144:	461a      	mov	r2, r3
 8004146:	2100      	movs	r1, #0
 8004148:	f004 fda2 	bl	8008c90 <memset>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff ffe4 	bl	800411c <_ZNSt5dequeIdSaIdEEC1Ev>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4618      	mov	r0, r3
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <_ZNSt11_Deque_baseIcSaIcEEC1Ev>:
      _Deque_base()
 800415e:	b580      	push	{r7, lr}
 8004160:	b082      	sub	sp, #8
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4618      	mov	r0, r3
 800416a:	f000 f81a 	bl	80041a2 <_ZNSt11_Deque_baseIcSaIcEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 800416e:	2100      	movs	r1, #0
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f826 	bl	80041c2 <_ZNSt11_Deque_baseIcSaIcEE17_M_initialize_mapEj>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <_ZNSt11_Deque_baseIdSaIdEEC1Ev>:
      _Deque_base()
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4618      	mov	r0, r3
 800418c:	f000 f87b 	bl	8004286 <_ZNSt11_Deque_baseIdSaIdEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8004190:	2100      	movs	r1, #0
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f887 	bl	80042a6 <_ZNSt11_Deque_baseIdSaIdEE17_M_initialize_mapEj>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <_ZNSt11_Deque_baseIcSaIcEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b082      	sub	sp, #8
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f004 f9c9 	bl	8008542 <_ZNSaIcEC1Ev>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 f8da 	bl	800436c <_ZNSt11_Deque_baseIcSaIcEE16_Deque_impl_dataC1Ev>
	{ }
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <_ZNSt11_Deque_baseIcSaIcEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80041c2:	b590      	push	{r4, r7, lr}
 80041c4:	b089      	sub	sp, #36	; 0x24
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 80041cc:	2001      	movs	r0, #1
 80041ce:	f7fd fc0e 	bl	80019ee <_ZSt16__deque_buf_sizej>
 80041d2:	4602      	mov	r2, r0
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80041da:	3301      	adds	r3, #1
 80041dc:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80041de:	2308      	movs	r3, #8
 80041e0:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	3302      	adds	r3, #2
 80041e6:	613b      	str	r3, [r7, #16]
 80041e8:	f107 0210 	add.w	r2, r7, #16
 80041ec:	f107 030c 	add.w	r3, r7, #12
 80041f0:	4611      	mov	r1, r2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff f859 	bl	80032aa <_ZSt3maxIjERKT_S2_S2_>
 80041f8:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	4619      	mov	r1, r3
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7ff f862 	bl	80032d0 <_ZNSt11_Deque_baseIcSaIcEE15_M_allocate_mapEj>
 800420c:	4602      	mov	r2, r0
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6859      	ldr	r1, [r3, #4]
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	1acb      	subs	r3, r1, r3
 800421e:	085b      	lsrs	r3, r3, #1
 8004220:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8004222:	4413      	add	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4413      	add	r3, r2
 800422e:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	69b9      	ldr	r1, [r7, #24]
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f8b2 	bl	800439e <_ZNSt11_Deque_baseIcSaIcEE15_M_create_nodesEPPcS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3308      	adds	r3, #8
 800423e:	69b9      	ldr	r1, [r7, #24]
 8004240:	4618      	mov	r0, r3
 8004242:	f7fe fc25 	bl	8002a90 <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f103 0218 	add.w	r2, r3, #24
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	3b04      	subs	r3, #4
 8004250:	4619      	mov	r1, r3
 8004252:	4610      	mov	r0, r2
 8004254:	f7fe fc1c 	bl	8002a90 <_ZNSt15_Deque_iteratorIcRcPcE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8004264:	2001      	movs	r0, #1
 8004266:	f7fd fbc2 	bl	80019ee <_ZSt16__deque_buf_sizej>
 800426a:	4602      	mov	r2, r0
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004272:	fb01 f202 	mul.w	r2, r1, r2
 8004276:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8004278:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	619a      	str	r2, [r3, #24]
    }
 800427e:	bf00      	nop
 8004280:	3724      	adds	r7, #36	; 0x24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd90      	pop	{r4, r7, pc}

08004286 <_ZNSt11_Deque_baseIdSaIdEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8004286:	b580      	push	{r7, lr}
 8004288:	b082      	sub	sp, #8
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f89f 	bl	80043d2 <_ZNSaIdEC1Ev>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4618      	mov	r0, r3
 8004298:	f000 f8a7 	bl	80043ea <_ZNSt11_Deque_baseIdSaIdEE16_Deque_impl_dataC1Ev>
	{ }
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4618      	mov	r0, r3
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <_ZNSt11_Deque_baseIdSaIdEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80042a6:	b590      	push	{r4, r7, lr}
 80042a8:	b089      	sub	sp, #36	; 0x24
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 80042b0:	2008      	movs	r0, #8
 80042b2:	f7fd fb9c 	bl	80019ee <_ZSt16__deque_buf_sizej>
 80042b6:	4602      	mov	r2, r0
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80042be:	3301      	adds	r3, #1
 80042c0:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80042c2:	2308      	movs	r3, #8
 80042c4:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	3302      	adds	r3, #2
 80042ca:	613b      	str	r3, [r7, #16]
 80042cc:	f107 0210 	add.w	r2, r7, #16
 80042d0:	f107 030c 	add.w	r3, r7, #12
 80042d4:	4611      	mov	r1, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe ffe7 	bl	80032aa <_ZSt3maxIjERKT_S2_S2_>
 80042dc:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	4619      	mov	r1, r3
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7ff f87d 	bl	80033ea <_ZNSt11_Deque_baseIdSaIdEE15_M_allocate_mapEj>
 80042f0:	4602      	mov	r2, r0
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6859      	ldr	r1, [r3, #4]
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	1acb      	subs	r3, r1, r3
 8004302:	085b      	lsrs	r3, r3, #1
 8004304:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8004306:	4413      	add	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	4413      	add	r3, r2
 8004312:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	69b9      	ldr	r1, [r7, #24]
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f87f 	bl	800441c <_ZNSt11_Deque_baseIdSaIdEE15_M_create_nodesEPPdS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3308      	adds	r3, #8
 8004322:	69b9      	ldr	r1, [r7, #24]
 8004324:	4618      	mov	r0, r3
 8004326:	f7fe fb60 	bl	80029ea <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f103 0218 	add.w	r2, r3, #24
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	3b04      	subs	r3, #4
 8004334:	4619      	mov	r1, r3
 8004336:	4610      	mov	r0, r2
 8004338:	f7fe fb57 	bl	80029ea <_ZNSt15_Deque_iteratorIdRdPdE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8004348:	2008      	movs	r0, #8
 800434a:	f7fd fb50 	bl	80019ee <_ZSt16__deque_buf_sizej>
 800434e:	4602      	mov	r2, r0
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	fbb3 f1f2 	udiv	r1, r3, r2
 8004356:	fb01 f202 	mul.w	r2, r1, r2
 800435a:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	619a      	str	r2, [r3, #24]
    }
 8004364:	bf00      	nop
 8004366:	3724      	adds	r7, #36	; 0x24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd90      	pop	{r4, r7, pc}

0800436c <_ZNSt11_Deque_baseIcSaIcEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	605a      	str	r2, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3308      	adds	r3, #8
 8004384:	4618      	mov	r0, r3
 8004386:	f000 f863 	bl	8004450 <_ZNSt15_Deque_iteratorIcRcPcEC1Ev>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3318      	adds	r3, #24
 800438e:	4618      	mov	r0, r3
 8004390:	f000 f85e 	bl	8004450 <_ZNSt15_Deque_iteratorIcRcPcEC1Ev>
	{ }
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <_ZNSt11_Deque_baseIcSaIcEE15_M_create_nodesEPPcS3_>:
    _Deque_base<_Tp, _Alloc>::
 800439e:	b580      	push	{r7, lr}
 80043a0:	b086      	sub	sp, #24
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	60f8      	str	r0, [r7, #12]
 80043a6:	60b9      	str	r1, [r7, #8]
 80043a8:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d209      	bcs.n	80043ca <_ZNSt11_Deque_baseIcSaIcEE15_M_create_nodesEPPcS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f7fe fc75 	bl	8002ca6 <_ZNSt11_Deque_baseIcSaIcEE16_M_allocate_nodeEv>
 80043bc:	4602      	mov	r2, r0
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	3304      	adds	r3, #4
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	e7f1      	b.n	80043ae <_ZNSt11_Deque_baseIcSaIcEE15_M_create_nodesEPPcS3_+0x10>
    }
 80043ca:	bf00      	nop
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <_ZNSaIdEC1Ev>:
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f84e 	bl	800447c <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <_ZNSt11_Deque_baseIdSaIdEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	605a      	str	r2, [r3, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3308      	adds	r3, #8
 8004402:	4618      	mov	r0, r3
 8004404:	f000 f844 	bl	8004490 <_ZNSt15_Deque_iteratorIdRdPdEC1Ev>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3318      	adds	r3, #24
 800440c:	4618      	mov	r0, r3
 800440e:	f000 f83f 	bl	8004490 <_ZNSt15_Deque_iteratorIdRdPdEC1Ev>
	{ }
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4618      	mov	r0, r3
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <_ZNSt11_Deque_baseIdSaIdEE15_M_create_nodesEPPdS3_>:
    _Deque_base<_Tp, _Alloc>::
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	429a      	cmp	r2, r3
 8004432:	d209      	bcs.n	8004448 <_ZNSt11_Deque_baseIdSaIdEE15_M_create_nodesEPPdS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f7fe fcec 	bl	8002e12 <_ZNSt11_Deque_baseIdSaIdEE16_M_allocate_nodeEv>
 800443a:	4602      	mov	r2, r0
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	3304      	adds	r3, #4
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	e7f1      	b.n	800442c <_ZNSt11_Deque_baseIdSaIdEE15_M_create_nodesEPPdS3_+0x10>
    }
 8004448:	bf00      	nop
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <_ZNSt15_Deque_iteratorIcRcPcEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	605a      	str	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	609a      	str	r2, [r3, #8]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	60da      	str	r2, [r3, #12]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4618      	mov	r0, r3
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr

0800447c <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4618      	mov	r0, r3
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr

08004490 <_ZNSt15_Deque_iteratorIdRdPdEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	605a      	str	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	609a      	str	r2, [r3, #8]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	60da      	str	r2, [r3, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4618      	mov	r0, r3
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d107      	bne.n	80044dc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d102      	bne.n	80044dc <_Z41__static_initialization_and_destruction_0ii+0x20>
static std::string s;
 80044d6:	4809      	ldr	r0, [pc, #36]	; (80044fc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80044d8:	f004 f9b7 	bl	800884a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d107      	bne.n	80044f2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d102      	bne.n	80044f2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80044ec:	4803      	ldr	r0, [pc, #12]	; (80044fc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80044ee:	f004 f9b3 	bl	8008858 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80044f2:	bf00      	nop
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20000378 	.word	0x20000378

08004500 <_GLOBAL__sub_I_main>:
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
 8004504:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004508:	2001      	movs	r0, #1
 800450a:	f7ff ffd7 	bl	80044bc <_Z41__static_initialization_and_destruction_0ii>
 800450e:	bd80      	pop	{r7, pc}

08004510 <_GLOBAL__sub_D_main>:
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
 8004514:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004518:	2000      	movs	r0, #0
 800451a:	f7ff ffcf 	bl	80044bc <_Z41__static_initialization_and_destruction_0ii>
 800451e:	bd80      	pop	{r7, pc}

08004520 <_ZN7MAX721911max7219SendEhh>:
 *  Created on: Nov 16, 2023
 *      Author: zhiyuan
 */
# include "max7219.hpp"

void MAX7219::max7219Send(uint8_t address,uint8_t data){
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
 800452c:	4613      	mov	r3, r2
 800452e:	70bb      	strb	r3, [r7, #2]

	uint16_t Transmit_buf = (0x00ff&data)|(0xff00&(address<<8));
 8004530:	78bb      	ldrb	r3, [r7, #2]
 8004532:	b21a      	sxth	r2, r3
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	021b      	lsls	r3, r3, #8
 8004538:	b21b      	sxth	r3, r3
 800453a:	4313      	orrs	r3, r2
 800453c:	b21b      	sxth	r3, r3
 800453e:	b29b      	uxth	r3, r3
 8004540:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8004542:	2200      	movs	r2, #0
 8004544:	2140      	movs	r1, #64	; 0x40
 8004546:	480b      	ldr	r0, [pc, #44]	; (8004574 <_ZN7MAX721911max7219SendEhh+0x54>)
 8004548:	f000 fb6a 	bl	8004c20 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&MAX7219_SPI,(uint8_t*)&Transmit_buf,1,TRANSMIT_OVERTIME);
 800454c:	f107 010e 	add.w	r1, r7, #14
 8004550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004554:	2201      	movs	r2, #1
 8004556:	4808      	ldr	r0, [pc, #32]	; (8004578 <_ZN7MAX721911max7219SendEhh+0x58>)
 8004558:	f002 f805 	bl	8006566 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800455c:	2201      	movs	r2, #1
 800455e:	2140      	movs	r1, #64	; 0x40
 8004560:	4804      	ldr	r0, [pc, #16]	; (8004574 <_ZN7MAX721911max7219SendEhh+0x54>)
 8004562:	f000 fb5d 	bl	8004c20 <HAL_GPIO_WritePin>
	delayUSecs(100);
 8004566:	2064      	movs	r0, #100	; 0x64
 8004568:	f7ff faac 	bl	8003ac4 <delayUSecs>
}
 800456c:	bf00      	nop
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40010800 	.word	0x40010800
 8004578:	20000390 	.word	0x20000390

0800457c <_ZN7MAX721911max7219InitEv>:

void MAX7219::max7219Init(){
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
	//进入正常工作模式
	setWorkMode(true);
 8004584:	2101      	movs	r1, #1
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f80c 	bl	80045a4 <_ZN7MAX721911setWorkModeEb>
	//七位全扫描模式
	setScanMode(0x07);
 800458c:	2107      	movs	r1, #7
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f830 	bl	80045f4 <_ZN7MAX721911setScanModeEh>
	//打开译码模式
	setDecodeMode(DECODE_D0_D7);
 8004594:	21ff      	movs	r1, #255	; 0xff
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f81c 	bl	80045d4 <_ZN7MAX721913setDecodeModeEh>
}
 800459c:	bf00      	nop
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <_ZN7MAX721911setWorkModeEb>:
		max7219Send(DISPLAY_TEST, 0x01);
	else
		max7219Send(DISPLAY_TEST, 0x00);
}

void MAX7219::setWorkMode(bool status){
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	460b      	mov	r3, r1
 80045ae:	70fb      	strb	r3, [r7, #3]
	if(status)
 80045b0:	78fb      	ldrb	r3, [r7, #3]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d005      	beq.n	80045c2 <_ZN7MAX721911setWorkModeEb+0x1e>
		max7219Send(SHUT_DOWN, 1);
 80045b6:	2201      	movs	r2, #1
 80045b8:	210c      	movs	r1, #12
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7ff ffb0 	bl	8004520 <_ZN7MAX721911max7219SendEhh>
	else
		max7219Send(SHUT_DOWN, 0);
}
 80045c0:	e004      	b.n	80045cc <_ZN7MAX721911setWorkModeEb+0x28>
		max7219Send(SHUT_DOWN, 0);
 80045c2:	2200      	movs	r2, #0
 80045c4:	210c      	movs	r1, #12
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7ff ffaa 	bl	8004520 <_ZN7MAX721911max7219SendEhh>
}
 80045cc:	bf00      	nop
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <_ZN7MAX721913setDecodeModeEh>:

void MAX7219::setDecodeMode(uint8_t mode){
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	460b      	mov	r3, r1
 80045de:	70fb      	strb	r3, [r7, #3]
	max7219Send(DECODE_MODE, mode);
 80045e0:	78fb      	ldrb	r3, [r7, #3]
 80045e2:	461a      	mov	r2, r3
 80045e4:	2109      	movs	r1, #9
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7ff ff9a 	bl	8004520 <_ZN7MAX721911max7219SendEhh>
}
 80045ec:	bf00      	nop
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <_ZN7MAX721911setScanModeEh>:

void MAX7219::setScanMode(uint8_t mode){
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	70fb      	strb	r3, [r7, #3]
	max7219Send(SCAN_LIMIT, mode);
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	461a      	mov	r2, r3
 8004604:	210b      	movs	r1, #11
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff ff8a 	bl	8004520 <_ZN7MAX721911max7219SendEhh>
}
 800460c:	bf00      	nop
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004614:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004616:	480f      	ldr	r0, [pc, #60]	; (8004654 <MX_SPI1_Init+0x40>)
 8004618:	4b0f      	ldr	r3, [pc, #60]	; (8004658 <MX_SPI1_Init+0x44>)
 800461a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800461c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004620:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004622:	2300      	movs	r3, #0
 8004624:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8004626:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800462a:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800462c:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800462e:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004634:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004636:	2210      	movs	r2, #16
 8004638:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800463a:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800463c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800463e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004640:	230a      	movs	r3, #10
 8004642:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004644:	f001 ff34 	bl	80064b0 <HAL_SPI_Init>
 8004648:	b900      	cbnz	r0, 800464c <MX_SPI1_Init+0x38>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800464a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800464c:	f7ff fd40 	bl	80040d0 <Error_Handler>
}
 8004650:	e7fb      	b.n	800464a <MX_SPI1_Init+0x36>
 8004652:	bf00      	nop
 8004654:	20000390 	.word	0x20000390
 8004658:	40013000 	.word	0x40013000

0800465c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800465c:	b500      	push	{lr}
 800465e:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004660:	2300      	movs	r3, #0
 8004662:	9302      	str	r3, [sp, #8]
 8004664:	9303      	str	r3, [sp, #12]
 8004666:	9304      	str	r3, [sp, #16]
 8004668:	9305      	str	r3, [sp, #20]
  if(spiHandle->Instance==SPI1)
 800466a:	6802      	ldr	r2, [r0, #0]
 800466c:	4b12      	ldr	r3, [pc, #72]	; (80046b8 <HAL_SPI_MspInit+0x5c>)
 800466e:	429a      	cmp	r2, r3
 8004670:	d002      	beq.n	8004678 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004672:	b007      	add	sp, #28
 8004674:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004678:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800467c:	699a      	ldr	r2, [r3, #24]
 800467e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004682:	619a      	str	r2, [r3, #24]
 8004684:	699a      	ldr	r2, [r3, #24]
 8004686:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800468a:	9200      	str	r2, [sp, #0]
 800468c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800468e:	699a      	ldr	r2, [r3, #24]
 8004690:	f042 0204 	orr.w	r2, r2, #4
 8004694:	619a      	str	r2, [r3, #24]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	9301      	str	r3, [sp, #4]
 800469e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80046a0:	23a0      	movs	r3, #160	; 0xa0
 80046a2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a4:	2302      	movs	r3, #2
 80046a6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046a8:	2303      	movs	r3, #3
 80046aa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046ac:	a902      	add	r1, sp, #8
 80046ae:	4803      	ldr	r0, [pc, #12]	; (80046bc <HAL_SPI_MspInit+0x60>)
 80046b0:	f000 f97c 	bl	80049ac <HAL_GPIO_Init>
}
 80046b4:	e7dd      	b.n	8004672 <HAL_SPI_MspInit+0x16>
 80046b6:	bf00      	nop
 80046b8:	40013000 	.word	0x40013000
 80046bc:	40010800 	.word	0x40010800

080046c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046c0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80046c2:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <HAL_MspInit+0x2c>)
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	f042 0201 	orr.w	r2, r2, #1
 80046ca:	619a      	str	r2, [r3, #24]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	f002 0201 	and.w	r2, r2, #1
 80046d2:	9200      	str	r2, [sp, #0]
 80046d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046d6:	69da      	ldr	r2, [r3, #28]
 80046d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80046dc:	61da      	str	r2, [r3, #28]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e4:	9301      	str	r3, [sp, #4]
 80046e6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046e8:	b002      	add	sp, #8
 80046ea:	4770      	bx	lr
 80046ec:	40021000 	.word	0x40021000

080046f0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80046f0:	e7fe      	b.n	80046f0 <NMI_Handler>

080046f2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046f2:	e7fe      	b.n	80046f2 <HardFault_Handler>

080046f4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046f4:	e7fe      	b.n	80046f4 <MemManage_Handler>

080046f6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046f6:	e7fe      	b.n	80046f6 <BusFault_Handler>

080046f8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046f8:	e7fe      	b.n	80046f8 <UsageFault_Handler>

080046fa <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046fa:	4770      	bx	lr

080046fc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046fc:	4770      	bx	lr

080046fe <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046fe:	4770      	bx	lr

08004700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004700:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004702:	f000 f8c3 	bl	800488c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004706:	bd08      	pop	{r3, pc}

08004708 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004708:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800470a:	4802      	ldr	r0, [pc, #8]	; (8004714 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 800470c:	f000 fb40 	bl	8004d90 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004710:	bd08      	pop	{r3, pc}
 8004712:	bf00      	nop
 8004714:	200010b8 	.word	0x200010b8

08004718 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8004718:	2001      	movs	r0, #1
 800471a:	4770      	bx	lr

0800471c <_kill>:

int _kill(int pid, int sig)
{
 800471c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800471e:	f004 fa47 	bl	8008bb0 <__errno>
 8004722:	2316      	movs	r3, #22
 8004724:	6003      	str	r3, [r0, #0]
  return -1;
}
 8004726:	f04f 30ff 	mov.w	r0, #4294967295
 800472a:	bd08      	pop	{r3, pc}

0800472c <_exit>:

void _exit (int status)
{
 800472c:	b508      	push	{r3, lr}
  errno = EINVAL;
 800472e:	f004 fa3f 	bl	8008bb0 <__errno>
 8004732:	2316      	movs	r3, #22
 8004734:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8004736:	e7fe      	b.n	8004736 <_exit+0xa>

08004738 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004738:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800473a:	1e16      	subs	r6, r2, #0
 800473c:	dd07      	ble.n	800474e <_read+0x16>
 800473e:	460c      	mov	r4, r1
 8004740:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8004742:	f3af 8000 	nop.w
 8004746:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800474a:	42a5      	cmp	r5, r4
 800474c:	d1f9      	bne.n	8004742 <_read+0xa>
  }

  return len;
}
 800474e:	4630      	mov	r0, r6
 8004750:	bd70      	pop	{r4, r5, r6, pc}

08004752 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004752:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004754:	1e16      	subs	r6, r2, #0
 8004756:	dd07      	ble.n	8004768 <_write+0x16>
 8004758:	460c      	mov	r4, r1
 800475a:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 800475c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004760:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004764:	42a5      	cmp	r5, r4
 8004766:	d1f9      	bne.n	800475c <_write+0xa>
  }
  return len;
}
 8004768:	4630      	mov	r0, r6
 800476a:	bd70      	pop	{r4, r5, r6, pc}

0800476c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800476c:	f04f 30ff 	mov.w	r0, #4294967295
 8004770:	4770      	bx	lr

08004772 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8004772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004776:	604b      	str	r3, [r1, #4]
  return 0;
}
 8004778:	2000      	movs	r0, #0
 800477a:	4770      	bx	lr

0800477c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800477c:	2001      	movs	r0, #1
 800477e:	4770      	bx	lr

08004780 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8004780:	2000      	movs	r0, #0
 8004782:	4770      	bx	lr

08004784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004784:	b508      	push	{r3, lr}
 8004786:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004788:	4a0c      	ldr	r2, [pc, #48]	; (80047bc <_sbrk+0x38>)
 800478a:	6812      	ldr	r2, [r2, #0]
 800478c:	b152      	cbz	r2, 80047a4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800478e:	4a0b      	ldr	r2, [pc, #44]	; (80047bc <_sbrk+0x38>)
 8004790:	6810      	ldr	r0, [r2, #0]
 8004792:	4403      	add	r3, r0
 8004794:	4a0a      	ldr	r2, [pc, #40]	; (80047c0 <_sbrk+0x3c>)
 8004796:	490b      	ldr	r1, [pc, #44]	; (80047c4 <_sbrk+0x40>)
 8004798:	1a52      	subs	r2, r2, r1
 800479a:	4293      	cmp	r3, r2
 800479c:	d806      	bhi.n	80047ac <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800479e:	4a07      	ldr	r2, [pc, #28]	; (80047bc <_sbrk+0x38>)
 80047a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80047a2:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80047a4:	4a05      	ldr	r2, [pc, #20]	; (80047bc <_sbrk+0x38>)
 80047a6:	4908      	ldr	r1, [pc, #32]	; (80047c8 <_sbrk+0x44>)
 80047a8:	6011      	str	r1, [r2, #0]
 80047aa:	e7f0      	b.n	800478e <_sbrk+0xa>
    errno = ENOMEM;
 80047ac:	f004 fa00 	bl	8008bb0 <__errno>
 80047b0:	230c      	movs	r3, #12
 80047b2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80047b4:	f04f 30ff 	mov.w	r0, #4294967295
 80047b8:	e7f3      	b.n	80047a2 <_sbrk+0x1e>
 80047ba:	bf00      	nop
 80047bc:	200003e8 	.word	0x200003e8
 80047c0:	20005000 	.word	0x20005000
 80047c4:	00000400 	.word	0x00000400
 80047c8:	200015e0 	.word	0x200015e0

080047cc <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80047cc:	4770      	bx	lr
	...

080047d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80047d0:	f7ff fffc 	bl	80047cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80047d4:	480b      	ldr	r0, [pc, #44]	; (8004804 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80047d6:	490c      	ldr	r1, [pc, #48]	; (8004808 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80047d8:	4a0c      	ldr	r2, [pc, #48]	; (800480c <LoopFillZerobss+0x16>)
  movs r3, #0
 80047da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047dc:	e002      	b.n	80047e4 <LoopCopyDataInit>

080047de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047e2:	3304      	adds	r3, #4

080047e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047e8:	d3f9      	bcc.n	80047de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047ea:	4a09      	ldr	r2, [pc, #36]	; (8004810 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80047ec:	4c09      	ldr	r4, [pc, #36]	; (8004814 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80047ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047f0:	e001      	b.n	80047f6 <LoopFillZerobss>

080047f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047f4:	3204      	adds	r2, #4

080047f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047f8:	d3fb      	bcc.n	80047f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80047fa:	f004 f9df 	bl	8008bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80047fe:	f7ff fb89 	bl	8003f14 <main>
  bx lr
 8004802:	4770      	bx	lr
  ldr r0, =_sdata
 8004804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004808:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 800480c:	0800c8e0 	.word	0x0800c8e0
  ldr r2, =_sbss
 8004810:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8004814:	200015dc 	.word	0x200015dc

08004818 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004818:	e7fe      	b.n	8004818 <ADC1_2_IRQHandler>
	...

0800481c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800481c:	b510      	push	{r4, lr}
 800481e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004820:	4b0e      	ldr	r3, [pc, #56]	; (800485c <HAL_InitTick+0x40>)
 8004822:	7818      	ldrb	r0, [r3, #0]
 8004824:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004828:	fbb3 f3f0 	udiv	r3, r3, r0
 800482c:	4a0c      	ldr	r2, [pc, #48]	; (8004860 <HAL_InitTick+0x44>)
 800482e:	6810      	ldr	r0, [r2, #0]
 8004830:	fbb0 f0f3 	udiv	r0, r0, r3
 8004834:	f000 f8a6 	bl	8004984 <HAL_SYSTICK_Config>
 8004838:	b968      	cbnz	r0, 8004856 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800483a:	2c0f      	cmp	r4, #15
 800483c:	d901      	bls.n	8004842 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800483e:	2001      	movs	r0, #1
 8004840:	e00a      	b.n	8004858 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004842:	2200      	movs	r2, #0
 8004844:	4621      	mov	r1, r4
 8004846:	f04f 30ff 	mov.w	r0, #4294967295
 800484a:	f000 f857 	bl	80048fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800484e:	4b05      	ldr	r3, [pc, #20]	; (8004864 <HAL_InitTick+0x48>)
 8004850:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004852:	2000      	movs	r0, #0
 8004854:	e000      	b.n	8004858 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8004856:	2001      	movs	r0, #1
}
 8004858:	bd10      	pop	{r4, pc}
 800485a:	bf00      	nop
 800485c:	20000004 	.word	0x20000004
 8004860:	20000000 	.word	0x20000000
 8004864:	20000008 	.word	0x20000008

08004868 <HAL_Init>:
{
 8004868:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800486a:	4a07      	ldr	r2, [pc, #28]	; (8004888 <HAL_Init+0x20>)
 800486c:	6813      	ldr	r3, [r2, #0]
 800486e:	f043 0310 	orr.w	r3, r3, #16
 8004872:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004874:	2003      	movs	r0, #3
 8004876:	f000 f82f 	bl	80048d8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800487a:	200f      	movs	r0, #15
 800487c:	f7ff ffce 	bl	800481c <HAL_InitTick>
  HAL_MspInit();
 8004880:	f7ff ff1e 	bl	80046c0 <HAL_MspInit>
}
 8004884:	2000      	movs	r0, #0
 8004886:	bd08      	pop	{r3, pc}
 8004888:	40022000 	.word	0x40022000

0800488c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800488c:	4a03      	ldr	r2, [pc, #12]	; (800489c <HAL_IncTick+0x10>)
 800488e:	6811      	ldr	r1, [r2, #0]
 8004890:	4b03      	ldr	r3, [pc, #12]	; (80048a0 <HAL_IncTick+0x14>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	440b      	add	r3, r1
 8004896:	6013      	str	r3, [r2, #0]
}
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	200003ec 	.word	0x200003ec
 80048a0:	20000004 	.word	0x20000004

080048a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80048a4:	4b01      	ldr	r3, [pc, #4]	; (80048ac <HAL_GetTick+0x8>)
 80048a6:	6818      	ldr	r0, [r3, #0]
}
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	200003ec 	.word	0x200003ec

080048b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048b0:	b538      	push	{r3, r4, r5, lr}
 80048b2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80048b4:	f7ff fff6 	bl	80048a4 <HAL_GetTick>
 80048b8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048ba:	f1b4 3fff 	cmp.w	r4, #4294967295
 80048be:	d002      	beq.n	80048c6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80048c0:	4b04      	ldr	r3, [pc, #16]	; (80048d4 <HAL_Delay+0x24>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80048c6:	f7ff ffed 	bl	80048a4 <HAL_GetTick>
 80048ca:	1b40      	subs	r0, r0, r5
 80048cc:	42a0      	cmp	r0, r4
 80048ce:	d3fa      	bcc.n	80048c6 <HAL_Delay+0x16>
  {
  }
}
 80048d0:	bd38      	pop	{r3, r4, r5, pc}
 80048d2:	bf00      	nop
 80048d4:	20000004 	.word	0x20000004

080048d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048d8:	4907      	ldr	r1, [pc, #28]	; (80048f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80048da:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80048dc:	0203      	lsls	r3, r0, #8
 80048de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048e6:	0412      	lsls	r2, r2, #16
 80048e8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80048f4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80048f6:	4770      	bx	lr
 80048f8:	e000ed00 	.word	0xe000ed00

080048fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048fc:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048fe:	4b18      	ldr	r3, [pc, #96]	; (8004960 <HAL_NVIC_SetPriority+0x64>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004906:	f1c3 0c07 	rsb	ip, r3, #7
 800490a:	f1bc 0f04 	cmp.w	ip, #4
 800490e:	bf28      	it	cs
 8004910:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004914:	f103 0e04 	add.w	lr, r3, #4
 8004918:	f1be 0f06 	cmp.w	lr, #6
 800491c:	bf8c      	ite	hi
 800491e:	3b03      	subhi	r3, #3
 8004920:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004922:	f04f 3eff 	mov.w	lr, #4294967295
 8004926:	fa0e fc0c 	lsl.w	ip, lr, ip
 800492a:	ea21 010c 	bic.w	r1, r1, ip
 800492e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004930:	fa0e f303 	lsl.w	r3, lr, r3
 8004934:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004938:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 800493a:	2800      	cmp	r0, #0
 800493c:	db09      	blt.n	8004952 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800493e:	0109      	lsls	r1, r1, #4
 8004940:	b2c9      	uxtb	r1, r1
 8004942:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004946:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800494a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800494e:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004952:	f000 000f 	and.w	r0, r0, #15
 8004956:	0109      	lsls	r1, r1, #4
 8004958:	b2c9      	uxtb	r1, r1
 800495a:	4b02      	ldr	r3, [pc, #8]	; (8004964 <HAL_NVIC_SetPriority+0x68>)
 800495c:	5419      	strb	r1, [r3, r0]
 800495e:	e7f6      	b.n	800494e <HAL_NVIC_SetPriority+0x52>
 8004960:	e000ed00 	.word	0xe000ed00
 8004964:	e000ed14 	.word	0xe000ed14

08004968 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004968:	2800      	cmp	r0, #0
 800496a:	db08      	blt.n	800497e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800496c:	0942      	lsrs	r2, r0, #5
 800496e:	f000 001f 	and.w	r0, r0, #31
 8004972:	2301      	movs	r3, #1
 8004974:	fa03 f000 	lsl.w	r0, r3, r0
 8004978:	4b01      	ldr	r3, [pc, #4]	; (8004980 <HAL_NVIC_EnableIRQ+0x18>)
 800497a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800497e:	4770      	bx	lr
 8004980:	e000e100 	.word	0xe000e100

08004984 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004984:	3801      	subs	r0, #1
 8004986:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800498a:	d20b      	bcs.n	80049a4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800498c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004990:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004992:	4a05      	ldr	r2, [pc, #20]	; (80049a8 <HAL_SYSTICK_Config+0x24>)
 8004994:	21f0      	movs	r1, #240	; 0xf0
 8004996:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800499a:	2000      	movs	r0, #0
 800499c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800499e:	2207      	movs	r2, #7
 80049a0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049a2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80049a4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80049a6:	4770      	bx	lr
 80049a8:	e000ed00 	.word	0xe000ed00

080049ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b0:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049b2:	f8d1 9000 	ldr.w	r9, [r1]
 80049b6:	f1b9 0f00 	cmp.w	r9, #0
 80049ba:	f000 811f 	beq.w	8004bfc <HAL_GPIO_Init+0x250>
 80049be:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80049c0:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80049c2:	4e90      	ldr	r6, [pc, #576]	; (8004c04 <HAL_GPIO_Init+0x258>)
        {
          SET_BIT(EXTI->IMR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80049c4:	4c90      	ldr	r4, [pc, #576]	; (8004c08 <HAL_GPIO_Init+0x25c>)
      switch (GPIO_Init->Mode)
 80049c6:	4d91      	ldr	r5, [pc, #580]	; (8004c0c <HAL_GPIO_Init+0x260>)
 80049c8:	f8df e244 	ldr.w	lr, [pc, #580]	; 8004c10 <HAL_GPIO_Init+0x264>
 80049cc:	4694      	mov	ip, r2
 80049ce:	e0ba      	b.n	8004b46 <HAL_GPIO_Init+0x19a>
 80049d0:	f04f 0c00 	mov.w	ip, #0
 80049d4:	e025      	b.n	8004a22 <HAL_GPIO_Init+0x76>
 80049d6:	45a9      	cmp	r9, r5
 80049d8:	d00f      	beq.n	80049fa <HAL_GPIO_Init+0x4e>
 80049da:	d906      	bls.n	80049ea <HAL_GPIO_Init+0x3e>
 80049dc:	45f1      	cmp	r9, lr
 80049de:	d00c      	beq.n	80049fa <HAL_GPIO_Init+0x4e>
 80049e0:	f8df a230 	ldr.w	sl, [pc, #560]	; 8004c14 <HAL_GPIO_Init+0x268>
 80049e4:	45d1      	cmp	r9, sl
 80049e6:	d008      	beq.n	80049fa <HAL_GPIO_Init+0x4e>
 80049e8:	e01b      	b.n	8004a22 <HAL_GPIO_Init+0x76>
 80049ea:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8004c18 <HAL_GPIO_Init+0x26c>
 80049ee:	45d1      	cmp	r9, sl
 80049f0:	d003      	beq.n	80049fa <HAL_GPIO_Init+0x4e>
 80049f2:	f50a 2a70 	add.w	sl, sl, #983040	; 0xf0000
 80049f6:	45d1      	cmp	r9, sl
 80049f8:	d10f      	bne.n	8004a1a <HAL_GPIO_Init+0x6e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80049fa:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80049fe:	f1bc 0f00 	cmp.w	ip, #0
 8004a02:	f000 80ef 	beq.w	8004be4 <HAL_GPIO_Init+0x238>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a06:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 8004a0a:	bf0c      	ite	eq
 8004a0c:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8004a10:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a14:	f04f 0c08 	mov.w	ip, #8
 8004a18:	e003      	b.n	8004a22 <HAL_GPIO_Init+0x76>
      switch (GPIO_Init->Mode)
 8004a1a:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
 8004a1e:	45d1      	cmp	r9, sl
 8004a20:	d0eb      	beq.n	80049fa <HAL_GPIO_Init+0x4e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004a22:	2fff      	cmp	r7, #255	; 0xff
 8004a24:	bf99      	ittee	ls
 8004a26:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004a28:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004a2a:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004a2e:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004a32:	f8d9 8000 	ldr.w	r8, [r9]
 8004a36:	f04f 0b0f 	mov.w	fp, #15
 8004a3a:	fa0b fb0a 	lsl.w	fp, fp, sl
 8004a3e:	ea28 080b 	bic.w	r8, r8, fp
 8004a42:	fa0c fa0a 	lsl.w	sl, ip, sl
 8004a46:	ea48 080a 	orr.w	r8, r8, sl
 8004a4a:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a4e:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8004a52:	f018 5f80 	tst.w	r8, #268435456	; 0x10000000
 8004a56:	d06f      	beq.n	8004b38 <HAL_GPIO_Init+0x18c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004a58:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8004a5c:	f048 0801 	orr.w	r8, r8, #1
 8004a60:	f8c6 8018 	str.w	r8, [r6, #24]
 8004a64:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8004a68:	f008 0801 	and.w	r8, r8, #1
 8004a6c:	f8cd 8004 	str.w	r8, [sp, #4]
 8004a70:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8004a74:	f023 0803 	bic.w	r8, r3, #3
 8004a78:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8004a7c:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8004a80:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004a84:	f003 0903 	and.w	r9, r3, #3
 8004a88:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8004a8c:	f04f 090f 	mov.w	r9, #15
 8004a90:	fa09 f90b 	lsl.w	r9, r9, fp
 8004a94:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004a98:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8004c1c <HAL_GPIO_Init+0x270>
 8004a9c:	4548      	cmp	r0, r9
 8004a9e:	f000 80a4 	beq.w	8004bea <HAL_GPIO_Init+0x23e>
 8004aa2:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8004aa6:	4548      	cmp	r0, r9
 8004aa8:	f000 80a2 	beq.w	8004bf0 <HAL_GPIO_Init+0x244>
 8004aac:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8004ab0:	4548      	cmp	r0, r9
 8004ab2:	f000 80a0 	beq.w	8004bf6 <HAL_GPIO_Init+0x24a>
 8004ab6:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8004aba:	4548      	cmp	r0, r9
 8004abc:	bf0c      	ite	eq
 8004abe:	f04f 0903 	moveq.w	r9, #3
 8004ac2:	f04f 0904 	movne.w	r9, #4
 8004ac6:	fa09 f90b 	lsl.w	r9, r9, fp
 8004aca:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8004ace:	f8c8 9008 	str.w	r9, [r8, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ad2:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8004ad6:	f418 1f80 	tst.w	r8, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8004ada:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8004ade:	bf14      	ite	ne
 8004ae0:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004ae4:	ea28 0807 	biceq.w	r8, r8, r7
 8004ae8:	f8c4 8008 	str.w	r8, [r4, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004aec:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8004af0:	f418 1f00 	tst.w	r8, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8004af4:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8004af8:	bf14      	ite	ne
 8004afa:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004afe:	ea28 0807 	biceq.w	r8, r8, r7
 8004b02:	f8c4 800c 	str.w	r8, [r4, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b06:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8004b0a:	f418 3f00 	tst.w	r8, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8004b0e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8004b12:	bf14      	ite	ne
 8004b14:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004b18:	ea28 0807 	biceq.w	r8, r8, r7
 8004b1c:	f8c4 8004 	str.w	r8, [r4, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b20:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8004b24:	f418 3f80 	tst.w	r8, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8004b28:	f8d4 8000 	ldr.w	r8, [r4]
 8004b2c:	bf14      	ite	ne
 8004b2e:	ea48 0707 	orrne.w	r7, r8, r7
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004b32:	ea28 0707 	biceq.w	r7, r8, r7
 8004b36:	6027      	str	r7, [r4, #0]
        }
      }
    }

	position++;
 8004b38:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b3a:	f8d1 9000 	ldr.w	r9, [r1]
 8004b3e:	3204      	adds	r2, #4
 8004b40:	fa39 f703 	lsrs.w	r7, r9, r3
 8004b44:	d05a      	beq.n	8004bfc <HAL_GPIO_Init+0x250>
    ioposition = (0x01uL << position);
 8004b46:	f04f 0801 	mov.w	r8, #1
 8004b4a:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b4e:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 8004b52:	ea38 0909 	bics.w	r9, r8, r9
 8004b56:	d1ef      	bne.n	8004b38 <HAL_GPIO_Init+0x18c>
      switch (GPIO_Init->Mode)
 8004b58:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8004b5c:	f1b9 0f12 	cmp.w	r9, #18
 8004b60:	f63f af39 	bhi.w	80049d6 <HAL_GPIO_Init+0x2a>
 8004b64:	f1b9 0f12 	cmp.w	r9, #18
 8004b68:	f63f af5b 	bhi.w	8004a22 <HAL_GPIO_Init+0x76>
 8004b6c:	f20f 0a04 	addw	sl, pc, #4
 8004b70:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 8004b74:	080049fb 	.word	0x080049fb
 8004b78:	08004bc1 	.word	0x08004bc1
 8004b7c:	08004bd1 	.word	0x08004bd1
 8004b80:	080049d1 	.word	0x080049d1
 8004b84:	08004a23 	.word	0x08004a23
 8004b88:	08004a23 	.word	0x08004a23
 8004b8c:	08004a23 	.word	0x08004a23
 8004b90:	08004a23 	.word	0x08004a23
 8004b94:	08004a23 	.word	0x08004a23
 8004b98:	08004a23 	.word	0x08004a23
 8004b9c:	08004a23 	.word	0x08004a23
 8004ba0:	08004a23 	.word	0x08004a23
 8004ba4:	08004a23 	.word	0x08004a23
 8004ba8:	08004a23 	.word	0x08004a23
 8004bac:	08004a23 	.word	0x08004a23
 8004bb0:	08004a23 	.word	0x08004a23
 8004bb4:	08004a23 	.word	0x08004a23
 8004bb8:	08004bc7 	.word	0x08004bc7
 8004bbc:	08004bdb 	.word	0x08004bdb
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004bc0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 8004bc4:	e72d      	b.n	8004a22 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004bc6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8004bca:	f10c 0c04 	add.w	ip, ip, #4
          break;
 8004bce:	e728      	b.n	8004a22 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004bd0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8004bd4:	f10c 0c08 	add.w	ip, ip, #8
          break;
 8004bd8:	e723      	b.n	8004a22 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004bda:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8004bde:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 8004be2:	e71e      	b.n	8004a22 <HAL_GPIO_Init+0x76>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004be4:	f04f 0c04 	mov.w	ip, #4
 8004be8:	e71b      	b.n	8004a22 <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004bea:	f04f 0900 	mov.w	r9, #0
 8004bee:	e76a      	b.n	8004ac6 <HAL_GPIO_Init+0x11a>
 8004bf0:	f04f 0901 	mov.w	r9, #1
 8004bf4:	e767      	b.n	8004ac6 <HAL_GPIO_Init+0x11a>
 8004bf6:	f04f 0902 	mov.w	r9, #2
 8004bfa:	e764      	b.n	8004ac6 <HAL_GPIO_Init+0x11a>
  }
}
 8004bfc:	b003      	add	sp, #12
 8004bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c02:	bf00      	nop
 8004c04:	40021000 	.word	0x40021000
 8004c08:	40010400 	.word	0x40010400
 8004c0c:	10220000 	.word	0x10220000
 8004c10:	10310000 	.word	0x10310000
 8004c14:	10320000 	.word	0x10320000
 8004c18:	10120000 	.word	0x10120000
 8004c1c:	40010800 	.word	0x40010800

08004c20 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c20:	b10a      	cbz	r2, 8004c26 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c22:	6101      	str	r1, [r0, #16]
 8004c24:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c26:	0409      	lsls	r1, r1, #16
 8004c28:	6101      	str	r1, [r0, #16]
  }
}
 8004c2a:	4770      	bx	lr

08004c2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004c2c:	b570      	push	{r4, r5, r6, lr}
 8004c2e:	b086      	sub	sp, #24
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004c30:	2800      	cmp	r0, #0
 8004c32:	d07e      	beq.n	8004d32 <HAL_PCD_Init+0x106>
 8004c34:	4605      	mov	r5, r0

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004c36:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8004c3a:	b1eb      	cbz	r3, 8004c78 <HAL_PCD_Init+0x4c>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c42:	6828      	ldr	r0, [r5, #0]
 8004c44:	f001 fd80 	bl	8006748 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c48:	462c      	mov	r4, r5
 8004c4a:	f854 6b10 	ldr.w	r6, [r4], #16
 8004c4e:	46ec      	mov	ip, sp
 8004c50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	f8cc 3000 	str.w	r3, [ip]
 8004c5c:	1d2b      	adds	r3, r5, #4
 8004c5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c60:	4630      	mov	r0, r6
 8004c62:	f001 fd61 	bl	8006728 <USB_CoreInit>
 8004c66:	4604      	mov	r4, r0
 8004c68:	b158      	cbz	r0, 8004c82 <HAL_PCD_Init+0x56>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8004c70:	2401      	movs	r4, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8004c72:	4620      	mov	r0, r4
 8004c74:	b006      	add	sp, #24
 8004c76:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8004c78:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8004c7c:	f003 fb38 	bl	80082f0 <HAL_PCD_MspInit>
 8004c80:	e7dc      	b.n	8004c3c <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004c82:	2100      	movs	r1, #0
 8004c84:	6828      	ldr	r0, [r5, #0]
 8004c86:	f001 fd69 	bl	800675c <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c8a:	6868      	ldr	r0, [r5, #4]
 8004c8c:	b388      	cbz	r0, 8004cf2 <HAL_PCD_Init+0xc6>
 8004c8e:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 8004c90:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c94:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 8004c96:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004c9a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004c9e:	f882 c029 	strb.w	ip, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8004ca2:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ca6:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8004caa:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004cac:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8004cae:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004cb2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004cb6:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cb8:	3301      	adds	r3, #1
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	4283      	cmp	r3, r0
 8004cbe:	d3ea      	bcc.n	8004c96 <HAL_PCD_Init+0x6a>
    hpcd->OUT_ep[i].is_in = 0U;
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004cc6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004cca:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8004cce:	f883 4168 	strb.w	r4, [r3, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004cd2:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004cd6:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004cda:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004cde:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8004ce2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004ce6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cea:	3401      	adds	r4, #1
 8004cec:	b2e4      	uxtb	r4, r4
 8004cee:	4284      	cmp	r4, r0
 8004cf0:	d3e7      	bcc.n	8004cc2 <HAL_PCD_Init+0x96>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004cf2:	462c      	mov	r4, r5
 8004cf4:	f854 6b10 	ldr.w	r6, [r4], #16
 8004cf8:	46ec      	mov	ip, sp
 8004cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	f8cc 3000 	str.w	r3, [ip]
 8004d06:	1d2b      	adds	r3, r5, #4
 8004d08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d0a:	4630      	mov	r0, r6
 8004d0c:	f001 fd28 	bl	8006760 <USB_DevInit>
 8004d10:	4604      	mov	r4, r0
 8004d12:	b120      	cbz	r0, 8004d1e <HAL_PCD_Init+0xf2>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d14:	2302      	movs	r3, #2
 8004d16:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
    return HAL_ERROR;
 8004d1a:	2401      	movs	r4, #1
 8004d1c:	e7a9      	b.n	8004c72 <HAL_PCD_Init+0x46>
  hpcd->USB_Address = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004d24:	2301      	movs	r3, #1
 8004d26:	f885 32a9 	strb.w	r3, [r5, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004d2a:	6828      	ldr	r0, [r5, #0]
 8004d2c:	f002 f858 	bl	8006de0 <USB_DevDisconnect>
  return HAL_OK;
 8004d30:	e79f      	b.n	8004c72 <HAL_PCD_Init+0x46>
    return HAL_ERROR;
 8004d32:	2401      	movs	r4, #1
 8004d34:	e79d      	b.n	8004c72 <HAL_PCD_Init+0x46>

08004d36 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004d36:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8004d38:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d011      	beq.n	8004d64 <HAL_PCD_Start+0x2e>
 8004d40:	4604      	mov	r4, r0
 8004d42:	2501      	movs	r5, #1
 8004d44:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004d48:	6800      	ldr	r0, [r0, #0]
 8004d4a:	f001 fcf4 	bl	8006736 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004d4e:	4629      	mov	r1, r5
 8004d50:	4620      	mov	r0, r4
 8004d52:	f003 fbe2 	bl	800851a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004d56:	6820      	ldr	r0, [r4, #0]
 8004d58:	f002 f840 	bl	8006ddc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8004d62:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8004d64:	2002      	movs	r0, #2
 8004d66:	e7fc      	b.n	8004d62 <HAL_PCD_Start+0x2c>

08004d68 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8004d68:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d00d      	beq.n	8004d8c <HAL_PCD_SetAddress+0x24>
{
 8004d70:	b510      	push	{r4, lr}
 8004d72:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004d74:	2301      	movs	r3, #1
 8004d76:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004d7a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d7e:	6800      	ldr	r0, [r0, #0]
 8004d80:	f002 f826 	bl	8006dd0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d84:	2000      	movs	r0, #0
 8004d86:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8004d8a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8004d8c:	2002      	movs	r0, #2
}
 8004d8e:	4770      	bx	lr

08004d90 <HAL_PCD_IRQHandler>:
{
 8004d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	4605      	mov	r5, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004d98:	6800      	ldr	r0, [r0, #0]
 8004d9a:	f002 f823 	bl	8006de4 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004d9e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8004da2:	d126      	bne.n	8004df2 <HAL_PCD_IRQHandler+0x62>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004da4:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8004da8:	f040 84cc 	bne.w	8005744 <HAL_PCD_IRQHandler+0x9b4>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004dac:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8004db0:	f040 84d9 	bne.w	8005766 <HAL_PCD_IRQHandler+0x9d6>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004db4:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8004db8:	f040 84e1 	bne.w	800577e <HAL_PCD_IRQHandler+0x9ee>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004dbc:	f410 5380 	ands.w	r3, r0, #4096	; 0x1000
 8004dc0:	f040 84e7 	bne.w	8005792 <HAL_PCD_IRQHandler+0xa02>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004dc4:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8004dc8:	f040 8502 	bne.w	80057d0 <HAL_PCD_IRQHandler+0xa40>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004dcc:	f410 7f00 	tst.w	r0, #512	; 0x200
 8004dd0:	f040 854d 	bne.w	800586e <HAL_PCD_IRQHandler+0xade>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004dd4:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004dd8:	f000 84ce 	beq.w	8005778 <HAL_PCD_IRQHandler+0x9e8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004ddc:	682a      	ldr	r2, [r5, #0]
 8004dde:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004de2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004de6:	041b      	lsls	r3, r3, #16
 8004de8:	0c1b      	lsrs	r3, r3, #16
 8004dea:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8004dee:	f000 bcc3 	b.w	8005778 <HAL_PCD_IRQHandler+0x9e8>
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004df2:	6828      	ldr	r0, [r5, #0]
 8004df4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8004df8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004dfc:	f000 84bc 	beq.w	8005778 <HAL_PCD_IRQHandler+0x9e8>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004e00:	f248 0780 	movw	r7, #32896	; 0x8080
 8004e04:	2600      	movs	r6, #0
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004e06:	f24c 0880 	movw	r8, #49280	; 0xc080
 8004e0a:	e058      	b.n	8004ebe <HAL_PCD_IRQHandler+0x12e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e0c:	8803      	ldrh	r3, [r0, #0]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004e24:	682a      	ldr	r2, [r5, #0]
 8004e26:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8004e30:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8004e34:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8004e38:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8004e3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e40:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8004e42:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8004e44:	4413      	add	r3, r2
 8004e46:	63eb      	str	r3, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004e48:	4631      	mov	r1, r6
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	f003 fa84 	bl	8008358 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004e50:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8004e54:	b363      	cbz	r3, 8004eb0 <HAL_PCD_IRQHandler+0x120>
 8004e56:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004e58:	bb53      	cbnz	r3, 8004eb0 <HAL_PCD_IRQHandler+0x120>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004e5a:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8004e5e:	682a      	ldr	r2, [r5, #0]
 8004e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e64:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004e68:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 8004e6c:	e020      	b.n	8004eb0 <HAL_PCD_IRQHandler+0x120>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e6e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8004e78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e7c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004e80:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8004e84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e88:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004e8c:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8004e90:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 8004e94:	f002 fb1e 	bl	80074d4 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e98:	682a      	ldr	r2, [r5, #0]
 8004e9a:	8813      	ldrh	r3, [r2, #0]
 8004e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea0:	051b      	lsls	r3, r3, #20
 8004ea2:	0d1b      	lsrs	r3, r3, #20
 8004ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea8:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8004eaa:	4628      	mov	r0, r5
 8004eac:	f003 fa40 	bl	8008330 <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004eb0:	6828      	ldr	r0, [r5, #0]
 8004eb2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8004eb6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004eba:	f000 845d 	beq.w	8005778 <HAL_PCD_IRQHandler+0x9e8>
    wIstr = hpcd->Instance->ISTR;
 8004ebe:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 8004ec2:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 8004ec4:	f014 040f 	ands.w	r4, r4, #15
 8004ec8:	d17e      	bne.n	8004fc8 <HAL_PCD_IRQHandler+0x238>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004eca:	f013 0f10 	tst.w	r3, #16
 8004ece:	d09d      	beq.n	8004e0c <HAL_PCD_IRQHandler+0x7c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004ed0:	8803      	ldrh	r3, [r0, #0]
 8004ed2:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004ed4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004ed8:	d1c9      	bne.n	8004e6e <HAL_PCD_IRQHandler+0xde>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004eda:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004ede:	d0e7      	beq.n	8004eb0 <HAL_PCD_IRQHandler+0x120>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004ee0:	8803      	ldrh	r3, [r0, #0]
 8004ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee6:	051b      	lsls	r3, r3, #20
 8004ee8:	0d1b      	lsrs	r3, r3, #20
 8004eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eee:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ef0:	6828      	ldr	r0, [r5, #0]
 8004ef2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8004efc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f00:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004f04:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8004f08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f0c:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004f10:	b18b      	cbz	r3, 8004f36 <HAL_PCD_IRQHandler+0x1a6>
 8004f12:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 8004f16:	b171      	cbz	r1, 8004f36 <HAL_PCD_IRQHandler+0x1a6>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f18:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8004f1c:	f002 fada 	bl	80074d4 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8004f20:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 8004f24:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
 8004f28:	4413      	add	r3, r2
 8004f2a:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004f2e:	4631      	mov	r1, r6
 8004f30:	4628      	mov	r0, r5
 8004f32:	f003 fa05 	bl	8008340 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004f36:	682a      	ldr	r2, [r5, #0]
 8004f38:	8813      	ldrh	r3, [r2, #0]
 8004f3a:	b299      	uxth	r1, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004f3c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004f40:	d1b6      	bne.n	8004eb0 <HAL_PCD_IRQHandler+0x120>
 8004f42:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
 8004f46:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8004f4a:	d0b1      	beq.n	8004eb0 <HAL_PCD_IRQHandler+0x120>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004f4c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8004f56:	5ad1      	ldrh	r1, [r2, r3]
 8004f58:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004f5c:	52d1      	strh	r1, [r2, r3]
 8004f5e:	f8d5 1178 	ldr.w	r1, [r5, #376]	; 0x178
 8004f62:	293e      	cmp	r1, #62	; 0x3e
 8004f64:	d91b      	bls.n	8004f9e <HAL_PCD_IRQHandler+0x20e>
 8004f66:	0948      	lsrs	r0, r1, #5
 8004f68:	f011 0f1f 	tst.w	r1, #31
 8004f6c:	bf08      	it	eq
 8004f6e:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8004f72:	5ad1      	ldrh	r1, [r2, r3]
 8004f74:	b289      	uxth	r1, r1
 8004f76:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8004f7a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004f7e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004f82:	b289      	uxth	r1, r1
 8004f84:	52d1      	strh	r1, [r2, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004f86:	682a      	ldr	r2, [r5, #0]
 8004f88:	8813      	ldrh	r3, [r2, #0]
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f94:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004f98:	433b      	orrs	r3, r7
 8004f9a:	8013      	strh	r3, [r2, #0]
 8004f9c:	e788      	b.n	8004eb0 <HAL_PCD_IRQHandler+0x120>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004f9e:	b939      	cbnz	r1, 8004fb0 <HAL_PCD_IRQHandler+0x220>
 8004fa0:	5ad1      	ldrh	r1, [r2, r3]
 8004fa2:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004fa6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004faa:	b289      	uxth	r1, r1
 8004fac:	52d1      	strh	r1, [r2, r3]
 8004fae:	e7ea      	b.n	8004f86 <HAL_PCD_IRQHandler+0x1f6>
 8004fb0:	0848      	lsrs	r0, r1, #1
 8004fb2:	f011 0f01 	tst.w	r1, #1
 8004fb6:	bf18      	it	ne
 8004fb8:	3001      	addne	r0, #1
 8004fba:	5ad1      	ldrh	r1, [r2, r3]
 8004fbc:	b289      	uxth	r1, r1
 8004fbe:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8004fc2:	b289      	uxth	r1, r1
 8004fc4:	52d1      	strh	r1, [r2, r3]
 8004fc6:	e7de      	b.n	8004f86 <HAL_PCD_IRQHandler+0x1f6>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004fc8:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8004fcc:	fa1f f983 	uxth.w	r9, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004fd0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004fd4:	d152      	bne.n	800507c <HAL_PCD_IRQHandler+0x2ec>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004fd6:	f019 0f80 	tst.w	r9, #128	; 0x80
 8004fda:	f43f af69 	beq.w	8004eb0 <HAL_PCD_IRQHandler+0x120>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004fde:	682a      	ldr	r2, [r5, #0]
 8004fe0:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8004ffc:	eb04 0a84 	add.w	sl, r4, r4, lsl #2
 8005000:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8005004:	f89a 302b 	ldrb.w	r3, [sl, #43]	; 0x2b
 8005008:	2b01      	cmp	r3, #1
 800500a:	f000 818e 	beq.w	800532a <HAL_PCD_IRQHandler+0x59a>
          if ((wEPVal & USB_EP_KIND) == 0U)
 800500e:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005012:	f040 81e4 	bne.w	80053de <HAL_PCD_IRQHandler+0x64e>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005016:	6828      	ldr	r0, [r5, #0]
 8005018:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800501c:	b29b      	uxth	r3, r3
 800501e:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
            if (ep->xfer_len > TxPctSize)
 8005022:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005026:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800502a:	6c12      	ldr	r2, [r2, #64]	; 0x40
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800502c:	3302      	adds	r3, #2
 800502e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005032:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005036:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
            if (ep->xfer_len > TxPctSize)
 800503a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800503e:	429a      	cmp	r2, r3
 8005040:	f240 8422 	bls.w	8005888 <HAL_PCD_IRQHandler+0xaf8>
              ep->xfer_len -= TxPctSize;
 8005044:	1ad2      	subs	r2, r2, r3
 8005046:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 800504a:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 800504e:	f8cc 2040 	str.w	r2, [ip, #64]	; 0x40
            if (ep->xfer_len == 0U)
 8005052:	2a00      	cmp	r2, #0
 8005054:	f000 841d 	beq.w	8005892 <HAL_PCD_IRQHandler+0xb02>
              ep->xfer_buff += TxPctSize;
 8005058:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800505c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005060:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005062:	4419      	add	r1, r3
 8005064:	63d1      	str	r1, [r2, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8005066:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005068:	440b      	add	r3, r1
 800506a:	6453      	str	r3, [r2, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 800506c:	3401      	adds	r4, #1
 800506e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005072:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005076:	f001 fed2 	bl	8006e1e <USB_EPStartXfer>
 800507a:	e719      	b.n	8004eb0 <HAL_PCD_IRQHandler+0x120>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800507c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8005080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005084:	051b      	lsls	r3, r3, #20
 8005086:	0d1b      	lsrs	r3, r3, #20
 8005088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800508c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->doublebuffer == 0U)
 8005090:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005094:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005098:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 800509c:	2b00      	cmp	r3, #0
 800509e:	d145      	bne.n	800512c <HAL_PCD_IRQHandler+0x39c>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80050a0:	6828      	ldr	r0, [r5, #0]
 80050a2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80050ac:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80050b0:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 80050b4:	3306      	adds	r3, #6
 80050b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050ba:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80050be:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 80050c2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 80050c6:	f1ba 0f00 	cmp.w	sl, #0
 80050ca:	d123      	bne.n	8005114 <HAL_PCD_IRQHandler+0x384>
        ep->xfer_count += count;
 80050cc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80050d0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80050d4:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 80050d8:	4452      	add	r2, sl
 80050da:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 80050de:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80050e2:	4452      	add	r2, sl
 80050e4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80050e8:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80050ec:	b143      	cbz	r3, 8005100 <HAL_PCD_IRQHandler+0x370>
 80050ee:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80050f2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80050f6:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80050fa:	459a      	cmp	sl, r3
 80050fc:	f080 810b 	bcs.w	8005316 <HAL_PCD_IRQHandler+0x586>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005100:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005104:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005108:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 800510c:	4628      	mov	r0, r5
 800510e:	f003 f917 	bl	8008340 <HAL_PCD_DataOutStageCallback>
 8005112:	e760      	b.n	8004fd6 <HAL_PCD_IRQHandler+0x246>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005114:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005118:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800511c:	4653      	mov	r3, sl
 800511e:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8005122:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005126:	f002 f9d5 	bl	80074d4 <USB_ReadPMA>
 800512a:	e7cf      	b.n	80050cc <HAL_PCD_IRQHandler+0x33c>
          if (ep->type == EP_TYPE_BULK)
 800512c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005130:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005134:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8005138:	2b02      	cmp	r3, #2
 800513a:	d037      	beq.n	80051ac <HAL_PCD_IRQHandler+0x41c>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800513c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005140:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005144:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8005148:	6829      	ldr	r1, [r5, #0]
 800514a:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 800514e:	b29b      	uxth	r3, r3
 8005150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005158:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005160:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005164:	6828      	ldr	r0, [r5, #0]
 8005166:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 800516a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800516e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005172:	f000 80b4 	beq.w	80052de <HAL_PCD_IRQHandler+0x54e>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005176:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800517a:	b29b      	uxth	r3, r3
 800517c:	3302      	adds	r3, #2
 800517e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005182:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005186:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 800518a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 800518e:	f1ba 0f00 	cmp.w	sl, #0
 8005192:	d09b      	beq.n	80050cc <HAL_PCD_IRQHandler+0x33c>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005194:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005198:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800519c:	4653      	mov	r3, sl
 800519e:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80051a2:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80051a6:	f002 f995 	bl	80074d4 <USB_ReadPMA>
 80051aa:	e78f      	b.n	80050cc <HAL_PCD_IRQHandler+0x33c>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80051ac:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 80051b0:	d04a      	beq.n	8005248 <HAL_PCD_IRQHandler+0x4b8>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80051b2:	682a      	ldr	r2, [r5, #0]
 80051b4:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80051be:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 80051c2:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
 80051c6:	3302      	adds	r3, #2
 80051c8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80051cc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80051d0:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 80051d4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 80051d8:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
 80051dc:	4553      	cmp	r3, sl
 80051de:	f0c0 83f9 	bcc.w	80059d4 <HAL_PCD_IRQHandler+0xc44>
      ep->xfer_len -= count;
 80051e2:	eba3 030a 	sub.w	r3, r3, sl
 80051e6:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80051ea:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 80051ee:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 83f4 	beq.w	80059e0 <HAL_PCD_IRQHandler+0xc50>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80051f8:	f019 0f40 	tst.w	r9, #64	; 0x40
 80051fc:	d013      	beq.n	8005226 <HAL_PCD_IRQHandler+0x496>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80051fe:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005202:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005206:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 800520a:	682a      	ldr	r2, [r5, #0]
 800520c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8005210:	b29b      	uxth	r3, r3
 8005212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800521e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005222:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    if (count != 0U)
 8005226:	f1ba 0f00 	cmp.w	sl, #0
 800522a:	f43f af4f 	beq.w	80050cc <HAL_PCD_IRQHandler+0x33c>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800522e:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005232:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8005236:	4653      	mov	r3, sl
 8005238:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 800523c:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005240:	6828      	ldr	r0, [r5, #0]
 8005242:	f002 f947 	bl	80074d4 <USB_ReadPMA>
 8005246:	e741      	b.n	80050cc <HAL_PCD_IRQHandler+0x33c>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005248:	682a      	ldr	r2, [r5, #0]
 800524a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800524e:	b29b      	uxth	r3, r3
 8005250:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8005254:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8005258:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
 800525c:	3306      	adds	r3, #6
 800525e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005262:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8005266:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 800526a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 800526e:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
 8005272:	4553      	cmp	r3, sl
 8005274:	f0c0 83c2 	bcc.w	80059fc <HAL_PCD_IRQHandler+0xc6c>
      ep->xfer_len -= count;
 8005278:	eba3 030a 	sub.w	r3, r3, sl
 800527c:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8005280:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8005284:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 83bd 	beq.w	8005a08 <HAL_PCD_IRQHandler+0xc78>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800528e:	f019 0f40 	tst.w	r9, #64	; 0x40
 8005292:	d113      	bne.n	80052bc <HAL_PCD_IRQHandler+0x52c>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005294:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005298:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800529c:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 80052a0:	682a      	ldr	r2, [r5, #0]
 80052a2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052b8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    if (count != 0U)
 80052bc:	f1ba 0f00 	cmp.w	sl, #0
 80052c0:	f43f af04 	beq.w	80050cc <HAL_PCD_IRQHandler+0x33c>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80052c4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80052c8:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80052cc:	4653      	mov	r3, sl
 80052ce:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 80052d2:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80052d6:	6828      	ldr	r0, [r5, #0]
 80052d8:	f002 f8fc 	bl	80074d4 <USB_ReadPMA>
 80052dc:	e6f6      	b.n	80050cc <HAL_PCD_IRQHandler+0x33c>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80052de:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	3306      	adds	r3, #6
 80052e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052ea:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80052ee:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 80052f2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 80052f6:	f1ba 0f00 	cmp.w	sl, #0
 80052fa:	f43f aee7 	beq.w	80050cc <HAL_PCD_IRQHandler+0x33c>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80052fe:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005302:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8005306:	4653      	mov	r3, sl
 8005308:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 800530c:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005310:	f002 f8e0 	bl	80074d4 <USB_ReadPMA>
 8005314:	e6da      	b.n	80050cc <HAL_PCD_IRQHandler+0x33c>
        ep = &hpcd->OUT_ep[epindex];
 8005316:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800531a:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800531e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8005322:	6828      	ldr	r0, [r5, #0]
 8005324:	f001 fd7b 	bl	8006e1e <USB_EPStartXfer>
 8005328:	e655      	b.n	8004fd6 <HAL_PCD_IRQHandler+0x246>
          ep->xfer_len = 0U;
 800532a:	f8ca 6040 	str.w	r6, [sl, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 800532e:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
 8005332:	b1d3      	cbz	r3, 800536a <HAL_PCD_IRQHandler+0x5da>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005334:	f019 0f40 	tst.w	r9, #64	; 0x40
 8005338:	d02b      	beq.n	8005392 <HAL_PCD_IRQHandler+0x602>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800533a:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
 800533e:	b9d3      	cbnz	r3, 8005376 <HAL_PCD_IRQHandler+0x5e6>
 8005340:	682b      	ldr	r3, [r5, #0]
 8005342:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005346:	b292      	uxth	r2, r2
 8005348:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 800534c:	0109      	lsls	r1, r1, #4
 800534e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005352:	4413      	add	r3, r2
 8005354:	5aca      	ldrh	r2, [r1, r3]
 8005356:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800535a:	52ca      	strh	r2, [r1, r3]
 800535c:	5aca      	ldrh	r2, [r1, r3]
 800535e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005362:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005366:	b292      	uxth	r2, r2
 8005368:	52ca      	strh	r2, [r1, r3]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800536a:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 800536e:	4628      	mov	r0, r5
 8005370:	f002 fff2 	bl	8008358 <HAL_PCD_DataInStageCallback>
 8005374:	e59c      	b.n	8004eb0 <HAL_PCD_IRQHandler+0x120>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005376:	2b01      	cmp	r3, #1
 8005378:	d1f7      	bne.n	800536a <HAL_PCD_IRQHandler+0x5da>
 800537a:	682b      	ldr	r3, [r5, #0]
 800537c:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8005380:	b289      	uxth	r1, r1
 8005382:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 8005386:	0112      	lsls	r2, r2, #4
 8005388:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800538c:	440b      	add	r3, r1
 800538e:	52d6      	strh	r6, [r2, r3]
 8005390:	e7eb      	b.n	800536a <HAL_PCD_IRQHandler+0x5da>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005392:	682b      	ldr	r3, [r5, #0]
 8005394:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8005398:	b9a2      	cbnz	r2, 80053c4 <HAL_PCD_IRQHandler+0x634>
 800539a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800539e:	b292      	uxth	r2, r2
 80053a0:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80053a4:	0109      	lsls	r1, r1, #4
 80053a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053aa:	441a      	add	r2, r3
 80053ac:	5a8b      	ldrh	r3, [r1, r2]
 80053ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053b2:	528b      	strh	r3, [r1, r2]
 80053b4:	5a8b      	ldrh	r3, [r1, r2]
 80053b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053be:	b29b      	uxth	r3, r3
 80053c0:	528b      	strh	r3, [r1, r2]
 80053c2:	e7d2      	b.n	800536a <HAL_PCD_IRQHandler+0x5da>
 80053c4:	2a01      	cmp	r2, #1
 80053c6:	d1d0      	bne.n	800536a <HAL_PCD_IRQHandler+0x5da>
 80053c8:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80053cc:	b289      	uxth	r1, r1
 80053ce:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 80053d2:	0112      	lsls	r2, r2, #4
 80053d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053d8:	440b      	add	r3, r1
 80053da:	52d6      	strh	r6, [r2, r3]
 80053dc:	e7c5      	b.n	800536a <HAL_PCD_IRQHandler+0x5da>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80053de:	f019 0f40 	tst.w	r9, #64	; 0x40
 80053e2:	f000 80df 	beq.w	80055a4 <HAL_PCD_IRQHandler+0x814>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80053e6:	682a      	ldr	r2, [r5, #0]
 80053e8:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
    if (ep->xfer_len > TxPctSize)
 80053f2:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80053f6:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 80053fa:	6c00      	ldr	r0, [r0, #64]	; 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80053fc:	3302      	adds	r3, #2
 80053fe:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005402:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8005406:	f8b3 c400 	ldrh.w	ip, [r3, #1024]	; 0x400
    if (ep->xfer_len > TxPctSize)
 800540a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800540e:	4560      	cmp	r0, ip
 8005410:	f240 8244 	bls.w	800589c <HAL_PCD_IRQHandler+0xb0c>
      ep->xfer_len -= TxPctSize;
 8005414:	eba0 000c 	sub.w	r0, r0, ip
 8005418:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800541c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005420:	6418      	str	r0, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8005422:	2800      	cmp	r0, #0
 8005424:	f000 823f 	beq.w	80058a6 <HAL_PCD_IRQHandler+0xb16>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005428:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 800542c:	d00a      	beq.n	8005444 <HAL_PCD_IRQHandler+0x6b4>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800542e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8005432:	b29b      	uxth	r3, r3
 8005434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543c:	ea48 0303 	orr.w	r3, r8, r3
 8005440:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8005444:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005448:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800544c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005450:	2b01      	cmp	r3, #1
 8005452:	d029      	beq.n	80054a8 <HAL_PCD_IRQHandler+0x718>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005454:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8005458:	682a      	ldr	r2, [r5, #0]
 800545a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800545e:	b29b      	uxth	r3, r3
 8005460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005468:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800546c:	433b      	orrs	r3, r7
 800546e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8005472:	e51d      	b.n	8004eb0 <HAL_PCD_IRQHandler+0x120>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005474:	2b01      	cmp	r3, #1
 8005476:	f040 8247 	bne.w	8005908 <HAL_PCD_IRQHandler+0xb78>
 800547a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800547e:	b298      	uxth	r0, r3
 8005480:	f202 4304 	addw	r3, r2, #1028	; 0x404
 8005484:	4403      	add	r3, r0
 8005486:	0109      	lsls	r1, r1, #4
 8005488:	525e      	strh	r6, [r3, r1]
 800548a:	e223      	b.n	80058d4 <HAL_PCD_IRQHandler+0xb44>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800548c:	2a01      	cmp	r2, #1
 800548e:	f040 823b 	bne.w	8005908 <HAL_PCD_IRQHandler+0xb78>
 8005492:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005496:	b292      	uxth	r2, r2
 8005498:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800549c:	4413      	add	r3, r2
 800549e:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 80054a2:	0112      	lsls	r2, r2, #4
 80054a4:	529e      	strh	r6, [r3, r2]
 80054a6:	e22f      	b.n	8005908 <HAL_PCD_IRQHandler+0xb78>
        ep->xfer_buff += TxPctSize;
 80054a8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80054ac:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80054b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054b2:	4462      	add	r2, ip
 80054b4:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 80054b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054b8:	4462      	add	r2, ip
 80054ba:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80054bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d32b      	bcc.n	800551c <HAL_PCD_IRQHandler+0x78c>
          ep->xfer_len_db -= len;
 80054c4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80054c8:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80054cc:	1ad2      	subs	r2, r2, r3
 80054ce:	648a      	str	r2, [r1, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80054d0:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 80054d4:	2a00      	cmp	r2, #0
 80054d6:	d14a      	bne.n	800556e <HAL_PCD_IRQHandler+0x7de>
 80054d8:	682a      	ldr	r2, [r5, #0]
 80054da:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80054de:	b280      	uxth	r0, r0
 80054e0:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80054e4:	0109      	lsls	r1, r1, #4
 80054e6:	f202 4204 	addw	r2, r2, #1028	; 0x404
 80054ea:	4402      	add	r2, r0
 80054ec:	5a88      	ldrh	r0, [r1, r2]
 80054ee:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80054f2:	5288      	strh	r0, [r1, r2]
 80054f4:	2b3e      	cmp	r3, #62	; 0x3e
 80054f6:	d923      	bls.n	8005540 <HAL_PCD_IRQHandler+0x7b0>
 80054f8:	ea4f 1c53 	mov.w	ip, r3, lsr #5
 80054fc:	f013 0f1f 	tst.w	r3, #31
 8005500:	bf08      	it	eq
 8005502:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8005506:	5a88      	ldrh	r0, [r1, r2]
 8005508:	b280      	uxth	r0, r0
 800550a:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 800550e:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8005512:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8005516:	b280      	uxth	r0, r0
 8005518:	5288      	strh	r0, [r1, r2]
 800551a:	e02a      	b.n	8005572 <HAL_PCD_IRQHandler+0x7e2>
        else if (ep->xfer_len_db == 0U)
 800551c:	b93a      	cbnz	r2, 800552e <HAL_PCD_IRQHandler+0x79e>
          ep->xfer_fill_db = 0U;
 800551e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005522:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005526:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = TxPctSize;
 800552a:	4663      	mov	r3, ip
 800552c:	e7d0      	b.n	80054d0 <HAL_PCD_IRQHandler+0x740>
          ep->xfer_fill_db = 0U;
 800552e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005532:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005536:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 800553a:	649e      	str	r6, [r3, #72]	; 0x48
          len = ep->xfer_len_db;
 800553c:	4613      	mov	r3, r2
 800553e:	e7c7      	b.n	80054d0 <HAL_PCD_IRQHandler+0x740>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005540:	b93b      	cbnz	r3, 8005552 <HAL_PCD_IRQHandler+0x7c2>
 8005542:	5a88      	ldrh	r0, [r1, r2]
 8005544:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8005548:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800554c:	b280      	uxth	r0, r0
 800554e:	5288      	strh	r0, [r1, r2]
 8005550:	e00f      	b.n	8005572 <HAL_PCD_IRQHandler+0x7e2>
 8005552:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8005556:	f013 0f01 	tst.w	r3, #1
 800555a:	bf18      	it	ne
 800555c:	f10c 0c01 	addne.w	ip, ip, #1
 8005560:	5a88      	ldrh	r0, [r1, r2]
 8005562:	b280      	uxth	r0, r0
 8005564:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 8005568:	b280      	uxth	r0, r0
 800556a:	5288      	strh	r0, [r1, r2]
 800556c:	e001      	b.n	8005572 <HAL_PCD_IRQHandler+0x7e2>
 800556e:	2a01      	cmp	r2, #1
 8005570:	d00b      	beq.n	800558a <HAL_PCD_IRQHandler+0x7fa>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005572:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005576:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800557a:	4611      	mov	r1, r2
 800557c:	b29b      	uxth	r3, r3
 800557e:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8005580:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005582:	6828      	ldr	r0, [r5, #0]
 8005584:	f001 fc34 	bl	8006df0 <USB_WritePMA>
 8005588:	e764      	b.n	8005454 <HAL_PCD_IRQHandler+0x6c4>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800558a:	682a      	ldr	r2, [r5, #0]
 800558c:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8005590:	b289      	uxth	r1, r1
 8005592:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8005596:	440a      	add	r2, r1
 8005598:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 800559c:	0109      	lsls	r1, r1, #4
 800559e:	b298      	uxth	r0, r3
 80055a0:	5250      	strh	r0, [r2, r1]
 80055a2:	e7e6      	b.n	8005572 <HAL_PCD_IRQHandler+0x7e2>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80055a4:	682a      	ldr	r2, [r5, #0]
 80055a6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
    if (ep->xfer_len >= TxPctSize)
 80055b0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80055b4:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80055b8:	f8d1 c040 	ldr.w	ip, [r1, #64]	; 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80055bc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80055c0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80055c4:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	; 0x40c
    if (ep->xfer_len >= TxPctSize)
 80055c8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80055cc:	458c      	cmp	ip, r1
 80055ce:	f0c0 81b3 	bcc.w	8005938 <HAL_PCD_IRQHandler+0xba8>
      ep->xfer_len -= TxPctSize;
 80055d2:	ebac 0301 	sub.w	r3, ip, r1
 80055d6:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 80055da:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 80055de:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 81ad 	beq.w	8005942 <HAL_PCD_IRQHandler+0xbb2>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80055e8:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 80055ec:	d10a      	bne.n	8005604 <HAL_PCD_IRQHandler+0x874>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80055ee:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fc:	ea48 0303 	orr.w	r3, r8, r3
 8005600:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8005604:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005608:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800560c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005610:	2b01      	cmp	r3, #1
 8005612:	f47f af1f 	bne.w	8005454 <HAL_PCD_IRQHandler+0x6c4>
        ep->xfer_buff += TxPctSize;
 8005616:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800561a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800561e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005620:	440a      	add	r2, r1
 8005622:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 8005624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005626:	440a      	add	r2, r1
 8005628:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800562a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800562c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562e:	429a      	cmp	r2, r3
 8005630:	d345      	bcc.n	80056be <HAL_PCD_IRQHandler+0x92e>
          ep->xfer_len_db -= len;
 8005632:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005636:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800563a:	1ad2      	subs	r2, r2, r3
 800563c:	648a      	str	r2, [r1, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800563e:	682a      	ldr	r2, [r5, #0]
 8005640:	f89a 1029 	ldrb.w	r1, [sl, #41]	; 0x29
 8005644:	2900      	cmp	r1, #0
 8005646:	d163      	bne.n	8005710 <HAL_PCD_IRQHandler+0x980>
 8005648:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 800564c:	b289      	uxth	r1, r1
 800564e:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8005652:	440a      	add	r2, r1
 8005654:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
 8005658:	0100      	lsls	r0, r0, #4
 800565a:	5a11      	ldrh	r1, [r2, r0]
 800565c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005660:	5211      	strh	r1, [r2, r0]
 8005662:	2b3e      	cmp	r3, #62	; 0x3e
 8005664:	d93d      	bls.n	80056e2 <HAL_PCD_IRQHandler+0x952>
 8005666:	ea4f 1c53 	mov.w	ip, r3, lsr #5
 800566a:	f013 0f1f 	tst.w	r3, #31
 800566e:	bf08      	it	eq
 8005670:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8005674:	5a11      	ldrh	r1, [r2, r0]
 8005676:	b289      	uxth	r1, r1
 8005678:	ea41 218c 	orr.w	r1, r1, ip, lsl #10
 800567c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005680:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005684:	b289      	uxth	r1, r1
 8005686:	5211      	strh	r1, [r2, r0]
 8005688:	e044      	b.n	8005714 <HAL_PCD_IRQHandler+0x984>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800568a:	2b01      	cmp	r3, #1
 800568c:	f040 818a 	bne.w	80059a4 <HAL_PCD_IRQHandler+0xc14>
 8005690:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005694:	b299      	uxth	r1, r3
 8005696:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800569a:	440b      	add	r3, r1
 800569c:	0100      	lsls	r0, r0, #4
 800569e:	521e      	strh	r6, [r3, r0]
 80056a0:	e166      	b.n	8005970 <HAL_PCD_IRQHandler+0xbe0>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056a2:	2a01      	cmp	r2, #1
 80056a4:	f040 817e 	bne.w	80059a4 <HAL_PCD_IRQHandler+0xc14>
 80056a8:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80056ac:	b289      	uxth	r1, r1
 80056ae:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 80056b2:	0112      	lsls	r2, r2, #4
 80056b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056b8:	440b      	add	r3, r1
 80056ba:	52d6      	strh	r6, [r2, r3]
 80056bc:	e172      	b.n	80059a4 <HAL_PCD_IRQHandler+0xc14>
        else if (ep->xfer_len_db == 0U)
 80056be:	b93a      	cbnz	r2, 80056d0 <HAL_PCD_IRQHandler+0x940>
          ep->xfer_fill_db = 0U;
 80056c0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80056c4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80056c8:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = TxPctSize;
 80056cc:	460b      	mov	r3, r1
 80056ce:	e7b6      	b.n	800563e <HAL_PCD_IRQHandler+0x8ae>
          ep->xfer_len_db = 0U;
 80056d0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80056d4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80056d8:	649e      	str	r6, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 80056da:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = ep->xfer_len_db;
 80056de:	4613      	mov	r3, r2
 80056e0:	e7ad      	b.n	800563e <HAL_PCD_IRQHandler+0x8ae>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80056e2:	b93b      	cbnz	r3, 80056f4 <HAL_PCD_IRQHandler+0x964>
 80056e4:	5a11      	ldrh	r1, [r2, r0]
 80056e6:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80056ea:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80056ee:	b289      	uxth	r1, r1
 80056f0:	5211      	strh	r1, [r2, r0]
 80056f2:	e00f      	b.n	8005714 <HAL_PCD_IRQHandler+0x984>
 80056f4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80056f8:	f013 0f01 	tst.w	r3, #1
 80056fc:	bf18      	it	ne
 80056fe:	f10c 0c01 	addne.w	ip, ip, #1
 8005702:	5a11      	ldrh	r1, [r2, r0]
 8005704:	b289      	uxth	r1, r1
 8005706:	ea41 218c 	orr.w	r1, r1, ip, lsl #10
 800570a:	b289      	uxth	r1, r1
 800570c:	5211      	strh	r1, [r2, r0]
 800570e:	e001      	b.n	8005714 <HAL_PCD_IRQHandler+0x984>
 8005710:	2901      	cmp	r1, #1
 8005712:	d00b      	beq.n	800572c <HAL_PCD_IRQHandler+0x99c>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005714:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005718:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800571c:	4611      	mov	r1, r2
 800571e:	b29b      	uxth	r3, r3
 8005720:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005722:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005724:	6828      	ldr	r0, [r5, #0]
 8005726:	f001 fb63 	bl	8006df0 <USB_WritePMA>
 800572a:	e693      	b.n	8005454 <HAL_PCD_IRQHandler+0x6c4>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800572c:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8005730:	b280      	uxth	r0, r0
 8005732:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8005736:	0109      	lsls	r1, r1, #4
 8005738:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 800573c:	4402      	add	r2, r0
 800573e:	b298      	uxth	r0, r3
 8005740:	5288      	strh	r0, [r1, r2]
 8005742:	e7e7      	b.n	8005714 <HAL_PCD_IRQHandler+0x984>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005744:	682a      	ldr	r2, [r5, #0]
 8005746:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800574a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800574e:	041b      	lsls	r3, r3, #16
 8005750:	0c1b      	lsrs	r3, r3, #16
 8005752:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8005756:	4628      	mov	r0, r5
 8005758:	f002 fe0f 	bl	800837a <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800575c:	2100      	movs	r1, #0
 800575e:	4628      	mov	r0, r5
 8005760:	f7ff fb02 	bl	8004d68 <HAL_PCD_SetAddress>
    return;
 8005764:	e008      	b.n	8005778 <HAL_PCD_IRQHandler+0x9e8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005766:	682a      	ldr	r2, [r5, #0]
 8005768:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800576c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005770:	041b      	lsls	r3, r3, #16
 8005772:	0c1b      	lsrs	r3, r3, #16
 8005774:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8005778:	b004      	add	sp, #16
 800577a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800577e:	682a      	ldr	r2, [r5, #0]
 8005780:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005784:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005788:	041b      	lsls	r3, r3, #16
 800578a:	0c1b      	lsrs	r3, r3, #16
 800578c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8005790:	e7f2      	b.n	8005778 <HAL_PCD_IRQHandler+0x9e8>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005792:	682a      	ldr	r2, [r5, #0]
 8005794:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005798:	f023 0304 	bic.w	r3, r3, #4
 800579c:	041b      	lsls	r3, r3, #16
 800579e:	0c1b      	lsrs	r3, r3, #16
 80057a0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80057a4:	682a      	ldr	r2, [r5, #0]
 80057a6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80057aa:	f023 0308 	bic.w	r3, r3, #8
 80057ae:	041b      	lsls	r3, r3, #16
 80057b0:	0c1b      	lsrs	r3, r3, #16
 80057b2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80057b6:	4628      	mov	r0, r5
 80057b8:	f002 fe02 	bl	80083c0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80057bc:	682a      	ldr	r2, [r5, #0]
 80057be:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80057c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057c6:	041b      	lsls	r3, r3, #16
 80057c8:	0c1b      	lsrs	r3, r3, #16
 80057ca:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 80057ce:	e7d3      	b.n	8005778 <HAL_PCD_IRQHandler+0x9e8>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80057d0:	682f      	ldr	r7, [r5, #0]
 80057d2:	4638      	mov	r0, r7
 80057d4:	f1ad 0102 	sub.w	r1, sp, #2
 80057d8:	f10d 060e 	add.w	r6, sp, #14
 80057dc:	460a      	mov	r2, r1
 80057de:	f830 4b04 	ldrh.w	r4, [r0], #4
 80057e2:	f822 4f02 	strh.w	r4, [r2, #2]!
    for (i = 0U; i < 8U; i++)
 80057e6:	42b2      	cmp	r2, r6
 80057e8:	d1f9      	bne.n	80057de <HAL_PCD_IRQHandler+0xa4e>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80057ea:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80057ee:	b292      	uxth	r2, r2
 80057f0:	f042 0201 	orr.w	r2, r2, #1
 80057f4:	f8a7 2040 	strh.w	r2, [r7, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80057f8:	6828      	ldr	r0, [r5, #0]
 80057fa:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 80057fe:	f022 0201 	bic.w	r2, r2, #1
 8005802:	0412      	lsls	r2, r2, #16
 8005804:	0c12      	lsrs	r2, r2, #16
 8005806:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800580a:	6828      	ldr	r0, [r5, #0]
 800580c:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
 8005810:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005814:	d0fa      	beq.n	800580c <HAL_PCD_IRQHandler+0xa7c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005816:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
 800581a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800581e:	0412      	lsls	r2, r2, #16
 8005820:	0c12      	lsrs	r2, r2, #16
 8005822:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005826:	682a      	ldr	r2, [r5, #0]
 8005828:	f831 0f02 	ldrh.w	r0, [r1, #2]!
 800582c:	52d0      	strh	r0, [r2, r3]
    for (i = 0U; i < 8U; i++)
 800582e:	3304      	adds	r3, #4
 8005830:	2b20      	cmp	r3, #32
 8005832:	d1f8      	bne.n	8005826 <HAL_PCD_IRQHandler+0xa96>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005834:	682a      	ldr	r2, [r5, #0]
 8005836:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800583a:	b29b      	uxth	r3, r3
 800583c:	f043 0308 	orr.w	r3, r3, #8
 8005840:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005844:	682a      	ldr	r2, [r5, #0]
 8005846:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800584a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800584e:	041b      	lsls	r3, r3, #16
 8005850:	0c1b      	lsrs	r3, r3, #16
 8005852:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005856:	682a      	ldr	r2, [r5, #0]
 8005858:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800585c:	b29b      	uxth	r3, r3
 800585e:	f043 0304 	orr.w	r3, r3, #4
 8005862:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8005866:	4628      	mov	r0, r5
 8005868:	f002 fd9a 	bl	80083a0 <HAL_PCD_SuspendCallback>
    return;
 800586c:	e784      	b.n	8005778 <HAL_PCD_IRQHandler+0x9e8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800586e:	682a      	ldr	r2, [r5, #0]
 8005870:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005874:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005878:	041b      	lsls	r3, r3, #16
 800587a:	0c1b      	lsrs	r3, r3, #16
 800587c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8005880:	4628      	mov	r0, r5
 8005882:	f002 fd74 	bl	800836e <HAL_PCD_SOFCallback>
    return;
 8005886:	e777      	b.n	8005778 <HAL_PCD_IRQHandler+0x9e8>
 8005888:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800588c:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8005890:	6426      	str	r6, [r4, #64]	; 0x40
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005892:	4628      	mov	r0, r5
 8005894:	f002 fd60 	bl	8008358 <HAL_PCD_DataInStageCallback>
 8005898:	f7ff bb0a 	b.w	8004eb0 <HAL_PCD_IRQHandler+0x120>
 800589c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80058a0:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80058a4:	641e      	str	r6, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80058a6:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f47f ade2 	bne.w	8005474 <HAL_PCD_IRQHandler+0x6e4>
 80058b0:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	f202 4204 	addw	r2, r2, #1028	; 0x404
 80058ba:	441a      	add	r2, r3
 80058bc:	0109      	lsls	r1, r1, #4
 80058be:	5a53      	ldrh	r3, [r2, r1]
 80058c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058c4:	5253      	strh	r3, [r2, r1]
 80058c6:	5a53      	ldrh	r3, [r2, r1]
 80058c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	5253      	strh	r3, [r2, r1]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 80058da:	2a00      	cmp	r2, #0
 80058dc:	f47f add6 	bne.w	800548c <HAL_PCD_IRQHandler+0x6fc>
 80058e0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80058e4:	b292      	uxth	r2, r2
 80058e6:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80058ea:	0109      	lsls	r1, r1, #4
 80058ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058f0:	4413      	add	r3, r2
 80058f2:	5aca      	ldrh	r2, [r1, r3]
 80058f4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80058f8:	52ca      	strh	r2, [r1, r3]
 80058fa:	5aca      	ldrh	r2, [r1, r3]
 80058fc:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005900:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005904:	b292      	uxth	r2, r2
 8005906:	52ca      	strh	r2, [r1, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005908:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 800590c:	4628      	mov	r0, r5
 800590e:	f002 fd23 	bl	8008358 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005912:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8005916:	f43f ad9d 	beq.w	8005454 <HAL_PCD_IRQHandler+0x6c4>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800591a:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 800591e:	682a      	ldr	r2, [r5, #0]
 8005920:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8005924:	b29b      	uxth	r3, r3
 8005926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800592a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800592e:	ea48 0303 	orr.w	r3, r8, r3
 8005932:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8005936:	e58d      	b.n	8005454 <HAL_PCD_IRQHandler+0x6c4>
 8005938:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800593c:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8005940:	641e      	str	r6, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005942:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
 8005946:	2b00      	cmp	r3, #0
 8005948:	f47f ae9f 	bne.w	800568a <HAL_PCD_IRQHandler+0x8fa>
 800594c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005950:	b29b      	uxth	r3, r3
 8005952:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8005956:	441a      	add	r2, r3
 8005958:	0100      	lsls	r0, r0, #4
 800595a:	5a13      	ldrh	r3, [r2, r0]
 800595c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005960:	5213      	strh	r3, [r2, r0]
 8005962:	5a13      	ldrh	r3, [r2, r0]
 8005964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800596c:	b29b      	uxth	r3, r3
 800596e:	5213      	strh	r3, [r2, r0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005970:	682b      	ldr	r3, [r5, #0]
 8005972:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8005976:	2a00      	cmp	r2, #0
 8005978:	f47f ae93 	bne.w	80056a2 <HAL_PCD_IRQHandler+0x912>
 800597c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005980:	b292      	uxth	r2, r2
 8005982:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8005986:	0109      	lsls	r1, r1, #4
 8005988:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800598c:	441a      	add	r2, r3
 800598e:	5a8b      	ldrh	r3, [r1, r2]
 8005990:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005994:	528b      	strh	r3, [r1, r2]
 8005996:	5a8b      	ldrh	r3, [r1, r2]
 8005998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800599c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	528b      	strh	r3, [r1, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80059a4:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80059a8:	4628      	mov	r0, r5
 80059aa:	f002 fcd5 	bl	8008358 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80059ae:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 80059b2:	f47f ad4f 	bne.w	8005454 <HAL_PCD_IRQHandler+0x6c4>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80059b6:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80059ba:	682a      	ldr	r2, [r5, #0]
 80059bc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ca:	ea48 0303 	orr.w	r3, r8, r3
 80059ce:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80059d2:	e53f      	b.n	8005454 <HAL_PCD_IRQHandler+0x6c4>
 80059d4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80059d8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80059dc:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80059e0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80059f2:	433b      	orrs	r3, r7
 80059f4:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80059f8:	f7ff bbfe 	b.w	80051f8 <HAL_PCD_IRQHandler+0x468>
 80059fc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005a00:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005a04:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005a08:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a1a:	433b      	orrs	r3, r7
 8005a1c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8005a20:	e435      	b.n	800528e <HAL_PCD_IRQHandler+0x4fe>

08005a22 <HAL_PCD_EP_Open>:
{
 8005a22:	b510      	push	{r4, lr}
 8005a24:	4604      	mov	r4, r0
 8005a26:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8005a28:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005a2c:	d126      	bne.n	8005a7c <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a2e:	f001 0e07 	and.w	lr, r1, #7
 8005a32:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
 8005a36:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8005a3a:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8005a3e:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 8005a42:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8005a46:	2000      	movs	r0, #0
 8005a48:	f88e 0169 	strb.w	r0, [lr, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a4c:	f00c 0c07 	and.w	ip, ip, #7
 8005a50:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 8005a54:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8005a56:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 8005a58:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8005a5a:	bf04      	itt	eq
 8005a5c:	2300      	moveq	r3, #0
 8005a5e:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8005a60:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d016      	beq.n	8005a96 <HAL_PCD_EP_Open+0x74>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005a6e:	6820      	ldr	r0, [r4, #0]
 8005a70:	f000 fe87 	bl	8006782 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a74:	2000      	movs	r0, #0
 8005a76:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005a7a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a7c:	f001 0e07 	and.w	lr, r1, #7
 8005a80:	f10e 0001 	add.w	r0, lr, #1
 8005a84:	eb00 0e80 	add.w	lr, r0, r0, lsl #2
 8005a88:	eb04 01ce 	add.w	r1, r4, lr, lsl #3
    ep->is_in = 1U;
 8005a8c:	f04f 0e01 	mov.w	lr, #1
 8005a90:	f881 e001 	strb.w	lr, [r1, #1]
 8005a94:	e7da      	b.n	8005a4c <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 8005a96:	2002      	movs	r0, #2
 8005a98:	e7ef      	b.n	8005a7a <HAL_PCD_EP_Open+0x58>

08005a9a <HAL_PCD_EP_Close>:
{
 8005a9a:	b510      	push	{r4, lr}
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8005aa0:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005aa4:	d11c      	bne.n	8005ae0 <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005aa6:	f001 0007 	and.w	r0, r1, #7
 8005aaa:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8005aae:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8005ab2:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f880 3169 	strb.w	r3, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8005abe:	f002 0207 	and.w	r2, r2, #7
 8005ac2:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8005ac4:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d013      	beq.n	8005af4 <HAL_PCD_EP_Close+0x5a>
 8005acc:	2301      	movs	r3, #1
 8005ace:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005ad2:	6820      	ldr	r0, [r4, #0]
 8005ad4:	f001 f81d 	bl	8006b12 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ad8:	2000      	movs	r0, #0
 8005ada:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005ade:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ae0:	f001 0307 	and.w	r3, r1, #7
 8005ae4:	1c58      	adds	r0, r3, #1
 8005ae6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8005aea:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    ep->is_in = 1U;
 8005aee:	2301      	movs	r3, #1
 8005af0:	704b      	strb	r3, [r1, #1]
 8005af2:	e7e4      	b.n	8005abe <HAL_PCD_EP_Close+0x24>
  __HAL_LOCK(hpcd);
 8005af4:	2002      	movs	r0, #2
 8005af6:	e7f2      	b.n	8005ade <HAL_PCD_EP_Close+0x44>

08005af8 <HAL_PCD_EP_Receive>:
{
 8005af8:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005afa:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8005afe:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8005b02:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8005b06:	f8cc 217c 	str.w	r2, [ip, #380]	; 0x17c
  ep->xfer_len = len;
 8005b0a:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
  ep->xfer_count = 0U;
 8005b0e:	2400      	movs	r4, #0
 8005b10:	f8cc 4184 	str.w	r4, [ip, #388]	; 0x184
  ep->is_in = 0U;
 8005b14:	f88c 4169 	strb.w	r4, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b18:	f88c 1168 	strb.w	r1, [ip, #360]	; 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005b1c:	f50c 71b4 	add.w	r1, ip, #360	; 0x168
 8005b20:	6800      	ldr	r0, [r0, #0]
 8005b22:	f001 f97c 	bl	8006e1e <USB_EPStartXfer>
}
 8005b26:	4620      	mov	r0, r4
 8005b28:	bd10      	pop	{r4, pc}

08005b2a <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005b2a:	f001 0107 	and.w	r1, r1, #7
 8005b2e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005b32:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8005b36:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8005b3a:	4770      	bx	lr

08005b3c <HAL_PCD_EP_Transmit>:
{
 8005b3c:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b3e:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8005b42:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8005b46:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8005b4a:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
  ep->xfer_len = len;
 8005b4e:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 8005b52:	2201      	movs	r2, #1
 8005b54:	f88c 204c 	strb.w	r2, [ip, #76]	; 0x4c
  ep->xfer_len_db = len;
 8005b58:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 8005b5c:	2400      	movs	r4, #0
 8005b5e:	f8cc 4044 	str.w	r4, [ip, #68]	; 0x44
  ep->is_in = 1U;
 8005b62:	f88c 2029 	strb.w	r2, [ip, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b66:	f88c 1028 	strb.w	r1, [ip, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b6a:	4411      	add	r1, r2
 8005b6c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005b70:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8005b74:	6800      	ldr	r0, [r0, #0]
 8005b76:	f001 f952 	bl	8006e1e <USB_EPStartXfer>
}
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	bd10      	pop	{r4, pc}

08005b7e <HAL_PCD_EP_SetStall>:
{
 8005b7e:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005b80:	f001 0507 	and.w	r5, r1, #7
 8005b84:	6842      	ldr	r2, [r0, #4]
 8005b86:	4295      	cmp	r5, r2
 8005b88:	d831      	bhi.n	8005bee <HAL_PCD_EP_SetStall+0x70>
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8005b8e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005b92:	d11e      	bne.n	8005bd2 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 8005b94:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005b98:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8005b9c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8005ba0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005ba4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bb2:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8005bb4:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d01a      	beq.n	8005bf2 <HAL_PCD_EP_SetStall+0x74>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005bc2:	6820      	ldr	r0, [r4, #0]
 8005bc4:	f001 f88e 	bl	8006ce4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005bc8:	b15d      	cbz	r5, 8005be2 <HAL_PCD_EP_SetStall+0x64>
  __HAL_UNLOCK(hpcd);
 8005bca:	2000      	movs	r0, #0
 8005bcc:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005bd0:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bd2:	1c69      	adds	r1, r5, #1
 8005bd4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005bd8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8005bdc:	2201      	movs	r2, #1
 8005bde:	704a      	strb	r2, [r1, #1]
 8005be0:	e7e5      	b.n	8005bae <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005be2:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8005be6:	6820      	ldr	r0, [r4, #0]
 8005be8:	f001 f900 	bl	8006dec <USB_EP0_OutStart>
 8005bec:	e7ed      	b.n	8005bca <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 8005bee:	2001      	movs	r0, #1
 8005bf0:	e7ee      	b.n	8005bd0 <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 8005bf2:	2002      	movs	r0, #2
 8005bf4:	e7ec      	b.n	8005bd0 <HAL_PCD_EP_SetStall+0x52>

08005bf6 <HAL_PCD_EP_ClrStall>:
{
 8005bf6:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005bf8:	f001 010f 	and.w	r1, r1, #15
 8005bfc:	6842      	ldr	r2, [r0, #4]
 8005bfe:	4291      	cmp	r1, r2
 8005c00:	d830      	bhi.n	8005c64 <HAL_PCD_EP_ClrStall+0x6e>
{
 8005c02:	b510      	push	{r4, lr}
 8005c04:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8005c06:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005c0a:	d121      	bne.n	8005c50 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c0c:	f003 0207 	and.w	r2, r3, #7
 8005c10:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005c14:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8005c18:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 8005c1c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005c20:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8005c24:	2000      	movs	r0, #0
 8005c26:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c2e:	f003 0307 	and.w	r3, r3, #7
 8005c32:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8005c34:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d015      	beq.n	8005c68 <HAL_PCD_EP_ClrStall+0x72>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005c42:	6820      	ldr	r0, [r4, #0]
 8005c44:	f001 f873 	bl	8006d2e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005c48:	2000      	movs	r0, #0
 8005c4a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005c4e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c50:	f003 0107 	and.w	r1, r3, #7
 8005c54:	1c4a      	adds	r2, r1, #1
 8005c56:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005c5a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8005c5e:	2001      	movs	r0, #1
 8005c60:	7048      	strb	r0, [r1, #1]
 8005c62:	e7e2      	b.n	8005c2a <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 8005c64:	2001      	movs	r0, #1
}
 8005c66:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8005c68:	2002      	movs	r0, #2
 8005c6a:	e7f0      	b.n	8005c4e <HAL_PCD_EP_ClrStall+0x58>

08005c6c <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005c6c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005c70:	d00b      	beq.n	8005c8a <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c72:	f001 0107 	and.w	r1, r1, #7
 8005c76:	3101      	adds	r1, #1
 8005c78:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005c7c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005c80:	b952      	cbnz	r2, 8005c98 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005c82:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005c84:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8005c86:	2000      	movs	r0, #0
 8005c88:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8005c8a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005c8e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8005c92:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8005c96:	e7f3      	b.n	8005c80 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8005c98:	2201      	movs	r2, #1
 8005c9a:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005c9c:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005c9e:	0c1b      	lsrs	r3, r3, #16
 8005ca0:	814b      	strh	r3, [r1, #10]
 8005ca2:	e7f0      	b.n	8005c86 <HAL_PCDEx_PMAConfig+0x1a>

08005ca4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	f000 8201 	beq.w	80060ac <HAL_RCC_OscConfig+0x408>
{
 8005caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cb2:	6803      	ldr	r3, [r0, #0]
 8005cb4:	f013 0f01 	tst.w	r3, #1
 8005cb8:	d02c      	beq.n	8005d14 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005cba:	4b9f      	ldr	r3, [pc, #636]	; (8005f38 <HAL_RCC_OscConfig+0x294>)
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f003 030c 	and.w	r3, r3, #12
 8005cc2:	2b04      	cmp	r3, #4
 8005cc4:	d01d      	beq.n	8005d02 <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005cc6:	4b9c      	ldr	r3, [pc, #624]	; (8005f38 <HAL_RCC_OscConfig+0x294>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f003 030c 	and.w	r3, r3, #12
 8005cce:	2b08      	cmp	r3, #8
 8005cd0:	d012      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cd2:	6863      	ldr	r3, [r4, #4]
 8005cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cd8:	d041      	beq.n	8005d5e <HAL_RCC_OscConfig+0xba>
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d155      	bne.n	8005d8a <HAL_RCC_OscConfig+0xe6>
 8005cde:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ce2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	e037      	b.n	8005d68 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005cf8:	4b8f      	ldr	r3, [pc, #572]	; (8005f38 <HAL_RCC_OscConfig+0x294>)
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005d00:	d0e7      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d02:	4b8d      	ldr	r3, [pc, #564]	; (8005f38 <HAL_RCC_OscConfig+0x294>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005d0a:	d003      	beq.n	8005d14 <HAL_RCC_OscConfig+0x70>
 8005d0c:	6863      	ldr	r3, [r4, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 81ce 	beq.w	80060b0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	f013 0f02 	tst.w	r3, #2
 8005d1a:	d075      	beq.n	8005e08 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d1c:	4b86      	ldr	r3, [pc, #536]	; (8005f38 <HAL_RCC_OscConfig+0x294>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f013 0f0c 	tst.w	r3, #12
 8005d24:	d05f      	beq.n	8005de6 <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005d26:	4b84      	ldr	r3, [pc, #528]	; (8005f38 <HAL_RCC_OscConfig+0x294>)
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f003 030c 	and.w	r3, r3, #12
 8005d2e:	2b08      	cmp	r3, #8
 8005d30:	d054      	beq.n	8005ddc <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d32:	6923      	ldr	r3, [r4, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 808a 	beq.w	8005e4e <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d3a:	4b80      	ldr	r3, [pc, #512]	; (8005f3c <HAL_RCC_OscConfig+0x298>)
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d40:	f7fe fdb0 	bl	80048a4 <HAL_GetTick>
 8005d44:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d46:	4e7c      	ldr	r6, [pc, #496]	; (8005f38 <HAL_RCC_OscConfig+0x294>)
 8005d48:	6833      	ldr	r3, [r6, #0]
 8005d4a:	f013 0f02 	tst.w	r3, #2
 8005d4e:	d175      	bne.n	8005e3c <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d50:	f7fe fda8 	bl	80048a4 <HAL_GetTick>
 8005d54:	1b40      	subs	r0, r0, r5
 8005d56:	2802      	cmp	r0, #2
 8005d58:	d9f6      	bls.n	8005d48 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8005d5a:	2003      	movs	r0, #3
 8005d5c:	e1ad      	b.n	80060ba <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d5e:	4a76      	ldr	r2, [pc, #472]	; (8005f38 <HAL_RCC_OscConfig+0x294>)
 8005d60:	6813      	ldr	r3, [r2, #0]
 8005d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d66:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d68:	6863      	ldr	r3, [r4, #4]
 8005d6a:	b343      	cbz	r3, 8005dbe <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8005d6c:	f7fe fd9a 	bl	80048a4 <HAL_GetTick>
 8005d70:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d72:	4e71      	ldr	r6, [pc, #452]	; (8005f38 <HAL_RCC_OscConfig+0x294>)
 8005d74:	6833      	ldr	r3, [r6, #0]
 8005d76:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005d7a:	d1cb      	bne.n	8005d14 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d7c:	f7fe fd92 	bl	80048a4 <HAL_GetTick>
 8005d80:	1b40      	subs	r0, r0, r5
 8005d82:	2864      	cmp	r0, #100	; 0x64
 8005d84:	d9f6      	bls.n	8005d74 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8005d86:	2003      	movs	r0, #3
 8005d88:	e197      	b.n	80060ba <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d8e:	d009      	beq.n	8005da4 <HAL_RCC_OscConfig+0x100>
 8005d90:	4b69      	ldr	r3, [pc, #420]	; (8005f38 <HAL_RCC_OscConfig+0x294>)
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	e7e1      	b.n	8005d68 <HAL_RCC_OscConfig+0xc4>
 8005da4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005da8:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	e7d4      	b.n	8005d68 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8005dbe:	f7fe fd71 	bl	80048a4 <HAL_GetTick>
 8005dc2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dc4:	4e5c      	ldr	r6, [pc, #368]	; (8005f38 <HAL_RCC_OscConfig+0x294>)
 8005dc6:	6833      	ldr	r3, [r6, #0]
 8005dc8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005dcc:	d0a2      	beq.n	8005d14 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dce:	f7fe fd69 	bl	80048a4 <HAL_GetTick>
 8005dd2:	1b40      	subs	r0, r0, r5
 8005dd4:	2864      	cmp	r0, #100	; 0x64
 8005dd6:	d9f6      	bls.n	8005dc6 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8005dd8:	2003      	movs	r0, #3
 8005dda:	e16e      	b.n	80060ba <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005ddc:	4b56      	ldr	r3, [pc, #344]	; (8005f38 <HAL_RCC_OscConfig+0x294>)
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005de4:	d1a5      	bne.n	8005d32 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005de6:	4b54      	ldr	r3, [pc, #336]	; (8005f38 <HAL_RCC_OscConfig+0x294>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f013 0f02 	tst.w	r3, #2
 8005dee:	d003      	beq.n	8005df8 <HAL_RCC_OscConfig+0x154>
 8005df0:	6923      	ldr	r3, [r4, #16]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	f040 815e 	bne.w	80060b4 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005df8:	4a4f      	ldr	r2, [pc, #316]	; (8005f38 <HAL_RCC_OscConfig+0x294>)
 8005dfa:	6813      	ldr	r3, [r2, #0]
 8005dfc:	6961      	ldr	r1, [r4, #20]
 8005dfe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005e02:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005e06:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	f013 0f08 	tst.w	r3, #8
 8005e0e:	d03d      	beq.n	8005e8c <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e10:	69a3      	ldr	r3, [r4, #24]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d066      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e16:	4b49      	ldr	r3, [pc, #292]	; (8005f3c <HAL_RCC_OscConfig+0x298>)
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e1e:	f7fe fd41 	bl	80048a4 <HAL_GetTick>
 8005e22:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e24:	4e44      	ldr	r6, [pc, #272]	; (8005f38 <HAL_RCC_OscConfig+0x294>)
 8005e26:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005e28:	f013 0f02 	tst.w	r3, #2
 8005e2c:	d121      	bne.n	8005e72 <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e2e:	f7fe fd39 	bl	80048a4 <HAL_GetTick>
 8005e32:	1b40      	subs	r0, r0, r5
 8005e34:	2802      	cmp	r0, #2
 8005e36:	d9f6      	bls.n	8005e26 <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8005e38:	2003      	movs	r0, #3
 8005e3a:	e13e      	b.n	80060ba <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e3c:	4a3e      	ldr	r2, [pc, #248]	; (8005f38 <HAL_RCC_OscConfig+0x294>)
 8005e3e:	6813      	ldr	r3, [r2, #0]
 8005e40:	6961      	ldr	r1, [r4, #20]
 8005e42:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005e46:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005e4a:	6013      	str	r3, [r2, #0]
 8005e4c:	e7dc      	b.n	8005e08 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8005e4e:	4b3b      	ldr	r3, [pc, #236]	; (8005f3c <HAL_RCC_OscConfig+0x298>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005e54:	f7fe fd26 	bl	80048a4 <HAL_GetTick>
 8005e58:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e5a:	4e37      	ldr	r6, [pc, #220]	; (8005f38 <HAL_RCC_OscConfig+0x294>)
 8005e5c:	6833      	ldr	r3, [r6, #0]
 8005e5e:	f013 0f02 	tst.w	r3, #2
 8005e62:	d0d1      	beq.n	8005e08 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e64:	f7fe fd1e 	bl	80048a4 <HAL_GetTick>
 8005e68:	1b40      	subs	r0, r0, r5
 8005e6a:	2802      	cmp	r0, #2
 8005e6c:	d9f6      	bls.n	8005e5c <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8005e6e:	2003      	movs	r0, #3
 8005e70:	e123      	b.n	80060ba <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005e72:	4b33      	ldr	r3, [pc, #204]	; (8005f40 <HAL_RCC_OscConfig+0x29c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a33      	ldr	r2, [pc, #204]	; (8005f44 <HAL_RCC_OscConfig+0x2a0>)
 8005e78:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7c:	0a5b      	lsrs	r3, r3, #9
 8005e7e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8005e80:	bf00      	nop
  }
  while (Delay --);
 8005e82:	9b01      	ldr	r3, [sp, #4]
 8005e84:	1e5a      	subs	r2, r3, #1
 8005e86:	9201      	str	r2, [sp, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1f9      	bne.n	8005e80 <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	f013 0f04 	tst.w	r3, #4
 8005e92:	f000 809b 	beq.w	8005fcc <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e96:	4b28      	ldr	r3, [pc, #160]	; (8005f38 <HAL_RCC_OscConfig+0x294>)
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005e9e:	d134      	bne.n	8005f0a <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ea0:	4b25      	ldr	r3, [pc, #148]	; (8005f38 <HAL_RCC_OscConfig+0x294>)
 8005ea2:	69da      	ldr	r2, [r3, #28]
 8005ea4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005ea8:	61da      	str	r2, [r3, #28]
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8005eb4:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eb6:	4b24      	ldr	r3, [pc, #144]	; (8005f48 <HAL_RCC_OscConfig+0x2a4>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005ebe:	d026      	beq.n	8005f0e <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ec0:	68e3      	ldr	r3, [r4, #12]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d042      	beq.n	8005f4c <HAL_RCC_OscConfig+0x2a8>
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d158      	bne.n	8005f7c <HAL_RCC_OscConfig+0x2d8>
 8005eca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ece:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005ed2:	6a1a      	ldr	r2, [r3, #32]
 8005ed4:	f022 0201 	bic.w	r2, r2, #1
 8005ed8:	621a      	str	r2, [r3, #32]
 8005eda:	6a1a      	ldr	r2, [r3, #32]
 8005edc:	f022 0204 	bic.w	r2, r2, #4
 8005ee0:	621a      	str	r2, [r3, #32]
 8005ee2:	e038      	b.n	8005f56 <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 8005ee4:	4b15      	ldr	r3, [pc, #84]	; (8005f3c <HAL_RCC_OscConfig+0x298>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8005eec:	f7fe fcda 	bl	80048a4 <HAL_GetTick>
 8005ef0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ef2:	4e11      	ldr	r6, [pc, #68]	; (8005f38 <HAL_RCC_OscConfig+0x294>)
 8005ef4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005ef6:	f013 0f02 	tst.w	r3, #2
 8005efa:	d0c7      	beq.n	8005e8c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005efc:	f7fe fcd2 	bl	80048a4 <HAL_GetTick>
 8005f00:	1b40      	subs	r0, r0, r5
 8005f02:	2802      	cmp	r0, #2
 8005f04:	d9f6      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 8005f06:	2003      	movs	r0, #3
 8005f08:	e0d7      	b.n	80060ba <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8005f0a:	2500      	movs	r5, #0
 8005f0c:	e7d3      	b.n	8005eb6 <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f0e:	4a0e      	ldr	r2, [pc, #56]	; (8005f48 <HAL_RCC_OscConfig+0x2a4>)
 8005f10:	6813      	ldr	r3, [r2, #0]
 8005f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f16:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005f18:	f7fe fcc4 	bl	80048a4 <HAL_GetTick>
 8005f1c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f1e:	4f0a      	ldr	r7, [pc, #40]	; (8005f48 <HAL_RCC_OscConfig+0x2a4>)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005f26:	d1cb      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f28:	f7fe fcbc 	bl	80048a4 <HAL_GetTick>
 8005f2c:	1b80      	subs	r0, r0, r6
 8005f2e:	2864      	cmp	r0, #100	; 0x64
 8005f30:	d9f6      	bls.n	8005f20 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 8005f32:	2003      	movs	r0, #3
 8005f34:	e0c1      	b.n	80060ba <HAL_RCC_OscConfig+0x416>
 8005f36:	bf00      	nop
 8005f38:	40021000 	.word	0x40021000
 8005f3c:	42420000 	.word	0x42420000
 8005f40:	20000000 	.word	0x20000000
 8005f44:	10624dd3 	.word	0x10624dd3
 8005f48:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f4c:	4a5e      	ldr	r2, [pc, #376]	; (80060c8 <HAL_RCC_OscConfig+0x424>)
 8005f4e:	6a13      	ldr	r3, [r2, #32]
 8005f50:	f043 0301 	orr.w	r3, r3, #1
 8005f54:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f56:	68e3      	ldr	r3, [r4, #12]
 8005f58:	b333      	cbz	r3, 8005fa8 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8005f5a:	f7fe fca3 	bl	80048a4 <HAL_GetTick>
 8005f5e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f60:	4f59      	ldr	r7, [pc, #356]	; (80060c8 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f62:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	f013 0f02 	tst.w	r3, #2
 8005f6c:	d12d      	bne.n	8005fca <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f6e:	f7fe fc99 	bl	80048a4 <HAL_GetTick>
 8005f72:	1b80      	subs	r0, r0, r6
 8005f74:	4540      	cmp	r0, r8
 8005f76:	d9f6      	bls.n	8005f66 <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 8005f78:	2003      	movs	r0, #3
 8005f7a:	e09e      	b.n	80060ba <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f7c:	2b05      	cmp	r3, #5
 8005f7e:	d009      	beq.n	8005f94 <HAL_RCC_OscConfig+0x2f0>
 8005f80:	4b51      	ldr	r3, [pc, #324]	; (80060c8 <HAL_RCC_OscConfig+0x424>)
 8005f82:	6a1a      	ldr	r2, [r3, #32]
 8005f84:	f022 0201 	bic.w	r2, r2, #1
 8005f88:	621a      	str	r2, [r3, #32]
 8005f8a:	6a1a      	ldr	r2, [r3, #32]
 8005f8c:	f022 0204 	bic.w	r2, r2, #4
 8005f90:	621a      	str	r2, [r3, #32]
 8005f92:	e7e0      	b.n	8005f56 <HAL_RCC_OscConfig+0x2b2>
 8005f94:	4b4c      	ldr	r3, [pc, #304]	; (80060c8 <HAL_RCC_OscConfig+0x424>)
 8005f96:	6a1a      	ldr	r2, [r3, #32]
 8005f98:	f042 0204 	orr.w	r2, r2, #4
 8005f9c:	621a      	str	r2, [r3, #32]
 8005f9e:	6a1a      	ldr	r2, [r3, #32]
 8005fa0:	f042 0201 	orr.w	r2, r2, #1
 8005fa4:	621a      	str	r2, [r3, #32]
 8005fa6:	e7d6      	b.n	8005f56 <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 8005fa8:	f7fe fc7c 	bl	80048a4 <HAL_GetTick>
 8005fac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fae:	4f46      	ldr	r7, [pc, #280]	; (80060c8 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fb0:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	f013 0f02 	tst.w	r3, #2
 8005fba:	d006      	beq.n	8005fca <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fbc:	f7fe fc72 	bl	80048a4 <HAL_GetTick>
 8005fc0:	1b80      	subs	r0, r0, r6
 8005fc2:	4540      	cmp	r0, r8
 8005fc4:	d9f6      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 8005fc6:	2003      	movs	r0, #3
 8005fc8:	e077      	b.n	80060ba <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 8005fca:	b9e5      	cbnz	r5, 8006006 <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fcc:	69e3      	ldr	r3, [r4, #28]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d072      	beq.n	80060b8 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fd2:	4a3d      	ldr	r2, [pc, #244]	; (80060c8 <HAL_RCC_OscConfig+0x424>)
 8005fd4:	6852      	ldr	r2, [r2, #4]
 8005fd6:	f002 020c 	and.w	r2, r2, #12
 8005fda:	2a08      	cmp	r2, #8
 8005fdc:	d056      	beq.n	800608c <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d017      	beq.n	8006012 <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 8005fe2:	4b3a      	ldr	r3, [pc, #232]	; (80060cc <HAL_RCC_OscConfig+0x428>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8005fe8:	f7fe fc5c 	bl	80048a4 <HAL_GetTick>
 8005fec:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fee:	4d36      	ldr	r5, [pc, #216]	; (80060c8 <HAL_RCC_OscConfig+0x424>)
 8005ff0:	682b      	ldr	r3, [r5, #0]
 8005ff2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005ff6:	d047      	beq.n	8006088 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ff8:	f7fe fc54 	bl	80048a4 <HAL_GetTick>
 8005ffc:	1b00      	subs	r0, r0, r4
 8005ffe:	2802      	cmp	r0, #2
 8006000:	d9f6      	bls.n	8005ff0 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 8006002:	2003      	movs	r0, #3
 8006004:	e059      	b.n	80060ba <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006006:	4a30      	ldr	r2, [pc, #192]	; (80060c8 <HAL_RCC_OscConfig+0x424>)
 8006008:	69d3      	ldr	r3, [r2, #28]
 800600a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800600e:	61d3      	str	r3, [r2, #28]
 8006010:	e7dc      	b.n	8005fcc <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 8006012:	4b2e      	ldr	r3, [pc, #184]	; (80060cc <HAL_RCC_OscConfig+0x428>)
 8006014:	2200      	movs	r2, #0
 8006016:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8006018:	f7fe fc44 	bl	80048a4 <HAL_GetTick>
 800601c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800601e:	4e2a      	ldr	r6, [pc, #168]	; (80060c8 <HAL_RCC_OscConfig+0x424>)
 8006020:	6833      	ldr	r3, [r6, #0]
 8006022:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006026:	d006      	beq.n	8006036 <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006028:	f7fe fc3c 	bl	80048a4 <HAL_GetTick>
 800602c:	1b40      	subs	r0, r0, r5
 800602e:	2802      	cmp	r0, #2
 8006030:	d9f6      	bls.n	8006020 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 8006032:	2003      	movs	r0, #3
 8006034:	e041      	b.n	80060ba <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006036:	6a23      	ldr	r3, [r4, #32]
 8006038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800603c:	d01a      	beq.n	8006074 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800603e:	4922      	ldr	r1, [pc, #136]	; (80060c8 <HAL_RCC_OscConfig+0x424>)
 8006040:	684a      	ldr	r2, [r1, #4]
 8006042:	6a23      	ldr	r3, [r4, #32]
 8006044:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006046:	4303      	orrs	r3, r0
 8006048:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800604c:	4313      	orrs	r3, r2
 800604e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8006050:	4b1e      	ldr	r3, [pc, #120]	; (80060cc <HAL_RCC_OscConfig+0x428>)
 8006052:	2201      	movs	r2, #1
 8006054:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8006056:	f7fe fc25 	bl	80048a4 <HAL_GetTick>
 800605a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800605c:	4d1a      	ldr	r5, [pc, #104]	; (80060c8 <HAL_RCC_OscConfig+0x424>)
 800605e:	682b      	ldr	r3, [r5, #0]
 8006060:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006064:	d10e      	bne.n	8006084 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006066:	f7fe fc1d 	bl	80048a4 <HAL_GetTick>
 800606a:	1b00      	subs	r0, r0, r4
 800606c:	2802      	cmp	r0, #2
 800606e:	d9f6      	bls.n	800605e <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8006070:	2003      	movs	r0, #3
 8006072:	e022      	b.n	80060ba <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006074:	4a14      	ldr	r2, [pc, #80]	; (80060c8 <HAL_RCC_OscConfig+0x424>)
 8006076:	6853      	ldr	r3, [r2, #4]
 8006078:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800607c:	68a1      	ldr	r1, [r4, #8]
 800607e:	430b      	orrs	r3, r1
 8006080:	6053      	str	r3, [r2, #4]
 8006082:	e7dc      	b.n	800603e <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8006084:	2000      	movs	r0, #0
 8006086:	e018      	b.n	80060ba <HAL_RCC_OscConfig+0x416>
 8006088:	2000      	movs	r0, #0
 800608a:	e016      	b.n	80060ba <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800608c:	2b01      	cmp	r3, #1
 800608e:	d017      	beq.n	80060c0 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8006090:	4b0d      	ldr	r3, [pc, #52]	; (80060c8 <HAL_RCC_OscConfig+0x424>)
 8006092:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006094:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8006098:	6a22      	ldr	r2, [r4, #32]
 800609a:	4291      	cmp	r1, r2
 800609c:	d112      	bne.n	80060c4 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800609e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 80060a4:	1a18      	subs	r0, r3, r0
 80060a6:	bf18      	it	ne
 80060a8:	2001      	movne	r0, #1
 80060aa:	e006      	b.n	80060ba <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 80060ac:	2001      	movs	r0, #1
}
 80060ae:	4770      	bx	lr
        return HAL_ERROR;
 80060b0:	2001      	movs	r0, #1
 80060b2:	e002      	b.n	80060ba <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 80060b4:	2001      	movs	r0, #1
 80060b6:	e000      	b.n	80060ba <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 80060b8:	2000      	movs	r0, #0
}
 80060ba:	b002      	add	sp, #8
 80060bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80060c0:	2001      	movs	r0, #1
 80060c2:	e7fa      	b.n	80060ba <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 80060c4:	2001      	movs	r0, #1
 80060c6:	e7f8      	b.n	80060ba <HAL_RCC_OscConfig+0x416>
 80060c8:	40021000 	.word	0x40021000
 80060cc:	42420000 	.word	0x42420000

080060d0 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80060d0:	4b0f      	ldr	r3, [pc, #60]	; (8006110 <HAL_RCC_GetSysClockFreq+0x40>)
 80060d2:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80060d4:	f003 020c 	and.w	r2, r3, #12
 80060d8:	2a08      	cmp	r2, #8
 80060da:	d001      	beq.n	80060e0 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80060dc:	480d      	ldr	r0, [pc, #52]	; (8006114 <HAL_RCC_GetSysClockFreq+0x44>)
}
 80060de:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80060e0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80060e4:	490c      	ldr	r1, [pc, #48]	; (8006118 <HAL_RCC_GetSysClockFreq+0x48>)
 80060e6:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80060e8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80060ec:	d00b      	beq.n	8006106 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80060ee:	4b08      	ldr	r3, [pc, #32]	; (8006110 <HAL_RCC_GetSysClockFreq+0x40>)
 80060f0:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80060f2:	4a08      	ldr	r2, [pc, #32]	; (8006114 <HAL_RCC_GetSysClockFreq+0x44>)
 80060f4:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80060f8:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80060fc:	4a07      	ldr	r2, [pc, #28]	; (800611c <HAL_RCC_GetSysClockFreq+0x4c>)
 80060fe:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006100:	fbb0 f0f3 	udiv	r0, r0, r3
 8006104:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006106:	4b06      	ldr	r3, [pc, #24]	; (8006120 <HAL_RCC_GetSysClockFreq+0x50>)
 8006108:	fb03 f000 	mul.w	r0, r3, r0
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	40021000 	.word	0x40021000
 8006114:	007a1200 	.word	0x007a1200
 8006118:	0800bd9c 	.word	0x0800bd9c
 800611c:	0800bdac 	.word	0x0800bdac
 8006120:	003d0900 	.word	0x003d0900

08006124 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006124:	2800      	cmp	r0, #0
 8006126:	f000 80a2 	beq.w	800626e <HAL_RCC_ClockConfig+0x14a>
{
 800612a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800612e:	460d      	mov	r5, r1
 8006130:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006132:	4b53      	ldr	r3, [pc, #332]	; (8006280 <HAL_RCC_ClockConfig+0x15c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	428b      	cmp	r3, r1
 800613c:	d20b      	bcs.n	8006156 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800613e:	4a50      	ldr	r2, [pc, #320]	; (8006280 <HAL_RCC_ClockConfig+0x15c>)
 8006140:	6813      	ldr	r3, [r2, #0]
 8006142:	f023 0307 	bic.w	r3, r3, #7
 8006146:	430b      	orrs	r3, r1
 8006148:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800614a:	6813      	ldr	r3, [r2, #0]
 800614c:	f003 0307 	and.w	r3, r3, #7
 8006150:	428b      	cmp	r3, r1
 8006152:	f040 808e 	bne.w	8006272 <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	f013 0f02 	tst.w	r3, #2
 800615c:	d017      	beq.n	800618e <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800615e:	f013 0f04 	tst.w	r3, #4
 8006162:	d004      	beq.n	800616e <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006164:	4a47      	ldr	r2, [pc, #284]	; (8006284 <HAL_RCC_ClockConfig+0x160>)
 8006166:	6853      	ldr	r3, [r2, #4]
 8006168:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800616c:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	f013 0f08 	tst.w	r3, #8
 8006174:	d004      	beq.n	8006180 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006176:	4a43      	ldr	r2, [pc, #268]	; (8006284 <HAL_RCC_ClockConfig+0x160>)
 8006178:	6853      	ldr	r3, [r2, #4]
 800617a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800617e:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006180:	4a40      	ldr	r2, [pc, #256]	; (8006284 <HAL_RCC_ClockConfig+0x160>)
 8006182:	6853      	ldr	r3, [r2, #4]
 8006184:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006188:	68a1      	ldr	r1, [r4, #8]
 800618a:	430b      	orrs	r3, r1
 800618c:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	f013 0f01 	tst.w	r3, #1
 8006194:	d031      	beq.n	80061fa <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006196:	6862      	ldr	r2, [r4, #4]
 8006198:	2a01      	cmp	r2, #1
 800619a:	d020      	beq.n	80061de <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800619c:	2a02      	cmp	r2, #2
 800619e:	d025      	beq.n	80061ec <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061a0:	4b38      	ldr	r3, [pc, #224]	; (8006284 <HAL_RCC_ClockConfig+0x160>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f013 0f02 	tst.w	r3, #2
 80061a8:	d065      	beq.n	8006276 <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061aa:	4936      	ldr	r1, [pc, #216]	; (8006284 <HAL_RCC_ClockConfig+0x160>)
 80061ac:	684b      	ldr	r3, [r1, #4]
 80061ae:	f023 0303 	bic.w	r3, r3, #3
 80061b2:	4313      	orrs	r3, r2
 80061b4:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80061b6:	f7fe fb75 	bl	80048a4 <HAL_GetTick>
 80061ba:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061bc:	4f31      	ldr	r7, [pc, #196]	; (8006284 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061be:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f003 030c 	and.w	r3, r3, #12
 80061c8:	6862      	ldr	r2, [r4, #4]
 80061ca:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80061ce:	d014      	beq.n	80061fa <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061d0:	f7fe fb68 	bl	80048a4 <HAL_GetTick>
 80061d4:	1b80      	subs	r0, r0, r6
 80061d6:	4540      	cmp	r0, r8
 80061d8:	d9f3      	bls.n	80061c2 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 80061da:	2003      	movs	r0, #3
 80061dc:	e045      	b.n	800626a <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061de:	4b29      	ldr	r3, [pc, #164]	; (8006284 <HAL_RCC_ClockConfig+0x160>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80061e6:	d1e0      	bne.n	80061aa <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80061e8:	2001      	movs	r0, #1
 80061ea:	e03e      	b.n	800626a <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061ec:	4b25      	ldr	r3, [pc, #148]	; (8006284 <HAL_RCC_ClockConfig+0x160>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80061f4:	d1d9      	bne.n	80061aa <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80061f6:	2001      	movs	r0, #1
 80061f8:	e037      	b.n	800626a <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061fa:	4b21      	ldr	r3, [pc, #132]	; (8006280 <HAL_RCC_ClockConfig+0x15c>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0307 	and.w	r3, r3, #7
 8006202:	42ab      	cmp	r3, r5
 8006204:	d90a      	bls.n	800621c <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006206:	4a1e      	ldr	r2, [pc, #120]	; (8006280 <HAL_RCC_ClockConfig+0x15c>)
 8006208:	6813      	ldr	r3, [r2, #0]
 800620a:	f023 0307 	bic.w	r3, r3, #7
 800620e:	432b      	orrs	r3, r5
 8006210:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006212:	6813      	ldr	r3, [r2, #0]
 8006214:	f003 0307 	and.w	r3, r3, #7
 8006218:	42ab      	cmp	r3, r5
 800621a:	d12e      	bne.n	800627a <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	f013 0f04 	tst.w	r3, #4
 8006222:	d006      	beq.n	8006232 <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006224:	4a17      	ldr	r2, [pc, #92]	; (8006284 <HAL_RCC_ClockConfig+0x160>)
 8006226:	6853      	ldr	r3, [r2, #4]
 8006228:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800622c:	68e1      	ldr	r1, [r4, #12]
 800622e:	430b      	orrs	r3, r1
 8006230:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	f013 0f08 	tst.w	r3, #8
 8006238:	d007      	beq.n	800624a <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800623a:	4a12      	ldr	r2, [pc, #72]	; (8006284 <HAL_RCC_ClockConfig+0x160>)
 800623c:	6853      	ldr	r3, [r2, #4]
 800623e:	6921      	ldr	r1, [r4, #16]
 8006240:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006244:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006248:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800624a:	f7ff ff41 	bl	80060d0 <HAL_RCC_GetSysClockFreq>
 800624e:	4b0d      	ldr	r3, [pc, #52]	; (8006284 <HAL_RCC_ClockConfig+0x160>)
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006256:	4a0c      	ldr	r2, [pc, #48]	; (8006288 <HAL_RCC_ClockConfig+0x164>)
 8006258:	5cd3      	ldrb	r3, [r2, r3]
 800625a:	40d8      	lsrs	r0, r3
 800625c:	4b0b      	ldr	r3, [pc, #44]	; (800628c <HAL_RCC_ClockConfig+0x168>)
 800625e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8006260:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <HAL_RCC_ClockConfig+0x16c>)
 8006262:	6818      	ldr	r0, [r3, #0]
 8006264:	f7fe fada 	bl	800481c <HAL_InitTick>
  return HAL_OK;
 8006268:	2000      	movs	r0, #0
}
 800626a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800626e:	2001      	movs	r0, #1
}
 8006270:	4770      	bx	lr
    return HAL_ERROR;
 8006272:	2001      	movs	r0, #1
 8006274:	e7f9      	b.n	800626a <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8006276:	2001      	movs	r0, #1
 8006278:	e7f7      	b.n	800626a <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 800627a:	2001      	movs	r0, #1
 800627c:	e7f5      	b.n	800626a <HAL_RCC_ClockConfig+0x146>
 800627e:	bf00      	nop
 8006280:	40022000 	.word	0x40022000
 8006284:	40021000 	.word	0x40021000
 8006288:	0800bd8c 	.word	0x0800bd8c
 800628c:	20000000 	.word	0x20000000
 8006290:	20000008 	.word	0x20000008

08006294 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006298:	b082      	sub	sp, #8
 800629a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800629c:	6803      	ldr	r3, [r0, #0]
 800629e:	f013 0f01 	tst.w	r3, #1
 80062a2:	d036      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062a4:	4b3f      	ldr	r3, [pc, #252]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80062ac:	d149      	bne.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062ae:	4b3d      	ldr	r3, [pc, #244]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80062b0:	69da      	ldr	r2, [r3, #28]
 80062b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80062b6:	61da      	str	r2, [r3, #28]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062be:	9301      	str	r3, [sp, #4]
 80062c0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80062c2:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062c4:	4b38      	ldr	r3, [pc, #224]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80062cc:	d03b      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062ce:	4b35      	ldr	r3, [pc, #212]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80062d0:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062d2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80062d6:	d013      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80062d8:	6862      	ldr	r2, [r4, #4]
 80062da:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80062de:	429a      	cmp	r2, r3
 80062e0:	d00e      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062e2:	4a30      	ldr	r2, [pc, #192]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80062e4:	6a13      	ldr	r3, [r2, #32]
 80062e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062ea:	4930      	ldr	r1, [pc, #192]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80062ec:	2601      	movs	r6, #1
 80062ee:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062f2:	2600      	movs	r6, #0
 80062f4:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80062f8:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80062fa:	f013 0f01 	tst.w	r3, #1
 80062fe:	d136      	bne.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006300:	4a28      	ldr	r2, [pc, #160]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8006302:	6a13      	ldr	r3, [r2, #32]
 8006304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006308:	6861      	ldr	r1, [r4, #4]
 800630a:	430b      	orrs	r3, r1
 800630c:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800630e:	2d00      	cmp	r5, #0
 8006310:	d13e      	bne.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	f013 0f02 	tst.w	r3, #2
 8006318:	d006      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800631a:	4a22      	ldr	r2, [pc, #136]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800631c:	6853      	ldr	r3, [r2, #4]
 800631e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006322:	68a1      	ldr	r1, [r4, #8]
 8006324:	430b      	orrs	r3, r1
 8006326:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	f013 0f10 	tst.w	r3, #16
 800632e:	d034      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006330:	4a1c      	ldr	r2, [pc, #112]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8006332:	6853      	ldr	r3, [r2, #4]
 8006334:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006338:	68e1      	ldr	r1, [r4, #12]
 800633a:	430b      	orrs	r3, r1
 800633c:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800633e:	2000      	movs	r0, #0
 8006340:	e02c      	b.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x108>
    FlagStatus pwrclkchanged = RESET;
 8006342:	2500      	movs	r5, #0
 8006344:	e7be      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006346:	4a18      	ldr	r2, [pc, #96]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8006348:	6813      	ldr	r3, [r2, #0]
 800634a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800634e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006350:	f7fe faa8 	bl	80048a4 <HAL_GetTick>
 8006354:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006356:	4f14      	ldr	r7, [pc, #80]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800635e:	d1b6      	bne.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006360:	f7fe faa0 	bl	80048a4 <HAL_GetTick>
 8006364:	1b80      	subs	r0, r0, r6
 8006366:	2864      	cmp	r0, #100	; 0x64
 8006368:	d9f6      	bls.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xc4>
          return HAL_TIMEOUT;
 800636a:	2003      	movs	r0, #3
 800636c:	e016      	b.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 800636e:	f7fe fa99 	bl	80048a4 <HAL_GetTick>
 8006372:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006374:	4f0b      	ldr	r7, [pc, #44]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006376:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	f013 0f02 	tst.w	r3, #2
 8006380:	d1be      	bne.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006382:	f7fe fa8f 	bl	80048a4 <HAL_GetTick>
 8006386:	1b80      	subs	r0, r0, r6
 8006388:	4540      	cmp	r0, r8
 800638a:	d9f6      	bls.n	800637a <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
 800638c:	2003      	movs	r0, #3
 800638e:	e005      	b.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x108>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006390:	69d3      	ldr	r3, [r2, #28]
 8006392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006396:	61d3      	str	r3, [r2, #28]
 8006398:	e7bb      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  return HAL_OK;
 800639a:	2000      	movs	r0, #0
}
 800639c:	b002      	add	sp, #8
 800639e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063a2:	bf00      	nop
 80063a4:	40021000 	.word	0x40021000
 80063a8:	40007000 	.word	0x40007000
 80063ac:	42420000 	.word	0x42420000

080063b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b4:	b082      	sub	sp, #8
 80063b6:	4681      	mov	r9, r0
 80063b8:	460f      	mov	r7, r1
 80063ba:	4616      	mov	r6, r2
 80063bc:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063be:	f7fe fa71 	bl	80048a4 <HAL_GetTick>
 80063c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063c4:	442b      	add	r3, r5
 80063c6:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 80063ca:	f7fe fa6b 	bl	80048a4 <HAL_GetTick>
 80063ce:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063d0:	4b2d      	ldr	r3, [pc, #180]	; (8006488 <SPI_WaitFlagStateUntilTimeout+0xd8>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80063d8:	fb08 f303 	mul.w	r3, r8, r3
 80063dc:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063de:	f8d9 3000 	ldr.w	r3, [r9]
 80063e2:	689c      	ldr	r4, [r3, #8]
 80063e4:	ea37 0204 	bics.w	r2, r7, r4
 80063e8:	bf0c      	ite	eq
 80063ea:	f04f 0c01 	moveq.w	ip, #1
 80063ee:	f04f 0c00 	movne.w	ip, #0
 80063f2:	45b4      	cmp	ip, r6
 80063f4:	d044      	beq.n	8006480 <SPI_WaitFlagStateUntilTimeout+0xd0>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063f6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80063fa:	d0f2      	beq.n	80063e2 <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063fc:	f7fe fa52 	bl	80048a4 <HAL_GetTick>
 8006400:	eba0 000a 	sub.w	r0, r0, sl
 8006404:	4540      	cmp	r0, r8
 8006406:	d207      	bcs.n	8006418 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006408:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 800640a:	2b00      	cmp	r3, #0
 800640c:	bf08      	it	eq
 800640e:	4698      	moveq	r8, r3
      }
      count--;
 8006410:	9b01      	ldr	r3, [sp, #4]
 8006412:	3b01      	subs	r3, #1
 8006414:	9301      	str	r3, [sp, #4]
 8006416:	e7e2      	b.n	80063de <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006418:	f8d9 2000 	ldr.w	r2, [r9]
 800641c:	6853      	ldr	r3, [r2, #4]
 800641e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8006422:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006424:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006428:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800642c:	d00c      	beq.n	8006448 <SPI_WaitFlagStateUntilTimeout+0x98>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800642e:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8006432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006436:	d016      	beq.n	8006466 <SPI_WaitFlagStateUntilTimeout+0xb6>
        hspi->State = HAL_SPI_STATE_READY;
 8006438:	2301      	movs	r3, #1
 800643a:	f889 3051 	strb.w	r3, [r9, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800643e:	2300      	movs	r3, #0
 8006440:	f889 3050 	strb.w	r3, [r9, #80]	; 0x50
        return HAL_TIMEOUT;
 8006444:	2003      	movs	r0, #3
 8006446:	e01c      	b.n	8006482 <SPI_WaitFlagStateUntilTimeout+0xd2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006448:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800644c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006450:	d002      	beq.n	8006458 <SPI_WaitFlagStateUntilTimeout+0xa8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006456:	d1ea      	bne.n	800642e <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8006458:	f8d9 2000 	ldr.w	r2, [r9]
 800645c:	6813      	ldr	r3, [r2, #0]
 800645e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	e7e3      	b.n	800642e <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 8006466:	f8d9 2000 	ldr.w	r2, [r9]
 800646a:	6813      	ldr	r3, [r2, #0]
 800646c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	f8d9 2000 	ldr.w	r2, [r9]
 8006476:	6813      	ldr	r3, [r2, #0]
 8006478:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	e7db      	b.n	8006438 <SPI_WaitFlagStateUntilTimeout+0x88>
    }
  }

  return HAL_OK;
 8006480:	2000      	movs	r0, #0
}
 8006482:	b002      	add	sp, #8
 8006484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006488:	20000000 	.word	0x20000000

0800648c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800648c:	b510      	push	{r4, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	4604      	mov	r4, r0
 8006492:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006494:	9200      	str	r2, [sp, #0]
 8006496:	2200      	movs	r2, #0
 8006498:	2180      	movs	r1, #128	; 0x80
 800649a:	f7ff ff89 	bl	80063b0 <SPI_WaitFlagStateUntilTimeout>
 800649e:	b908      	cbnz	r0, 80064a4 <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 80064a0:	b002      	add	sp, #8
 80064a2:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80064a6:	f043 0320 	orr.w	r3, r3, #32
 80064aa:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 80064ac:	2003      	movs	r0, #3
 80064ae:	e7f7      	b.n	80064a0 <SPI_EndRxTxTransaction+0x14>

080064b0 <HAL_SPI_Init>:
  if (hspi == NULL)
 80064b0:	2800      	cmp	r0, #0
 80064b2:	d056      	beq.n	8006562 <HAL_SPI_Init+0xb2>
{
 80064b4:	b510      	push	{r4, lr}
 80064b6:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80064ba:	b933      	cbnz	r3, 80064ca <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064bc:	6843      	ldr	r3, [r0, #4]
 80064be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064c2:	d005      	beq.n	80064d0 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064c4:	2300      	movs	r3, #0
 80064c6:	61c3      	str	r3, [r0, #28]
 80064c8:	e002      	b.n	80064d0 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064ca:	2300      	movs	r3, #0
 80064cc:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064ce:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064d0:	2300      	movs	r3, #0
 80064d2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80064d4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d03c      	beq.n	8006556 <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 80064dc:	2302      	movs	r3, #2
 80064de:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80064e2:	6822      	ldr	r2, [r4, #0]
 80064e4:	6813      	ldr	r3, [r2, #0]
 80064e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064ea:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064ec:	6822      	ldr	r2, [r4, #0]
 80064ee:	6863      	ldr	r3, [r4, #4]
 80064f0:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80064f4:	68a1      	ldr	r1, [r4, #8]
 80064f6:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 80064fa:	430b      	orrs	r3, r1
 80064fc:	68e1      	ldr	r1, [r4, #12]
 80064fe:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8006502:	430b      	orrs	r3, r1
 8006504:	6921      	ldr	r1, [r4, #16]
 8006506:	f001 0102 	and.w	r1, r1, #2
 800650a:	430b      	orrs	r3, r1
 800650c:	6961      	ldr	r1, [r4, #20]
 800650e:	f001 0101 	and.w	r1, r1, #1
 8006512:	430b      	orrs	r3, r1
 8006514:	69a1      	ldr	r1, [r4, #24]
 8006516:	f401 7100 	and.w	r1, r1, #512	; 0x200
 800651a:	430b      	orrs	r3, r1
 800651c:	69e1      	ldr	r1, [r4, #28]
 800651e:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8006522:	430b      	orrs	r3, r1
 8006524:	6a21      	ldr	r1, [r4, #32]
 8006526:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800652a:	430b      	orrs	r3, r1
 800652c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800652e:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8006532:	430b      	orrs	r3, r1
 8006534:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006536:	6822      	ldr	r2, [r4, #0]
 8006538:	8b63      	ldrh	r3, [r4, #26]
 800653a:	f003 0304 	and.w	r3, r3, #4
 800653e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006540:	6822      	ldr	r2, [r4, #0]
 8006542:	69d3      	ldr	r3, [r2, #28]
 8006544:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006548:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800654a:	2000      	movs	r0, #0
 800654c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800654e:	2301      	movs	r3, #1
 8006550:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8006554:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8006556:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800655a:	4620      	mov	r0, r4
 800655c:	f7fe f87e 	bl	800465c <HAL_SPI_MspInit>
 8006560:	e7bc      	b.n	80064dc <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8006562:	2001      	movs	r0, #1
}
 8006564:	4770      	bx	lr

08006566 <HAL_SPI_Transmit>:
{
 8006566:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800656a:	b083      	sub	sp, #12
 800656c:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800656e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8006572:	2b01      	cmp	r3, #1
 8006574:	f000 80d6 	beq.w	8006724 <HAL_SPI_Transmit+0x1be>
 8006578:	4604      	mov	r4, r0
 800657a:	4688      	mov	r8, r1
 800657c:	4691      	mov	r9, r2
 800657e:	2301      	movs	r3, #1
 8006580:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8006584:	f7fe f98e 	bl	80048a4 <HAL_GetTick>
 8006588:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800658a:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 800658e:	b2f6      	uxtb	r6, r6
 8006590:	2e01      	cmp	r6, #1
 8006592:	f040 80bf 	bne.w	8006714 <HAL_SPI_Transmit+0x1ae>
  if ((pData == NULL) || (Size == 0U))
 8006596:	f1b8 0f00 	cmp.w	r8, #0
 800659a:	f000 80bc 	beq.w	8006716 <HAL_SPI_Transmit+0x1b0>
 800659e:	f1b9 0f00 	cmp.w	r9, #0
 80065a2:	f000 80b8 	beq.w	8006716 <HAL_SPI_Transmit+0x1b0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80065a6:	2303      	movs	r3, #3
 80065a8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065ac:	2300      	movs	r3, #0
 80065ae:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80065b0:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80065b4:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 80065b8:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80065bc:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80065be:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80065c0:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80065c2:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80065c4:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065c6:	68a3      	ldr	r3, [r4, #8]
 80065c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065cc:	d039      	beq.n	8006642 <HAL_SPI_Transmit+0xdc>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80065d6:	d103      	bne.n	80065e0 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065de:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065e0:	68e3      	ldr	r3, [r4, #12]
 80065e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065e6:	d037      	beq.n	8006658 <HAL_SPI_Transmit+0xf2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065e8:	6863      	ldr	r3, [r4, #4]
 80065ea:	b113      	cbz	r3, 80065f2 <HAL_SPI_Transmit+0x8c>
 80065ec:	f1b9 0f01 	cmp.w	r9, #1
 80065f0:	d10a      	bne.n	8006608 <HAL_SPI_Transmit+0xa2>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80065f6:	7812      	ldrb	r2, [r2, #0]
 80065f8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80065fc:	3301      	adds	r3, #1
 80065fe:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006600:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006602:	3b01      	subs	r3, #1
 8006604:	b29b      	uxth	r3, r3
 8006606:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8006608:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800660a:	b29b      	uxth	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	d166      	bne.n	80066de <HAL_SPI_Transmit+0x178>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006610:	463a      	mov	r2, r7
 8006612:	4629      	mov	r1, r5
 8006614:	4620      	mov	r0, r4
 8006616:	f7ff ff39 	bl	800648c <SPI_EndRxTxTransaction>
 800661a:	b108      	cbz	r0, 8006620 <HAL_SPI_Transmit+0xba>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800661c:	2320      	movs	r3, #32
 800661e:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006620:	68a3      	ldr	r3, [r4, #8]
 8006622:	b933      	cbnz	r3, 8006632 <HAL_SPI_Transmit+0xcc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006624:	9301      	str	r3, [sp, #4]
 8006626:	6823      	ldr	r3, [r4, #0]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	9201      	str	r2, [sp, #4]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	9301      	str	r3, [sp, #4]
 8006630:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006632:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006634:	2b00      	cmp	r3, #0
 8006636:	d16e      	bne.n	8006716 <HAL_SPI_Transmit+0x1b0>
    hspi->State = HAL_SPI_STATE_READY;
 8006638:	2301      	movs	r3, #1
 800663a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 800663e:	2600      	movs	r6, #0
 8006640:	e069      	b.n	8006716 <HAL_SPI_Transmit+0x1b0>
    __HAL_SPI_DISABLE(hspi);
 8006642:	6822      	ldr	r2, [r4, #0]
 8006644:	6813      	ldr	r3, [r2, #0]
 8006646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800664a:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800664c:	6822      	ldr	r2, [r4, #0]
 800664e:	6813      	ldr	r3, [r2, #0]
 8006650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006654:	6013      	str	r3, [r2, #0]
 8006656:	e7ba      	b.n	80065ce <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006658:	6863      	ldr	r3, [r4, #4]
 800665a:	b113      	cbz	r3, 8006662 <HAL_SPI_Transmit+0xfc>
 800665c:	f1b9 0f01 	cmp.w	r9, #1
 8006660:	d10a      	bne.n	8006678 <HAL_SPI_Transmit+0x112>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006666:	8812      	ldrh	r2, [r2, #0]
 8006668:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800666a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800666c:	3302      	adds	r3, #2
 800666e:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006670:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006672:	3b01      	subs	r3, #1
 8006674:	b29b      	uxth	r3, r3
 8006676:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8006678:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800667a:	b29b      	uxth	r3, r3
 800667c:	b963      	cbnz	r3, 8006698 <HAL_SPI_Transmit+0x132>
 800667e:	e7c7      	b.n	8006610 <HAL_SPI_Transmit+0xaa>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006680:	f7fe f910 	bl	80048a4 <HAL_GetTick>
 8006684:	1bc0      	subs	r0, r0, r7
 8006686:	42a8      	cmp	r0, r5
 8006688:	d316      	bcc.n	80066b8 <HAL_SPI_Transmit+0x152>
 800668a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800668e:	d115      	bne.n	80066bc <HAL_SPI_Transmit+0x156>
    while (hspi->TxXferCount > 0U)
 8006690:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006692:	b29b      	uxth	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d0bb      	beq.n	8006610 <HAL_SPI_Transmit+0xaa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	f012 0f02 	tst.w	r2, #2
 80066a0:	d0ee      	beq.n	8006680 <HAL_SPI_Transmit+0x11a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80066a4:	8812      	ldrh	r2, [r2, #0]
 80066a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80066aa:	3302      	adds	r3, #2
 80066ac:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80066ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80066b0:	3b01      	subs	r3, #1
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	86e3      	strh	r3, [r4, #54]	; 0x36
 80066b6:	e7eb      	b.n	8006690 <HAL_SPI_Transmit+0x12a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066b8:	2d00      	cmp	r5, #0
 80066ba:	d1e9      	bne.n	8006690 <HAL_SPI_Transmit+0x12a>
          hspi->State = HAL_SPI_STATE_READY;
 80066bc:	2301      	movs	r3, #1
 80066be:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 80066c2:	2603      	movs	r6, #3
          goto error;
 80066c4:	e027      	b.n	8006716 <HAL_SPI_Transmit+0x1b0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066c6:	f7fe f8ed 	bl	80048a4 <HAL_GetTick>
 80066ca:	1bc0      	subs	r0, r0, r7
 80066cc:	42a8      	cmp	r0, r5
 80066ce:	d31a      	bcc.n	8006706 <HAL_SPI_Transmit+0x1a0>
 80066d0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80066d4:	d119      	bne.n	800670a <HAL_SPI_Transmit+0x1a4>
    while (hspi->TxXferCount > 0U)
 80066d6:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 80066d8:	b289      	uxth	r1, r1
 80066da:	2900      	cmp	r1, #0
 80066dc:	d098      	beq.n	8006610 <HAL_SPI_Transmit+0xaa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	689a      	ldr	r2, [r3, #8]
 80066e2:	f012 0f02 	tst.w	r2, #2
 80066e6:	d0ee      	beq.n	80066c6 <HAL_SPI_Transmit+0x160>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066e8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80066ea:	7812      	ldrb	r2, [r2, #0]
 80066ec:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80066ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80066f0:	3301      	adds	r3, #1
 80066f2:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80066f4:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 80066f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80066fc:	fa1f fc8c 	uxth.w	ip, ip
 8006700:	f8a4 c036 	strh.w	ip, [r4, #54]	; 0x36
 8006704:	e7e7      	b.n	80066d6 <HAL_SPI_Transmit+0x170>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006706:	2d00      	cmp	r5, #0
 8006708:	d1e5      	bne.n	80066d6 <HAL_SPI_Transmit+0x170>
          hspi->State = HAL_SPI_STATE_READY;
 800670a:	2301      	movs	r3, #1
 800670c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8006710:	2603      	movs	r6, #3
          goto error;
 8006712:	e000      	b.n	8006716 <HAL_SPI_Transmit+0x1b0>
    errorcode = HAL_BUSY;
 8006714:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 8006716:	2300      	movs	r3, #0
 8006718:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800671c:	4630      	mov	r0, r6
 800671e:	b003      	add	sp, #12
 8006720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8006724:	2602      	movs	r6, #2
 8006726:	e7f9      	b.n	800671c <HAL_SPI_Transmit+0x1b6>

08006728 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006728:	b084      	sub	sp, #16
 800672a:	a801      	add	r0, sp, #4
 800672c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8006730:	2000      	movs	r0, #0
 8006732:	b004      	add	sp, #16
 8006734:	4770      	bx	lr

08006736 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006736:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006738:	2000      	movs	r0, #0
 800673a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800673e:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 8006742:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8006746:	4770      	bx	lr

08006748 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006748:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800674c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006750:	045b      	lsls	r3, r3, #17
 8006752:	0c5b      	lsrs	r3, r3, #17
 8006754:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8006758:	2000      	movs	r0, #0
 800675a:	4770      	bx	lr

0800675c <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800675c:	2000      	movs	r0, #0
 800675e:	4770      	bx	lr

08006760 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006760:	b084      	sub	sp, #16
 8006762:	4684      	mov	ip, r0
 8006764:	a801      	add	r0, sp, #4
 8006766:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800676a:	2301      	movs	r3, #1
 800676c:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006770:	2000      	movs	r0, #0
 8006772:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006776:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800677a:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50

  return HAL_OK;
}
 800677e:	b004      	add	sp, #16
 8006780:	4770      	bx	lr

08006782 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006782:	b530      	push	{r4, r5, lr}
 8006784:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006786:	f891 e000 	ldrb.w	lr, [r1]
 800678a:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
 800678e:	b292      	uxth	r2, r2
 8006790:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8006794:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006798:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 800679a:	78c8      	ldrb	r0, [r1, #3]
 800679c:	2803      	cmp	r0, #3
 800679e:	d863      	bhi.n	8006868 <USB_ActivateEndpoint+0xe6>
 80067a0:	e8df f000 	tbb	[pc, r0]
 80067a4:	5a025e57 	.word	0x5a025e57
 80067a8:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80067aa:	f248 0c80 	movw	ip, #32896	; 0x8080
 80067ae:	ea42 020c 	orr.w	r2, r2, ip
 80067b2:	f823 202e 	strh.w	r2, [r3, lr, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80067b6:	f891 e000 	ldrb.w	lr, [r1]
 80067ba:	f833 202e 	ldrh.w	r2, [r3, lr, lsl #2]
 80067be:	b292      	uxth	r2, r2
 80067c0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80067c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80067c8:	ea42 020e 	orr.w	r2, r2, lr
 80067cc:	ea4c 0202 	orr.w	r2, ip, r2
 80067d0:	f823 202e 	strh.w	r2, [r3, lr, lsl #2]

  if (ep->doublebuffer == 0U)
 80067d4:	7b0a      	ldrb	r2, [r1, #12]
 80067d6:	2a00      	cmp	r2, #0
 80067d8:	f040 80cb 	bne.w	8006972 <USB_ActivateEndpoint+0x1f0>
  {
    if (ep->is_in != 0U)
 80067dc:	784a      	ldrb	r2, [r1, #1]
 80067de:	2a00      	cmp	r2, #0
 80067e0:	d044      	beq.n	800686c <USB_ActivateEndpoint+0xea>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80067e2:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 80067e6:	fa1f fe8e 	uxth.w	lr, lr
 80067ea:	780a      	ldrb	r2, [r1, #0]
 80067ec:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80067f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80067f4:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 80067f8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80067fc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006800:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006804:	780c      	ldrb	r4, [r1, #0]
 8006806:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800680a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800680e:	d00c      	beq.n	800682a <USB_ActivateEndpoint+0xa8>
 8006810:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006814:	b292      	uxth	r2, r2
 8006816:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800681a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800681e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006822:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006826:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800682a:	78ca      	ldrb	r2, [r1, #3]
 800682c:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800682e:	7809      	ldrb	r1, [r1, #0]
 8006830:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8006834:	b292      	uxth	r2, r2
 8006836:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800683a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800683e:	bf18      	it	ne
 8006840:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006844:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006848:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800684c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8006850:	bd30      	pop	{r4, r5, pc}
      wEpRegVal |= USB_EP_CONTROL;
 8006852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 8006856:	e7a8      	b.n	80067aa <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_INTERRUPT;
 8006858:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800685c:	2000      	movs	r0, #0
      break;
 800685e:	e7a4      	b.n	80067aa <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006860:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8006864:	2000      	movs	r0, #0
      break;
 8006866:	e7a0      	b.n	80067aa <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8006868:	2001      	movs	r0, #1
 800686a:	e79e      	b.n	80067aa <USB_ActivateEndpoint+0x28>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800686c:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8006870:	fa1f fe8e 	uxth.w	lr, lr
 8006874:	780a      	ldrb	r2, [r1, #0]
 8006876:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800687a:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 800687e:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8006882:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006886:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800688a:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800688e:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8006892:	fa1f fe8e 	uxth.w	lr, lr
 8006896:	780a      	ldrb	r2, [r1, #0]
 8006898:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800689c:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80068a0:	f832 c00e 	ldrh.w	ip, [r2, lr]
 80068a4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80068a8:	f822 c00e 	strh.w	ip, [r2, lr]
 80068ac:	690c      	ldr	r4, [r1, #16]
 80068ae:	2c3e      	cmp	r4, #62	; 0x3e
 80068b0:	d936      	bls.n	8006920 <USB_ActivateEndpoint+0x19e>
 80068b2:	0965      	lsrs	r5, r4, #5
 80068b4:	f014 0f1f 	tst.w	r4, #31
 80068b8:	bf08      	it	eq
 80068ba:	f105 35ff 	addeq.w	r5, r5, #4294967295
 80068be:	f832 c00e 	ldrh.w	ip, [r2, lr]
 80068c2:	fa1f fc8c 	uxth.w	ip, ip
 80068c6:	ea4c 2c85 	orr.w	ip, ip, r5, lsl #10
 80068ca:	ea6f 4c4c 	mvn.w	ip, ip, lsl #17
 80068ce:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 80068d2:	fa1f fc8c 	uxth.w	ip, ip
 80068d6:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068da:	780c      	ldrb	r4, [r1, #0]
 80068dc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80068e0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80068e4:	d00c      	beq.n	8006900 <USB_ActivateEndpoint+0x17e>
 80068e6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80068ea:	b292      	uxth	r2, r2
 80068ec:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80068f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80068f4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80068f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80068fc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->num == 0U)
 8006900:	7809      	ldrb	r1, [r1, #0]
 8006902:	bb31      	cbnz	r1, 8006952 <USB_ActivateEndpoint+0x1d0>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006904:	881a      	ldrh	r2, [r3, #0]
 8006906:	b292      	uxth	r2, r2
 8006908:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800690c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006910:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8006914:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006918:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800691c:	801a      	strh	r2, [r3, #0]
 800691e:	e797      	b.n	8006850 <USB_ActivateEndpoint+0xce>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006920:	b94c      	cbnz	r4, 8006936 <USB_ActivateEndpoint+0x1b4>
 8006922:	f832 400e 	ldrh.w	r4, [r2, lr]
 8006926:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800692a:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800692e:	b2a4      	uxth	r4, r4
 8006930:	f822 400e 	strh.w	r4, [r2, lr]
 8006934:	e7d1      	b.n	80068da <USB_ActivateEndpoint+0x158>
 8006936:	0865      	lsrs	r5, r4, #1
 8006938:	f014 0f01 	tst.w	r4, #1
 800693c:	bf18      	it	ne
 800693e:	3501      	addne	r5, #1
 8006940:	f832 400e 	ldrh.w	r4, [r2, lr]
 8006944:	b2a4      	uxth	r4, r4
 8006946:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800694a:	b2a4      	uxth	r4, r4
 800694c:	f822 400e 	strh.w	r4, [r2, lr]
 8006950:	e7c3      	b.n	80068da <USB_ActivateEndpoint+0x158>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006952:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8006956:	b292      	uxth	r2, r2
 8006958:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800695c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006960:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8006964:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006968:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800696c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8006970:	e76e      	b.n	8006850 <USB_ActivateEndpoint+0xce>
    if (ep->type == EP_TYPE_BULK)
 8006972:	78ca      	ldrb	r2, [r1, #3]
 8006974:	2a02      	cmp	r2, #2
 8006976:	d075      	beq.n	8006a64 <USB_ActivateEndpoint+0x2e2>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006978:	780c      	ldrb	r4, [r1, #0]
 800697a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800697e:	b292      	uxth	r2, r2
 8006980:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8006984:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006988:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800698c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006990:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006994:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8006998:	fa1f fe8e 	uxth.w	lr, lr
 800699c:	780a      	ldrb	r2, [r1, #0]
 800699e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80069a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069a6:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 80069aa:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80069ae:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80069b2:	f822 c00e 	strh.w	ip, [r2, lr]
 80069b6:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 80069ba:	fa1f fe8e 	uxth.w	lr, lr
 80069be:	780a      	ldrb	r2, [r1, #0]
 80069c0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80069c4:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 80069c8:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 80069cc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80069d0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80069d4:	f822 c00e 	strh.w	ip, [r2, lr]
    if (ep->is_in == 0U)
 80069d8:	784a      	ldrb	r2, [r1, #1]
 80069da:	2a00      	cmp	r2, #0
 80069dc:	d151      	bne.n	8006a82 <USB_ActivateEndpoint+0x300>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069de:	780c      	ldrb	r4, [r1, #0]
 80069e0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80069e4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80069e8:	d00c      	beq.n	8006a04 <USB_ActivateEndpoint+0x282>
 80069ea:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80069ee:	b292      	uxth	r2, r2
 80069f0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80069f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80069f8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80069fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a00:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a04:	780c      	ldrb	r4, [r1, #0]
 8006a06:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006a0a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006a0e:	d00c      	beq.n	8006a2a <USB_ActivateEndpoint+0x2a8>
 8006a10:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006a14:	b292      	uxth	r2, r2
 8006a16:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006a1a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006a1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a22:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006a26:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a2a:	780c      	ldrb	r4, [r1, #0]
 8006a2c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006a30:	b292      	uxth	r2, r2
 8006a32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006a36:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006a3a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8006a3e:	f248 0c80 	movw	ip, #32896	; 0x8080
 8006a42:	ea4c 0202 	orr.w	r2, ip, r2
 8006a46:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a4a:	7809      	ldrb	r1, [r1, #0]
 8006a4c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8006a50:	b292      	uxth	r2, r2
 8006a52:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a5a:	ea4c 0202 	orr.w	r2, ip, r2
 8006a5e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8006a62:	e6f5      	b.n	8006850 <USB_ActivateEndpoint+0xce>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006a64:	780c      	ldrb	r4, [r1, #0]
 8006a66:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006a6a:	b292      	uxth	r2, r2
 8006a6c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006a70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006a74:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8006a78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a7c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8006a80:	e788      	b.n	8006994 <USB_ActivateEndpoint+0x212>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a82:	780c      	ldrb	r4, [r1, #0]
 8006a84:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006a88:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8006a8c:	d00c      	beq.n	8006aa8 <USB_ActivateEndpoint+0x326>
 8006a8e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006a92:	b292      	uxth	r2, r2
 8006a94:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006a98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006a9c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006aa0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006aa4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006aa8:	780c      	ldrb	r4, [r1, #0]
 8006aaa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006aae:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006ab2:	d00c      	beq.n	8006ace <USB_ActivateEndpoint+0x34c>
 8006ab4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006ab8:	b292      	uxth	r2, r2
 8006aba:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006abe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006ac2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ac6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006aca:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8006ace:	78ca      	ldrb	r2, [r1, #3]
 8006ad0:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ad2:	780c      	ldrb	r4, [r1, #0]
 8006ad4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006ad8:	b292      	uxth	r2, r2
 8006ada:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ae2:	bf18      	it	ne
 8006ae4:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ae8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006aec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006af0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006af4:	7809      	ldrb	r1, [r1, #0]
 8006af6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8006afa:	b292      	uxth	r2, r2
 8006afc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006b04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b0c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8006b10:	e69e      	b.n	8006850 <USB_ActivateEndpoint+0xce>

08006b12 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8006b12:	7b0b      	ldrb	r3, [r1, #12]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d146      	bne.n	8006ba6 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8006b18:	784b      	ldrb	r3, [r1, #1]
 8006b1a:	b313      	cbz	r3, 8006b62 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b1c:	780a      	ldrb	r2, [r1, #0]
 8006b1e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006b22:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006b26:	d00c      	beq.n	8006b42 <USB_DeactivateEndpoint+0x30>
 8006b28:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b3e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b42:	780a      	ldrb	r2, [r1, #0]
 8006b44:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b5a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8006b5e:	2000      	movs	r0, #0
 8006b60:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b62:	780a      	ldrb	r2, [r1, #0]
 8006b64:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006b68:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006b6c:	d00c      	beq.n	8006b88 <USB_DeactivateEndpoint+0x76>
 8006b6e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b84:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b88:	780a      	ldrb	r2, [r1, #0]
 8006b8a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ba0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006ba4:	e7db      	b.n	8006b5e <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 8006ba6:	784b      	ldrb	r3, [r1, #1]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d14d      	bne.n	8006c48 <USB_DeactivateEndpoint+0x136>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bac:	780a      	ldrb	r2, [r1, #0]
 8006bae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006bb2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006bb6:	d00c      	beq.n	8006bd2 <USB_DeactivateEndpoint+0xc0>
 8006bb8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bce:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bd2:	780a      	ldrb	r2, [r1, #0]
 8006bd4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006bd8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006bdc:	d00c      	beq.n	8006bf8 <USB_DeactivateEndpoint+0xe6>
 8006bde:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bf0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bf4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8006bf8:	780a      	ldrb	r2, [r1, #0]
 8006bfa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c10:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c14:	f891 c000 	ldrb.w	ip, [r1]
 8006c18:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c26:	f248 0280 	movw	r2, #32896	; 0x8080
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c30:	7809      	ldrb	r1, [r1, #0]
 8006c32:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c40:	4313      	orrs	r3, r2
 8006c42:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8006c46:	e78a      	b.n	8006b5e <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c48:	780a      	ldrb	r2, [r1, #0]
 8006c4a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006c4e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006c52:	d00c      	beq.n	8006c6e <USB_DeactivateEndpoint+0x15c>
 8006c54:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c6a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c6e:	780a      	ldrb	r2, [r1, #0]
 8006c70:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006c74:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006c78:	d00c      	beq.n	8006c94 <USB_DeactivateEndpoint+0x182>
 8006c7a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c90:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8006c94:	780a      	ldrb	r2, [r1, #0]
 8006c96:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cb0:	f891 c000 	ldrb.w	ip, [r1]
 8006cb4:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cc2:	f248 0280 	movw	r2, #32896	; 0x8080
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ccc:	7809      	ldrb	r1, [r1, #0]
 8006cce:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8006ce2:	e73c      	b.n	8006b5e <USB_DeactivateEndpoint+0x4c>

08006ce4 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8006ce4:	784b      	ldrb	r3, [r1, #1]
 8006ce6:	b18b      	cbz	r3, 8006d0c <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006ce8:	780a      	ldrb	r2, [r1, #0]
 8006cea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cf8:	f083 0310 	eor.w	r3, r3, #16
 8006cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d04:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8006d08:	2000      	movs	r0, #0
 8006d0a:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006d0c:	780a      	ldrb	r2, [r1, #0]
 8006d0e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d28:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006d2c:	e7ec      	b.n	8006d08 <USB_EPSetStall+0x24>

08006d2e <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8006d2e:	7b0b      	ldrb	r3, [r1, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d14b      	bne.n	8006dcc <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8006d34:	784b      	ldrb	r3, [r1, #1]
 8006d36:	b333      	cbz	r3, 8006d86 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d38:	780a      	ldrb	r2, [r1, #0]
 8006d3a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d3e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006d42:	d00c      	beq.n	8006d5e <USB_EPClearStall+0x30>
 8006d44:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d5a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8006d5e:	78cb      	ldrb	r3, [r1, #3]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d033      	beq.n	8006dcc <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d64:	780a      	ldrb	r2, [r1, #0]
 8006d66:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d74:	f083 0320 	eor.w	r3, r3, #32
 8006d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d80:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006d84:	e022      	b.n	8006dcc <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d86:	780a      	ldrb	r2, [r1, #0]
 8006d88:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d8c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006d90:	d00c      	beq.n	8006dac <USB_EPClearStall+0x7e>
 8006d92:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006dac:	780a      	ldrb	r2, [r1, #0]
 8006dae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dbc:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8006dcc:	2000      	movs	r0, #0
 8006dce:	4770      	bx	lr

08006dd0 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8006dd0:	b911      	cbnz	r1, 8006dd8 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006dd2:	2380      	movs	r3, #128	; 0x80
 8006dd4:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8006dd8:	2000      	movs	r0, #0
 8006dda:	4770      	bx	lr

08006ddc <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8006ddc:	2000      	movs	r0, #0
 8006dde:	4770      	bx	lr

08006de0 <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8006de0:	2000      	movs	r0, #0
 8006de2:	4770      	bx	lr

08006de4 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006de4:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8006de8:	b280      	uxth	r0, r0
 8006dea:	4770      	bx	lr

08006dec <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8006dec:	2000      	movs	r0, #0
 8006dee:	4770      	bx	lr

08006df0 <USB_WritePMA>:
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006df0:	3301      	adds	r3, #1
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006df2:	eb00 0c42 	add.w	ip, r0, r2, lsl #1
 8006df6:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 8006dfa:	4662      	mov	r2, ip

  for (count = n; count != 0U; count--)
 8006dfc:	085b      	lsrs	r3, r3, #1
 8006dfe:	d00d      	beq.n	8006e1c <USB_WritePMA+0x2c>
 8006e00:	3102      	adds	r1, #2
 8006e02:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
  {
    WrVal = pBuf[0];
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006e06:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8006e0a:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 8006e0e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    *pdwVal = (WrVal & 0xFFFFU);
 8006e12:	f822 3b04 	strh.w	r3, [r2], #4
  for (count = n; count != 0U; count--)
 8006e16:	3102      	adds	r1, #2
 8006e18:	4594      	cmp	ip, r2
 8006e1a:	d1f4      	bne.n	8006e06 <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8006e1c:	4770      	bx	lr

08006e1e <USB_EPStartXfer>:
{
 8006e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e20:	4605      	mov	r5, r0
 8006e22:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8006e24:	784b      	ldrb	r3, [r1, #1]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d03c      	beq.n	8006ea4 <USB_EPStartXfer+0x86>
    if (ep->doublebuffer == 0U)
 8006e2a:	7b0a      	ldrb	r2, [r1, #12]
 8006e2c:	2a00      	cmp	r2, #0
 8006e2e:	f040 8215 	bne.w	800725c <USB_EPStartXfer+0x43e>
      if (ep->xfer_len > ep->maxpacket)
 8006e32:	698a      	ldr	r2, [r1, #24]
 8006e34:	690b      	ldr	r3, [r1, #16]
 8006e36:	429a      	cmp	r2, r3
        ep->xfer_len -= len;
 8006e38:	bf86      	itte	hi
 8006e3a:	1ad1      	subhi	r1, r2, r3
        len = ep->maxpacket;
 8006e3c:	461a      	movhi	r2, r3
        ep->xfer_len = 0U;
 8006e3e:	2100      	movls	r1, #0
 8006e40:	61a1      	str	r1, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006e42:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	7820      	ldrb	r0, [r4, #0]
 8006e4a:	0100      	lsls	r0, r0, #4
 8006e4c:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8006e50:	4419      	add	r1, r3
 8006e52:	5a43      	ldrh	r3, [r0, r1]
 8006e54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e58:	5243      	strh	r3, [r0, r1]
 8006e5a:	2a3e      	cmp	r2, #62	; 0x3e
 8006e5c:	f240 81e9 	bls.w	8007232 <USB_EPStartXfer+0x414>
 8006e60:	0956      	lsrs	r6, r2, #5
 8006e62:	f012 0f1f 	tst.w	r2, #31
 8006e66:	bf08      	it	eq
 8006e68:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8006e6c:	5a43      	ldrh	r3, [r0, r1]
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8006e74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	5243      	strh	r3, [r0, r1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e80:	7822      	ldrb	r2, [r4, #0]
 8006e82:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e90:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e9c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8006ea0:	2000      	movs	r0, #0
}
 8006ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 8006ea4:	690a      	ldr	r2, [r1, #16]
 8006ea6:	698e      	ldr	r6, [r1, #24]
 8006ea8:	4296      	cmp	r6, r2
 8006eaa:	bf28      	it	cs
 8006eac:	4616      	movcs	r6, r2
    if (ep->doublebuffer == 0U)
 8006eae:	7b0b      	ldrb	r3, [r1, #12]
 8006eb0:	b1d3      	cbz	r3, 8006ee8 <USB_EPStartXfer+0xca>
      if (ep->type == EP_TYPE_BULK)
 8006eb2:	78cb      	ldrb	r3, [r1, #3]
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d038      	beq.n	8006f2a <USB_EPStartXfer+0x10c>
        ep->xfer_len_db -= len;
 8006eb8:	6a0b      	ldr	r3, [r1, #32]
 8006eba:	1b9b      	subs	r3, r3, r6
 8006ebc:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ebe:	780b      	ldrb	r3, [r1, #0]
 8006ec0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006ec4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006ec8:	f000 81a5 	beq.w	8007216 <USB_EPStartXfer+0x3f8>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ecc:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8006ed0:	b28a      	uxth	r2, r1
 8006ed2:	f200 410c 	addw	r1, r0, #1036	; 0x40c
 8006ed6:	4411      	add	r1, r2
 8006ed8:	011a      	lsls	r2, r3, #4
 8006eda:	b2b3      	uxth	r3, r6
 8006edc:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ede:	8962      	ldrh	r2, [r4, #10]
 8006ee0:	6961      	ldr	r1, [r4, #20]
 8006ee2:	f7ff ff85 	bl	8006df0 <USB_WritePMA>
 8006ee6:	e00e      	b.n	8006f06 <USB_EPStartXfer+0xe8>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006ee8:	b2b6      	uxth	r6, r6
 8006eea:	4633      	mov	r3, r6
 8006eec:	88ca      	ldrh	r2, [r1, #6]
 8006eee:	6949      	ldr	r1, [r1, #20]
 8006ef0:	f7ff ff7e 	bl	8006df0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006ef4:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8006ef8:	b299      	uxth	r1, r3
 8006efa:	7822      	ldrb	r2, [r4, #0]
 8006efc:	0112      	lsls	r2, r2, #4
 8006efe:	f205 4304 	addw	r3, r5, #1028	; 0x404
 8006f02:	440b      	add	r3, r1
 8006f04:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006f06:	7822      	ldrb	r2, [r4, #0]
 8006f08:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f16:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8006f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f22:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8006f26:	2000      	movs	r0, #0
 8006f28:	e7bb      	b.n	8006ea2 <USB_EPStartXfer+0x84>
        if (ep->xfer_len_db > ep->maxpacket)
 8006f2a:	6a0b      	ldr	r3, [r1, #32]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	f080 8154 	bcs.w	80071da <USB_EPStartXfer+0x3bc>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006f32:	780a      	ldrb	r2, [r1, #0]
 8006f34:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f42:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f4a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 8006f4e:	6a0b      	ldr	r3, [r1, #32]
 8006f50:	1b9b      	subs	r3, r3, r6
 8006f52:	620b      	str	r3, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f54:	780b      	ldrb	r3, [r1, #0]
 8006f56:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006f5a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006f5e:	f000 809e 	beq.w	800709e <USB_EPStartXfer+0x280>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f62:	784a      	ldrb	r2, [r1, #1]
 8006f64:	2a00      	cmp	r2, #0
 8006f66:	d132      	bne.n	8006fce <USB_EPStartXfer+0x1b0>
 8006f68:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006f6c:	b292      	uxth	r2, r2
 8006f6e:	f200 410c 	addw	r1, r0, #1036	; 0x40c
 8006f72:	440a      	add	r2, r1
 8006f74:	011b      	lsls	r3, r3, #4
 8006f76:	5ad1      	ldrh	r1, [r2, r3]
 8006f78:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006f7c:	52d1      	strh	r1, [r2, r3]
 8006f7e:	2e3e      	cmp	r6, #62	; 0x3e
 8006f80:	d910      	bls.n	8006fa4 <USB_EPStartXfer+0x186>
 8006f82:	0970      	lsrs	r0, r6, #5
 8006f84:	f016 0f1f 	tst.w	r6, #31
 8006f88:	bf08      	it	eq
 8006f8a:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8006f8e:	5ad1      	ldrh	r1, [r2, r3]
 8006f90:	b289      	uxth	r1, r1
 8006f92:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8006f96:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8006f9a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8006f9e:	b289      	uxth	r1, r1
 8006fa0:	52d1      	strh	r1, [r2, r3]
 8006fa2:	e016      	b.n	8006fd2 <USB_EPStartXfer+0x1b4>
 8006fa4:	b93e      	cbnz	r6, 8006fb6 <USB_EPStartXfer+0x198>
 8006fa6:	5ad1      	ldrh	r1, [r2, r3]
 8006fa8:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8006fac:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8006fb0:	b289      	uxth	r1, r1
 8006fb2:	52d1      	strh	r1, [r2, r3]
 8006fb4:	e00d      	b.n	8006fd2 <USB_EPStartXfer+0x1b4>
 8006fb6:	0870      	lsrs	r0, r6, #1
 8006fb8:	f016 0f01 	tst.w	r6, #1
 8006fbc:	bf18      	it	ne
 8006fbe:	3001      	addne	r0, #1
 8006fc0:	5ad1      	ldrh	r1, [r2, r3]
 8006fc2:	b289      	uxth	r1, r1
 8006fc4:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8006fc8:	b289      	uxth	r1, r1
 8006fca:	52d1      	strh	r1, [r2, r3]
 8006fcc:	e001      	b.n	8006fd2 <USB_EPStartXfer+0x1b4>
 8006fce:	2a01      	cmp	r2, #1
 8006fd0:	d032      	beq.n	8007038 <USB_EPStartXfer+0x21a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fd2:	b2b3      	uxth	r3, r6
 8006fd4:	8962      	ldrh	r2, [r4, #10]
 8006fd6:	6961      	ldr	r1, [r4, #20]
 8006fd8:	4628      	mov	r0, r5
 8006fda:	f7ff ff09 	bl	8006df0 <USB_WritePMA>
            ep->xfer_buff += len;
 8006fde:	6963      	ldr	r3, [r4, #20]
 8006fe0:	4433      	add	r3, r6
 8006fe2:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8006fe4:	6a23      	ldr	r3, [r4, #32]
 8006fe6:	6922      	ldr	r2, [r4, #16]
 8006fe8:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 8006fea:	bf86      	itte	hi
 8006fec:	1b9a      	subhi	r2, r3, r6
 8006fee:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 8006ff0:	2200      	movls	r2, #0
 8006ff2:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ff4:	7862      	ldrb	r2, [r4, #1]
 8006ff6:	2a00      	cmp	r2, #0
 8006ff8:	d13d      	bne.n	8007076 <USB_EPStartXfer+0x258>
 8006ffa:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8006ffe:	b292      	uxth	r2, r2
 8007000:	7820      	ldrb	r0, [r4, #0]
 8007002:	0100      	lsls	r0, r0, #4
 8007004:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8007008:	440a      	add	r2, r1
 800700a:	5a81      	ldrh	r1, [r0, r2]
 800700c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8007010:	5281      	strh	r1, [r0, r2]
 8007012:	2b3e      	cmp	r3, #62	; 0x3e
 8007014:	d91a      	bls.n	800704c <USB_EPStartXfer+0x22e>
 8007016:	095e      	lsrs	r6, r3, #5
 8007018:	f013 0f1f 	tst.w	r3, #31
 800701c:	bf08      	it	eq
 800701e:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8007022:	5a81      	ldrh	r1, [r0, r2]
 8007024:	b289      	uxth	r1, r1
 8007026:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 800702a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800702e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007032:	b289      	uxth	r1, r1
 8007034:	5281      	strh	r1, [r0, r2]
 8007036:	e020      	b.n	800707a <USB_EPStartXfer+0x25c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007038:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800703c:	b291      	uxth	r1, r2
 800703e:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8007042:	440a      	add	r2, r1
 8007044:	011b      	lsls	r3, r3, #4
 8007046:	b2b1      	uxth	r1, r6
 8007048:	52d1      	strh	r1, [r2, r3]
 800704a:	e7c2      	b.n	8006fd2 <USB_EPStartXfer+0x1b4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800704c:	b93b      	cbnz	r3, 800705e <USB_EPStartXfer+0x240>
 800704e:	5a81      	ldrh	r1, [r0, r2]
 8007050:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8007054:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007058:	b289      	uxth	r1, r1
 800705a:	5281      	strh	r1, [r0, r2]
 800705c:	e00d      	b.n	800707a <USB_EPStartXfer+0x25c>
 800705e:	085e      	lsrs	r6, r3, #1
 8007060:	f013 0f01 	tst.w	r3, #1
 8007064:	bf18      	it	ne
 8007066:	3601      	addne	r6, #1
 8007068:	5a81      	ldrh	r1, [r0, r2]
 800706a:	b289      	uxth	r1, r1
 800706c:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8007070:	b289      	uxth	r1, r1
 8007072:	5281      	strh	r1, [r0, r2]
 8007074:	e001      	b.n	800707a <USB_EPStartXfer+0x25c>
 8007076:	2a01      	cmp	r2, #1
 8007078:	d006      	beq.n	8007088 <USB_EPStartXfer+0x26a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800707a:	b29b      	uxth	r3, r3
 800707c:	8922      	ldrh	r2, [r4, #8]
 800707e:	6961      	ldr	r1, [r4, #20]
 8007080:	4628      	mov	r0, r5
 8007082:	f7ff feb5 	bl	8006df0 <USB_WritePMA>
 8007086:	e73e      	b.n	8006f06 <USB_EPStartXfer+0xe8>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007088:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800708c:	b290      	uxth	r0, r2
 800708e:	7821      	ldrb	r1, [r4, #0]
 8007090:	0109      	lsls	r1, r1, #4
 8007092:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8007096:	4402      	add	r2, r0
 8007098:	b298      	uxth	r0, r3
 800709a:	5288      	strh	r0, [r1, r2]
 800709c:	e7ed      	b.n	800707a <USB_EPStartXfer+0x25c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800709e:	784a      	ldrb	r2, [r1, #1]
 80070a0:	2a00      	cmp	r2, #0
 80070a2:	d132      	bne.n	800710a <USB_EPStartXfer+0x2ec>
 80070a4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80070a8:	b292      	uxth	r2, r2
 80070aa:	f200 4104 	addw	r1, r0, #1028	; 0x404
 80070ae:	440a      	add	r2, r1
 80070b0:	011b      	lsls	r3, r3, #4
 80070b2:	5ad1      	ldrh	r1, [r2, r3]
 80070b4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80070b8:	52d1      	strh	r1, [r2, r3]
 80070ba:	2e3e      	cmp	r6, #62	; 0x3e
 80070bc:	d910      	bls.n	80070e0 <USB_EPStartXfer+0x2c2>
 80070be:	0970      	lsrs	r0, r6, #5
 80070c0:	f016 0f1f 	tst.w	r6, #31
 80070c4:	bf08      	it	eq
 80070c6:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80070ca:	5ad1      	ldrh	r1, [r2, r3]
 80070cc:	b289      	uxth	r1, r1
 80070ce:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 80070d2:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80070d6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80070da:	b289      	uxth	r1, r1
 80070dc:	52d1      	strh	r1, [r2, r3]
 80070de:	e016      	b.n	800710e <USB_EPStartXfer+0x2f0>
 80070e0:	b93e      	cbnz	r6, 80070f2 <USB_EPStartXfer+0x2d4>
 80070e2:	5ad1      	ldrh	r1, [r2, r3]
 80070e4:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80070e8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80070ec:	b289      	uxth	r1, r1
 80070ee:	52d1      	strh	r1, [r2, r3]
 80070f0:	e00d      	b.n	800710e <USB_EPStartXfer+0x2f0>
 80070f2:	0870      	lsrs	r0, r6, #1
 80070f4:	f016 0f01 	tst.w	r6, #1
 80070f8:	bf18      	it	ne
 80070fa:	3001      	addne	r0, #1
 80070fc:	5ad1      	ldrh	r1, [r2, r3]
 80070fe:	b289      	uxth	r1, r1
 8007100:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8007104:	b289      	uxth	r1, r1
 8007106:	52d1      	strh	r1, [r2, r3]
 8007108:	e001      	b.n	800710e <USB_EPStartXfer+0x2f0>
 800710a:	2a01      	cmp	r2, #1
 800710c:	d032      	beq.n	8007174 <USB_EPStartXfer+0x356>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800710e:	b2b3      	uxth	r3, r6
 8007110:	8922      	ldrh	r2, [r4, #8]
 8007112:	6961      	ldr	r1, [r4, #20]
 8007114:	4628      	mov	r0, r5
 8007116:	f7ff fe6b 	bl	8006df0 <USB_WritePMA>
            ep->xfer_buff += len;
 800711a:	6963      	ldr	r3, [r4, #20]
 800711c:	4433      	add	r3, r6
 800711e:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8007120:	6a23      	ldr	r3, [r4, #32]
 8007122:	6922      	ldr	r2, [r4, #16]
 8007124:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 8007126:	bf86      	itte	hi
 8007128:	1b9a      	subhi	r2, r3, r6
 800712a:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 800712c:	2200      	movls	r2, #0
 800712e:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007130:	7862      	ldrb	r2, [r4, #1]
 8007132:	2a00      	cmp	r2, #0
 8007134:	d13d      	bne.n	80071b2 <USB_EPStartXfer+0x394>
 8007136:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800713a:	b292      	uxth	r2, r2
 800713c:	7820      	ldrb	r0, [r4, #0]
 800713e:	0100      	lsls	r0, r0, #4
 8007140:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8007144:	440a      	add	r2, r1
 8007146:	5a81      	ldrh	r1, [r0, r2]
 8007148:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800714c:	5281      	strh	r1, [r0, r2]
 800714e:	2b3e      	cmp	r3, #62	; 0x3e
 8007150:	d91a      	bls.n	8007188 <USB_EPStartXfer+0x36a>
 8007152:	095e      	lsrs	r6, r3, #5
 8007154:	f013 0f1f 	tst.w	r3, #31
 8007158:	bf08      	it	eq
 800715a:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800715e:	5a81      	ldrh	r1, [r0, r2]
 8007160:	b289      	uxth	r1, r1
 8007162:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8007166:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800716a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800716e:	b289      	uxth	r1, r1
 8007170:	5281      	strh	r1, [r0, r2]
 8007172:	e020      	b.n	80071b6 <USB_EPStartXfer+0x398>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007174:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8007178:	b291      	uxth	r1, r2
 800717a:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800717e:	440a      	add	r2, r1
 8007180:	011b      	lsls	r3, r3, #4
 8007182:	b2b1      	uxth	r1, r6
 8007184:	52d1      	strh	r1, [r2, r3]
 8007186:	e7c2      	b.n	800710e <USB_EPStartXfer+0x2f0>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007188:	b93b      	cbnz	r3, 800719a <USB_EPStartXfer+0x37c>
 800718a:	5a81      	ldrh	r1, [r0, r2]
 800718c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8007190:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007194:	b289      	uxth	r1, r1
 8007196:	5281      	strh	r1, [r0, r2]
 8007198:	e00d      	b.n	80071b6 <USB_EPStartXfer+0x398>
 800719a:	085e      	lsrs	r6, r3, #1
 800719c:	f013 0f01 	tst.w	r3, #1
 80071a0:	bf18      	it	ne
 80071a2:	3601      	addne	r6, #1
 80071a4:	5a81      	ldrh	r1, [r0, r2]
 80071a6:	b289      	uxth	r1, r1
 80071a8:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80071ac:	b289      	uxth	r1, r1
 80071ae:	5281      	strh	r1, [r0, r2]
 80071b0:	e001      	b.n	80071b6 <USB_EPStartXfer+0x398>
 80071b2:	2a01      	cmp	r2, #1
 80071b4:	d006      	beq.n	80071c4 <USB_EPStartXfer+0x3a6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	8962      	ldrh	r2, [r4, #10]
 80071ba:	6961      	ldr	r1, [r4, #20]
 80071bc:	4628      	mov	r0, r5
 80071be:	f7ff fe17 	bl	8006df0 <USB_WritePMA>
 80071c2:	e6a0      	b.n	8006f06 <USB_EPStartXfer+0xe8>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071c4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80071c8:	b290      	uxth	r0, r2
 80071ca:	7821      	ldrb	r1, [r4, #0]
 80071cc:	0109      	lsls	r1, r1, #4
 80071ce:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 80071d2:	4402      	add	r2, r0
 80071d4:	b298      	uxth	r0, r3
 80071d6:	5288      	strh	r0, [r1, r2]
 80071d8:	e7ed      	b.n	80071b6 <USB_EPStartXfer+0x398>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80071da:	7809      	ldrb	r1, [r1, #0]
 80071dc:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 80071e0:	b292      	uxth	r2, r2
 80071e2:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 80071e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80071ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80071f2:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80071f6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80071fa:	b290      	uxth	r0, r2
 80071fc:	7821      	ldrb	r1, [r4, #0]
 80071fe:	0109      	lsls	r1, r1, #4
 8007200:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8007204:	4402      	add	r2, r0
 8007206:	b29b      	uxth	r3, r3
 8007208:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800720a:	8922      	ldrh	r2, [r4, #8]
 800720c:	6961      	ldr	r1, [r4, #20]
 800720e:	4628      	mov	r0, r5
 8007210:	f7ff fdee 	bl	8006df0 <USB_WritePMA>
 8007214:	e677      	b.n	8006f06 <USB_EPStartXfer+0xe8>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007216:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800721a:	b28a      	uxth	r2, r1
 800721c:	f200 4104 	addw	r1, r0, #1028	; 0x404
 8007220:	4411      	add	r1, r2
 8007222:	011a      	lsls	r2, r3, #4
 8007224:	b2b3      	uxth	r3, r6
 8007226:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007228:	8922      	ldrh	r2, [r4, #8]
 800722a:	6961      	ldr	r1, [r4, #20]
 800722c:	f7ff fde0 	bl	8006df0 <USB_WritePMA>
 8007230:	e669      	b.n	8006f06 <USB_EPStartXfer+0xe8>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007232:	b93a      	cbnz	r2, 8007244 <USB_EPStartXfer+0x426>
 8007234:	5a43      	ldrh	r3, [r0, r1]
 8007236:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800723a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800723e:	b29b      	uxth	r3, r3
 8007240:	5243      	strh	r3, [r0, r1]
 8007242:	e61d      	b.n	8006e80 <USB_EPStartXfer+0x62>
 8007244:	0856      	lsrs	r6, r2, #1
 8007246:	f012 0f01 	tst.w	r2, #1
 800724a:	bf18      	it	ne
 800724c:	3601      	addne	r6, #1
 800724e:	5a43      	ldrh	r3, [r0, r1]
 8007250:	b29b      	uxth	r3, r3
 8007252:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8007256:	b29b      	uxth	r3, r3
 8007258:	5243      	strh	r3, [r0, r1]
 800725a:	e611      	b.n	8006e80 <USB_EPStartXfer+0x62>
      if (ep->type == EP_TYPE_BULK)
 800725c:	78ca      	ldrb	r2, [r1, #3]
 800725e:	2a02      	cmp	r2, #2
 8007260:	d04b      	beq.n	80072fa <USB_EPStartXfer+0x4dc>
      else if (ep->type == EP_TYPE_ISOC)
 8007262:	2a01      	cmp	r2, #1
 8007264:	f040 8134 	bne.w	80074d0 <USB_EPStartXfer+0x6b2>
        if (ep->xfer_len > ep->maxpacket)
 8007268:	698a      	ldr	r2, [r1, #24]
 800726a:	6909      	ldr	r1, [r1, #16]
 800726c:	428a      	cmp	r2, r1
          ep->xfer_len -= len;
 800726e:	bf86      	itte	hi
 8007270:	1a50      	subhi	r0, r2, r1
          len = ep->maxpacket;
 8007272:	460a      	movhi	r2, r1
          ep->xfer_len = 0U;
 8007274:	2000      	movls	r0, #0
 8007276:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007278:	2b00      	cmp	r3, #0
 800727a:	f47f ae01 	bne.w	8006e80 <USB_EPStartXfer+0x62>
 800727e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8007282:	b29b      	uxth	r3, r3
 8007284:	7821      	ldrb	r1, [r4, #0]
 8007286:	0109      	lsls	r1, r1, #4
 8007288:	f205 4004 	addw	r0, r5, #1028	; 0x404
 800728c:	4403      	add	r3, r0
 800728e:	5ac8      	ldrh	r0, [r1, r3]
 8007290:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8007294:	52c8      	strh	r0, [r1, r3]
 8007296:	2a3e      	cmp	r2, #62	; 0x3e
 8007298:	f240 80c7 	bls.w	800742a <USB_EPStartXfer+0x60c>
 800729c:	0956      	lsrs	r6, r2, #5
 800729e:	f012 071f 	ands.w	r7, r2, #31
 80072a2:	bf0c      	ite	eq
 80072a4:	f106 3cff 	addeq.w	ip, r6, #4294967295
 80072a8:	46b4      	movne	ip, r6
 80072aa:	5ac8      	ldrh	r0, [r1, r3]
 80072ac:	b280      	uxth	r0, r0
 80072ae:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 80072b2:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 80072b6:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 80072ba:	b280      	uxth	r0, r0
 80072bc:	52c8      	strh	r0, [r1, r3]
 80072be:	7863      	ldrb	r3, [r4, #1]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f040 80f7 	bne.w	80074b4 <USB_EPStartXfer+0x696>
 80072c6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80072ca:	b293      	uxth	r3, r2
 80072cc:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 80072d0:	441a      	add	r2, r3
 80072d2:	7821      	ldrb	r1, [r4, #0]
 80072d4:	0109      	lsls	r1, r1, #4
 80072d6:	5a53      	ldrh	r3, [r2, r1]
 80072d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072dc:	5253      	strh	r3, [r2, r1]
 80072de:	2f00      	cmp	r7, #0
 80072e0:	f000 80e6 	beq.w	80074b0 <USB_EPStartXfer+0x692>
 80072e4:	5a53      	ldrh	r3, [r2, r1]
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 80072ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	5253      	strh	r3, [r2, r1]
 80072f8:	e5c2      	b.n	8006e80 <USB_EPStartXfer+0x62>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d140      	bne.n	8007380 <USB_EPStartXfer+0x562>
 80072fe:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8007302:	b29b      	uxth	r3, r3
 8007304:	780a      	ldrb	r2, [r1, #0]
 8007306:	0112      	lsls	r2, r2, #4
 8007308:	f200 4104 	addw	r1, r0, #1028	; 0x404
 800730c:	440b      	add	r3, r1
 800730e:	5ad1      	ldrh	r1, [r2, r3]
 8007310:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8007314:	52d1      	strh	r1, [r2, r3]
 8007316:	6920      	ldr	r0, [r4, #16]
 8007318:	283e      	cmp	r0, #62	; 0x3e
 800731a:	d94f      	bls.n	80073bc <USB_EPStartXfer+0x59e>
 800731c:	0946      	lsrs	r6, r0, #5
 800731e:	f010 0f1f 	tst.w	r0, #31
 8007322:	bf08      	it	eq
 8007324:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8007328:	5ad1      	ldrh	r1, [r2, r3]
 800732a:	b289      	uxth	r1, r1
 800732c:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8007330:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8007334:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007338:	b289      	uxth	r1, r1
 800733a:	52d1      	strh	r1, [r2, r3]
 800733c:	7863      	ldrb	r3, [r4, #1]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d166      	bne.n	8007410 <USB_EPStartXfer+0x5f2>
 8007342:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8007346:	b29b      	uxth	r3, r3
 8007348:	7822      	ldrb	r2, [r4, #0]
 800734a:	0112      	lsls	r2, r2, #4
 800734c:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8007350:	440b      	add	r3, r1
 8007352:	5ad1      	ldrh	r1, [r2, r3]
 8007354:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8007358:	52d1      	strh	r1, [r2, r3]
 800735a:	6920      	ldr	r0, [r4, #16]
 800735c:	283e      	cmp	r0, #62	; 0x3e
 800735e:	d942      	bls.n	80073e6 <USB_EPStartXfer+0x5c8>
 8007360:	0946      	lsrs	r6, r0, #5
 8007362:	f010 0f1f 	tst.w	r0, #31
 8007366:	bf08      	it	eq
 8007368:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800736c:	5ad1      	ldrh	r1, [r2, r3]
 800736e:	b289      	uxth	r1, r1
 8007370:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8007374:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8007378:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800737c:	b289      	uxth	r1, r1
 800737e:	52d1      	strh	r1, [r2, r3]
        if (ep->xfer_count != 0U)
 8007380:	69e3      	ldr	r3, [r4, #28]
 8007382:	2b00      	cmp	r3, #0
 8007384:	f43f ad7c 	beq.w	8006e80 <USB_EPStartXfer+0x62>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007388:	7822      	ldrb	r2, [r4, #0]
 800738a:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800738e:	f244 0340 	movw	r3, #16448	; 0x4040
 8007392:	ea03 0001 	and.w	r0, r3, r1
 8007396:	438b      	bics	r3, r1
 8007398:	d002      	beq.n	80073a0 <USB_EPStartXfer+0x582>
 800739a:	2800      	cmp	r0, #0
 800739c:	f47f ad70 	bne.w	8006e80 <USB_EPStartXfer+0x62>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80073a0:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073b6:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80073ba:	e561      	b.n	8006e80 <USB_EPStartXfer+0x62>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80073bc:	b938      	cbnz	r0, 80073ce <USB_EPStartXfer+0x5b0>
 80073be:	5ad1      	ldrh	r1, [r2, r3]
 80073c0:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80073c4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80073c8:	b289      	uxth	r1, r1
 80073ca:	52d1      	strh	r1, [r2, r3]
 80073cc:	e7b6      	b.n	800733c <USB_EPStartXfer+0x51e>
 80073ce:	0846      	lsrs	r6, r0, #1
 80073d0:	f010 0f01 	tst.w	r0, #1
 80073d4:	bf18      	it	ne
 80073d6:	3601      	addne	r6, #1
 80073d8:	5ad1      	ldrh	r1, [r2, r3]
 80073da:	b289      	uxth	r1, r1
 80073dc:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80073e0:	b289      	uxth	r1, r1
 80073e2:	52d1      	strh	r1, [r2, r3]
 80073e4:	e7aa      	b.n	800733c <USB_EPStartXfer+0x51e>
 80073e6:	b938      	cbnz	r0, 80073f8 <USB_EPStartXfer+0x5da>
 80073e8:	5ad1      	ldrh	r1, [r2, r3]
 80073ea:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80073ee:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80073f2:	b289      	uxth	r1, r1
 80073f4:	52d1      	strh	r1, [r2, r3]
 80073f6:	e7c3      	b.n	8007380 <USB_EPStartXfer+0x562>
 80073f8:	0846      	lsrs	r6, r0, #1
 80073fa:	f010 0f01 	tst.w	r0, #1
 80073fe:	bf18      	it	ne
 8007400:	3601      	addne	r6, #1
 8007402:	5ad1      	ldrh	r1, [r2, r3]
 8007404:	b289      	uxth	r1, r1
 8007406:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 800740a:	b289      	uxth	r1, r1
 800740c:	52d1      	strh	r1, [r2, r3]
 800740e:	e7b7      	b.n	8007380 <USB_EPStartXfer+0x562>
 8007410:	2b01      	cmp	r3, #1
 8007412:	d1b5      	bne.n	8007380 <USB_EPStartXfer+0x562>
 8007414:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8007418:	b299      	uxth	r1, r3
 800741a:	7822      	ldrb	r2, [r4, #0]
 800741c:	0112      	lsls	r2, r2, #4
 800741e:	f205 430c 	addw	r3, r5, #1036	; 0x40c
 8007422:	440b      	add	r3, r1
 8007424:	8a21      	ldrh	r1, [r4, #16]
 8007426:	52d1      	strh	r1, [r2, r3]
 8007428:	e7aa      	b.n	8007380 <USB_EPStartXfer+0x562>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800742a:	b9ea      	cbnz	r2, 8007468 <USB_EPStartXfer+0x64a>
 800742c:	5ac8      	ldrh	r0, [r1, r3]
 800742e:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8007432:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8007436:	b280      	uxth	r0, r0
 8007438:	52c8      	strh	r0, [r1, r3]
 800743a:	7863      	ldrb	r3, [r4, #1]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d139      	bne.n	80074b4 <USB_EPStartXfer+0x696>
 8007440:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8007444:	b29b      	uxth	r3, r3
 8007446:	7821      	ldrb	r1, [r4, #0]
 8007448:	0109      	lsls	r1, r1, #4
 800744a:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 800744e:	441a      	add	r2, r3
 8007450:	5a8b      	ldrh	r3, [r1, r2]
 8007452:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007456:	528b      	strh	r3, [r1, r2]
 8007458:	5a8b      	ldrh	r3, [r1, r2]
 800745a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800745e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007462:	b29b      	uxth	r3, r3
 8007464:	528b      	strh	r3, [r1, r2]
 8007466:	e50b      	b.n	8006e80 <USB_EPStartXfer+0x62>
 8007468:	0856      	lsrs	r6, r2, #1
 800746a:	f012 0701 	ands.w	r7, r2, #1
 800746e:	bf14      	ite	ne
 8007470:	f106 0c01 	addne.w	ip, r6, #1
 8007474:	46b4      	moveq	ip, r6
 8007476:	5ac8      	ldrh	r0, [r1, r3]
 8007478:	b280      	uxth	r0, r0
 800747a:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 800747e:	b280      	uxth	r0, r0
 8007480:	52c8      	strh	r0, [r1, r3]
 8007482:	7863      	ldrb	r3, [r4, #1]
 8007484:	b9b3      	cbnz	r3, 80074b4 <USB_EPStartXfer+0x696>
 8007486:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800748a:	b29b      	uxth	r3, r3
 800748c:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8007490:	441a      	add	r2, r3
 8007492:	7821      	ldrb	r1, [r4, #0]
 8007494:	0109      	lsls	r1, r1, #4
 8007496:	5a53      	ldrh	r3, [r2, r1]
 8007498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800749c:	5253      	strh	r3, [r2, r1]
 800749e:	b107      	cbz	r7, 80074a2 <USB_EPStartXfer+0x684>
 80074a0:	3601      	adds	r6, #1
 80074a2:	5a53      	ldrh	r3, [r2, r1]
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	5253      	strh	r3, [r2, r1]
 80074ae:	e4e7      	b.n	8006e80 <USB_EPStartXfer+0x62>
 80074b0:	3e01      	subs	r6, #1
 80074b2:	e717      	b.n	80072e4 <USB_EPStartXfer+0x4c6>
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	f47f ace3 	bne.w	8006e80 <USB_EPStartXfer+0x62>
 80074ba:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80074be:	b29b      	uxth	r3, r3
 80074c0:	7821      	ldrb	r1, [r4, #0]
 80074c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074c6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80074ca:	b292      	uxth	r2, r2
 80074cc:	52ea      	strh	r2, [r5, r3]
 80074ce:	e4d7      	b.n	8006e80 <USB_EPStartXfer+0x62>
        return HAL_ERROR;
 80074d0:	2001      	movs	r0, #1
 80074d2:	e4e6      	b.n	8006ea2 <USB_EPStartXfer+0x84>

080074d4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80074d4:	b530      	push	{r4, r5, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80074d6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80074da:	f500 6480 	add.w	r4, r0, #1024	; 0x400

  for (count = n; count != 0U; count--)
 80074de:	085d      	lsrs	r5, r3, #1
 80074e0:	d012      	beq.n	8007508 <USB_ReadPMA+0x34>
 80074e2:	1c88      	adds	r0, r1, #2
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80074e4:	46a6      	mov	lr, r4
  for (count = n; count != 0U; count--)
 80074e6:	46ac      	mov	ip, r5
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80074e8:	f83e 2b04 	ldrh.w	r2, [lr], #4
 80074ec:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80074ee:	f800 2c02 	strb.w	r2, [r0, #-2]
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80074f2:	0a12      	lsrs	r2, r2, #8
 80074f4:	f800 2c01 	strb.w	r2, [r0, #-1]
  for (count = n; count != 0U; count--)
 80074f8:	3002      	adds	r0, #2
 80074fa:	f1bc 0c01 	subs.w	ip, ip, #1
 80074fe:	d1f3      	bne.n	80074e8 <USB_ReadPMA+0x14>
    pBuf++;
 8007500:	eb01 0145 	add.w	r1, r1, r5, lsl #1

#if PMA_ACCESS > 1U
    pdwVal++;
 8007504:	eb04 0485 	add.w	r4, r4, r5, lsl #2
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007508:	f013 0f01 	tst.w	r3, #1
  {
    RdVal = *pdwVal;
 800750c:	bf1c      	itt	ne
 800750e:	8823      	ldrhne	r3, [r4, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007510:	700b      	strbne	r3, [r1, #0]
  }
}
 8007512:	bd30      	pop	{r4, r5, pc}

08007514 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007514:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8007518:	b183      	cbz	r3, 800753c <USBD_CDC_EP0_RxReady+0x28>
{
 800751a:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800751c:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007520:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8007524:	28ff      	cmp	r0, #255	; 0xff
 8007526:	d007      	beq.n	8007538 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800752e:	4621      	mov	r1, r4
 8007530:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8007532:	23ff      	movs	r3, #255	; 0xff
 8007534:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8007538:	2000      	movs	r0, #0
 800753a:	bd10      	pop	{r4, pc}
 800753c:	2000      	movs	r0, #0
 800753e:	4770      	bx	lr

08007540 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007540:	2343      	movs	r3, #67	; 0x43
 8007542:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8007544:	4800      	ldr	r0, [pc, #0]	; (8007548 <USBD_CDC_GetFSCfgDesc+0x8>)
 8007546:	4770      	bx	lr
 8007548:	20000044 	.word	0x20000044

0800754c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800754c:	2343      	movs	r3, #67	; 0x43
 800754e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8007550:	4800      	ldr	r0, [pc, #0]	; (8007554 <USBD_CDC_GetHSCfgDesc+0x8>)
 8007552:	4770      	bx	lr
 8007554:	20000088 	.word	0x20000088

08007558 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007558:	2343      	movs	r3, #67	; 0x43
 800755a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800755c:	4800      	ldr	r0, [pc, #0]	; (8007560 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800755e:	4770      	bx	lr
 8007560:	200000d8 	.word	0x200000d8

08007564 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007564:	230a      	movs	r3, #10
 8007566:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8007568:	4800      	ldr	r0, [pc, #0]	; (800756c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800756a:	4770      	bx	lr
 800756c:	200000cc 	.word	0x200000cc

08007570 <USBD_CDC_DataOut>:
{
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007574:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007578:	f000 ffc4 	bl	8008504 <USBD_LL_GetRxDataSize>
 800757c:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8007580:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8007584:	b14b      	cbz	r3, 800759a <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007586:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8007590:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8007594:	4798      	blx	r3
    return USBD_OK;
 8007596:	2000      	movs	r0, #0
}
 8007598:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800759a:	2002      	movs	r0, #2
 800759c:	e7fc      	b.n	8007598 <USBD_CDC_DataOut+0x28>

0800759e <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800759e:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 80075a2:	b312      	cbz	r2, 80075ea <USBD_CDC_DataIn+0x4c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80075a4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80075a8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	b1f3      	cbz	r3, 80075ee <USBD_CDC_DataIn+0x50>
{
 80075b0:	b510      	push	{r4, lr}
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80075b2:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 80075b6:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 80075ba:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 80075be:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80075c0:	fbb3 fcf4 	udiv	ip, r3, r4
 80075c4:	fb04 331c 	mls	r3, r4, ip, r3
 80075c8:	b11b      	cbz	r3, 80075d2 <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 80075ca:	2000      	movs	r0, #0
 80075cc:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
}
 80075d0:	bd10      	pop	{r4, pc}
      pdev->ep_in[epnum].total_length = 0U;
 80075d2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80075d6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80075da:	2400      	movs	r4, #0
 80075dc:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80075de:	4623      	mov	r3, r4
 80075e0:	4622      	mov	r2, r4
 80075e2:	f000 ff7f 	bl	80084e4 <USBD_LL_Transmit>
    return USBD_OK;
 80075e6:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80075e8:	e7f2      	b.n	80075d0 <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 80075ea:	2002      	movs	r0, #2
 80075ec:	4770      	bx	lr
      hcdc->TxState = 0U;
 80075ee:	2000      	movs	r0, #0
 80075f0:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
}
 80075f4:	4770      	bx	lr

080075f6 <USBD_CDC_Setup>:
{
 80075f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075f8:	b083      	sub	sp, #12
 80075fa:	4606      	mov	r6, r0
 80075fc:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075fe:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8007608:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800760c:	780b      	ldrb	r3, [r1, #0]
 800760e:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8007612:	d027      	beq.n	8007664 <USBD_CDC_Setup+0x6e>
 8007614:	2d20      	cmp	r5, #32
 8007616:	d153      	bne.n	80076c0 <USBD_CDC_Setup+0xca>
      if (req->wLength)
 8007618:	88ca      	ldrh	r2, [r1, #6]
 800761a:	b1da      	cbz	r2, 8007654 <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 800761c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007620:	d00c      	beq.n	800763c <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007622:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	4639      	mov	r1, r7
 800762a:	7860      	ldrb	r0, [r4, #1]
 800762c:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800762e:	88e2      	ldrh	r2, [r4, #6]
 8007630:	4639      	mov	r1, r7
 8007632:	4630      	mov	r0, r6
 8007634:	f000 fd4a 	bl	80080cc <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8007638:	2500      	movs	r5, #0
 800763a:	e044      	b.n	80076c6 <USBD_CDC_Setup+0xd0>
          hcdc->CmdOpCode = req->bRequest;
 800763c:	784b      	ldrb	r3, [r1, #1]
 800763e:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007642:	88cb      	ldrh	r3, [r1, #6]
 8007644:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007648:	88ca      	ldrh	r2, [r1, #6]
 800764a:	4639      	mov	r1, r7
 800764c:	f000 fd53 	bl	80080f6 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8007650:	2500      	movs	r5, #0
 8007652:	e038      	b.n	80076c6 <USBD_CDC_Setup+0xd0>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007654:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	2200      	movs	r2, #0
 800765c:	7848      	ldrb	r0, [r1, #1]
 800765e:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8007660:	2500      	movs	r5, #0
 8007662:	e030      	b.n	80076c6 <USBD_CDC_Setup+0xd0>
      switch (req->bRequest)
 8007664:	784f      	ldrb	r7, [r1, #1]
 8007666:	2f0a      	cmp	r7, #10
 8007668:	d014      	beq.n	8007694 <USBD_CDC_Setup+0x9e>
 800766a:	2f0b      	cmp	r7, #11
 800766c:	d020      	beq.n	80076b0 <USBD_CDC_Setup+0xba>
 800766e:	b11f      	cbz	r7, 8007678 <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 8007670:	f000 fa3e 	bl	8007af0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007674:	2502      	movs	r5, #2
 8007676:	e026      	b.n	80076c6 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007678:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800767c:	2b03      	cmp	r3, #3
 800767e:	d003      	beq.n	8007688 <USBD_CDC_Setup+0x92>
            USBD_CtlError(pdev, req);
 8007680:	f000 fa36 	bl	8007af0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007684:	2502      	movs	r5, #2
 8007686:	e01e      	b.n	80076c6 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007688:	2202      	movs	r2, #2
 800768a:	a901      	add	r1, sp, #4
 800768c:	f000 fd1e 	bl	80080cc <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8007690:	463d      	mov	r5, r7
 8007692:	e018      	b.n	80076c6 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007694:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007698:	2b03      	cmp	r3, #3
 800769a:	d003      	beq.n	80076a4 <USBD_CDC_Setup+0xae>
            USBD_CtlError(pdev, req);
 800769c:	f000 fa28 	bl	8007af0 <USBD_CtlError>
            ret = USBD_FAIL;
 80076a0:	2502      	movs	r5, #2
 80076a2:	e010      	b.n	80076c6 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80076a4:	2201      	movs	r2, #1
 80076a6:	f10d 0107 	add.w	r1, sp, #7
 80076aa:	f000 fd0f 	bl	80080cc <USBD_CtlSendData>
 80076ae:	e00a      	b.n	80076c6 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80076b0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80076b4:	2b03      	cmp	r3, #3
 80076b6:	d006      	beq.n	80076c6 <USBD_CDC_Setup+0xd0>
            USBD_CtlError(pdev, req);
 80076b8:	f000 fa1a 	bl	8007af0 <USBD_CtlError>
            ret = USBD_FAIL;
 80076bc:	2502      	movs	r5, #2
 80076be:	e002      	b.n	80076c6 <USBD_CDC_Setup+0xd0>
      USBD_CtlError(pdev, req);
 80076c0:	f000 fa16 	bl	8007af0 <USBD_CtlError>
      ret = USBD_FAIL;
 80076c4:	2502      	movs	r5, #2
}
 80076c6:	4628      	mov	r0, r5
 80076c8:	b003      	add	sp, #12
 80076ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076cc <USBD_CDC_DeInit>:
{
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80076d0:	2181      	movs	r1, #129	; 0x81
 80076d2:	f000 fed0 	bl	8008476 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80076d6:	2500      	movs	r5, #0
 80076d8:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80076da:	2101      	movs	r1, #1
 80076dc:	4620      	mov	r0, r4
 80076de:	f000 feca 	bl	8008476 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80076e2:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80076e6:	2182      	movs	r1, #130	; 0x82
 80076e8:	4620      	mov	r0, r4
 80076ea:	f000 fec4 	bl	8008476 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80076ee:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 80076f0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80076f4:	b14b      	cbz	r3, 800770a <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80076f6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80076fe:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8007702:	f000 ff09 	bl	8008518 <USBD_static_free>
    pdev->pClassData = NULL;
 8007706:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 800770a:	2000      	movs	r0, #0
 800770c:	bd38      	pop	{r3, r4, r5, pc}

0800770e <USBD_CDC_Init>:
{
 800770e:	b570      	push	{r4, r5, r6, lr}
 8007710:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007712:	7c03      	ldrb	r3, [r0, #16]
 8007714:	bbab      	cbnz	r3, 8007782 <USBD_CDC_Init+0x74>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007716:	f44f 7300 	mov.w	r3, #512	; 0x200
 800771a:	2202      	movs	r2, #2
 800771c:	2181      	movs	r1, #129	; 0x81
 800771e:	f000 fe9f 	bl	8008460 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007722:	2501      	movs	r5, #1
 8007724:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800772a:	2202      	movs	r2, #2
 800772c:	4629      	mov	r1, r5
 800772e:	4620      	mov	r0, r4
 8007730:	f000 fe96 	bl	8008460 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007734:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007738:	2308      	movs	r3, #8
 800773a:	2203      	movs	r2, #3
 800773c:	2182      	movs	r1, #130	; 0x82
 800773e:	4620      	mov	r0, r4
 8007740:	f000 fe8e 	bl	8008460 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007744:	2301      	movs	r3, #1
 8007746:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007748:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800774c:	f000 fee0 	bl	8008510 <USBD_static_malloc>
 8007750:	4605      	mov	r5, r0
 8007752:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8007756:	b368      	cbz	r0, 80077b4 <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007758:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4798      	blx	r3
    hcdc->TxState = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8007766:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800776a:	7c26      	ldrb	r6, [r4, #16]
 800776c:	b9ce      	cbnz	r6, 80077a2 <USBD_CDC_Init+0x94>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800776e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007772:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8007776:	2101      	movs	r1, #1
 8007778:	4620      	mov	r0, r4
 800777a:	f000 febb 	bl	80084f4 <USBD_LL_PrepareReceive>
}
 800777e:	4630      	mov	r0, r6
 8007780:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007782:	2340      	movs	r3, #64	; 0x40
 8007784:	2202      	movs	r2, #2
 8007786:	2181      	movs	r1, #129	; 0x81
 8007788:	f000 fe6a 	bl	8008460 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800778c:	2501      	movs	r5, #1
 800778e:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007790:	2340      	movs	r3, #64	; 0x40
 8007792:	2202      	movs	r2, #2
 8007794:	4629      	mov	r1, r5
 8007796:	4620      	mov	r0, r4
 8007798:	f000 fe62 	bl	8008460 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800779c:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 80077a0:	e7ca      	b.n	8007738 <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80077a2:	2340      	movs	r3, #64	; 0x40
 80077a4:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80077a8:	2101      	movs	r1, #1
 80077aa:	4620      	mov	r0, r4
 80077ac:	f000 fea2 	bl	80084f4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80077b0:	2600      	movs	r6, #0
 80077b2:	e7e4      	b.n	800777e <USBD_CDC_Init+0x70>
    ret = 1U;
 80077b4:	2601      	movs	r6, #1
 80077b6:	e7e2      	b.n	800777e <USBD_CDC_Init+0x70>

080077b8 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80077b8:	b119      	cbz	r1, 80077c2 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 80077ba:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 80077be:	2000      	movs	r0, #0
 80077c0:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80077c2:	2002      	movs	r0, #2
  }

  return ret;
}
 80077c4:	4770      	bx	lr

080077c6 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077c6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
 80077ca:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80077ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 80077d2:	2000      	movs	r0, #0
 80077d4:	4770      	bx	lr

080077d6 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077d6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->RxBuffer = pbuff;
 80077da:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 80077de:	2000      	movs	r0, #0
 80077e0:	4770      	bx	lr

080077e2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80077e2:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077e4:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80077e8:	b192      	cbz	r2, 8007810 <USBD_CDC_ReceivePacket+0x2e>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ea:	7c04      	ldrb	r4, [r0, #16]
 80077ec:	b944      	cbnz	r4, 8007800 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80077ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077f2:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80077f6:	2101      	movs	r1, #1
 80077f8:	f000 fe7c 	bl	80084f4 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 80077fc:	4620      	mov	r0, r4
 80077fe:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8007800:	2340      	movs	r3, #64	; 0x40
 8007802:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8007806:	2101      	movs	r1, #1
 8007808:	f000 fe74 	bl	80084f4 <USBD_LL_PrepareReceive>
    return USBD_OK;
 800780c:	2400      	movs	r4, #0
 800780e:	e7f5      	b.n	80077fc <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8007810:	2402      	movs	r4, #2
 8007812:	e7f3      	b.n	80077fc <USBD_CDC_ReceivePacket+0x1a>

08007814 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007814:	b198      	cbz	r0, 800783e <USBD_Init+0x2a>
{
 8007816:	b508      	push	{r3, lr}
 8007818:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800781a:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
 800781e:	b110      	cbz	r0, 8007826 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8007820:	2000      	movs	r0, #0
 8007822:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007826:	b109      	cbz	r1, 800782c <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8007828:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800782c:	2101      	movs	r1, #1
 800782e:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8007832:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007834:	4618      	mov	r0, r3
 8007836:	f000 fdc9 	bl	80083cc <USBD_LL_Init>

  return USBD_OK;
 800783a:	2000      	movs	r0, #0
}
 800783c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800783e:	2002      	movs	r0, #2
}
 8007840:	4770      	bx	lr

08007842 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8007842:	b119      	cbz	r1, 800784c <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007844:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8007848:	2000      	movs	r0, #0
 800784a:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800784c:	2002      	movs	r0, #2
  }

  return status;
}
 800784e:	4770      	bx	lr

08007850 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007850:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007852:	f000 fdfd 	bl	8008450 <USBD_LL_Start>

  return USBD_OK;
}
 8007856:	2000      	movs	r0, #0
 8007858:	bd08      	pop	{r3, pc}

0800785a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800785a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800785c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007860:	b12b      	cbz	r3, 800786e <USBD_SetClassConfig+0x14>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007866:	2800      	cmp	r0, #0
 8007868:	bf18      	it	ne
 800786a:	2002      	movne	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 800786c:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800786e:	2002      	movs	r0, #2
 8007870:	e7fc      	b.n	800786c <USBD_SetClassConfig+0x12>

08007872 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007872:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007874:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	4798      	blx	r3

  return USBD_OK;
}
 800787c:	2000      	movs	r0, #0
 800787e:	bd08      	pop	{r3, pc}

08007880 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007884:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8007888:	4628      	mov	r0, r5
 800788a:	f000 f91d 	bl	8007ac8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800788e:	2301      	movs	r3, #1
 8007890:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007894:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8007898:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800789c:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 80078a0:	f001 031f 	and.w	r3, r1, #31
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d00e      	beq.n	80078c6 <USBD_LL_SetupStage+0x46>
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d011      	beq.n	80078d0 <USBD_LL_SetupStage+0x50>
 80078ac:	b12b      	cbz	r3, 80078ba <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80078ae:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80078b2:	4620      	mov	r0, r4
 80078b4:	f000 fde7 	bl	8008486 <USBD_LL_StallEP>
      break;
 80078b8:	e003      	b.n	80078c2 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 80078ba:	4629      	mov	r1, r5
 80078bc:	4620      	mov	r0, r4
 80078be:	f000 f921 	bl	8007b04 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80078c2:	2000      	movs	r0, #0
 80078c4:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80078c6:	4629      	mov	r1, r5
 80078c8:	4620      	mov	r0, r4
 80078ca:	f000 fad5 	bl	8007e78 <USBD_StdItfReq>
      break;
 80078ce:	e7f8      	b.n	80078c2 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 80078d0:	4629      	mov	r1, r5
 80078d2:	4620      	mov	r0, r4
 80078d4:	f000 fb00 	bl	8007ed8 <USBD_StdEPReq>
      break;
 80078d8:	e7f3      	b.n	80078c2 <USBD_LL_SetupStage+0x42>

080078da <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80078da:	b538      	push	{r3, r4, r5, lr}
 80078dc:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80078de:	460d      	mov	r5, r1
 80078e0:	bb81      	cbnz	r1, 8007944 <USBD_LL_DataOutStage+0x6a>
 80078e2:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80078e4:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80078e8:	2a03      	cmp	r2, #3
 80078ea:	d003      	beq.n	80078f4 <USBD_LL_DataOutStage+0x1a>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80078ec:	2a05      	cmp	r2, #5
 80078ee:	d022      	beq.n	8007936 <USBD_LL_DataOutStage+0x5c>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80078f0:	4608      	mov	r0, r1
 80078f2:	e031      	b.n	8007958 <USBD_LL_DataOutStage+0x7e>
      if (pep->rem_length > pep->maxpacket)
 80078f4:	f8d0 1160 	ldr.w	r1, [r0, #352]	; 0x160
 80078f8:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 80078fc:	4291      	cmp	r1, r2
 80078fe:	d90b      	bls.n	8007918 <USBD_LL_DataOutStage+0x3e>
        pep->rem_length -= pep->maxpacket;
 8007900:	1a89      	subs	r1, r1, r2
 8007902:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8007906:	428a      	cmp	r2, r1
 8007908:	bf8c      	ite	hi
 800790a:	b28a      	uxthhi	r2, r1
 800790c:	b292      	uxthls	r2, r2
 800790e:	4619      	mov	r1, r3
 8007910:	f000 fc00 	bl	8008114 <USBD_CtlContinueRx>
  return USBD_OK;
 8007914:	4628      	mov	r0, r5
 8007916:	e01f      	b.n	8007958 <USBD_LL_DataOutStage+0x7e>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007918:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	b11b      	cbz	r3, 8007928 <USBD_LL_DataOutStage+0x4e>
 8007920:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007924:	2a03      	cmp	r2, #3
 8007926:	d004      	beq.n	8007932 <USBD_LL_DataOutStage+0x58>
        USBD_CtlSendStatus(pdev);
 8007928:	4620      	mov	r0, r4
 800792a:	f000 fbfb 	bl	8008124 <USBD_CtlSendStatus>
  return USBD_OK;
 800792e:	4628      	mov	r0, r5
 8007930:	e012      	b.n	8007958 <USBD_LL_DataOutStage+0x7e>
          pdev->pClass->EP0_RxReady(pdev);
 8007932:	4798      	blx	r3
 8007934:	e7f8      	b.n	8007928 <USBD_LL_DataOutStage+0x4e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8007936:	2100      	movs	r1, #0
 8007938:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800793c:	f000 fda3 	bl	8008486 <USBD_LL_StallEP>
  return USBD_OK;
 8007940:	4628      	mov	r0, r5
 8007942:	e009      	b.n	8007958 <USBD_LL_DataOutStage+0x7e>
  else if ((pdev->pClass->DataOut != NULL) &&
 8007944:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	b133      	cbz	r3, 800795a <USBD_LL_DataOutStage+0x80>
 800794c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007950:	2a03      	cmp	r2, #3
 8007952:	d104      	bne.n	800795e <USBD_LL_DataOutStage+0x84>
    pdev->pClass->DataOut(pdev, epnum);
 8007954:	4798      	blx	r3
  return USBD_OK;
 8007956:	2000      	movs	r0, #0
}
 8007958:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800795a:	2002      	movs	r0, #2
 800795c:	e7fc      	b.n	8007958 <USBD_LL_DataOutStage+0x7e>
 800795e:	2002      	movs	r0, #2
 8007960:	e7fa      	b.n	8007958 <USBD_LL_DataOutStage+0x7e>

08007962 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007962:	b538      	push	{r3, r4, r5, lr}
 8007964:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007966:	460d      	mov	r5, r1
 8007968:	2900      	cmp	r1, #0
 800796a:	d152      	bne.n	8007a12 <USBD_LL_DataInStage+0xb0>
 800796c:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800796e:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8007972:	2a02      	cmp	r2, #2
 8007974:	d00b      	beq.n	800798e <USBD_LL_DataInStage+0x2c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007976:	f032 0304 	bics.w	r3, r2, #4
 800797a:	d102      	bne.n	8007982 <USBD_LL_DataInStage+0x20>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800797c:	2180      	movs	r1, #128	; 0x80
 800797e:	f000 fd82 	bl	8008486 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007982:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8007986:	2b01      	cmp	r3, #1
 8007988:	d03e      	beq.n	8007a08 <USBD_LL_DataInStage+0xa6>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800798a:	4628      	mov	r0, r5
}
 800798c:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800798e:	6a01      	ldr	r1, [r0, #32]
 8007990:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007992:	4291      	cmp	r1, r2
 8007994:	d81b      	bhi.n	80079ce <USBD_LL_DataInStage+0x6c>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007996:	69c1      	ldr	r1, [r0, #28]
 8007998:	fbb1 f3f2 	udiv	r3, r1, r2
 800799c:	fb02 1313 	mls	r3, r2, r3, r1
 80079a0:	b92b      	cbnz	r3, 80079ae <USBD_LL_DataInStage+0x4c>
 80079a2:	428a      	cmp	r2, r1
 80079a4:	d803      	bhi.n	80079ae <USBD_LL_DataInStage+0x4c>
            (pep->total_length >= pep->maxpacket) &&
 80079a6:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 80079aa:	4299      	cmp	r1, r3
 80079ac:	d31c      	bcc.n	80079e8 <USBD_LL_DataInStage+0x86>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80079ae:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	b11b      	cbz	r3, 80079be <USBD_LL_DataInStage+0x5c>
 80079b6:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80079ba:	2a03      	cmp	r2, #3
 80079bc:	d021      	beq.n	8007a02 <USBD_LL_DataInStage+0xa0>
          USBD_LL_StallEP(pdev, 0x80U);
 80079be:	2180      	movs	r1, #128	; 0x80
 80079c0:	4620      	mov	r0, r4
 80079c2:	f000 fd60 	bl	8008486 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80079c6:	4620      	mov	r0, r4
 80079c8:	f000 fbb7 	bl	800813a <USBD_CtlReceiveStatus>
 80079cc:	e7d9      	b.n	8007982 <USBD_LL_DataInStage+0x20>
        pep->rem_length -= pep->maxpacket;
 80079ce:	1a8a      	subs	r2, r1, r2
 80079d0:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80079d2:	b292      	uxth	r2, r2
 80079d4:	4619      	mov	r1, r3
 80079d6:	f000 fb86 	bl	80080e6 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079da:	2300      	movs	r3, #0
 80079dc:	461a      	mov	r2, r3
 80079de:	4619      	mov	r1, r3
 80079e0:	4620      	mov	r0, r4
 80079e2:	f000 fd87 	bl	80084f4 <USBD_LL_PrepareReceive>
 80079e6:	e7cc      	b.n	8007982 <USBD_LL_DataInStage+0x20>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80079e8:	2200      	movs	r2, #0
 80079ea:	4611      	mov	r1, r2
 80079ec:	f000 fb7b 	bl	80080e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80079f0:	2100      	movs	r1, #0
 80079f2:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079f6:	460b      	mov	r3, r1
 80079f8:	460a      	mov	r2, r1
 80079fa:	4620      	mov	r0, r4
 80079fc:	f000 fd7a 	bl	80084f4 <USBD_LL_PrepareReceive>
 8007a00:	e7bf      	b.n	8007982 <USBD_LL_DataInStage+0x20>
            pdev->pClass->EP0_TxSent(pdev);
 8007a02:	4620      	mov	r0, r4
 8007a04:	4798      	blx	r3
 8007a06:	e7da      	b.n	80079be <USBD_LL_DataInStage+0x5c>
      pdev->dev_test_mode = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8007a0e:	4628      	mov	r0, r5
 8007a10:	e7bc      	b.n	800798c <USBD_LL_DataInStage+0x2a>
  else if ((pdev->pClass->DataIn != NULL) &&
 8007a12:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007a16:	695b      	ldr	r3, [r3, #20]
 8007a18:	b133      	cbz	r3, 8007a28 <USBD_LL_DataInStage+0xc6>
 8007a1a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007a1e:	2a03      	cmp	r2, #3
 8007a20:	d104      	bne.n	8007a2c <USBD_LL_DataInStage+0xca>
    pdev->pClass->DataIn(pdev, epnum);
 8007a22:	4798      	blx	r3
  return USBD_OK;
 8007a24:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8007a26:	e7b1      	b.n	800798c <USBD_LL_DataInStage+0x2a>
    return USBD_FAIL;
 8007a28:	2002      	movs	r0, #2
 8007a2a:	e7af      	b.n	800798c <USBD_LL_DataInStage+0x2a>
 8007a2c:	2002      	movs	r0, #2
 8007a2e:	e7ad      	b.n	800798c <USBD_LL_DataInStage+0x2a>

08007a30 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a30:	b570      	push	{r4, r5, r6, lr}
 8007a32:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a34:	2340      	movs	r3, #64	; 0x40
 8007a36:	2200      	movs	r2, #0
 8007a38:	4611      	mov	r1, r2
 8007a3a:	f000 fd11 	bl	8008460 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a3e:	2501      	movs	r5, #1
 8007a40:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a44:	2640      	movs	r6, #64	; 0x40
 8007a46:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a4a:	4633      	mov	r3, r6
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	2180      	movs	r1, #128	; 0x80
 8007a50:	4620      	mov	r0, r4
 8007a52:	f000 fd05 	bl	8008460 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a56:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a58:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a5a:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8007a64:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a66:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 8007a6a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8007a6e:	b12b      	cbz	r3, 8007a7c <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007a70:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	2100      	movs	r1, #0
 8007a78:	4620      	mov	r0, r4
 8007a7a:	4798      	blx	r3
  }

  return USBD_OK;
}
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	bd70      	pop	{r4, r5, r6, pc}

08007a80 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8007a80:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8007a82:	2000      	movs	r0, #0
 8007a84:	4770      	bx	lr

08007a86 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8007a86:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007a8a:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007a8e:	2304      	movs	r3, #4
 8007a90:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8007a94:	2000      	movs	r0, #0
 8007a96:	4770      	bx	lr

08007a98 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a98:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007a9c:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a9e:	bf04      	itt	eq
 8007aa0:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8007aa4:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	4770      	bx	lr

08007aac <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007aac:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aae:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	d001      	beq.n	8007aba <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8007ab6:	2000      	movs	r0, #0
 8007ab8:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8007aba:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007abe:	69db      	ldr	r3, [r3, #28]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d0f8      	beq.n	8007ab6 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8007ac4:	4798      	blx	r3
 8007ac6:	e7f6      	b.n	8007ab6 <USBD_LL_SOF+0xa>

08007ac8 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest = *(uint8_t *)(pdata);
 8007ac8:	780b      	ldrb	r3, [r1, #0]
 8007aca:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007acc:	784b      	ldrb	r3, [r1, #1]
 8007ace:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007ad0:	78ca      	ldrb	r2, [r1, #3]
 8007ad2:	788b      	ldrb	r3, [r1, #2]
 8007ad4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007ad8:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007ada:	794a      	ldrb	r2, [r1, #5]
 8007adc:	790b      	ldrb	r3, [r1, #4]
 8007ade:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007ae2:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007ae4:	79ca      	ldrb	r2, [r1, #7]
 8007ae6:	798b      	ldrb	r3, [r1, #6]
 8007ae8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007aec:	80c3      	strh	r3, [r0, #6]

}
 8007aee:	4770      	bx	lr

08007af0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007af0:	b510      	push	{r4, lr}
 8007af2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8007af4:	2180      	movs	r1, #128	; 0x80
 8007af6:	f000 fcc6 	bl	8008486 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007afa:	2100      	movs	r1, #0
 8007afc:	4620      	mov	r0, r4
 8007afe:	f000 fcc2 	bl	8008486 <USBD_LL_StallEP>
}
 8007b02:	bd10      	pop	{r4, pc}

08007b04 <USBD_StdDevReq>:
{
 8007b04:	b530      	push	{r4, r5, lr}
 8007b06:	b083      	sub	sp, #12
 8007b08:	4605      	mov	r5, r0
 8007b0a:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b0c:	780b      	ldrb	r3, [r1, #0]
 8007b0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b12:	2b20      	cmp	r3, #32
 8007b14:	d005      	beq.n	8007b22 <USBD_StdDevReq+0x1e>
 8007b16:	2b40      	cmp	r3, #64	; 0x40
 8007b18:	d003      	beq.n	8007b22 <USBD_StdDevReq+0x1e>
 8007b1a:	b15b      	cbz	r3, 8007b34 <USBD_StdDevReq+0x30>
      USBD_CtlError(pdev, req);
 8007b1c:	f7ff ffe8 	bl	8007af0 <USBD_CtlError>
      break;
 8007b20:	e005      	b.n	8007b2e <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 8007b22:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	4621      	mov	r1, r4
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	4798      	blx	r3
}
 8007b2e:	2000      	movs	r0, #0
 8007b30:	b003      	add	sp, #12
 8007b32:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8007b34:	784b      	ldrb	r3, [r1, #1]
 8007b36:	2b09      	cmp	r3, #9
 8007b38:	f200 8198 	bhi.w	8007e6c <USBD_StdDevReq+0x368>
 8007b3c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007b40:	0184015f 	.word	0x0184015f
 8007b44:	017b0196 	.word	0x017b0196
 8007b48:	00c90196 	.word	0x00c90196
 8007b4c:	0196000a 	.word	0x0196000a
 8007b50:	00ee0140 	.word	0x00ee0140
  uint16_t len = 0U;
 8007b54:	2300      	movs	r3, #0
 8007b56:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8007b5a:	884a      	ldrh	r2, [r1, #2]
 8007b5c:	0a13      	lsrs	r3, r2, #8
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	2b06      	cmp	r3, #6
 8007b62:	f200 80a4 	bhi.w	8007cae <USBD_StdDevReq+0x1aa>
 8007b66:	e8df f003 	tbb	[pc, r3]
 8007b6a:	1804      	.short	0x1804
 8007b6c:	86a2a22c 	.word	0x86a2a22c
 8007b70:	93          	.byte	0x93
 8007b71:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b72:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f10d 0106 	add.w	r1, sp, #6
 8007b7c:	7c00      	ldrb	r0, [r0, #16]
 8007b7e:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8007b80:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007b84:	2a00      	cmp	r2, #0
 8007b86:	f000 809f 	beq.w	8007cc8 <USBD_StdDevReq+0x1c4>
 8007b8a:	88e3      	ldrh	r3, [r4, #6]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f040 8092 	bne.w	8007cb6 <USBD_StdDevReq+0x1b2>
      (void)USBD_CtlSendStatus(pdev);
 8007b92:	4628      	mov	r0, r5
 8007b94:	f000 fac6 	bl	8008124 <USBD_CtlSendStatus>
 8007b98:	e7c9      	b.n	8007b2e <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b9a:	7c03      	ldrb	r3, [r0, #16]
 8007b9c:	b943      	cbnz	r3, 8007bb0 <USBD_StdDevReq+0xac>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b9e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba4:	f10d 0006 	add.w	r0, sp, #6
 8007ba8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007baa:	2302      	movs	r3, #2
 8007bac:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007bae:	e7e7      	b.n	8007b80 <USBD_StdDevReq+0x7c>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007bb0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb6:	f10d 0006 	add.w	r0, sp, #6
 8007bba:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007bc0:	e7de      	b.n	8007b80 <USBD_StdDevReq+0x7c>
      switch ((uint8_t)(req->wValue))
 8007bc2:	b2d2      	uxtb	r2, r2
 8007bc4:	2a05      	cmp	r2, #5
 8007bc6:	d852      	bhi.n	8007c6e <USBD_StdDevReq+0x16a>
 8007bc8:	e8df f002 	tbb	[pc, r2]
 8007bcc:	2a1d1003 	.word	0x2a1d1003
 8007bd0:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bd2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	b123      	cbz	r3, 8007be4 <USBD_StdDevReq+0xe0>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bda:	f10d 0106 	add.w	r1, sp, #6
 8007bde:	7c00      	ldrb	r0, [r0, #16]
 8007be0:	4798      	blx	r3
 8007be2:	e7cd      	b.n	8007b80 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8007be4:	4621      	mov	r1, r4
 8007be6:	f7ff ff83 	bl	8007af0 <USBD_CtlError>
 8007bea:	e7a0      	b.n	8007b2e <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007bec:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	b123      	cbz	r3, 8007bfe <USBD_StdDevReq+0xfa>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007bf4:	f10d 0106 	add.w	r1, sp, #6
 8007bf8:	7c00      	ldrb	r0, [r0, #16]
 8007bfa:	4798      	blx	r3
 8007bfc:	e7c0      	b.n	8007b80 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8007bfe:	4621      	mov	r1, r4
 8007c00:	f7ff ff76 	bl	8007af0 <USBD_CtlError>
 8007c04:	e793      	b.n	8007b2e <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c06:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	b123      	cbz	r3, 8007c18 <USBD_StdDevReq+0x114>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c0e:	f10d 0106 	add.w	r1, sp, #6
 8007c12:	7c00      	ldrb	r0, [r0, #16]
 8007c14:	4798      	blx	r3
 8007c16:	e7b3      	b.n	8007b80 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8007c18:	4621      	mov	r1, r4
 8007c1a:	f7ff ff69 	bl	8007af0 <USBD_CtlError>
 8007c1e:	e786      	b.n	8007b2e <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c20:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	b123      	cbz	r3, 8007c32 <USBD_StdDevReq+0x12e>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c28:	f10d 0106 	add.w	r1, sp, #6
 8007c2c:	7c00      	ldrb	r0, [r0, #16]
 8007c2e:	4798      	blx	r3
 8007c30:	e7a6      	b.n	8007b80 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8007c32:	4621      	mov	r1, r4
 8007c34:	f7ff ff5c 	bl	8007af0 <USBD_CtlError>
 8007c38:	e779      	b.n	8007b2e <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c3a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007c3e:	695b      	ldr	r3, [r3, #20]
 8007c40:	b123      	cbz	r3, 8007c4c <USBD_StdDevReq+0x148>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c42:	f10d 0106 	add.w	r1, sp, #6
 8007c46:	7c00      	ldrb	r0, [r0, #16]
 8007c48:	4798      	blx	r3
 8007c4a:	e799      	b.n	8007b80 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8007c4c:	4621      	mov	r1, r4
 8007c4e:	f7ff ff4f 	bl	8007af0 <USBD_CtlError>
 8007c52:	e76c      	b.n	8007b2e <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c54:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	b123      	cbz	r3, 8007c66 <USBD_StdDevReq+0x162>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c5c:	f10d 0106 	add.w	r1, sp, #6
 8007c60:	7c00      	ldrb	r0, [r0, #16]
 8007c62:	4798      	blx	r3
 8007c64:	e78c      	b.n	8007b80 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8007c66:	4621      	mov	r1, r4
 8007c68:	f7ff ff42 	bl	8007af0 <USBD_CtlError>
 8007c6c:	e75f      	b.n	8007b2e <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8007c6e:	4621      	mov	r1, r4
 8007c70:	f7ff ff3e 	bl	8007af0 <USBD_CtlError>
 8007c74:	e75b      	b.n	8007b2e <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c76:	7c03      	ldrb	r3, [r0, #16]
 8007c78:	b933      	cbnz	r3, 8007c88 <USBD_StdDevReq+0x184>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007c7a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c80:	f10d 0006 	add.w	r0, sp, #6
 8007c84:	4798      	blx	r3
 8007c86:	e77b      	b.n	8007b80 <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 8007c88:	4621      	mov	r1, r4
 8007c8a:	f7ff ff31 	bl	8007af0 <USBD_CtlError>
 8007c8e:	e74e      	b.n	8007b2e <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c90:	7c03      	ldrb	r3, [r0, #16]
 8007c92:	b943      	cbnz	r3, 8007ca6 <USBD_StdDevReq+0x1a2>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007c94:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9a:	f10d 0006 	add.w	r0, sp, #6
 8007c9e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ca0:	2307      	movs	r3, #7
 8007ca2:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007ca4:	e76c      	b.n	8007b80 <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 8007ca6:	4621      	mov	r1, r4
 8007ca8:	f7ff ff22 	bl	8007af0 <USBD_CtlError>
 8007cac:	e73f      	b.n	8007b2e <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8007cae:	4621      	mov	r1, r4
 8007cb0:	f7ff ff1e 	bl	8007af0 <USBD_CtlError>
    return;
 8007cb4:	e73b      	b.n	8007b2e <USBD_StdDevReq+0x2a>
      len = MIN(len, req->wLength);
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	bf28      	it	cs
 8007cba:	461a      	movcs	r2, r3
 8007cbc:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007cc0:	4601      	mov	r1, r0
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	f000 fa02 	bl	80080cc <USBD_CtlSendData>
    if (req->wLength == 0U)
 8007cc8:	88e3      	ldrh	r3, [r4, #6]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f47f af2f 	bne.w	8007b2e <USBD_StdDevReq+0x2a>
 8007cd0:	e75f      	b.n	8007b92 <USBD_StdDevReq+0x8e>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007cd2:	888b      	ldrh	r3, [r1, #4]
 8007cd4:	b9eb      	cbnz	r3, 8007d12 <USBD_StdDevReq+0x20e>
 8007cd6:	88cb      	ldrh	r3, [r1, #6]
 8007cd8:	b9db      	cbnz	r3, 8007d12 <USBD_StdDevReq+0x20e>
 8007cda:	884b      	ldrh	r3, [r1, #2]
 8007cdc:	2b7f      	cmp	r3, #127	; 0x7f
 8007cde:	d818      	bhi.n	8007d12 <USBD_StdDevReq+0x20e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ce0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007ce4:	2a03      	cmp	r2, #3
 8007ce6:	d00d      	beq.n	8007d04 <USBD_StdDevReq+0x200>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ce8:	b2dc      	uxtb	r4, r3
      pdev->dev_address = dev_addr;
 8007cea:	f880 429e 	strb.w	r4, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007cee:	4621      	mov	r1, r4
 8007cf0:	f000 fbf0 	bl	80084d4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	f000 fa15 	bl	8008124 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8007cfa:	b134      	cbz	r4, 8007d0a <USBD_StdDevReq+0x206>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8007d02:	e714      	b.n	8007b2e <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8007d04:	f7ff fef4 	bl	8007af0 <USBD_CtlError>
 8007d08:	e711      	b.n	8007b2e <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8007d10:	e70d      	b.n	8007b2e <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8007d12:	4621      	mov	r1, r4
 8007d14:	4628      	mov	r0, r5
 8007d16:	f7ff feeb 	bl	8007af0 <USBD_CtlError>
 8007d1a:	e708      	b.n	8007b2e <USBD_StdDevReq+0x2a>
  cfgidx = (uint8_t)(req->wValue);
 8007d1c:	788b      	ldrb	r3, [r1, #2]
 8007d1e:	4a55      	ldr	r2, [pc, #340]	; (8007e74 <USBD_StdDevReq+0x370>)
 8007d20:	7013      	strb	r3, [r2, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d80d      	bhi.n	8007d42 <USBD_StdDevReq+0x23e>
    switch (pdev->dev_state)
 8007d26:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007d2a:	2a02      	cmp	r2, #2
 8007d2c:	d00c      	beq.n	8007d48 <USBD_StdDevReq+0x244>
 8007d2e:	2a03      	cmp	r2, #3
 8007d30:	d020      	beq.n	8007d74 <USBD_StdDevReq+0x270>
        USBD_CtlError(pdev, req);
 8007d32:	f7ff fedd 	bl	8007af0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007d36:	4b4f      	ldr	r3, [pc, #316]	; (8007e74 <USBD_StdDevReq+0x370>)
 8007d38:	7819      	ldrb	r1, [r3, #0]
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	f7ff fd99 	bl	8007872 <USBD_ClrClassConfig>
        break;
 8007d40:	e6f5      	b.n	8007b2e <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8007d42:	f7ff fed5 	bl	8007af0 <USBD_CtlError>
 8007d46:	e6f2      	b.n	8007b2e <USBD_StdDevReq+0x2a>
        if (cfgidx)
 8007d48:	b18b      	cbz	r3, 8007d6e <USBD_StdDevReq+0x26a>
          pdev->dev_config = cfgidx;
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d54:	f7ff fd81 	bl	800785a <USBD_SetClassConfig>
 8007d58:	2802      	cmp	r0, #2
 8007d5a:	d003      	beq.n	8007d64 <USBD_StdDevReq+0x260>
          USBD_CtlSendStatus(pdev);
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	f000 f9e1 	bl	8008124 <USBD_CtlSendStatus>
 8007d62:	e6e4      	b.n	8007b2e <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 8007d64:	4621      	mov	r1, r4
 8007d66:	4628      	mov	r0, r5
 8007d68:	f7ff fec2 	bl	8007af0 <USBD_CtlError>
            return;
 8007d6c:	e6df      	b.n	8007b2e <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 8007d6e:	f000 f9d9 	bl	8008124 <USBD_CtlSendStatus>
 8007d72:	e6dc      	b.n	8007b2e <USBD_StdDevReq+0x2a>
        if (cfgidx == 0U)
 8007d74:	b18b      	cbz	r3, 8007d9a <USBD_StdDevReq+0x296>
        else if (cfgidx != pdev->dev_config)
 8007d76:	6841      	ldr	r1, [r0, #4]
 8007d78:	2901      	cmp	r1, #1
 8007d7a:	d01e      	beq.n	8007dba <USBD_StdDevReq+0x2b6>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d7c:	b2c9      	uxtb	r1, r1
 8007d7e:	f7ff fd78 	bl	8007872 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007d82:	4b3c      	ldr	r3, [pc, #240]	; (8007e74 <USBD_StdDevReq+0x370>)
 8007d84:	7819      	ldrb	r1, [r3, #0]
 8007d86:	6069      	str	r1, [r5, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d88:	4628      	mov	r0, r5
 8007d8a:	f7ff fd66 	bl	800785a <USBD_SetClassConfig>
 8007d8e:	2802      	cmp	r0, #2
 8007d90:	d00e      	beq.n	8007db0 <USBD_StdDevReq+0x2ac>
          USBD_CtlSendStatus(pdev);
 8007d92:	4628      	mov	r0, r5
 8007d94:	f000 f9c6 	bl	8008124 <USBD_CtlSendStatus>
 8007d98:	e6c9      	b.n	8007b2e <USBD_StdDevReq+0x2a>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007da0:	2100      	movs	r1, #0
 8007da2:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007da4:	f7ff fd65 	bl	8007872 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007da8:	4628      	mov	r0, r5
 8007daa:	f000 f9bb 	bl	8008124 <USBD_CtlSendStatus>
 8007dae:	e6be      	b.n	8007b2e <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 8007db0:	4621      	mov	r1, r4
 8007db2:	4628      	mov	r0, r5
 8007db4:	f7ff fe9c 	bl	8007af0 <USBD_CtlError>
            return;
 8007db8:	e6b9      	b.n	8007b2e <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 8007dba:	f000 f9b3 	bl	8008124 <USBD_CtlSendStatus>
 8007dbe:	e6b6      	b.n	8007b2e <USBD_StdDevReq+0x2a>
  if (req->wLength != 1U)
 8007dc0:	88cb      	ldrh	r3, [r1, #6]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d10a      	bne.n	8007ddc <USBD_StdDevReq+0x2d8>
    switch (pdev->dev_state)
 8007dc6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d909      	bls.n	8007de2 <USBD_StdDevReq+0x2de>
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d108      	bne.n	8007de4 <USBD_StdDevReq+0x2e0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	1d01      	adds	r1, r0, #4
 8007dd6:	f000 f979 	bl	80080cc <USBD_CtlSendData>
        break;
 8007dda:	e6a8      	b.n	8007b2e <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8007ddc:	f7ff fe88 	bl	8007af0 <USBD_CtlError>
 8007de0:	e6a5      	b.n	8007b2e <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 8007de2:	b923      	cbnz	r3, 8007dee <USBD_StdDevReq+0x2ea>
        USBD_CtlError(pdev, req);
 8007de4:	4621      	mov	r1, r4
 8007de6:	4628      	mov	r0, r5
 8007de8:	f7ff fe82 	bl	8007af0 <USBD_CtlError>
        break;
 8007dec:	e69f      	b.n	8007b2e <USBD_StdDevReq+0x2a>
        pdev->dev_default_config = 0U;
 8007dee:	4601      	mov	r1, r0
 8007df0:	2300      	movs	r3, #0
 8007df2:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007df6:	2201      	movs	r2, #1
 8007df8:	f000 f968 	bl	80080cc <USBD_CtlSendData>
        break;
 8007dfc:	e697      	b.n	8007b2e <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8007dfe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007e02:	3b01      	subs	r3, #1
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d813      	bhi.n	8007e30 <USBD_StdDevReq+0x32c>
      if (req->wLength != 0x2U)
 8007e08:	88cb      	ldrh	r3, [r1, #6]
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d10d      	bne.n	8007e2a <USBD_StdDevReq+0x326>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8007e12:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8007e16:	b10b      	cbz	r3, 8007e1c <USBD_StdDevReq+0x318>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007e1c:	2202      	movs	r2, #2
 8007e1e:	f105 010c 	add.w	r1, r5, #12
 8007e22:	4628      	mov	r0, r5
 8007e24:	f000 f952 	bl	80080cc <USBD_CtlSendData>
      break;
 8007e28:	e681      	b.n	8007b2e <USBD_StdDevReq+0x2a>
        USBD_CtlError(pdev, req);
 8007e2a:	f7ff fe61 	bl	8007af0 <USBD_CtlError>
        break;
 8007e2e:	e67e      	b.n	8007b2e <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8007e30:	f7ff fe5e 	bl	8007af0 <USBD_CtlError>
      break;
 8007e34:	e67b      	b.n	8007b2e <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e36:	884b      	ldrh	r3, [r1, #2]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	f47f ae78 	bne.w	8007b2e <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 8007e3e:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007e42:	f000 f96f 	bl	8008124 <USBD_CtlSendStatus>
 8007e46:	e672      	b.n	8007b2e <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8007e48:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d809      	bhi.n	8007e66 <USBD_StdDevReq+0x362>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e52:	884b      	ldrh	r3, [r1, #2]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	f47f ae6a 	bne.w	8007b2e <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007e60:	f000 f960 	bl	8008124 <USBD_CtlSendStatus>
 8007e64:	e663      	b.n	8007b2e <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8007e66:	f7ff fe43 	bl	8007af0 <USBD_CtlError>
      break;
 8007e6a:	e660      	b.n	8007b2e <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8007e6c:	f7ff fe40 	bl	8007af0 <USBD_CtlError>
          break;
 8007e70:	e65d      	b.n	8007b2e <USBD_StdDevReq+0x2a>
 8007e72:	bf00      	nop
 8007e74:	200003f0 	.word	0x200003f0

08007e78 <USBD_StdItfReq>:
{
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4605      	mov	r5, r0
 8007e7c:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e7e:	780b      	ldrb	r3, [r1, #0]
 8007e80:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8007e84:	2a40      	cmp	r2, #64	; 0x40
 8007e86:	d006      	beq.n	8007e96 <USBD_StdItfReq+0x1e>
 8007e88:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007e8c:	d003      	beq.n	8007e96 <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 8007e8e:	f7ff fe2f 	bl	8007af0 <USBD_CtlError>
}
 8007e92:	2000      	movs	r0, #0
 8007e94:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8007e96:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d816      	bhi.n	8007ece <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007ea0:	7923      	ldrb	r3, [r4, #4]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d80e      	bhi.n	8007ec4 <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ea6:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	4621      	mov	r1, r4
 8007eae:	4628      	mov	r0, r5
 8007eb0:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007eb2:	88e3      	ldrh	r3, [r4, #6]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1ec      	bne.n	8007e92 <USBD_StdItfReq+0x1a>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	d1ea      	bne.n	8007e92 <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	f000 f931 	bl	8008124 <USBD_CtlSendStatus>
 8007ec2:	e7e6      	b.n	8007e92 <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 8007ec4:	4621      	mov	r1, r4
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	f7ff fe12 	bl	8007af0 <USBD_CtlError>
 8007ecc:	e7e1      	b.n	8007e92 <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 8007ece:	4621      	mov	r1, r4
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	f7ff fe0d 	bl	8007af0 <USBD_CtlError>
          break;
 8007ed6:	e7dc      	b.n	8007e92 <USBD_StdItfReq+0x1a>

08007ed8 <USBD_StdEPReq>:
{
 8007ed8:	b538      	push	{r3, r4, r5, lr}
 8007eda:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007edc:	780b      	ldrb	r3, [r1, #0]
 8007ede:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ee2:	2b20      	cmp	r3, #32
 8007ee4:	d005      	beq.n	8007ef2 <USBD_StdEPReq+0x1a>
 8007ee6:	2b40      	cmp	r3, #64	; 0x40
 8007ee8:	d003      	beq.n	8007ef2 <USBD_StdEPReq+0x1a>
 8007eea:	b14b      	cbz	r3, 8007f00 <USBD_StdEPReq+0x28>
      USBD_CtlError(pdev, req);
 8007eec:	f7ff fe00 	bl	8007af0 <USBD_CtlError>
      break;
 8007ef0:	e004      	b.n	8007efc <USBD_StdEPReq+0x24>
      pdev->pClass->Setup(pdev, req);
 8007ef2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	4620      	mov	r0, r4
 8007efa:	4798      	blx	r3
}
 8007efc:	2000      	movs	r0, #0
 8007efe:	bd38      	pop	{r3, r4, r5, pc}
  ep_addr  = LOBYTE(req->wIndex);
 8007f00:	888a      	ldrh	r2, [r1, #4]
 8007f02:	b2d0      	uxtb	r0, r2
      switch (req->bRequest)
 8007f04:	784b      	ldrb	r3, [r1, #1]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d031      	beq.n	8007f6e <USBD_StdEPReq+0x96>
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	d005      	beq.n	8007f1a <USBD_StdEPReq+0x42>
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d056      	beq.n	8007fc0 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 8007f12:	4620      	mov	r0, r4
 8007f14:	f7ff fdec 	bl	8007af0 <USBD_CtlError>
          break;
 8007f18:	e7f0      	b.n	8007efc <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 8007f1a:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d005      	beq.n	8007f2e <USBD_StdEPReq+0x56>
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d013      	beq.n	8007f4e <USBD_StdEPReq+0x76>
              USBD_CtlError(pdev, req);
 8007f26:	4620      	mov	r0, r4
 8007f28:	f7ff fde2 	bl	8007af0 <USBD_CtlError>
              break;
 8007f2c:	e7e6      	b.n	8007efc <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f2e:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8007f32:	d008      	beq.n	8007f46 <USBD_StdEPReq+0x6e>
                USBD_LL_StallEP(pdev, ep_addr);
 8007f34:	4601      	mov	r1, r0
 8007f36:	4620      	mov	r0, r4
 8007f38:	f000 faa5 	bl	8008486 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007f3c:	2180      	movs	r1, #128	; 0x80
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f000 faa1 	bl	8008486 <USBD_LL_StallEP>
 8007f44:	e7da      	b.n	8007efc <USBD_StdEPReq+0x24>
                USBD_CtlError(pdev, req);
 8007f46:	4620      	mov	r0, r4
 8007f48:	f7ff fdd2 	bl	8007af0 <USBD_CtlError>
 8007f4c:	e7d6      	b.n	8007efc <USBD_StdEPReq+0x24>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f4e:	884b      	ldrh	r3, [r1, #2]
 8007f50:	b923      	cbnz	r3, 8007f5c <USBD_StdEPReq+0x84>
                if ((ep_addr != 0x00U) &&
 8007f52:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8007f56:	d001      	beq.n	8007f5c <USBD_StdEPReq+0x84>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f58:	88cb      	ldrh	r3, [r1, #6]
 8007f5a:	b11b      	cbz	r3, 8007f64 <USBD_StdEPReq+0x8c>
              USBD_CtlSendStatus(pdev);
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f000 f8e1 	bl	8008124 <USBD_CtlSendStatus>
              break;
 8007f62:	e7cb      	b.n	8007efc <USBD_StdEPReq+0x24>
                  USBD_LL_StallEP(pdev, ep_addr);
 8007f64:	4601      	mov	r1, r0
 8007f66:	4620      	mov	r0, r4
 8007f68:	f000 fa8d 	bl	8008486 <USBD_LL_StallEP>
 8007f6c:	e7f6      	b.n	8007f5c <USBD_StdEPReq+0x84>
          switch (pdev->dev_state)
 8007f6e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d005      	beq.n	8007f82 <USBD_StdEPReq+0xaa>
 8007f76:	2b03      	cmp	r3, #3
 8007f78:	d013      	beq.n	8007fa2 <USBD_StdEPReq+0xca>
              USBD_CtlError(pdev, req);
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f7ff fdb8 	bl	8007af0 <USBD_CtlError>
              break;
 8007f80:	e7bc      	b.n	8007efc <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f82:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8007f86:	d008      	beq.n	8007f9a <USBD_StdEPReq+0xc2>
                USBD_LL_StallEP(pdev, ep_addr);
 8007f88:	4601      	mov	r1, r0
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f000 fa7b 	bl	8008486 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007f90:	2180      	movs	r1, #128	; 0x80
 8007f92:	4620      	mov	r0, r4
 8007f94:	f000 fa77 	bl	8008486 <USBD_LL_StallEP>
 8007f98:	e7b0      	b.n	8007efc <USBD_StdEPReq+0x24>
                USBD_CtlError(pdev, req);
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f7ff fda8 	bl	8007af0 <USBD_CtlError>
 8007fa0:	e7ac      	b.n	8007efc <USBD_StdEPReq+0x24>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fa2:	884b      	ldrh	r3, [r1, #2]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1a9      	bne.n	8007efc <USBD_StdEPReq+0x24>
                if ((ep_addr & 0x7FU) != 0x00U)
 8007fa8:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8007fac:	d103      	bne.n	8007fb6 <USBD_StdEPReq+0xde>
                USBD_CtlSendStatus(pdev);
 8007fae:	4620      	mov	r0, r4
 8007fb0:	f000 f8b8 	bl	8008124 <USBD_CtlSendStatus>
 8007fb4:	e7a2      	b.n	8007efc <USBD_StdEPReq+0x24>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007fb6:	4601      	mov	r1, r0
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f000 fa6c 	bl	8008496 <USBD_LL_ClearStallEP>
 8007fbe:	e7f6      	b.n	8007fae <USBD_StdEPReq+0xd6>
          switch (pdev->dev_state)
 8007fc0:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d005      	beq.n	8007fd4 <USBD_StdEPReq+0xfc>
 8007fc8:	2b03      	cmp	r3, #3
 8007fca:	d018      	beq.n	8007ffe <USBD_StdEPReq+0x126>
              USBD_CtlError(pdev, req);
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f7ff fd8f 	bl	8007af0 <USBD_CtlError>
              break;
 8007fd2:	e793      	b.n	8007efc <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fd4:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8007fd8:	d003      	beq.n	8007fe2 <USBD_StdEPReq+0x10a>
                USBD_CtlError(pdev, req);
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f7ff fd88 	bl	8007af0 <USBD_CtlError>
                break;
 8007fe0:	e78c      	b.n	8007efc <USBD_StdEPReq+0x24>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fe2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007fe6:	bf14      	ite	ne
 8007fe8:	f104 0114 	addne.w	r1, r4, #20
 8007fec:	f504 71aa 	addeq.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f000 f868 	bl	80080cc <USBD_CtlSendData>
              break;
 8007ffc:	e77e      	b.n	8007efc <USBD_StdEPReq+0x24>
              if ((ep_addr & 0x80U) == 0x80U)
 8007ffe:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008002:	d11b      	bne.n	800803c <USBD_StdEPReq+0x164>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008004:	f000 030f 	and.w	r3, r0, #15
 8008008:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800800c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008010:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8008014:	b333      	cbz	r3, 8008064 <USBD_StdEPReq+0x18c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008016:	f000 037f 	and.w	r3, r0, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800801a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800801e:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 8008022:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008026:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 800802a:	d11f      	bne.n	800806c <USBD_StdEPReq+0x194>
                pep->status = 0x0000U;
 800802c:	2300      	movs	r3, #0
 800802e:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008030:	2202      	movs	r2, #2
 8008032:	4629      	mov	r1, r5
 8008034:	4620      	mov	r0, r4
 8008036:	f000 f849 	bl	80080cc <USBD_CtlSendData>
              break;
 800803a:	e75f      	b.n	8007efc <USBD_StdEPReq+0x24>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800803c:	f000 030f 	and.w	r3, r0, #15
 8008040:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008044:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	b13b      	cbz	r3, 800805c <USBD_StdEPReq+0x184>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800804c:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8008050:	3501      	adds	r5, #1
 8008052:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8008056:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800805a:	e7e4      	b.n	8008026 <USBD_StdEPReq+0x14e>
                  USBD_CtlError(pdev, req);
 800805c:	4620      	mov	r0, r4
 800805e:	f7ff fd47 	bl	8007af0 <USBD_CtlError>
                  break;
 8008062:	e74b      	b.n	8007efc <USBD_StdEPReq+0x24>
                  USBD_CtlError(pdev, req);
 8008064:	4620      	mov	r0, r4
 8008066:	f7ff fd43 	bl	8007af0 <USBD_CtlError>
                  break;
 800806a:	e747      	b.n	8007efc <USBD_StdEPReq+0x24>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800806c:	4601      	mov	r1, r0
 800806e:	4620      	mov	r0, r4
 8008070:	f000 fa19 	bl	80084a6 <USBD_LL_IsStallEP>
 8008074:	b110      	cbz	r0, 800807c <USBD_StdEPReq+0x1a4>
                pep->status = 0x0001U;
 8008076:	2301      	movs	r3, #1
 8008078:	602b      	str	r3, [r5, #0]
 800807a:	e7d9      	b.n	8008030 <USBD_StdEPReq+0x158>
                pep->status = 0x0000U;
 800807c:	2300      	movs	r3, #0
 800807e:	602b      	str	r3, [r5, #0]
 8008080:	e7d6      	b.n	8008030 <USBD_StdEPReq+0x158>

08008082 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 8008082:	b310      	cbz	r0, 80080ca <USBD_GetString+0x48>
{
 8008084:	b510      	push	{r4, lr}
 8008086:	4684      	mov	ip, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8008088:	7803      	ldrb	r3, [r0, #0]
 800808a:	b143      	cbz	r3, 800809e <USBD_GetString+0x1c>
 800808c:	f1c0 0e01 	rsb	lr, r0, #1
  {
    len++;
 8008090:	eb00 030e 	add.w	r3, r0, lr
 8008094:	b2db      	uxtb	r3, r3
  while (*buf != '\0')
 8008096:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800809a:	2c00      	cmp	r4, #0
 800809c:	d1f8      	bne.n	8008090 <USBD_GetString+0xe>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800809e:	005b      	lsls	r3, r3, #1
 80080a0:	3302      	adds	r3, #2
 80080a2:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80080a4:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80080a6:	2303      	movs	r3, #3
 80080a8:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 80080aa:	f89c 0000 	ldrb.w	r0, [ip]
 80080ae:	b158      	cbz	r0, 80080c8 <USBD_GetString+0x46>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80080b0:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 80080b2:	2400      	movs	r4, #0
      unicode[idx++] = *desc++;
 80080b4:	1c5a      	adds	r2, r3, #1
 80080b6:	b2d2      	uxtb	r2, r2
 80080b8:	54c8      	strb	r0, [r1, r3]
      unicode[idx++] =  0U;
 80080ba:	3302      	adds	r3, #2
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	548c      	strb	r4, [r1, r2]
    while (*desc != '\0')
 80080c0:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 80080c4:	2800      	cmp	r0, #0
 80080c6:	d1f5      	bne.n	80080b4 <USBD_GetString+0x32>
}
 80080c8:	bd10      	pop	{r4, pc}
 80080ca:	4770      	bx	lr

080080cc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80080cc:	b508      	push	{r3, lr}
 80080ce:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080d0:	2202      	movs	r2, #2
 80080d2:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80080d6:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 80080d8:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080da:	460a      	mov	r2, r1
 80080dc:	2100      	movs	r1, #0
 80080de:	f000 fa01 	bl	80084e4 <USBD_LL_Transmit>

  return USBD_OK;
}
 80080e2:	2000      	movs	r0, #0
 80080e4:	bd08      	pop	{r3, pc}

080080e6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80080e6:	b508      	push	{r3, lr}
 80080e8:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080ea:	460a      	mov	r2, r1
 80080ec:	2100      	movs	r1, #0
 80080ee:	f000 f9f9 	bl	80084e4 <USBD_LL_Transmit>

  return USBD_OK;
}
 80080f2:	2000      	movs	r0, #0
 80080f4:	bd08      	pop	{r3, pc}

080080f6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80080f6:	b508      	push	{r3, lr}
 80080f8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80080fa:	2203      	movs	r2, #3
 80080fc:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008100:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008104:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008108:	460a      	mov	r2, r1
 800810a:	2100      	movs	r1, #0
 800810c:	f000 f9f2 	bl	80084f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008110:	2000      	movs	r0, #0
 8008112:	bd08      	pop	{r3, pc}

08008114 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008114:	b508      	push	{r3, lr}
 8008116:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008118:	460a      	mov	r2, r1
 800811a:	2100      	movs	r1, #0
 800811c:	f000 f9ea 	bl	80084f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008120:	2000      	movs	r0, #0
 8008122:	bd08      	pop	{r3, pc}

08008124 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008124:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008126:	2304      	movs	r3, #4
 8008128:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800812c:	2300      	movs	r3, #0
 800812e:	461a      	mov	r2, r3
 8008130:	4619      	mov	r1, r3
 8008132:	f000 f9d7 	bl	80084e4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008136:	2000      	movs	r0, #0
 8008138:	bd08      	pop	{r3, pc}

0800813a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800813a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800813c:	2305      	movs	r3, #5
 800813e:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008142:	2300      	movs	r3, #0
 8008144:	461a      	mov	r2, r3
 8008146:	4619      	mov	r1, r3
 8008148:	f000 f9d4 	bl	80084f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800814c:	2000      	movs	r0, #0
 800814e:	bd08      	pop	{r3, pc}

08008150 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008150:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008152:	2200      	movs	r2, #0
 8008154:	490f      	ldr	r1, [pc, #60]	; (8008194 <MX_USB_DEVICE_Init+0x44>)
 8008156:	4810      	ldr	r0, [pc, #64]	; (8008198 <MX_USB_DEVICE_Init+0x48>)
 8008158:	f7ff fb5c 	bl	8007814 <USBD_Init>
 800815c:	b970      	cbnz	r0, 800817c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800815e:	490f      	ldr	r1, [pc, #60]	; (800819c <MX_USB_DEVICE_Init+0x4c>)
 8008160:	480d      	ldr	r0, [pc, #52]	; (8008198 <MX_USB_DEVICE_Init+0x48>)
 8008162:	f7ff fb6e 	bl	8007842 <USBD_RegisterClass>
 8008166:	b960      	cbnz	r0, 8008182 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008168:	490d      	ldr	r1, [pc, #52]	; (80081a0 <MX_USB_DEVICE_Init+0x50>)
 800816a:	480b      	ldr	r0, [pc, #44]	; (8008198 <MX_USB_DEVICE_Init+0x48>)
 800816c:	f7ff fb24 	bl	80077b8 <USBD_CDC_RegisterInterface>
 8008170:	b950      	cbnz	r0, 8008188 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008172:	4809      	ldr	r0, [pc, #36]	; (8008198 <MX_USB_DEVICE_Init+0x48>)
 8008174:	f7ff fb6c 	bl	8007850 <USBD_Start>
 8008178:	b948      	cbnz	r0, 800818e <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800817a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800817c:	f7fb ffa8 	bl	80040d0 <Error_Handler>
 8008180:	e7ed      	b.n	800815e <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8008182:	f7fb ffa5 	bl	80040d0 <Error_Handler>
 8008186:	e7ef      	b.n	8008168 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8008188:	f7fb ffa2 	bl	80040d0 <Error_Handler>
 800818c:	e7f1      	b.n	8008172 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800818e:	f7fb ff9f 	bl	80040d0 <Error_Handler>
}
 8008192:	e7f2      	b.n	800817a <MX_USB_DEVICE_Init+0x2a>
 8008194:	2000012c 	.word	0x2000012c
 8008198:	200003f4 	.word	0x200003f4
 800819c:	2000000c 	.word	0x2000000c
 80081a0:	2000011c 	.word	0x2000011c

080081a4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80081a4:	2000      	movs	r0, #0
 80081a6:	4770      	bx	lr

080081a8 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80081a8:	2000      	movs	r0, #0
 80081aa:	4770      	bx	lr

080081ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80081ac:	b510      	push	{r4, lr}
 80081ae:	4601      	mov	r1, r0
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80081b0:	4c04      	ldr	r4, [pc, #16]	; (80081c4 <CDC_Receive_FS+0x18>)
 80081b2:	4620      	mov	r0, r4
 80081b4:	f7ff fb0f 	bl	80077d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80081b8:	4620      	mov	r0, r4
 80081ba:	f7ff fb12 	bl	80077e2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80081be:	2000      	movs	r0, #0
 80081c0:	bd10      	pop	{r4, pc}
 80081c2:	bf00      	nop
 80081c4:	200003f4 	.word	0x200003f4

080081c8 <CDC_Init_FS>:
{
 80081c8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80081ca:	4c06      	ldr	r4, [pc, #24]	; (80081e4 <CDC_Init_FS+0x1c>)
 80081cc:	2200      	movs	r2, #0
 80081ce:	4906      	ldr	r1, [pc, #24]	; (80081e8 <CDC_Init_FS+0x20>)
 80081d0:	4620      	mov	r0, r4
 80081d2:	f7ff faf8 	bl	80077c6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80081d6:	4905      	ldr	r1, [pc, #20]	; (80081ec <CDC_Init_FS+0x24>)
 80081d8:	4620      	mov	r0, r4
 80081da:	f7ff fafc 	bl	80077d6 <USBD_CDC_SetRxBuffer>
}
 80081de:	2000      	movs	r0, #0
 80081e0:	bd10      	pop	{r4, pc}
 80081e2:	bf00      	nop
 80081e4:	200003f4 	.word	0x200003f4
 80081e8:	20000ab8 	.word	0x20000ab8
 80081ec:	200006b8 	.word	0x200006b8

080081f0 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80081f0:	2312      	movs	r3, #18
 80081f2:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80081f4:	4800      	ldr	r0, [pc, #0]	; (80081f8 <USBD_FS_DeviceDescriptor+0x8>)
 80081f6:	4770      	bx	lr
 80081f8:	20000148 	.word	0x20000148

080081fc <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80081fc:	2304      	movs	r3, #4
 80081fe:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8008200:	4800      	ldr	r0, [pc, #0]	; (8008204 <USBD_FS_LangIDStrDescriptor+0x8>)
 8008202:	4770      	bx	lr
 8008204:	2000015c 	.word	0x2000015c

08008208 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8008208:	b1b2      	cbz	r2, 8008238 <IntToUnicode+0x30>
 800820a:	1c4b      	adds	r3, r1, #1
 800820c:	f102 3cff 	add.w	ip, r2, #4294967295
 8008210:	fa5f fc8c 	uxtb.w	ip, ip
 8008214:	3103      	adds	r1, #3
 8008216:	eb01 014c 	add.w	r1, r1, ip, lsl #1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800821a:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 800821e:	0f02      	lsrs	r2, r0, #28
 8008220:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8008224:	bf34      	ite	cc
 8008226:	3230      	addcc	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008228:	3237      	addcs	r2, #55	; 0x37
 800822a:	f803 2c01 	strb.w	r2, [r3, #-1]
    value = value << 4;
 800822e:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8008230:	f803 cb02 	strb.w	ip, [r3], #2
  for (idx = 0; idx < len; idx++)
 8008234:	428b      	cmp	r3, r1
 8008236:	d1f2      	bne.n	800821e <IntToUnicode+0x16>
  }
}
 8008238:	4770      	bx	lr
	...

0800823c <USBD_FS_SerialStrDescriptor>:
{
 800823c:	b538      	push	{r3, r4, r5, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800823e:	231a      	movs	r3, #26
 8008240:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008242:	4b0c      	ldr	r3, [pc, #48]	; (8008274 <USBD_FS_SerialStrDescriptor+0x38>)
 8008244:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial0 += deviceserial2;
 8008248:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 800824c:	18c0      	adds	r0, r0, r3
 800824e:	d101      	bne.n	8008254 <USBD_FS_SerialStrDescriptor+0x18>
}
 8008250:	4809      	ldr	r0, [pc, #36]	; (8008278 <USBD_FS_SerialStrDescriptor+0x3c>)
 8008252:	bd38      	pop	{r3, r4, r5, pc}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008254:	4b07      	ldr	r3, [pc, #28]	; (8008274 <USBD_FS_SerialStrDescriptor+0x38>)
 8008256:	f8d3 57ec 	ldr.w	r5, [r3, #2028]	; 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800825a:	4c07      	ldr	r4, [pc, #28]	; (8008278 <USBD_FS_SerialStrDescriptor+0x3c>)
 800825c:	2208      	movs	r2, #8
 800825e:	1ca1      	adds	r1, r4, #2
 8008260:	f7ff ffd2 	bl	8008208 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008264:	2204      	movs	r2, #4
 8008266:	f104 0112 	add.w	r1, r4, #18
 800826a:	4628      	mov	r0, r5
 800826c:	f7ff ffcc 	bl	8008208 <IntToUnicode>
 8008270:	e7ee      	b.n	8008250 <USBD_FS_SerialStrDescriptor+0x14>
 8008272:	bf00      	nop
 8008274:	1ffff000 	.word	0x1ffff000
 8008278:	20000160 	.word	0x20000160

0800827c <USBD_FS_ProductStrDescriptor>:
{
 800827c:	b508      	push	{r3, lr}
 800827e:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008280:	4902      	ldr	r1, [pc, #8]	; (800828c <USBD_FS_ProductStrDescriptor+0x10>)
 8008282:	4803      	ldr	r0, [pc, #12]	; (8008290 <USBD_FS_ProductStrDescriptor+0x14>)
 8008284:	f7ff fefd 	bl	8008082 <USBD_GetString>
}
 8008288:	4800      	ldr	r0, [pc, #0]	; (800828c <USBD_FS_ProductStrDescriptor+0x10>)
 800828a:	bd08      	pop	{r3, pc}
 800828c:	20000eb8 	.word	0x20000eb8
 8008290:	0800bdb0 	.word	0x0800bdb0

08008294 <USBD_FS_ManufacturerStrDescriptor>:
{
 8008294:	b510      	push	{r4, lr}
 8008296:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008298:	4c03      	ldr	r4, [pc, #12]	; (80082a8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800829a:	4621      	mov	r1, r4
 800829c:	4803      	ldr	r0, [pc, #12]	; (80082ac <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800829e:	f7ff fef0 	bl	8008082 <USBD_GetString>
}
 80082a2:	4620      	mov	r0, r4
 80082a4:	bd10      	pop	{r4, pc}
 80082a6:	bf00      	nop
 80082a8:	20000eb8 	.word	0x20000eb8
 80082ac:	0800bdc8 	.word	0x0800bdc8

080082b0 <USBD_FS_ConfigStrDescriptor>:
{
 80082b0:	b508      	push	{r3, lr}
 80082b2:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082b4:	4902      	ldr	r1, [pc, #8]	; (80082c0 <USBD_FS_ConfigStrDescriptor+0x10>)
 80082b6:	4803      	ldr	r0, [pc, #12]	; (80082c4 <USBD_FS_ConfigStrDescriptor+0x14>)
 80082b8:	f7ff fee3 	bl	8008082 <USBD_GetString>
}
 80082bc:	4800      	ldr	r0, [pc, #0]	; (80082c0 <USBD_FS_ConfigStrDescriptor+0x10>)
 80082be:	bd08      	pop	{r3, pc}
 80082c0:	20000eb8 	.word	0x20000eb8
 80082c4:	0800bddc 	.word	0x0800bddc

080082c8 <USBD_FS_InterfaceStrDescriptor>:
{
 80082c8:	b508      	push	{r3, lr}
 80082ca:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082cc:	4902      	ldr	r1, [pc, #8]	; (80082d8 <USBD_FS_InterfaceStrDescriptor+0x10>)
 80082ce:	4803      	ldr	r0, [pc, #12]	; (80082dc <USBD_FS_InterfaceStrDescriptor+0x14>)
 80082d0:	f7ff fed7 	bl	8008082 <USBD_GetString>
}
 80082d4:	4800      	ldr	r0, [pc, #0]	; (80082d8 <USBD_FS_InterfaceStrDescriptor+0x10>)
 80082d6:	bd08      	pop	{r3, pc}
 80082d8:	20000eb8 	.word	0x20000eb8
 80082dc:	0800bde8 	.word	0x0800bde8

080082e0 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80082e0:	b120      	cbz	r0, 80082ec <USBD_Get_USB_Status+0xc>
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80082e2:	2802      	cmp	r0, #2
 80082e4:	bf14      	ite	ne
 80082e6:	2002      	movne	r0, #2
 80082e8:	2001      	moveq	r0, #1
 80082ea:	4770      	bx	lr
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80082ec:	4770      	bx	lr
	...

080082f0 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 80082f0:	6802      	ldr	r2, [r0, #0]
 80082f2:	4b0e      	ldr	r3, [pc, #56]	; (800832c <HAL_PCD_MspInit+0x3c>)
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d000      	beq.n	80082fa <HAL_PCD_MspInit+0xa>
 80082f8:	4770      	bx	lr
{
 80082fa:	b500      	push	{lr}
 80082fc:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 80082fe:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8008302:	69da      	ldr	r2, [r3, #28]
 8008304:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008308:	61da      	str	r2, [r3, #28]
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008310:	9301      	str	r3, [sp, #4]
 8008312:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008314:	2200      	movs	r2, #0
 8008316:	4611      	mov	r1, r2
 8008318:	2014      	movs	r0, #20
 800831a:	f7fc faef 	bl	80048fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800831e:	2014      	movs	r0, #20
 8008320:	f7fc fb22 	bl	8004968 <HAL_NVIC_EnableIRQ>
}
 8008324:	b003      	add	sp, #12
 8008326:	f85d fb04 	ldr.w	pc, [sp], #4
 800832a:	bf00      	nop
 800832c:	40005c00 	.word	0x40005c00

08008330 <HAL_PCD_SetupStageCallback>:
{
 8008330:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008332:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8008336:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 800833a:	f7ff faa1 	bl	8007880 <USBD_LL_SetupStage>
}
 800833e:	bd08      	pop	{r3, pc}

08008340 <HAL_PCD_DataOutStageCallback>:
{
 8008340:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008342:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8008346:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800834a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800834e:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8008352:	f7ff fac2 	bl	80078da <USBD_LL_DataOutStage>
}
 8008356:	bd08      	pop	{r3, pc}

08008358 <HAL_PCD_DataInStageCallback>:
{
 8008358:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800835a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800835e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8008362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008364:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8008368:	f7ff fafb 	bl	8007962 <USBD_LL_DataInStage>
}
 800836c:	bd08      	pop	{r3, pc}

0800836e <HAL_PCD_SOFCallback>:
{
 800836e:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008370:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8008374:	f7ff fb9a 	bl	8007aac <USBD_LL_SOF>
}
 8008378:	bd08      	pop	{r3, pc}

0800837a <HAL_PCD_ResetCallback>:
{
 800837a:	b510      	push	{r4, lr}
 800837c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800837e:	6883      	ldr	r3, [r0, #8]
 8008380:	2b02      	cmp	r3, #2
 8008382:	d109      	bne.n	8008398 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008384:	2101      	movs	r1, #1
 8008386:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
 800838a:	f7ff fb79 	bl	8007a80 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800838e:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
 8008392:	f7ff fb4d 	bl	8007a30 <USBD_LL_Reset>
}
 8008396:	bd10      	pop	{r4, pc}
    Error_Handler();
 8008398:	f7fb fe9a 	bl	80040d0 <Error_Handler>
 800839c:	e7f2      	b.n	8008384 <HAL_PCD_ResetCallback+0xa>
	...

080083a0 <HAL_PCD_SuspendCallback>:
{
 80083a0:	b510      	push	{r4, lr}
 80083a2:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80083a4:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 80083a8:	f7ff fb6d 	bl	8007a86 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 80083ac:	69a3      	ldr	r3, [r4, #24]
 80083ae:	b123      	cbz	r3, 80083ba <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80083b0:	4a02      	ldr	r2, [pc, #8]	; (80083bc <HAL_PCD_SuspendCallback+0x1c>)
 80083b2:	6913      	ldr	r3, [r2, #16]
 80083b4:	f043 0306 	orr.w	r3, r3, #6
 80083b8:	6113      	str	r3, [r2, #16]
}
 80083ba:	bd10      	pop	{r4, pc}
 80083bc:	e000ed00 	.word	0xe000ed00

080083c0 <HAL_PCD_ResumeCallback>:
{
 80083c0:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80083c2:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 80083c6:	f7ff fb67 	bl	8007a98 <USBD_LL_Resume>
}
 80083ca:	bd08      	pop	{r3, pc}

080083cc <USBD_LL_Init>:
{
 80083cc:	b510      	push	{r4, lr}
 80083ce:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80083d0:	481d      	ldr	r0, [pc, #116]	; (8008448 <USBD_LL_Init+0x7c>)
 80083d2:	f8c0 42ec 	str.w	r4, [r0, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80083d6:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 80083da:	4b1c      	ldr	r3, [pc, #112]	; (800844c <USBD_LL_Init+0x80>)
 80083dc:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80083de:	2308      	movs	r3, #8
 80083e0:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80083e2:	2302      	movs	r3, #2
 80083e4:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80083e6:	2300      	movs	r3, #0
 80083e8:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80083ea:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80083ec:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80083ee:	f7fc fc1d 	bl	8004c2c <HAL_PCD_Init>
 80083f2:	bb30      	cbnz	r0, 8008442 <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80083f4:	2318      	movs	r3, #24
 80083f6:	2200      	movs	r2, #0
 80083f8:	4611      	mov	r1, r2
 80083fa:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80083fe:	f7fd fc35 	bl	8005c6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008402:	2358      	movs	r3, #88	; 0x58
 8008404:	2200      	movs	r2, #0
 8008406:	2180      	movs	r1, #128	; 0x80
 8008408:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800840c:	f7fd fc2e 	bl	8005c6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008410:	23c0      	movs	r3, #192	; 0xc0
 8008412:	2200      	movs	r2, #0
 8008414:	2181      	movs	r1, #129	; 0x81
 8008416:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800841a:	f7fd fc27 	bl	8005c6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800841e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008422:	2200      	movs	r2, #0
 8008424:	2101      	movs	r1, #1
 8008426:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800842a:	f7fd fc1f 	bl	8005c6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800842e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008432:	2200      	movs	r2, #0
 8008434:	2182      	movs	r1, #130	; 0x82
 8008436:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800843a:	f7fd fc17 	bl	8005c6c <HAL_PCDEx_PMAConfig>
}
 800843e:	2000      	movs	r0, #0
 8008440:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8008442:	f7fb fe45 	bl	80040d0 <Error_Handler>
 8008446:	e7d5      	b.n	80083f4 <USBD_LL_Init+0x28>
 8008448:	200010b8 	.word	0x200010b8
 800844c:	40005c00 	.word	0x40005c00

08008450 <USBD_LL_Start>:
{
 8008450:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8008452:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8008456:	f7fc fc6e 	bl	8004d36 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800845a:	f7ff ff41 	bl	80082e0 <USBD_Get_USB_Status>
}
 800845e:	bd08      	pop	{r3, pc}

08008460 <USBD_LL_OpenEP>:
{
 8008460:	b508      	push	{r3, lr}
 8008462:	4694      	mov	ip, r2
 8008464:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008466:	4663      	mov	r3, ip
 8008468:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800846c:	f7fd fad9 	bl	8005a22 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008470:	f7ff ff36 	bl	80082e0 <USBD_Get_USB_Status>
}
 8008474:	bd08      	pop	{r3, pc}

08008476 <USBD_LL_CloseEP>:
{
 8008476:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008478:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800847c:	f7fd fb0d 	bl	8005a9a <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008480:	f7ff ff2e 	bl	80082e0 <USBD_Get_USB_Status>
}
 8008484:	bd08      	pop	{r3, pc}

08008486 <USBD_LL_StallEP>:
{
 8008486:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008488:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800848c:	f7fd fb77 	bl	8005b7e <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008490:	f7ff ff26 	bl	80082e0 <USBD_Get_USB_Status>
}
 8008494:	bd08      	pop	{r3, pc}

08008496 <USBD_LL_ClearStallEP>:
{
 8008496:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008498:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800849c:	f7fd fbab 	bl	8005bf6 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80084a0:	f7ff ff1e 	bl	80082e0 <USBD_Get_USB_Status>
}
 80084a4:	bd08      	pop	{r3, pc}

080084a6 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80084a6:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 80084aa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80084ae:	d108      	bne.n	80084c2 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80084b0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80084b4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80084b8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80084bc:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 80084c0:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80084c2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80084c6:	3101      	adds	r1, #1
 80084c8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80084cc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80084d0:	7888      	ldrb	r0, [r1, #2]
 80084d2:	4770      	bx	lr

080084d4 <USBD_LL_SetUSBAddress>:
{
 80084d4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80084d6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80084da:	f7fc fc45 	bl	8004d68 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80084de:	f7ff feff 	bl	80082e0 <USBD_Get_USB_Status>
}
 80084e2:	bd08      	pop	{r3, pc}

080084e4 <USBD_LL_Transmit>:
{
 80084e4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80084e6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80084ea:	f7fd fb27 	bl	8005b3c <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80084ee:	f7ff fef7 	bl	80082e0 <USBD_Get_USB_Status>
}
 80084f2:	bd08      	pop	{r3, pc}

080084f4 <USBD_LL_PrepareReceive>:
{
 80084f4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80084f6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80084fa:	f7fd fafd 	bl	8005af8 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80084fe:	f7ff feef 	bl	80082e0 <USBD_Get_USB_Status>
}
 8008502:	bd08      	pop	{r3, pc}

08008504 <USBD_LL_GetRxDataSize>:
{
 8008504:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008506:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800850a:	f7fd fb0e 	bl	8005b2a <HAL_PCD_EP_GetRxCount>
}
 800850e:	bd08      	pop	{r3, pc}

08008510 <USBD_static_malloc>:
}
 8008510:	4800      	ldr	r0, [pc, #0]	; (8008514 <USBD_static_malloc+0x4>)
 8008512:	4770      	bx	lr
 8008514:	200013a8 	.word	0x200013a8

08008518 <USBD_static_free>:
}
 8008518:	4770      	bx	lr

0800851a <HAL_PCDEx_SetConnectionState>:
}
 800851a:	4770      	bx	lr

0800851c <_ZdlPvj>:
 800851c:	f000 bb36 	b.w	8008b8c <_ZdlPv>

08008520 <_Znwj>:
 8008520:	2801      	cmp	r0, #1
 8008522:	bf38      	it	cc
 8008524:	2001      	movcc	r0, #1
 8008526:	b510      	push	{r4, lr}
 8008528:	4604      	mov	r4, r0
 800852a:	4620      	mov	r0, r4
 800852c:	f000 fb6a 	bl	8008c04 <malloc>
 8008530:	b930      	cbnz	r0, 8008540 <_Znwj+0x20>
 8008532:	f000 fb2d 	bl	8008b90 <_ZSt15get_new_handlerv>
 8008536:	b908      	cbnz	r0, 800853c <_Znwj+0x1c>
 8008538:	f000 fb32 	bl	8008ba0 <abort>
 800853c:	4780      	blx	r0
 800853e:	e7f4      	b.n	800852a <_Znwj+0xa>
 8008540:	bd10      	pop	{r4, pc}

08008542 <_ZNSaIcEC1Ev>:
 8008542:	4770      	bx	lr

08008544 <_ZNSaIcED1Ev>:
 8008544:	4770      	bx	lr

08008546 <_ZSt17__throw_bad_allocv>:
 8008546:	b508      	push	{r3, lr}
 8008548:	f000 fb2a 	bl	8008ba0 <abort>

0800854c <_ZSt19__throw_logic_errorPKc>:
 800854c:	b508      	push	{r3, lr}
 800854e:	f000 fb27 	bl	8008ba0 <abort>

08008552 <_ZSt24__throw_invalid_argumentPKc>:
 8008552:	b508      	push	{r3, lr}
 8008554:	f000 fb24 	bl	8008ba0 <abort>

08008558 <_ZSt20__throw_length_errorPKc>:
 8008558:	b508      	push	{r3, lr}
 800855a:	f000 fb21 	bl	8008ba0 <abort>

0800855e <_ZSt20__throw_out_of_rangePKc>:
 800855e:	b508      	push	{r3, lr}
 8008560:	f000 fb1e 	bl	8008ba0 <abort>

08008564 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8008564:	b40f      	push	{r0, r1, r2, r3}
 8008566:	b580      	push	{r7, lr}
 8008568:	b082      	sub	sp, #8
 800856a:	af00      	add	r7, sp, #0
 800856c:	f107 0410 	add.w	r4, r7, #16
 8008570:	f854 5b04 	ldr.w	r5, [r4], #4
 8008574:	4628      	mov	r0, r5
 8008576:	f7f7 fdeb 	bl	8000150 <strlen>
 800857a:	f200 2307 	addw	r3, r0, #519	; 0x207
 800857e:	f023 0307 	bic.w	r3, r3, #7
 8008582:	ebad 0d03 	sub.w	sp, sp, r3
 8008586:	f500 7100 	add.w	r1, r0, #512	; 0x200
 800858a:	4623      	mov	r3, r4
 800858c:	462a      	mov	r2, r5
 800858e:	4668      	mov	r0, sp
 8008590:	607c      	str	r4, [r7, #4]
 8008592:	f000 f855 	bl	8008640 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8008596:	f000 fb03 	bl	8008ba0 <abort>
	...

0800859c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 800859c:	4606      	mov	r6, r0
 800859e:	460c      	mov	r4, r1
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b09c      	sub	sp, #112	; 0x70
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	1ba4      	subs	r4, r4, r6
 80085a8:	2269      	movs	r2, #105	; 0x69
 80085aa:	490e      	ldr	r1, [pc, #56]	; (80085e4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80085ac:	1d38      	adds	r0, r7, #4
 80085ae:	f000 fb47 	bl	8008c40 <memcpy>
 80085b2:	f104 0370 	add.w	r3, r4, #112	; 0x70
 80085b6:	f023 0307 	bic.w	r3, r3, #7
 80085ba:	ebad 0d03 	sub.w	sp, sp, r3
 80085be:	466d      	mov	r5, sp
 80085c0:	2268      	movs	r2, #104	; 0x68
 80085c2:	1d39      	adds	r1, r7, #4
 80085c4:	4628      	mov	r0, r5
 80085c6:	f000 fb3b 	bl	8008c40 <memcpy>
 80085ca:	4622      	mov	r2, r4
 80085cc:	4631      	mov	r1, r6
 80085ce:	f105 0068 	add.w	r0, r5, #104	; 0x68
 80085d2:	f000 fb35 	bl	8008c40 <memcpy>
 80085d6:	2300      	movs	r3, #0
 80085d8:	442c      	add	r4, r5
 80085da:	4628      	mov	r0, r5
 80085dc:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80085e0:	f7ff ffb4 	bl	800854c <_ZSt19__throw_logic_errorPKc>
 80085e4:	0800bdf6 	.word	0x0800bdf6

080085e8 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 80085e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	b084      	sub	sp, #16
 80085f0:	466d      	mov	r5, sp
 80085f2:	f105 040c 	add.w	r4, r5, #12
 80085f6:	4623      	mov	r3, r4
 80085f8:	f04f 0c0a 	mov.w	ip, #10
 80085fc:	f8df 803c 	ldr.w	r8, [pc, #60]	; 800863c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8008600:	fbb2 f6fc 	udiv	r6, r2, ip
 8008604:	fb0c 2e16 	mls	lr, ip, r6, r2
 8008608:	f818 e00e 	ldrb.w	lr, [r8, lr]
 800860c:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8008610:	4696      	mov	lr, r2
 8008612:	f1be 0f09 	cmp.w	lr, #9
 8008616:	4632      	mov	r2, r6
 8008618:	d8f2      	bhi.n	8008600 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 800861a:	1ae4      	subs	r4, r4, r3
 800861c:	428c      	cmp	r4, r1
 800861e:	d809      	bhi.n	8008634 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8008620:	f1c4 030c 	rsb	r3, r4, #12
 8008624:	4622      	mov	r2, r4
 8008626:	18e9      	adds	r1, r5, r3
 8008628:	f000 fb0a 	bl	8008c40 <memcpy>
 800862c:	4620      	mov	r0, r4
 800862e:	46bd      	mov	sp, r7
 8008630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008634:	f04f 34ff 	mov.w	r4, #4294967295
 8008638:	e7f8      	b.n	800862c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800863a:	bf00      	nop
 800863c:	0800be5f 	.word	0x0800be5f

08008640 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8008640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008644:	4607      	mov	r7, r0
 8008646:	4615      	mov	r5, r2
 8008648:	4604      	mov	r4, r0
 800864a:	3901      	subs	r1, #1
 800864c:	eb00 0801 	add.w	r8, r0, r1
 8008650:	782a      	ldrb	r2, [r5, #0]
 8008652:	b392      	cbz	r2, 80086ba <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 8008654:	4544      	cmp	r4, r8
 8008656:	d22a      	bcs.n	80086ae <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8008658:	2a25      	cmp	r2, #37	; 0x25
 800865a:	d107      	bne.n	800866c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800865c:	786a      	ldrb	r2, [r5, #1]
 800865e:	2a73      	cmp	r2, #115	; 0x73
 8008660:	d009      	beq.n	8008676 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8008662:	2a7a      	cmp	r2, #122	; 0x7a
 8008664:	d012      	beq.n	800868c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8008666:	2a25      	cmp	r2, #37	; 0x25
 8008668:	d100      	bne.n	800866c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800866a:	3501      	adds	r5, #1
 800866c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8008670:	f804 2b01 	strb.w	r2, [r4], #1
 8008674:	e7ec      	b.n	8008650 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8008676:	f853 2b04 	ldr.w	r2, [r3], #4
 800867a:	3a01      	subs	r2, #1
 800867c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8008680:	b1c9      	cbz	r1, 80086b6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8008682:	4544      	cmp	r4, r8
 8008684:	d013      	beq.n	80086ae <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8008686:	f804 1b01 	strb.w	r1, [r4], #1
 800868a:	e7f7      	b.n	800867c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 800868c:	78aa      	ldrb	r2, [r5, #2]
 800868e:	2a75      	cmp	r2, #117	; 0x75
 8008690:	d1ec      	bne.n	800866c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8008692:	461e      	mov	r6, r3
 8008694:	4620      	mov	r0, r4
 8008696:	f856 2b04 	ldr.w	r2, [r6], #4
 800869a:	eba8 0104 	sub.w	r1, r8, r4
 800869e:	f7ff ffa3 	bl	80085e8 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80086a2:	2800      	cmp	r0, #0
 80086a4:	dd03      	ble.n	80086ae <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 80086a6:	4633      	mov	r3, r6
 80086a8:	4404      	add	r4, r0
 80086aa:	3503      	adds	r5, #3
 80086ac:	e7d0      	b.n	8008650 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80086ae:	4621      	mov	r1, r4
 80086b0:	4638      	mov	r0, r7
 80086b2:	f7ff ff73 	bl	800859c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80086b6:	3502      	adds	r5, #2
 80086b8:	e7ca      	b.n	8008650 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80086ba:	7022      	strb	r2, [r4, #0]
 80086bc:	1be0      	subs	r0, r4, r7
 80086be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080086c2 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 80086c2:	b10a      	cbz	r2, 80086c8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 80086c4:	f000 babc 	b.w	8008c40 <memcpy>
 80086c8:	4770      	bx	lr

080086ca <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
 80086ca:	4613      	mov	r3, r2
 80086cc:	460a      	mov	r2, r1
 80086ce:	b111      	cbz	r1, 80086d6 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
 80086d0:	7819      	ldrb	r1, [r3, #0]
 80086d2:	f000 baa7 	b.w	8008c24 <memchr>
 80086d6:	4608      	mov	r0, r1
 80086d8:	4770      	bx	lr

080086da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 80086da:	6001      	str	r1, [r0, #0]
 80086dc:	4770      	bx	lr

080086de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 80086de:	6800      	ldr	r0, [r0, #0]
 80086e0:	4770      	bx	lr

080086e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 80086e2:	3008      	adds	r0, #8
 80086e4:	4770      	bx	lr

080086e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 80086e6:	6081      	str	r1, [r0, #8]
 80086e8:	4770      	bx	lr

080086ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 80086ea:	2200      	movs	r2, #0
 80086ec:	6803      	ldr	r3, [r0, #0]
 80086ee:	6041      	str	r1, [r0, #4]
 80086f0:	545a      	strb	r2, [r3, r1]
 80086f2:	4770      	bx	lr

080086f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80086f4:	b508      	push	{r3, lr}
 80086f6:	680b      	ldr	r3, [r1, #0]
 80086f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086fc:	d302      	bcc.n	8008704 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80086fe:	480d      	ldr	r0, [pc, #52]	; (8008734 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8008700:	f7ff ff2a 	bl	8008558 <_ZSt20__throw_length_errorPKc>
 8008704:	4293      	cmp	r3, r2
 8008706:	d90b      	bls.n	8008720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8008708:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800870c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8008710:	d206      	bcs.n	8008720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8008712:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008716:	bf2a      	itet	cs
 8008718:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800871c:	6008      	strcc	r0, [r1, #0]
 800871e:	600b      	strcs	r3, [r1, #0]
 8008720:	6808      	ldr	r0, [r1, #0]
 8008722:	3001      	adds	r0, #1
 8008724:	d501      	bpl.n	800872a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8008726:	f7ff ff0e 	bl	8008546 <_ZSt17__throw_bad_allocv>
 800872a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800872e:	f7ff bef7 	b.w	8008520 <_Znwj>
 8008732:	bf00      	nop
 8008734:	0800be6a 	.word	0x0800be6a

08008738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8008738:	4603      	mov	r3, r0
 800873a:	f853 0b08 	ldr.w	r0, [r3], #8
 800873e:	4298      	cmp	r0, r3
 8008740:	d001      	beq.n	8008746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8008742:	f000 ba23 	b.w	8008b8c <_ZdlPv>
 8008746:	4770      	bx	lr

08008748 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8008748:	b508      	push	{r3, lr}
 800874a:	4603      	mov	r3, r0
 800874c:	4608      	mov	r0, r1
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	4611      	mov	r1, r2
 8008752:	4298      	cmp	r0, r3
 8008754:	d903      	bls.n	800875e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 8008756:	4602      	mov	r2, r0
 8008758:	4801      	ldr	r0, [pc, #4]	; (8008760 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 800875a:	f7ff ff03 	bl	8008564 <_ZSt24__throw_out_of_range_fmtPKcz>
 800875e:	bd08      	pop	{r3, pc}
 8008760:	0800be82 	.word	0x0800be82

08008764 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8008764:	6840      	ldr	r0, [r0, #4]
 8008766:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800876a:	3901      	subs	r1, #1
 800876c:	1a09      	subs	r1, r1, r0
 800876e:	4291      	cmp	r1, r2
 8008770:	b508      	push	{r3, lr}
 8008772:	d202      	bcs.n	800877a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8008774:	4618      	mov	r0, r3
 8008776:	f7ff feef 	bl	8008558 <_ZSt20__throw_length_errorPKc>
 800877a:	bd08      	pop	{r3, pc}

0800877c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800877c:	6803      	ldr	r3, [r0, #0]
 800877e:	428b      	cmp	r3, r1
 8008780:	d806      	bhi.n	8008790 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8008782:	6840      	ldr	r0, [r0, #4]
 8008784:	4418      	add	r0, r3
 8008786:	4281      	cmp	r1, r0
 8008788:	bf94      	ite	ls
 800878a:	2000      	movls	r0, #0
 800878c:	2001      	movhi	r0, #1
 800878e:	4770      	bx	lr
 8008790:	2001      	movs	r0, #1
 8008792:	4770      	bx	lr

08008794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8008794:	2a01      	cmp	r2, #1
 8008796:	b410      	push	{r4}
 8008798:	d103      	bne.n	80087a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xe>
 800879a:	780a      	ldrb	r2, [r1, #0]
 800879c:	bc10      	pop	{r4}
 800879e:	7002      	strb	r2, [r0, #0]
 80087a0:	4770      	bx	lr
 80087a2:	bc10      	pop	{r4}
 80087a4:	f7ff bf8d 	b.w	80086c2 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080087a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80087a8:	2a01      	cmp	r2, #1
 80087aa:	b430      	push	{r4, r5}
 80087ac:	d103      	bne.n	80087b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80087ae:	780b      	ldrb	r3, [r1, #0]
 80087b0:	7003      	strb	r3, [r0, #0]
 80087b2:	bc30      	pop	{r4, r5}
 80087b4:	4770      	bx	lr
 80087b6:	2a00      	cmp	r2, #0
 80087b8:	d0fb      	beq.n	80087b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80087ba:	bc30      	pop	{r4, r5}
 80087bc:	f000 ba4e 	b.w	8008c5c <memmove>

080087c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80087c0:	b508      	push	{r3, lr}
 80087c2:	1a52      	subs	r2, r2, r1
 80087c4:	f7ff ffe6 	bl	8008794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80087c8:	bd08      	pop	{r3, pc}

080087ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80087ca:	b508      	push	{r3, lr}
 80087cc:	1a52      	subs	r2, r2, r1
 80087ce:	f7ff ffe1 	bl	8008794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80087d2:	bd08      	pop	{r3, pc}

080087d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80087d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80087d8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80087da:	461f      	mov	r7, r3
 80087dc:	6843      	ldr	r3, [r0, #4]
 80087de:	eb01 0802 	add.w	r8, r1, r2
 80087e2:	1ab2      	subs	r2, r6, r2
 80087e4:	441a      	add	r2, r3
 80087e6:	eba3 0908 	sub.w	r9, r3, r8
 80087ea:	4603      	mov	r3, r0
 80087ec:	9201      	str	r2, [sp, #4]
 80087ee:	f853 2b08 	ldr.w	r2, [r3], #8
 80087f2:	460d      	mov	r5, r1
 80087f4:	429a      	cmp	r2, r3
 80087f6:	bf0c      	ite	eq
 80087f8:	220f      	moveq	r2, #15
 80087fa:	6882      	ldrne	r2, [r0, #8]
 80087fc:	a901      	add	r1, sp, #4
 80087fe:	4604      	mov	r4, r0
 8008800:	f7ff ff78 	bl	80086f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8008804:	4682      	mov	sl, r0
 8008806:	b11d      	cbz	r5, 8008810 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3c>
 8008808:	462a      	mov	r2, r5
 800880a:	6821      	ldr	r1, [r4, #0]
 800880c:	f7ff ffc2 	bl	8008794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008810:	b137      	cbz	r7, 8008820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4c>
 8008812:	b12e      	cbz	r6, 8008820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4c>
 8008814:	4632      	mov	r2, r6
 8008816:	4639      	mov	r1, r7
 8008818:	eb0a 0005 	add.w	r0, sl, r5
 800881c:	f7ff ffba 	bl	8008794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008820:	f1b9 0f00 	cmp.w	r9, #0
 8008824:	d007      	beq.n	8008836 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x62>
 8008826:	6821      	ldr	r1, [r4, #0]
 8008828:	4435      	add	r5, r6
 800882a:	464a      	mov	r2, r9
 800882c:	4441      	add	r1, r8
 800882e:	eb0a 0005 	add.w	r0, sl, r5
 8008832:	f7ff ffaf 	bl	8008794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008836:	4620      	mov	r0, r4
 8008838:	f7ff ff7e 	bl	8008738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800883c:	9b01      	ldr	r3, [sp, #4]
 800883e:	f8c4 a000 	str.w	sl, [r4]
 8008842:	60a3      	str	r3, [r4, #8]
 8008844:	b002      	add	sp, #8
 8008846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800884a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800884a:	f100 0208 	add.w	r2, r0, #8
 800884e:	6002      	str	r2, [r0, #0]
 8008850:	2200      	movs	r2, #0
 8008852:	6042      	str	r2, [r0, #4]
 8008854:	7202      	strb	r2, [r0, #8]
 8008856:	4770      	bx	lr

08008858 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8008858:	b510      	push	{r4, lr}
 800885a:	4604      	mov	r4, r0
 800885c:	f7ff ff6c 	bl	8008738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8008860:	4620      	mov	r0, r4
 8008862:	bd10      	pop	{r4, pc}

08008864 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8008864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008866:	460d      	mov	r5, r1
 8008868:	f851 3b08 	ldr.w	r3, [r1], #8
 800886c:	4604      	mov	r4, r0
 800886e:	4299      	cmp	r1, r3
 8008870:	6800      	ldr	r0, [r0, #0]
 8008872:	686a      	ldr	r2, [r5, #4]
 8008874:	d10d      	bne.n	8008892 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8008876:	b10a      	cbz	r2, 800887c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x18>
 8008878:	f7ff ff8c 	bl	8008794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800887c:	2100      	movs	r1, #0
 800887e:	686b      	ldr	r3, [r5, #4]
 8008880:	6822      	ldr	r2, [r4, #0]
 8008882:	6063      	str	r3, [r4, #4]
 8008884:	54d1      	strb	r1, [r2, r3]
 8008886:	2300      	movs	r3, #0
 8008888:	682a      	ldr	r2, [r5, #0]
 800888a:	606b      	str	r3, [r5, #4]
 800888c:	7013      	strb	r3, [r2, #0]
 800888e:	4620      	mov	r0, r4
 8008890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008892:	f104 0708 	add.w	r7, r4, #8
 8008896:	42b8      	cmp	r0, r7
 8008898:	bf08      	it	eq
 800889a:	2000      	moveq	r0, #0
 800889c:	e9c4 3200 	strd	r3, r2, [r4]
 80088a0:	68ab      	ldr	r3, [r5, #8]
 80088a2:	bf18      	it	ne
 80088a4:	68a6      	ldrne	r6, [r4, #8]
 80088a6:	60a3      	str	r3, [r4, #8]
 80088a8:	b110      	cbz	r0, 80088b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x4c>
 80088aa:	6028      	str	r0, [r5, #0]
 80088ac:	60ae      	str	r6, [r5, #8]
 80088ae:	e7ea      	b.n	8008886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>
 80088b0:	6029      	str	r1, [r5, #0]
 80088b2:	e7e8      	b.n	8008886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>

080088b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>:
 80088b4:	6800      	ldr	r0, [r0, #0]
 80088b6:	4770      	bx	lr

080088b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>:
 80088b8:	e9d0 2000 	ldrd	r2, r0, [r0]
 80088bc:	4410      	add	r0, r2
 80088be:	4770      	bx	lr

080088c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 80088c0:	6840      	ldr	r0, [r0, #4]
 80088c2:	fab0 f080 	clz	r0, r0
 80088c6:	0940      	lsrs	r0, r0, #5
 80088c8:	4770      	bx	lr

080088ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 80088ca:	6800      	ldr	r0, [r0, #0]
 80088cc:	4408      	add	r0, r1
 80088ce:	4770      	bx	lr

080088d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 80088d0:	4603      	mov	r3, r0
 80088d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088d4:	f853 2b08 	ldr.w	r2, [r3], #8
 80088d8:	6846      	ldr	r6, [r0, #4]
 80088da:	429a      	cmp	r2, r3
 80088dc:	bf0c      	ite	eq
 80088de:	230f      	moveq	r3, #15
 80088e0:	6883      	ldrne	r3, [r0, #8]
 80088e2:	1c75      	adds	r5, r6, #1
 80088e4:	429d      	cmp	r5, r3
 80088e6:	4604      	mov	r4, r0
 80088e8:	460f      	mov	r7, r1
 80088ea:	d906      	bls.n	80088fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2a>
 80088ec:	2301      	movs	r3, #1
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	2300      	movs	r3, #0
 80088f2:	4631      	mov	r1, r6
 80088f4:	461a      	mov	r2, r3
 80088f6:	f7ff ff6d 	bl	80087d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80088fa:	2200      	movs	r2, #0
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	559f      	strb	r7, [r3, r6]
 8008900:	6823      	ldr	r3, [r4, #0]
 8008902:	6065      	str	r5, [r4, #4]
 8008904:	555a      	strb	r2, [r3, r5]
 8008906:	b003      	add	sp, #12
 8008908:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800890a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 800890a:	b510      	push	{r4, lr}
 800890c:	4604      	mov	r4, r0
 800890e:	f7ff ffdf 	bl	80088d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 8008912:	4620      	mov	r0, r4
 8008914:	bd10      	pop	{r4, pc}
	...

08008918 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8008918:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800891c:	4614      	mov	r4, r2
 800891e:	4680      	mov	r8, r0
 8008920:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008922:	4689      	mov	r9, r1
 8008924:	462a      	mov	r2, r5
 8008926:	461f      	mov	r7, r3
 8008928:	4621      	mov	r1, r4
 800892a:	4b38      	ldr	r3, [pc, #224]	; (8008a0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf4>)
 800892c:	f7ff ff1a 	bl	8008764 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8008930:	4642      	mov	r2, r8
 8008932:	f852 6b08 	ldr.w	r6, [r2], #8
 8008936:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800893a:	4296      	cmp	r6, r2
 800893c:	bf0c      	ite	eq
 800893e:	220f      	moveq	r2, #15
 8008940:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 8008944:	eba5 0b04 	sub.w	fp, r5, r4
 8008948:	eb03 0a0b 	add.w	sl, r3, fp
 800894c:	4552      	cmp	r2, sl
 800894e:	d351      	bcc.n	80089f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xdc>
 8008950:	444e      	add	r6, r9
 8008952:	4639      	mov	r1, r7
 8008954:	44a1      	add	r9, r4
 8008956:	4640      	mov	r0, r8
 8008958:	eba3 0909 	sub.w	r9, r3, r9
 800895c:	f7ff ff0e 	bl	800877c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8008960:	b180      	cbz	r0, 8008984 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6c>
 8008962:	f1b9 0f00 	cmp.w	r9, #0
 8008966:	d006      	beq.n	8008976 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8008968:	42ac      	cmp	r4, r5
 800896a:	d004      	beq.n	8008976 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 800896c:	464a      	mov	r2, r9
 800896e:	1931      	adds	r1, r6, r4
 8008970:	1970      	adds	r0, r6, r5
 8008972:	f7ff ff19 	bl	80087a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8008976:	b315      	cbz	r5, 80089be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8008978:	462a      	mov	r2, r5
 800897a:	4639      	mov	r1, r7
 800897c:	4630      	mov	r0, r6
 800897e:	f7ff ff09 	bl	8008794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008982:	e01c      	b.n	80089be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8008984:	b135      	cbz	r5, 8008994 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7c>
 8008986:	42ac      	cmp	r4, r5
 8008988:	d33c      	bcc.n	8008a04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xec>
 800898a:	462a      	mov	r2, r5
 800898c:	4639      	mov	r1, r7
 800898e:	4630      	mov	r0, r6
 8008990:	f7ff ff0a 	bl	80087a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8008994:	f1b9 0f00 	cmp.w	r9, #0
 8008998:	d011      	beq.n	80089be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 800899a:	42ac      	cmp	r4, r5
 800899c:	d00f      	beq.n	80089be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 800899e:	464a      	mov	r2, r9
 80089a0:	1931      	adds	r1, r6, r4
 80089a2:	1970      	adds	r0, r6, r5
 80089a4:	f7ff ff00 	bl	80087a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80089a8:	42ac      	cmp	r4, r5
 80089aa:	d208      	bcs.n	80089be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 80089ac:	4434      	add	r4, r6
 80089ae:	197b      	adds	r3, r7, r5
 80089b0:	429c      	cmp	r4, r3
 80089b2:	d30f      	bcc.n	80089d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
 80089b4:	462a      	mov	r2, r5
 80089b6:	4639      	mov	r1, r7
 80089b8:	4630      	mov	r0, r6
 80089ba:	f7ff fef5 	bl	80087a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80089be:	2200      	movs	r2, #0
 80089c0:	4640      	mov	r0, r8
 80089c2:	f8d8 3000 	ldr.w	r3, [r8]
 80089c6:	f8c8 a004 	str.w	sl, [r8, #4]
 80089ca:	f803 200a 	strb.w	r2, [r3, sl]
 80089ce:	b003      	add	sp, #12
 80089d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d4:	42bc      	cmp	r4, r7
 80089d6:	d803      	bhi.n	80089e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc8>
 80089d8:	462a      	mov	r2, r5
 80089da:	eb07 010b 	add.w	r1, r7, fp
 80089de:	e7cd      	b.n	800897c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x64>
 80089e0:	1be4      	subs	r4, r4, r7
 80089e2:	4622      	mov	r2, r4
 80089e4:	4639      	mov	r1, r7
 80089e6:	4630      	mov	r0, r6
 80089e8:	f7ff fede 	bl	80087a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80089ec:	1b2a      	subs	r2, r5, r4
 80089ee:	1971      	adds	r1, r6, r5
 80089f0:	1930      	adds	r0, r6, r4
 80089f2:	e7c4      	b.n	800897e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 80089f4:	463b      	mov	r3, r7
 80089f6:	4622      	mov	r2, r4
 80089f8:	4649      	mov	r1, r9
 80089fa:	4640      	mov	r0, r8
 80089fc:	9500      	str	r5, [sp, #0]
 80089fe:	f7ff fee9 	bl	80087d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8008a02:	e7dc      	b.n	80089be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8008a04:	f1b9 0f00 	cmp.w	r9, #0
 8008a08:	d0d0      	beq.n	80089ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x94>
 8008a0a:	e7c8      	b.n	800899e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x86>
 8008a0c:	0800beb9 	.word	0x0800beb9

08008a10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8008a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a12:	4604      	mov	r4, r0
 8008a14:	4608      	mov	r0, r1
 8008a16:	460d      	mov	r5, r1
 8008a18:	f7f7 fb9a 	bl	8000150 <strlen>
 8008a1c:	462b      	mov	r3, r5
 8008a1e:	9000      	str	r0, [sp, #0]
 8008a20:	2100      	movs	r1, #0
 8008a22:	4620      	mov	r0, r4
 8008a24:	6862      	ldr	r2, [r4, #4]
 8008a26:	f7ff ff77 	bl	8008918 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8008a2a:	b003      	add	sp, #12
 8008a2c:	bd30      	pop	{r4, r5, pc}

08008a2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 8008a2e:	b508      	push	{r3, lr}
 8008a30:	f7ff ffee 	bl	8008a10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 8008a34:	bd08      	pop	{r3, pc}

08008a36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8008a36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a38:	4604      	mov	r4, r0
 8008a3a:	4623      	mov	r3, r4
 8008a3c:	f853 6b08 	ldr.w	r6, [r3], #8
 8008a40:	6840      	ldr	r0, [r0, #4]
 8008a42:	429e      	cmp	r6, r3
 8008a44:	bf0c      	ite	eq
 8008a46:	230f      	moveq	r3, #15
 8008a48:	68a3      	ldrne	r3, [r4, #8]
 8008a4a:	1885      	adds	r5, r0, r2
 8008a4c:	429d      	cmp	r5, r3
 8008a4e:	d80a      	bhi.n	8008a66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 8008a50:	b112      	cbz	r2, 8008a58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 8008a52:	4430      	add	r0, r6
 8008a54:	f7ff fe9e 	bl	8008794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008a58:	2200      	movs	r2, #0
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	6065      	str	r5, [r4, #4]
 8008a60:	555a      	strb	r2, [r3, r5]
 8008a62:	b002      	add	sp, #8
 8008a64:	bd70      	pop	{r4, r5, r6, pc}
 8008a66:	460b      	mov	r3, r1
 8008a68:	9200      	str	r2, [sp, #0]
 8008a6a:	4601      	mov	r1, r0
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f7ff feb0 	bl	80087d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8008a74:	e7f0      	b.n	8008a58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

08008a76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8008a76:	b508      	push	{r3, lr}
 8008a78:	e9d1 1200 	ldrd	r1, r2, [r1]
 8008a7c:	f7ff ffdb 	bl	8008a36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8008a80:	bd08      	pop	{r3, pc}

08008a82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 8008a82:	b508      	push	{r3, lr}
 8008a84:	f7ff fff7 	bl	8008a76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8008a88:	bd08      	pop	{r3, pc}

08008a8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8008a8a:	6800      	ldr	r0, [r0, #0]
 8008a8c:	4770      	bx	lr

08008a8e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>:
 8008a8e:	b513      	push	{r0, r1, r4, lr}
 8008a90:	f88d 1007 	strb.w	r1, [sp, #7]
 8008a94:	6841      	ldr	r1, [r0, #4]
 8008a96:	4613      	mov	r3, r2
 8008a98:	428a      	cmp	r2, r1
 8008a9a:	d20a      	bcs.n	8008ab2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 8008a9c:	6804      	ldr	r4, [r0, #0]
 8008a9e:	f10d 0207 	add.w	r2, sp, #7
 8008aa2:	1ac9      	subs	r1, r1, r3
 8008aa4:	18e0      	adds	r0, r4, r3
 8008aa6:	f7ff fe10 	bl	80086ca <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 8008aaa:	b110      	cbz	r0, 8008ab2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 8008aac:	1b00      	subs	r0, r0, r4
 8008aae:	b002      	add	sp, #8
 8008ab0:	bd10      	pop	{r4, pc}
 8008ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab6:	e7fa      	b.n	8008aae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x20>

08008ab8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8008ab8:	6001      	str	r1, [r0, #0]
 8008aba:	4770      	bx	lr

08008abc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8008abc:	b510      	push	{r4, lr}
 8008abe:	4604      	mov	r4, r0
 8008ac0:	f100 0208 	add.w	r2, r0, #8
 8008ac4:	6002      	str	r2, [r0, #0]
 8008ac6:	e9d1 1200 	ldrd	r1, r2, [r1]
 8008aca:	f04f 0300 	mov.w	r3, #0
 8008ace:	440a      	add	r2, r1
 8008ad0:	f7fa f8fc 	bl	8002ccc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	bd10      	pop	{r4, pc}

08008ad8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8008ad8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ada:	4604      	mov	r4, r0
 8008adc:	4616      	mov	r6, r2
 8008ade:	460d      	mov	r5, r1
 8008ae0:	b919      	cbnz	r1, 8008aea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8008ae2:	b112      	cbz	r2, 8008aea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8008ae4:	480d      	ldr	r0, [pc, #52]	; (8008b1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8008ae6:	f7ff fd31 	bl	800854c <_ZSt19__throw_logic_errorPKc>
 8008aea:	1b73      	subs	r3, r6, r5
 8008aec:	2b0f      	cmp	r3, #15
 8008aee:	9301      	str	r3, [sp, #4]
 8008af0:	d907      	bls.n	8008b02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8008af2:	2200      	movs	r2, #0
 8008af4:	4620      	mov	r0, r4
 8008af6:	a901      	add	r1, sp, #4
 8008af8:	f7ff fdfc 	bl	80086f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8008afc:	9b01      	ldr	r3, [sp, #4]
 8008afe:	6020      	str	r0, [r4, #0]
 8008b00:	60a3      	str	r3, [r4, #8]
 8008b02:	4632      	mov	r2, r6
 8008b04:	4629      	mov	r1, r5
 8008b06:	6820      	ldr	r0, [r4, #0]
 8008b08:	f7ff fe5f 	bl	80087ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	9b01      	ldr	r3, [sp, #4]
 8008b10:	6822      	ldr	r2, [r4, #0]
 8008b12:	6063      	str	r3, [r4, #4]
 8008b14:	54d1      	strb	r1, [r2, r3]
 8008b16:	b002      	add	sp, #8
 8008b18:	bd70      	pop	{r4, r5, r6, pc}
 8008b1a:	bf00      	nop
 8008b1c:	0800bed2 	.word	0x0800bed2

08008b20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 8008b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b24:	460d      	mov	r5, r1
 8008b26:	4617      	mov	r7, r2
 8008b28:	4698      	mov	r8, r3
 8008b2a:	f100 0308 	add.w	r3, r0, #8
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4639      	mov	r1, r7
 8008b32:	6003      	str	r3, [r0, #0]
 8008b34:	4a0a      	ldr	r2, [pc, #40]	; (8008b60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
 8008b36:	4628      	mov	r0, r5
 8008b38:	f7ff fe06 	bl	8008748 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8008b3c:	686a      	ldr	r2, [r5, #4]
 8008b3e:	682e      	ldr	r6, [r5, #0]
 8008b40:	1bd7      	subs	r7, r2, r7
 8008b42:	1831      	adds	r1, r6, r0
 8008b44:	f04f 0300 	mov.w	r3, #0
 8008b48:	4620      	mov	r0, r4
 8008b4a:	4547      	cmp	r7, r8
 8008b4c:	bf94      	ite	ls
 8008b4e:	19ca      	addls	r2, r1, r7
 8008b50:	eb01 0208 	addhi.w	r2, r1, r8
 8008b54:	f7ff ffc0 	bl	8008ad8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8008b58:	4620      	mov	r0, r4
 8008b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b5e:	bf00      	nop
 8008b60:	0800befc 	.word	0x0800befc

08008b64 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 8008b64:	b570      	push	{r4, r5, r6, lr}
 8008b66:	460d      	mov	r5, r1
 8008b68:	4604      	mov	r4, r0
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	4a06      	ldr	r2, [pc, #24]	; (8008b88 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 8008b70:	461e      	mov	r6, r3
 8008b72:	f7ff fde9 	bl	8008748 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8008b76:	4633      	mov	r3, r6
 8008b78:	4602      	mov	r2, r0
 8008b7a:	4629      	mov	r1, r5
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f7ff ffcf 	bl	8008b20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 8008b82:	4620      	mov	r0, r4
 8008b84:	bd70      	pop	{r4, r5, r6, pc}
 8008b86:	bf00      	nop
 8008b88:	0800bf17 	.word	0x0800bf17

08008b8c <_ZdlPv>:
 8008b8c:	f000 b842 	b.w	8008c14 <free>

08008b90 <_ZSt15get_new_handlerv>:
 8008b90:	4b02      	ldr	r3, [pc, #8]	; (8008b9c <_ZSt15get_new_handlerv+0xc>)
 8008b92:	6818      	ldr	r0, [r3, #0]
 8008b94:	f3bf 8f5b 	dmb	ish
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	200015c8 	.word	0x200015c8

08008ba0 <abort>:
 8008ba0:	2006      	movs	r0, #6
 8008ba2:	b508      	push	{r3, lr}
 8008ba4:	f000 f990 	bl	8008ec8 <raise>
 8008ba8:	2001      	movs	r0, #1
 8008baa:	f7fb fdbf 	bl	800472c <_exit>
	...

08008bb0 <__errno>:
 8008bb0:	4b01      	ldr	r3, [pc, #4]	; (8008bb8 <__errno+0x8>)
 8008bb2:	6818      	ldr	r0, [r3, #0]
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	2000017c 	.word	0x2000017c

08008bbc <__libc_init_array>:
 8008bbc:	b570      	push	{r4, r5, r6, lr}
 8008bbe:	2600      	movs	r6, #0
 8008bc0:	4d0c      	ldr	r5, [pc, #48]	; (8008bf4 <__libc_init_array+0x38>)
 8008bc2:	4c0d      	ldr	r4, [pc, #52]	; (8008bf8 <__libc_init_array+0x3c>)
 8008bc4:	1b64      	subs	r4, r4, r5
 8008bc6:	10a4      	asrs	r4, r4, #2
 8008bc8:	42a6      	cmp	r6, r4
 8008bca:	d109      	bne.n	8008be0 <__libc_init_array+0x24>
 8008bcc:	f003 f89a 	bl	800bd04 <_init>
 8008bd0:	2600      	movs	r6, #0
 8008bd2:	4d0a      	ldr	r5, [pc, #40]	; (8008bfc <__libc_init_array+0x40>)
 8008bd4:	4c0a      	ldr	r4, [pc, #40]	; (8008c00 <__libc_init_array+0x44>)
 8008bd6:	1b64      	subs	r4, r4, r5
 8008bd8:	10a4      	asrs	r4, r4, #2
 8008bda:	42a6      	cmp	r6, r4
 8008bdc:	d105      	bne.n	8008bea <__libc_init_array+0x2e>
 8008bde:	bd70      	pop	{r4, r5, r6, pc}
 8008be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008be4:	4798      	blx	r3
 8008be6:	3601      	adds	r6, #1
 8008be8:	e7ee      	b.n	8008bc8 <__libc_init_array+0xc>
 8008bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bee:	4798      	blx	r3
 8008bf0:	3601      	adds	r6, #1
 8008bf2:	e7f2      	b.n	8008bda <__libc_init_array+0x1e>
 8008bf4:	0800c8c8 	.word	0x0800c8c8
 8008bf8:	0800c8c8 	.word	0x0800c8c8
 8008bfc:	0800c8c8 	.word	0x0800c8c8
 8008c00:	0800c8d4 	.word	0x0800c8d4

08008c04 <malloc>:
 8008c04:	4b02      	ldr	r3, [pc, #8]	; (8008c10 <malloc+0xc>)
 8008c06:	4601      	mov	r1, r0
 8008c08:	6818      	ldr	r0, [r3, #0]
 8008c0a:	f000 b8b1 	b.w	8008d70 <_malloc_r>
 8008c0e:	bf00      	nop
 8008c10:	2000017c 	.word	0x2000017c

08008c14 <free>:
 8008c14:	4b02      	ldr	r3, [pc, #8]	; (8008c20 <free+0xc>)
 8008c16:	4601      	mov	r1, r0
 8008c18:	6818      	ldr	r0, [r3, #0]
 8008c1a:	f000 b841 	b.w	8008ca0 <_free_r>
 8008c1e:	bf00      	nop
 8008c20:	2000017c 	.word	0x2000017c

08008c24 <memchr>:
 8008c24:	4603      	mov	r3, r0
 8008c26:	b510      	push	{r4, lr}
 8008c28:	b2c9      	uxtb	r1, r1
 8008c2a:	4402      	add	r2, r0
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	4618      	mov	r0, r3
 8008c30:	d101      	bne.n	8008c36 <memchr+0x12>
 8008c32:	2000      	movs	r0, #0
 8008c34:	e003      	b.n	8008c3e <memchr+0x1a>
 8008c36:	7804      	ldrb	r4, [r0, #0]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	428c      	cmp	r4, r1
 8008c3c:	d1f6      	bne.n	8008c2c <memchr+0x8>
 8008c3e:	bd10      	pop	{r4, pc}

08008c40 <memcpy>:
 8008c40:	440a      	add	r2, r1
 8008c42:	4291      	cmp	r1, r2
 8008c44:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c48:	d100      	bne.n	8008c4c <memcpy+0xc>
 8008c4a:	4770      	bx	lr
 8008c4c:	b510      	push	{r4, lr}
 8008c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c52:	4291      	cmp	r1, r2
 8008c54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c58:	d1f9      	bne.n	8008c4e <memcpy+0xe>
 8008c5a:	bd10      	pop	{r4, pc}

08008c5c <memmove>:
 8008c5c:	4288      	cmp	r0, r1
 8008c5e:	b510      	push	{r4, lr}
 8008c60:	eb01 0402 	add.w	r4, r1, r2
 8008c64:	d902      	bls.n	8008c6c <memmove+0x10>
 8008c66:	4284      	cmp	r4, r0
 8008c68:	4623      	mov	r3, r4
 8008c6a:	d807      	bhi.n	8008c7c <memmove+0x20>
 8008c6c:	1e43      	subs	r3, r0, #1
 8008c6e:	42a1      	cmp	r1, r4
 8008c70:	d008      	beq.n	8008c84 <memmove+0x28>
 8008c72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c7a:	e7f8      	b.n	8008c6e <memmove+0x12>
 8008c7c:	4601      	mov	r1, r0
 8008c7e:	4402      	add	r2, r0
 8008c80:	428a      	cmp	r2, r1
 8008c82:	d100      	bne.n	8008c86 <memmove+0x2a>
 8008c84:	bd10      	pop	{r4, pc}
 8008c86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c8e:	e7f7      	b.n	8008c80 <memmove+0x24>

08008c90 <memset>:
 8008c90:	4603      	mov	r3, r0
 8008c92:	4402      	add	r2, r0
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d100      	bne.n	8008c9a <memset+0xa>
 8008c98:	4770      	bx	lr
 8008c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c9e:	e7f9      	b.n	8008c94 <memset+0x4>

08008ca0 <_free_r>:
 8008ca0:	b538      	push	{r3, r4, r5, lr}
 8008ca2:	4605      	mov	r5, r0
 8008ca4:	2900      	cmp	r1, #0
 8008ca6:	d040      	beq.n	8008d2a <_free_r+0x8a>
 8008ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cac:	1f0c      	subs	r4, r1, #4
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	bfb8      	it	lt
 8008cb2:	18e4      	addlt	r4, r4, r3
 8008cb4:	f001 faee 	bl	800a294 <__malloc_lock>
 8008cb8:	4a1c      	ldr	r2, [pc, #112]	; (8008d2c <_free_r+0x8c>)
 8008cba:	6813      	ldr	r3, [r2, #0]
 8008cbc:	b933      	cbnz	r3, 8008ccc <_free_r+0x2c>
 8008cbe:	6063      	str	r3, [r4, #4]
 8008cc0:	6014      	str	r4, [r2, #0]
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cc8:	f001 baea 	b.w	800a2a0 <__malloc_unlock>
 8008ccc:	42a3      	cmp	r3, r4
 8008cce:	d908      	bls.n	8008ce2 <_free_r+0x42>
 8008cd0:	6820      	ldr	r0, [r4, #0]
 8008cd2:	1821      	adds	r1, r4, r0
 8008cd4:	428b      	cmp	r3, r1
 8008cd6:	bf01      	itttt	eq
 8008cd8:	6819      	ldreq	r1, [r3, #0]
 8008cda:	685b      	ldreq	r3, [r3, #4]
 8008cdc:	1809      	addeq	r1, r1, r0
 8008cde:	6021      	streq	r1, [r4, #0]
 8008ce0:	e7ed      	b.n	8008cbe <_free_r+0x1e>
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	b10b      	cbz	r3, 8008cec <_free_r+0x4c>
 8008ce8:	42a3      	cmp	r3, r4
 8008cea:	d9fa      	bls.n	8008ce2 <_free_r+0x42>
 8008cec:	6811      	ldr	r1, [r2, #0]
 8008cee:	1850      	adds	r0, r2, r1
 8008cf0:	42a0      	cmp	r0, r4
 8008cf2:	d10b      	bne.n	8008d0c <_free_r+0x6c>
 8008cf4:	6820      	ldr	r0, [r4, #0]
 8008cf6:	4401      	add	r1, r0
 8008cf8:	1850      	adds	r0, r2, r1
 8008cfa:	4283      	cmp	r3, r0
 8008cfc:	6011      	str	r1, [r2, #0]
 8008cfe:	d1e0      	bne.n	8008cc2 <_free_r+0x22>
 8008d00:	6818      	ldr	r0, [r3, #0]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	4401      	add	r1, r0
 8008d06:	6011      	str	r1, [r2, #0]
 8008d08:	6053      	str	r3, [r2, #4]
 8008d0a:	e7da      	b.n	8008cc2 <_free_r+0x22>
 8008d0c:	d902      	bls.n	8008d14 <_free_r+0x74>
 8008d0e:	230c      	movs	r3, #12
 8008d10:	602b      	str	r3, [r5, #0]
 8008d12:	e7d6      	b.n	8008cc2 <_free_r+0x22>
 8008d14:	6820      	ldr	r0, [r4, #0]
 8008d16:	1821      	adds	r1, r4, r0
 8008d18:	428b      	cmp	r3, r1
 8008d1a:	bf01      	itttt	eq
 8008d1c:	6819      	ldreq	r1, [r3, #0]
 8008d1e:	685b      	ldreq	r3, [r3, #4]
 8008d20:	1809      	addeq	r1, r1, r0
 8008d22:	6021      	streq	r1, [r4, #0]
 8008d24:	6063      	str	r3, [r4, #4]
 8008d26:	6054      	str	r4, [r2, #4]
 8008d28:	e7cb      	b.n	8008cc2 <_free_r+0x22>
 8008d2a:	bd38      	pop	{r3, r4, r5, pc}
 8008d2c:	200015cc 	.word	0x200015cc

08008d30 <sbrk_aligned>:
 8008d30:	b570      	push	{r4, r5, r6, lr}
 8008d32:	4e0e      	ldr	r6, [pc, #56]	; (8008d6c <sbrk_aligned+0x3c>)
 8008d34:	460c      	mov	r4, r1
 8008d36:	6831      	ldr	r1, [r6, #0]
 8008d38:	4605      	mov	r5, r0
 8008d3a:	b911      	cbnz	r1, 8008d42 <sbrk_aligned+0x12>
 8008d3c:	f000 f88c 	bl	8008e58 <_sbrk_r>
 8008d40:	6030      	str	r0, [r6, #0]
 8008d42:	4621      	mov	r1, r4
 8008d44:	4628      	mov	r0, r5
 8008d46:	f000 f887 	bl	8008e58 <_sbrk_r>
 8008d4a:	1c43      	adds	r3, r0, #1
 8008d4c:	d00a      	beq.n	8008d64 <sbrk_aligned+0x34>
 8008d4e:	1cc4      	adds	r4, r0, #3
 8008d50:	f024 0403 	bic.w	r4, r4, #3
 8008d54:	42a0      	cmp	r0, r4
 8008d56:	d007      	beq.n	8008d68 <sbrk_aligned+0x38>
 8008d58:	1a21      	subs	r1, r4, r0
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	f000 f87c 	bl	8008e58 <_sbrk_r>
 8008d60:	3001      	adds	r0, #1
 8008d62:	d101      	bne.n	8008d68 <sbrk_aligned+0x38>
 8008d64:	f04f 34ff 	mov.w	r4, #4294967295
 8008d68:	4620      	mov	r0, r4
 8008d6a:	bd70      	pop	{r4, r5, r6, pc}
 8008d6c:	200015d0 	.word	0x200015d0

08008d70 <_malloc_r>:
 8008d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d74:	1ccd      	adds	r5, r1, #3
 8008d76:	f025 0503 	bic.w	r5, r5, #3
 8008d7a:	3508      	adds	r5, #8
 8008d7c:	2d0c      	cmp	r5, #12
 8008d7e:	bf38      	it	cc
 8008d80:	250c      	movcc	r5, #12
 8008d82:	2d00      	cmp	r5, #0
 8008d84:	4607      	mov	r7, r0
 8008d86:	db01      	blt.n	8008d8c <_malloc_r+0x1c>
 8008d88:	42a9      	cmp	r1, r5
 8008d8a:	d905      	bls.n	8008d98 <_malloc_r+0x28>
 8008d8c:	230c      	movs	r3, #12
 8008d8e:	2600      	movs	r6, #0
 8008d90:	603b      	str	r3, [r7, #0]
 8008d92:	4630      	mov	r0, r6
 8008d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d98:	4e2e      	ldr	r6, [pc, #184]	; (8008e54 <_malloc_r+0xe4>)
 8008d9a:	f001 fa7b 	bl	800a294 <__malloc_lock>
 8008d9e:	6833      	ldr	r3, [r6, #0]
 8008da0:	461c      	mov	r4, r3
 8008da2:	bb34      	cbnz	r4, 8008df2 <_malloc_r+0x82>
 8008da4:	4629      	mov	r1, r5
 8008da6:	4638      	mov	r0, r7
 8008da8:	f7ff ffc2 	bl	8008d30 <sbrk_aligned>
 8008dac:	1c43      	adds	r3, r0, #1
 8008dae:	4604      	mov	r4, r0
 8008db0:	d14d      	bne.n	8008e4e <_malloc_r+0xde>
 8008db2:	6834      	ldr	r4, [r6, #0]
 8008db4:	4626      	mov	r6, r4
 8008db6:	2e00      	cmp	r6, #0
 8008db8:	d140      	bne.n	8008e3c <_malloc_r+0xcc>
 8008dba:	6823      	ldr	r3, [r4, #0]
 8008dbc:	4631      	mov	r1, r6
 8008dbe:	4638      	mov	r0, r7
 8008dc0:	eb04 0803 	add.w	r8, r4, r3
 8008dc4:	f000 f848 	bl	8008e58 <_sbrk_r>
 8008dc8:	4580      	cmp	r8, r0
 8008dca:	d13a      	bne.n	8008e42 <_malloc_r+0xd2>
 8008dcc:	6821      	ldr	r1, [r4, #0]
 8008dce:	3503      	adds	r5, #3
 8008dd0:	1a6d      	subs	r5, r5, r1
 8008dd2:	f025 0503 	bic.w	r5, r5, #3
 8008dd6:	3508      	adds	r5, #8
 8008dd8:	2d0c      	cmp	r5, #12
 8008dda:	bf38      	it	cc
 8008ddc:	250c      	movcc	r5, #12
 8008dde:	4638      	mov	r0, r7
 8008de0:	4629      	mov	r1, r5
 8008de2:	f7ff ffa5 	bl	8008d30 <sbrk_aligned>
 8008de6:	3001      	adds	r0, #1
 8008de8:	d02b      	beq.n	8008e42 <_malloc_r+0xd2>
 8008dea:	6823      	ldr	r3, [r4, #0]
 8008dec:	442b      	add	r3, r5
 8008dee:	6023      	str	r3, [r4, #0]
 8008df0:	e00e      	b.n	8008e10 <_malloc_r+0xa0>
 8008df2:	6822      	ldr	r2, [r4, #0]
 8008df4:	1b52      	subs	r2, r2, r5
 8008df6:	d41e      	bmi.n	8008e36 <_malloc_r+0xc6>
 8008df8:	2a0b      	cmp	r2, #11
 8008dfa:	d916      	bls.n	8008e2a <_malloc_r+0xba>
 8008dfc:	1961      	adds	r1, r4, r5
 8008dfe:	42a3      	cmp	r3, r4
 8008e00:	6025      	str	r5, [r4, #0]
 8008e02:	bf18      	it	ne
 8008e04:	6059      	strne	r1, [r3, #4]
 8008e06:	6863      	ldr	r3, [r4, #4]
 8008e08:	bf08      	it	eq
 8008e0a:	6031      	streq	r1, [r6, #0]
 8008e0c:	5162      	str	r2, [r4, r5]
 8008e0e:	604b      	str	r3, [r1, #4]
 8008e10:	4638      	mov	r0, r7
 8008e12:	f104 060b 	add.w	r6, r4, #11
 8008e16:	f001 fa43 	bl	800a2a0 <__malloc_unlock>
 8008e1a:	f026 0607 	bic.w	r6, r6, #7
 8008e1e:	1d23      	adds	r3, r4, #4
 8008e20:	1af2      	subs	r2, r6, r3
 8008e22:	d0b6      	beq.n	8008d92 <_malloc_r+0x22>
 8008e24:	1b9b      	subs	r3, r3, r6
 8008e26:	50a3      	str	r3, [r4, r2]
 8008e28:	e7b3      	b.n	8008d92 <_malloc_r+0x22>
 8008e2a:	6862      	ldr	r2, [r4, #4]
 8008e2c:	42a3      	cmp	r3, r4
 8008e2e:	bf0c      	ite	eq
 8008e30:	6032      	streq	r2, [r6, #0]
 8008e32:	605a      	strne	r2, [r3, #4]
 8008e34:	e7ec      	b.n	8008e10 <_malloc_r+0xa0>
 8008e36:	4623      	mov	r3, r4
 8008e38:	6864      	ldr	r4, [r4, #4]
 8008e3a:	e7b2      	b.n	8008da2 <_malloc_r+0x32>
 8008e3c:	4634      	mov	r4, r6
 8008e3e:	6876      	ldr	r6, [r6, #4]
 8008e40:	e7b9      	b.n	8008db6 <_malloc_r+0x46>
 8008e42:	230c      	movs	r3, #12
 8008e44:	4638      	mov	r0, r7
 8008e46:	603b      	str	r3, [r7, #0]
 8008e48:	f001 fa2a 	bl	800a2a0 <__malloc_unlock>
 8008e4c:	e7a1      	b.n	8008d92 <_malloc_r+0x22>
 8008e4e:	6025      	str	r5, [r4, #0]
 8008e50:	e7de      	b.n	8008e10 <_malloc_r+0xa0>
 8008e52:	bf00      	nop
 8008e54:	200015cc 	.word	0x200015cc

08008e58 <_sbrk_r>:
 8008e58:	b538      	push	{r3, r4, r5, lr}
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	4d05      	ldr	r5, [pc, #20]	; (8008e74 <_sbrk_r+0x1c>)
 8008e5e:	4604      	mov	r4, r0
 8008e60:	4608      	mov	r0, r1
 8008e62:	602b      	str	r3, [r5, #0]
 8008e64:	f7fb fc8e 	bl	8004784 <_sbrk>
 8008e68:	1c43      	adds	r3, r0, #1
 8008e6a:	d102      	bne.n	8008e72 <_sbrk_r+0x1a>
 8008e6c:	682b      	ldr	r3, [r5, #0]
 8008e6e:	b103      	cbz	r3, 8008e72 <_sbrk_r+0x1a>
 8008e70:	6023      	str	r3, [r4, #0]
 8008e72:	bd38      	pop	{r3, r4, r5, pc}
 8008e74:	200015d4 	.word	0x200015d4

08008e78 <_raise_r>:
 8008e78:	291f      	cmp	r1, #31
 8008e7a:	b538      	push	{r3, r4, r5, lr}
 8008e7c:	4604      	mov	r4, r0
 8008e7e:	460d      	mov	r5, r1
 8008e80:	d904      	bls.n	8008e8c <_raise_r+0x14>
 8008e82:	2316      	movs	r3, #22
 8008e84:	6003      	str	r3, [r0, #0]
 8008e86:	f04f 30ff 	mov.w	r0, #4294967295
 8008e8a:	bd38      	pop	{r3, r4, r5, pc}
 8008e8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008e8e:	b112      	cbz	r2, 8008e96 <_raise_r+0x1e>
 8008e90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e94:	b94b      	cbnz	r3, 8008eaa <_raise_r+0x32>
 8008e96:	4620      	mov	r0, r4
 8008e98:	f000 f830 	bl	8008efc <_getpid_r>
 8008e9c:	462a      	mov	r2, r5
 8008e9e:	4601      	mov	r1, r0
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ea6:	f000 b817 	b.w	8008ed8 <_kill_r>
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d00a      	beq.n	8008ec4 <_raise_r+0x4c>
 8008eae:	1c59      	adds	r1, r3, #1
 8008eb0:	d103      	bne.n	8008eba <_raise_r+0x42>
 8008eb2:	2316      	movs	r3, #22
 8008eb4:	6003      	str	r3, [r0, #0]
 8008eb6:	2001      	movs	r0, #1
 8008eb8:	e7e7      	b.n	8008e8a <_raise_r+0x12>
 8008eba:	2400      	movs	r4, #0
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ec2:	4798      	blx	r3
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	e7e0      	b.n	8008e8a <_raise_r+0x12>

08008ec8 <raise>:
 8008ec8:	4b02      	ldr	r3, [pc, #8]	; (8008ed4 <raise+0xc>)
 8008eca:	4601      	mov	r1, r0
 8008ecc:	6818      	ldr	r0, [r3, #0]
 8008ece:	f7ff bfd3 	b.w	8008e78 <_raise_r>
 8008ed2:	bf00      	nop
 8008ed4:	2000017c 	.word	0x2000017c

08008ed8 <_kill_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	2300      	movs	r3, #0
 8008edc:	4d06      	ldr	r5, [pc, #24]	; (8008ef8 <_kill_r+0x20>)
 8008ede:	4604      	mov	r4, r0
 8008ee0:	4608      	mov	r0, r1
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	602b      	str	r3, [r5, #0]
 8008ee6:	f7fb fc19 	bl	800471c <_kill>
 8008eea:	1c43      	adds	r3, r0, #1
 8008eec:	d102      	bne.n	8008ef4 <_kill_r+0x1c>
 8008eee:	682b      	ldr	r3, [r5, #0]
 8008ef0:	b103      	cbz	r3, 8008ef4 <_kill_r+0x1c>
 8008ef2:	6023      	str	r3, [r4, #0]
 8008ef4:	bd38      	pop	{r3, r4, r5, pc}
 8008ef6:	bf00      	nop
 8008ef8:	200015d4 	.word	0x200015d4

08008efc <_getpid_r>:
 8008efc:	f7fb bc0c 	b.w	8004718 <_getpid>

08008f00 <sulp>:
 8008f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f04:	460f      	mov	r7, r1
 8008f06:	4690      	mov	r8, r2
 8008f08:	f001 fd40 	bl	800a98c <__ulp>
 8008f0c:	4604      	mov	r4, r0
 8008f0e:	460d      	mov	r5, r1
 8008f10:	f1b8 0f00 	cmp.w	r8, #0
 8008f14:	d011      	beq.n	8008f3a <sulp+0x3a>
 8008f16:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008f1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	dd0b      	ble.n	8008f3a <sulp+0x3a>
 8008f22:	2400      	movs	r4, #0
 8008f24:	051b      	lsls	r3, r3, #20
 8008f26:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008f2a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008f2e:	4622      	mov	r2, r4
 8008f30:	462b      	mov	r3, r5
 8008f32:	f7f7 fad1 	bl	80004d8 <__aeabi_dmul>
 8008f36:	4604      	mov	r4, r0
 8008f38:	460d      	mov	r5, r1
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	4629      	mov	r1, r5
 8008f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f42:	0000      	movs	r0, r0
 8008f44:	0000      	movs	r0, r0
	...

08008f48 <_strtod_l>:
 8008f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4c:	469b      	mov	fp, r3
 8008f4e:	2300      	movs	r3, #0
 8008f50:	b09f      	sub	sp, #124	; 0x7c
 8008f52:	931a      	str	r3, [sp, #104]	; 0x68
 8008f54:	4b9e      	ldr	r3, [pc, #632]	; (80091d0 <_strtod_l+0x288>)
 8008f56:	4682      	mov	sl, r0
 8008f58:	681f      	ldr	r7, [r3, #0]
 8008f5a:	460e      	mov	r6, r1
 8008f5c:	4638      	mov	r0, r7
 8008f5e:	9215      	str	r2, [sp, #84]	; 0x54
 8008f60:	f7f7 f8f6 	bl	8000150 <strlen>
 8008f64:	f04f 0800 	mov.w	r8, #0
 8008f68:	4604      	mov	r4, r0
 8008f6a:	f04f 0900 	mov.w	r9, #0
 8008f6e:	9619      	str	r6, [sp, #100]	; 0x64
 8008f70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f72:	781a      	ldrb	r2, [r3, #0]
 8008f74:	2a2b      	cmp	r2, #43	; 0x2b
 8008f76:	d04c      	beq.n	8009012 <_strtod_l+0xca>
 8008f78:	d83a      	bhi.n	8008ff0 <_strtod_l+0xa8>
 8008f7a:	2a0d      	cmp	r2, #13
 8008f7c:	d833      	bhi.n	8008fe6 <_strtod_l+0x9e>
 8008f7e:	2a08      	cmp	r2, #8
 8008f80:	d833      	bhi.n	8008fea <_strtod_l+0xa2>
 8008f82:	2a00      	cmp	r2, #0
 8008f84:	d03d      	beq.n	8009002 <_strtod_l+0xba>
 8008f86:	2300      	movs	r3, #0
 8008f88:	930a      	str	r3, [sp, #40]	; 0x28
 8008f8a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008f8c:	782b      	ldrb	r3, [r5, #0]
 8008f8e:	2b30      	cmp	r3, #48	; 0x30
 8008f90:	f040 80aa 	bne.w	80090e8 <_strtod_l+0x1a0>
 8008f94:	786b      	ldrb	r3, [r5, #1]
 8008f96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008f9a:	2b58      	cmp	r3, #88	; 0x58
 8008f9c:	d166      	bne.n	800906c <_strtod_l+0x124>
 8008f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fa0:	4650      	mov	r0, sl
 8008fa2:	9301      	str	r3, [sp, #4]
 8008fa4:	ab1a      	add	r3, sp, #104	; 0x68
 8008fa6:	9300      	str	r3, [sp, #0]
 8008fa8:	4a8a      	ldr	r2, [pc, #552]	; (80091d4 <_strtod_l+0x28c>)
 8008faa:	f8cd b008 	str.w	fp, [sp, #8]
 8008fae:	ab1b      	add	r3, sp, #108	; 0x6c
 8008fb0:	a919      	add	r1, sp, #100	; 0x64
 8008fb2:	f000 fe5f 	bl	8009c74 <__gethex>
 8008fb6:	f010 0607 	ands.w	r6, r0, #7
 8008fba:	4604      	mov	r4, r0
 8008fbc:	d005      	beq.n	8008fca <_strtod_l+0x82>
 8008fbe:	2e06      	cmp	r6, #6
 8008fc0:	d129      	bne.n	8009016 <_strtod_l+0xce>
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	3501      	adds	r5, #1
 8008fc6:	9519      	str	r5, [sp, #100]	; 0x64
 8008fc8:	930a      	str	r3, [sp, #40]	; 0x28
 8008fca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f040 858a 	bne.w	8009ae6 <_strtod_l+0xb9e>
 8008fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fd4:	b1d3      	cbz	r3, 800900c <_strtod_l+0xc4>
 8008fd6:	4642      	mov	r2, r8
 8008fd8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008fdc:	4610      	mov	r0, r2
 8008fde:	4619      	mov	r1, r3
 8008fe0:	b01f      	add	sp, #124	; 0x7c
 8008fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe6:	2a20      	cmp	r2, #32
 8008fe8:	d1cd      	bne.n	8008f86 <_strtod_l+0x3e>
 8008fea:	3301      	adds	r3, #1
 8008fec:	9319      	str	r3, [sp, #100]	; 0x64
 8008fee:	e7bf      	b.n	8008f70 <_strtod_l+0x28>
 8008ff0:	2a2d      	cmp	r2, #45	; 0x2d
 8008ff2:	d1c8      	bne.n	8008f86 <_strtod_l+0x3e>
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	920a      	str	r2, [sp, #40]	; 0x28
 8008ff8:	1c5a      	adds	r2, r3, #1
 8008ffa:	9219      	str	r2, [sp, #100]	; 0x64
 8008ffc:	785b      	ldrb	r3, [r3, #1]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d1c3      	bne.n	8008f8a <_strtod_l+0x42>
 8009002:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009004:	9619      	str	r6, [sp, #100]	; 0x64
 8009006:	2b00      	cmp	r3, #0
 8009008:	f040 856b 	bne.w	8009ae2 <_strtod_l+0xb9a>
 800900c:	4642      	mov	r2, r8
 800900e:	464b      	mov	r3, r9
 8009010:	e7e4      	b.n	8008fdc <_strtod_l+0x94>
 8009012:	2200      	movs	r2, #0
 8009014:	e7ef      	b.n	8008ff6 <_strtod_l+0xae>
 8009016:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009018:	b13a      	cbz	r2, 800902a <_strtod_l+0xe2>
 800901a:	2135      	movs	r1, #53	; 0x35
 800901c:	a81c      	add	r0, sp, #112	; 0x70
 800901e:	f001 fdb9 	bl	800ab94 <__copybits>
 8009022:	4650      	mov	r0, sl
 8009024:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009026:	f001 f981 	bl	800a32c <_Bfree>
 800902a:	3e01      	subs	r6, #1
 800902c:	2e04      	cmp	r6, #4
 800902e:	d806      	bhi.n	800903e <_strtod_l+0xf6>
 8009030:	e8df f006 	tbb	[pc, r6]
 8009034:	1714030a 	.word	0x1714030a
 8009038:	0a          	.byte	0x0a
 8009039:	00          	.byte	0x00
 800903a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800903e:	0721      	lsls	r1, r4, #28
 8009040:	d5c3      	bpl.n	8008fca <_strtod_l+0x82>
 8009042:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009046:	e7c0      	b.n	8008fca <_strtod_l+0x82>
 8009048:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800904a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800904e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009052:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009056:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800905a:	e7f0      	b.n	800903e <_strtod_l+0xf6>
 800905c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80091d8 <_strtod_l+0x290>
 8009060:	e7ed      	b.n	800903e <_strtod_l+0xf6>
 8009062:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009066:	f04f 38ff 	mov.w	r8, #4294967295
 800906a:	e7e8      	b.n	800903e <_strtod_l+0xf6>
 800906c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800906e:	1c5a      	adds	r2, r3, #1
 8009070:	9219      	str	r2, [sp, #100]	; 0x64
 8009072:	785b      	ldrb	r3, [r3, #1]
 8009074:	2b30      	cmp	r3, #48	; 0x30
 8009076:	d0f9      	beq.n	800906c <_strtod_l+0x124>
 8009078:	2b00      	cmp	r3, #0
 800907a:	d0a6      	beq.n	8008fca <_strtod_l+0x82>
 800907c:	2301      	movs	r3, #1
 800907e:	9307      	str	r3, [sp, #28]
 8009080:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009082:	220a      	movs	r2, #10
 8009084:	9308      	str	r3, [sp, #32]
 8009086:	2300      	movs	r3, #0
 8009088:	469b      	mov	fp, r3
 800908a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800908e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009090:	7805      	ldrb	r5, [r0, #0]
 8009092:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009096:	b2d9      	uxtb	r1, r3
 8009098:	2909      	cmp	r1, #9
 800909a:	d927      	bls.n	80090ec <_strtod_l+0x1a4>
 800909c:	4622      	mov	r2, r4
 800909e:	4639      	mov	r1, r7
 80090a0:	f002 f8c8 	bl	800b234 <strncmp>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	d033      	beq.n	8009110 <_strtod_l+0x1c8>
 80090a8:	2000      	movs	r0, #0
 80090aa:	462a      	mov	r2, r5
 80090ac:	465c      	mov	r4, fp
 80090ae:	4603      	mov	r3, r0
 80090b0:	9004      	str	r0, [sp, #16]
 80090b2:	2a65      	cmp	r2, #101	; 0x65
 80090b4:	d001      	beq.n	80090ba <_strtod_l+0x172>
 80090b6:	2a45      	cmp	r2, #69	; 0x45
 80090b8:	d114      	bne.n	80090e4 <_strtod_l+0x19c>
 80090ba:	b91c      	cbnz	r4, 80090c4 <_strtod_l+0x17c>
 80090bc:	9a07      	ldr	r2, [sp, #28]
 80090be:	4302      	orrs	r2, r0
 80090c0:	d09f      	beq.n	8009002 <_strtod_l+0xba>
 80090c2:	2400      	movs	r4, #0
 80090c4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80090c6:	1c72      	adds	r2, r6, #1
 80090c8:	9219      	str	r2, [sp, #100]	; 0x64
 80090ca:	7872      	ldrb	r2, [r6, #1]
 80090cc:	2a2b      	cmp	r2, #43	; 0x2b
 80090ce:	d079      	beq.n	80091c4 <_strtod_l+0x27c>
 80090d0:	2a2d      	cmp	r2, #45	; 0x2d
 80090d2:	f000 8083 	beq.w	80091dc <_strtod_l+0x294>
 80090d6:	2700      	movs	r7, #0
 80090d8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80090dc:	2909      	cmp	r1, #9
 80090de:	f240 8083 	bls.w	80091e8 <_strtod_l+0x2a0>
 80090e2:	9619      	str	r6, [sp, #100]	; 0x64
 80090e4:	2500      	movs	r5, #0
 80090e6:	e09f      	b.n	8009228 <_strtod_l+0x2e0>
 80090e8:	2300      	movs	r3, #0
 80090ea:	e7c8      	b.n	800907e <_strtod_l+0x136>
 80090ec:	f1bb 0f08 	cmp.w	fp, #8
 80090f0:	bfd5      	itete	le
 80090f2:	9906      	ldrle	r1, [sp, #24]
 80090f4:	9905      	ldrgt	r1, [sp, #20]
 80090f6:	fb02 3301 	mlale	r3, r2, r1, r3
 80090fa:	fb02 3301 	mlagt	r3, r2, r1, r3
 80090fe:	f100 0001 	add.w	r0, r0, #1
 8009102:	bfd4      	ite	le
 8009104:	9306      	strle	r3, [sp, #24]
 8009106:	9305      	strgt	r3, [sp, #20]
 8009108:	f10b 0b01 	add.w	fp, fp, #1
 800910c:	9019      	str	r0, [sp, #100]	; 0x64
 800910e:	e7be      	b.n	800908e <_strtod_l+0x146>
 8009110:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009112:	191a      	adds	r2, r3, r4
 8009114:	9219      	str	r2, [sp, #100]	; 0x64
 8009116:	5d1a      	ldrb	r2, [r3, r4]
 8009118:	f1bb 0f00 	cmp.w	fp, #0
 800911c:	d036      	beq.n	800918c <_strtod_l+0x244>
 800911e:	465c      	mov	r4, fp
 8009120:	9004      	str	r0, [sp, #16]
 8009122:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009126:	2b09      	cmp	r3, #9
 8009128:	d912      	bls.n	8009150 <_strtod_l+0x208>
 800912a:	2301      	movs	r3, #1
 800912c:	e7c1      	b.n	80090b2 <_strtod_l+0x16a>
 800912e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009130:	3001      	adds	r0, #1
 8009132:	1c5a      	adds	r2, r3, #1
 8009134:	9219      	str	r2, [sp, #100]	; 0x64
 8009136:	785a      	ldrb	r2, [r3, #1]
 8009138:	2a30      	cmp	r2, #48	; 0x30
 800913a:	d0f8      	beq.n	800912e <_strtod_l+0x1e6>
 800913c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009140:	2b08      	cmp	r3, #8
 8009142:	f200 84d5 	bhi.w	8009af0 <_strtod_l+0xba8>
 8009146:	9004      	str	r0, [sp, #16]
 8009148:	2000      	movs	r0, #0
 800914a:	4604      	mov	r4, r0
 800914c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800914e:	9308      	str	r3, [sp, #32]
 8009150:	3a30      	subs	r2, #48	; 0x30
 8009152:	f100 0301 	add.w	r3, r0, #1
 8009156:	d013      	beq.n	8009180 <_strtod_l+0x238>
 8009158:	9904      	ldr	r1, [sp, #16]
 800915a:	1905      	adds	r5, r0, r4
 800915c:	4419      	add	r1, r3
 800915e:	9104      	str	r1, [sp, #16]
 8009160:	4623      	mov	r3, r4
 8009162:	210a      	movs	r1, #10
 8009164:	42ab      	cmp	r3, r5
 8009166:	d113      	bne.n	8009190 <_strtod_l+0x248>
 8009168:	1823      	adds	r3, r4, r0
 800916a:	2b08      	cmp	r3, #8
 800916c:	f104 0401 	add.w	r4, r4, #1
 8009170:	4404      	add	r4, r0
 8009172:	dc1b      	bgt.n	80091ac <_strtod_l+0x264>
 8009174:	230a      	movs	r3, #10
 8009176:	9906      	ldr	r1, [sp, #24]
 8009178:	fb03 2301 	mla	r3, r3, r1, r2
 800917c:	9306      	str	r3, [sp, #24]
 800917e:	2300      	movs	r3, #0
 8009180:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009182:	4618      	mov	r0, r3
 8009184:	1c51      	adds	r1, r2, #1
 8009186:	9119      	str	r1, [sp, #100]	; 0x64
 8009188:	7852      	ldrb	r2, [r2, #1]
 800918a:	e7ca      	b.n	8009122 <_strtod_l+0x1da>
 800918c:	4658      	mov	r0, fp
 800918e:	e7d3      	b.n	8009138 <_strtod_l+0x1f0>
 8009190:	2b08      	cmp	r3, #8
 8009192:	dc04      	bgt.n	800919e <_strtod_l+0x256>
 8009194:	9f06      	ldr	r7, [sp, #24]
 8009196:	434f      	muls	r7, r1
 8009198:	9706      	str	r7, [sp, #24]
 800919a:	3301      	adds	r3, #1
 800919c:	e7e2      	b.n	8009164 <_strtod_l+0x21c>
 800919e:	1c5f      	adds	r7, r3, #1
 80091a0:	2f10      	cmp	r7, #16
 80091a2:	bfde      	ittt	le
 80091a4:	9f05      	ldrle	r7, [sp, #20]
 80091a6:	434f      	mulle	r7, r1
 80091a8:	9705      	strle	r7, [sp, #20]
 80091aa:	e7f6      	b.n	800919a <_strtod_l+0x252>
 80091ac:	2c10      	cmp	r4, #16
 80091ae:	bfdf      	itttt	le
 80091b0:	230a      	movle	r3, #10
 80091b2:	9905      	ldrle	r1, [sp, #20]
 80091b4:	fb03 2301 	mlale	r3, r3, r1, r2
 80091b8:	9305      	strle	r3, [sp, #20]
 80091ba:	e7e0      	b.n	800917e <_strtod_l+0x236>
 80091bc:	2300      	movs	r3, #0
 80091be:	9304      	str	r3, [sp, #16]
 80091c0:	2301      	movs	r3, #1
 80091c2:	e77b      	b.n	80090bc <_strtod_l+0x174>
 80091c4:	2700      	movs	r7, #0
 80091c6:	1cb2      	adds	r2, r6, #2
 80091c8:	9219      	str	r2, [sp, #100]	; 0x64
 80091ca:	78b2      	ldrb	r2, [r6, #2]
 80091cc:	e784      	b.n	80090d8 <_strtod_l+0x190>
 80091ce:	bf00      	nop
 80091d0:	0800c008 	.word	0x0800c008
 80091d4:	0800bf3c 	.word	0x0800bf3c
 80091d8:	7ff00000 	.word	0x7ff00000
 80091dc:	2701      	movs	r7, #1
 80091de:	e7f2      	b.n	80091c6 <_strtod_l+0x27e>
 80091e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80091e2:	1c51      	adds	r1, r2, #1
 80091e4:	9119      	str	r1, [sp, #100]	; 0x64
 80091e6:	7852      	ldrb	r2, [r2, #1]
 80091e8:	2a30      	cmp	r2, #48	; 0x30
 80091ea:	d0f9      	beq.n	80091e0 <_strtod_l+0x298>
 80091ec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80091f0:	2908      	cmp	r1, #8
 80091f2:	f63f af77 	bhi.w	80090e4 <_strtod_l+0x19c>
 80091f6:	f04f 0e0a 	mov.w	lr, #10
 80091fa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80091fe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009200:	9209      	str	r2, [sp, #36]	; 0x24
 8009202:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009204:	1c51      	adds	r1, r2, #1
 8009206:	9119      	str	r1, [sp, #100]	; 0x64
 8009208:	7852      	ldrb	r2, [r2, #1]
 800920a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800920e:	2d09      	cmp	r5, #9
 8009210:	d935      	bls.n	800927e <_strtod_l+0x336>
 8009212:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009214:	1b49      	subs	r1, r1, r5
 8009216:	2908      	cmp	r1, #8
 8009218:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800921c:	dc02      	bgt.n	8009224 <_strtod_l+0x2dc>
 800921e:	4565      	cmp	r5, ip
 8009220:	bfa8      	it	ge
 8009222:	4665      	movge	r5, ip
 8009224:	b107      	cbz	r7, 8009228 <_strtod_l+0x2e0>
 8009226:	426d      	negs	r5, r5
 8009228:	2c00      	cmp	r4, #0
 800922a:	d14c      	bne.n	80092c6 <_strtod_l+0x37e>
 800922c:	9907      	ldr	r1, [sp, #28]
 800922e:	4301      	orrs	r1, r0
 8009230:	f47f aecb 	bne.w	8008fca <_strtod_l+0x82>
 8009234:	2b00      	cmp	r3, #0
 8009236:	f47f aee4 	bne.w	8009002 <_strtod_l+0xba>
 800923a:	2a69      	cmp	r2, #105	; 0x69
 800923c:	d026      	beq.n	800928c <_strtod_l+0x344>
 800923e:	dc23      	bgt.n	8009288 <_strtod_l+0x340>
 8009240:	2a49      	cmp	r2, #73	; 0x49
 8009242:	d023      	beq.n	800928c <_strtod_l+0x344>
 8009244:	2a4e      	cmp	r2, #78	; 0x4e
 8009246:	f47f aedc 	bne.w	8009002 <_strtod_l+0xba>
 800924a:	499d      	ldr	r1, [pc, #628]	; (80094c0 <_strtod_l+0x578>)
 800924c:	a819      	add	r0, sp, #100	; 0x64
 800924e:	f000 ff5f 	bl	800a110 <__match>
 8009252:	2800      	cmp	r0, #0
 8009254:	f43f aed5 	beq.w	8009002 <_strtod_l+0xba>
 8009258:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	2b28      	cmp	r3, #40	; 0x28
 800925e:	d12c      	bne.n	80092ba <_strtod_l+0x372>
 8009260:	4998      	ldr	r1, [pc, #608]	; (80094c4 <_strtod_l+0x57c>)
 8009262:	aa1c      	add	r2, sp, #112	; 0x70
 8009264:	a819      	add	r0, sp, #100	; 0x64
 8009266:	f000 ff67 	bl	800a138 <__hexnan>
 800926a:	2805      	cmp	r0, #5
 800926c:	d125      	bne.n	80092ba <_strtod_l+0x372>
 800926e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009270:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009274:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009278:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800927c:	e6a5      	b.n	8008fca <_strtod_l+0x82>
 800927e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8009282:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009286:	e7bc      	b.n	8009202 <_strtod_l+0x2ba>
 8009288:	2a6e      	cmp	r2, #110	; 0x6e
 800928a:	e7dc      	b.n	8009246 <_strtod_l+0x2fe>
 800928c:	498e      	ldr	r1, [pc, #568]	; (80094c8 <_strtod_l+0x580>)
 800928e:	a819      	add	r0, sp, #100	; 0x64
 8009290:	f000 ff3e 	bl	800a110 <__match>
 8009294:	2800      	cmp	r0, #0
 8009296:	f43f aeb4 	beq.w	8009002 <_strtod_l+0xba>
 800929a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800929c:	498b      	ldr	r1, [pc, #556]	; (80094cc <_strtod_l+0x584>)
 800929e:	3b01      	subs	r3, #1
 80092a0:	a819      	add	r0, sp, #100	; 0x64
 80092a2:	9319      	str	r3, [sp, #100]	; 0x64
 80092a4:	f000 ff34 	bl	800a110 <__match>
 80092a8:	b910      	cbnz	r0, 80092b0 <_strtod_l+0x368>
 80092aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80092ac:	3301      	adds	r3, #1
 80092ae:	9319      	str	r3, [sp, #100]	; 0x64
 80092b0:	f04f 0800 	mov.w	r8, #0
 80092b4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80094d0 <_strtod_l+0x588>
 80092b8:	e687      	b.n	8008fca <_strtod_l+0x82>
 80092ba:	4886      	ldr	r0, [pc, #536]	; (80094d4 <_strtod_l+0x58c>)
 80092bc:	f001 ffb4 	bl	800b228 <nan>
 80092c0:	4680      	mov	r8, r0
 80092c2:	4689      	mov	r9, r1
 80092c4:	e681      	b.n	8008fca <_strtod_l+0x82>
 80092c6:	9b04      	ldr	r3, [sp, #16]
 80092c8:	f1bb 0f00 	cmp.w	fp, #0
 80092cc:	bf08      	it	eq
 80092ce:	46a3      	moveq	fp, r4
 80092d0:	1aeb      	subs	r3, r5, r3
 80092d2:	2c10      	cmp	r4, #16
 80092d4:	9806      	ldr	r0, [sp, #24]
 80092d6:	4626      	mov	r6, r4
 80092d8:	9307      	str	r3, [sp, #28]
 80092da:	bfa8      	it	ge
 80092dc:	2610      	movge	r6, #16
 80092de:	f7f7 f881 	bl	80003e4 <__aeabi_ui2d>
 80092e2:	2c09      	cmp	r4, #9
 80092e4:	4680      	mov	r8, r0
 80092e6:	4689      	mov	r9, r1
 80092e8:	dd13      	ble.n	8009312 <_strtod_l+0x3ca>
 80092ea:	4b7b      	ldr	r3, [pc, #492]	; (80094d8 <_strtod_l+0x590>)
 80092ec:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80092f0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80092f4:	f7f7 f8f0 	bl	80004d8 <__aeabi_dmul>
 80092f8:	4680      	mov	r8, r0
 80092fa:	9805      	ldr	r0, [sp, #20]
 80092fc:	4689      	mov	r9, r1
 80092fe:	f7f7 f871 	bl	80003e4 <__aeabi_ui2d>
 8009302:	4602      	mov	r2, r0
 8009304:	460b      	mov	r3, r1
 8009306:	4640      	mov	r0, r8
 8009308:	4649      	mov	r1, r9
 800930a:	f7f6 ff2f 	bl	800016c <__adddf3>
 800930e:	4680      	mov	r8, r0
 8009310:	4689      	mov	r9, r1
 8009312:	2c0f      	cmp	r4, #15
 8009314:	dc36      	bgt.n	8009384 <_strtod_l+0x43c>
 8009316:	9b07      	ldr	r3, [sp, #28]
 8009318:	2b00      	cmp	r3, #0
 800931a:	f43f ae56 	beq.w	8008fca <_strtod_l+0x82>
 800931e:	dd22      	ble.n	8009366 <_strtod_l+0x41e>
 8009320:	2b16      	cmp	r3, #22
 8009322:	dc09      	bgt.n	8009338 <_strtod_l+0x3f0>
 8009324:	496c      	ldr	r1, [pc, #432]	; (80094d8 <_strtod_l+0x590>)
 8009326:	4642      	mov	r2, r8
 8009328:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800932c:	464b      	mov	r3, r9
 800932e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009332:	f7f7 f8d1 	bl	80004d8 <__aeabi_dmul>
 8009336:	e7c3      	b.n	80092c0 <_strtod_l+0x378>
 8009338:	9a07      	ldr	r2, [sp, #28]
 800933a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800933e:	4293      	cmp	r3, r2
 8009340:	db20      	blt.n	8009384 <_strtod_l+0x43c>
 8009342:	4d65      	ldr	r5, [pc, #404]	; (80094d8 <_strtod_l+0x590>)
 8009344:	f1c4 040f 	rsb	r4, r4, #15
 8009348:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800934c:	4642      	mov	r2, r8
 800934e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009352:	464b      	mov	r3, r9
 8009354:	f7f7 f8c0 	bl	80004d8 <__aeabi_dmul>
 8009358:	9b07      	ldr	r3, [sp, #28]
 800935a:	1b1c      	subs	r4, r3, r4
 800935c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009360:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009364:	e7e5      	b.n	8009332 <_strtod_l+0x3ea>
 8009366:	9b07      	ldr	r3, [sp, #28]
 8009368:	3316      	adds	r3, #22
 800936a:	db0b      	blt.n	8009384 <_strtod_l+0x43c>
 800936c:	9b04      	ldr	r3, [sp, #16]
 800936e:	4640      	mov	r0, r8
 8009370:	1b5d      	subs	r5, r3, r5
 8009372:	4b59      	ldr	r3, [pc, #356]	; (80094d8 <_strtod_l+0x590>)
 8009374:	4649      	mov	r1, r9
 8009376:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800937a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800937e:	f7f7 f9d5 	bl	800072c <__aeabi_ddiv>
 8009382:	e79d      	b.n	80092c0 <_strtod_l+0x378>
 8009384:	9b07      	ldr	r3, [sp, #28]
 8009386:	1ba6      	subs	r6, r4, r6
 8009388:	441e      	add	r6, r3
 800938a:	2e00      	cmp	r6, #0
 800938c:	dd74      	ble.n	8009478 <_strtod_l+0x530>
 800938e:	f016 030f 	ands.w	r3, r6, #15
 8009392:	d00a      	beq.n	80093aa <_strtod_l+0x462>
 8009394:	4950      	ldr	r1, [pc, #320]	; (80094d8 <_strtod_l+0x590>)
 8009396:	4642      	mov	r2, r8
 8009398:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800939c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093a0:	464b      	mov	r3, r9
 80093a2:	f7f7 f899 	bl	80004d8 <__aeabi_dmul>
 80093a6:	4680      	mov	r8, r0
 80093a8:	4689      	mov	r9, r1
 80093aa:	f036 060f 	bics.w	r6, r6, #15
 80093ae:	d052      	beq.n	8009456 <_strtod_l+0x50e>
 80093b0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80093b4:	dd27      	ble.n	8009406 <_strtod_l+0x4be>
 80093b6:	f04f 0b00 	mov.w	fp, #0
 80093ba:	f8cd b010 	str.w	fp, [sp, #16]
 80093be:	f8cd b020 	str.w	fp, [sp, #32]
 80093c2:	f8cd b018 	str.w	fp, [sp, #24]
 80093c6:	2322      	movs	r3, #34	; 0x22
 80093c8:	f04f 0800 	mov.w	r8, #0
 80093cc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80094d0 <_strtod_l+0x588>
 80093d0:	f8ca 3000 	str.w	r3, [sl]
 80093d4:	9b08      	ldr	r3, [sp, #32]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f43f adf7 	beq.w	8008fca <_strtod_l+0x82>
 80093dc:	4650      	mov	r0, sl
 80093de:	991a      	ldr	r1, [sp, #104]	; 0x68
 80093e0:	f000 ffa4 	bl	800a32c <_Bfree>
 80093e4:	4650      	mov	r0, sl
 80093e6:	9906      	ldr	r1, [sp, #24]
 80093e8:	f000 ffa0 	bl	800a32c <_Bfree>
 80093ec:	4650      	mov	r0, sl
 80093ee:	9904      	ldr	r1, [sp, #16]
 80093f0:	f000 ff9c 	bl	800a32c <_Bfree>
 80093f4:	4650      	mov	r0, sl
 80093f6:	9908      	ldr	r1, [sp, #32]
 80093f8:	f000 ff98 	bl	800a32c <_Bfree>
 80093fc:	4659      	mov	r1, fp
 80093fe:	4650      	mov	r0, sl
 8009400:	f000 ff94 	bl	800a32c <_Bfree>
 8009404:	e5e1      	b.n	8008fca <_strtod_l+0x82>
 8009406:	4b35      	ldr	r3, [pc, #212]	; (80094dc <_strtod_l+0x594>)
 8009408:	4640      	mov	r0, r8
 800940a:	9305      	str	r3, [sp, #20]
 800940c:	2300      	movs	r3, #0
 800940e:	4649      	mov	r1, r9
 8009410:	461f      	mov	r7, r3
 8009412:	1136      	asrs	r6, r6, #4
 8009414:	2e01      	cmp	r6, #1
 8009416:	dc21      	bgt.n	800945c <_strtod_l+0x514>
 8009418:	b10b      	cbz	r3, 800941e <_strtod_l+0x4d6>
 800941a:	4680      	mov	r8, r0
 800941c:	4689      	mov	r9, r1
 800941e:	4b2f      	ldr	r3, [pc, #188]	; (80094dc <_strtod_l+0x594>)
 8009420:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009424:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009428:	4642      	mov	r2, r8
 800942a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800942e:	464b      	mov	r3, r9
 8009430:	f7f7 f852 	bl	80004d8 <__aeabi_dmul>
 8009434:	4b26      	ldr	r3, [pc, #152]	; (80094d0 <_strtod_l+0x588>)
 8009436:	460a      	mov	r2, r1
 8009438:	400b      	ands	r3, r1
 800943a:	4929      	ldr	r1, [pc, #164]	; (80094e0 <_strtod_l+0x598>)
 800943c:	4680      	mov	r8, r0
 800943e:	428b      	cmp	r3, r1
 8009440:	d8b9      	bhi.n	80093b6 <_strtod_l+0x46e>
 8009442:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009446:	428b      	cmp	r3, r1
 8009448:	bf86      	itte	hi
 800944a:	f04f 38ff 	movhi.w	r8, #4294967295
 800944e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80094e4 <_strtod_l+0x59c>
 8009452:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009456:	2300      	movs	r3, #0
 8009458:	9305      	str	r3, [sp, #20]
 800945a:	e07f      	b.n	800955c <_strtod_l+0x614>
 800945c:	07f2      	lsls	r2, r6, #31
 800945e:	d505      	bpl.n	800946c <_strtod_l+0x524>
 8009460:	9b05      	ldr	r3, [sp, #20]
 8009462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009466:	f7f7 f837 	bl	80004d8 <__aeabi_dmul>
 800946a:	2301      	movs	r3, #1
 800946c:	9a05      	ldr	r2, [sp, #20]
 800946e:	3701      	adds	r7, #1
 8009470:	3208      	adds	r2, #8
 8009472:	1076      	asrs	r6, r6, #1
 8009474:	9205      	str	r2, [sp, #20]
 8009476:	e7cd      	b.n	8009414 <_strtod_l+0x4cc>
 8009478:	d0ed      	beq.n	8009456 <_strtod_l+0x50e>
 800947a:	4276      	negs	r6, r6
 800947c:	f016 020f 	ands.w	r2, r6, #15
 8009480:	d00a      	beq.n	8009498 <_strtod_l+0x550>
 8009482:	4b15      	ldr	r3, [pc, #84]	; (80094d8 <_strtod_l+0x590>)
 8009484:	4640      	mov	r0, r8
 8009486:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800948a:	4649      	mov	r1, r9
 800948c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009490:	f7f7 f94c 	bl	800072c <__aeabi_ddiv>
 8009494:	4680      	mov	r8, r0
 8009496:	4689      	mov	r9, r1
 8009498:	1136      	asrs	r6, r6, #4
 800949a:	d0dc      	beq.n	8009456 <_strtod_l+0x50e>
 800949c:	2e1f      	cmp	r6, #31
 800949e:	dd23      	ble.n	80094e8 <_strtod_l+0x5a0>
 80094a0:	f04f 0b00 	mov.w	fp, #0
 80094a4:	f8cd b010 	str.w	fp, [sp, #16]
 80094a8:	f8cd b020 	str.w	fp, [sp, #32]
 80094ac:	f8cd b018 	str.w	fp, [sp, #24]
 80094b0:	2322      	movs	r3, #34	; 0x22
 80094b2:	f04f 0800 	mov.w	r8, #0
 80094b6:	f04f 0900 	mov.w	r9, #0
 80094ba:	f8ca 3000 	str.w	r3, [sl]
 80094be:	e789      	b.n	80093d4 <_strtod_l+0x48c>
 80094c0:	0800bf39 	.word	0x0800bf39
 80094c4:	0800bf50 	.word	0x0800bf50
 80094c8:	0800bf30 	.word	0x0800bf30
 80094cc:	0800bf33 	.word	0x0800bf33
 80094d0:	7ff00000 	.word	0x7ff00000
 80094d4:	0800c1fa 	.word	0x0800c1fa
 80094d8:	0800c0b8 	.word	0x0800c0b8
 80094dc:	0800c090 	.word	0x0800c090
 80094e0:	7ca00000 	.word	0x7ca00000
 80094e4:	7fefffff 	.word	0x7fefffff
 80094e8:	f016 0310 	ands.w	r3, r6, #16
 80094ec:	bf18      	it	ne
 80094ee:	236a      	movne	r3, #106	; 0x6a
 80094f0:	4640      	mov	r0, r8
 80094f2:	9305      	str	r3, [sp, #20]
 80094f4:	4649      	mov	r1, r9
 80094f6:	2300      	movs	r3, #0
 80094f8:	4fb0      	ldr	r7, [pc, #704]	; (80097bc <_strtod_l+0x874>)
 80094fa:	07f2      	lsls	r2, r6, #31
 80094fc:	d504      	bpl.n	8009508 <_strtod_l+0x5c0>
 80094fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009502:	f7f6 ffe9 	bl	80004d8 <__aeabi_dmul>
 8009506:	2301      	movs	r3, #1
 8009508:	1076      	asrs	r6, r6, #1
 800950a:	f107 0708 	add.w	r7, r7, #8
 800950e:	d1f4      	bne.n	80094fa <_strtod_l+0x5b2>
 8009510:	b10b      	cbz	r3, 8009516 <_strtod_l+0x5ce>
 8009512:	4680      	mov	r8, r0
 8009514:	4689      	mov	r9, r1
 8009516:	9b05      	ldr	r3, [sp, #20]
 8009518:	b1c3      	cbz	r3, 800954c <_strtod_l+0x604>
 800951a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800951e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009522:	2b00      	cmp	r3, #0
 8009524:	4649      	mov	r1, r9
 8009526:	dd11      	ble.n	800954c <_strtod_l+0x604>
 8009528:	2b1f      	cmp	r3, #31
 800952a:	f340 8127 	ble.w	800977c <_strtod_l+0x834>
 800952e:	2b34      	cmp	r3, #52	; 0x34
 8009530:	bfd8      	it	le
 8009532:	f04f 33ff 	movle.w	r3, #4294967295
 8009536:	f04f 0800 	mov.w	r8, #0
 800953a:	bfcf      	iteee	gt
 800953c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009540:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009544:	fa03 f202 	lslle.w	r2, r3, r2
 8009548:	ea02 0901 	andle.w	r9, r2, r1
 800954c:	2200      	movs	r2, #0
 800954e:	2300      	movs	r3, #0
 8009550:	4640      	mov	r0, r8
 8009552:	4649      	mov	r1, r9
 8009554:	f7f7 fa28 	bl	80009a8 <__aeabi_dcmpeq>
 8009558:	2800      	cmp	r0, #0
 800955a:	d1a1      	bne.n	80094a0 <_strtod_l+0x558>
 800955c:	9b06      	ldr	r3, [sp, #24]
 800955e:	465a      	mov	r2, fp
 8009560:	9300      	str	r3, [sp, #0]
 8009562:	4650      	mov	r0, sl
 8009564:	4623      	mov	r3, r4
 8009566:	9908      	ldr	r1, [sp, #32]
 8009568:	f000 ff48 	bl	800a3fc <__s2b>
 800956c:	9008      	str	r0, [sp, #32]
 800956e:	2800      	cmp	r0, #0
 8009570:	f43f af21 	beq.w	80093b6 <_strtod_l+0x46e>
 8009574:	9b04      	ldr	r3, [sp, #16]
 8009576:	f04f 0b00 	mov.w	fp, #0
 800957a:	1b5d      	subs	r5, r3, r5
 800957c:	9b07      	ldr	r3, [sp, #28]
 800957e:	f8cd b010 	str.w	fp, [sp, #16]
 8009582:	2b00      	cmp	r3, #0
 8009584:	bfb4      	ite	lt
 8009586:	462b      	movlt	r3, r5
 8009588:	2300      	movge	r3, #0
 800958a:	930e      	str	r3, [sp, #56]	; 0x38
 800958c:	9b07      	ldr	r3, [sp, #28]
 800958e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009592:	9314      	str	r3, [sp, #80]	; 0x50
 8009594:	9b08      	ldr	r3, [sp, #32]
 8009596:	4650      	mov	r0, sl
 8009598:	6859      	ldr	r1, [r3, #4]
 800959a:	f000 fe87 	bl	800a2ac <_Balloc>
 800959e:	9006      	str	r0, [sp, #24]
 80095a0:	2800      	cmp	r0, #0
 80095a2:	f43f af10 	beq.w	80093c6 <_strtod_l+0x47e>
 80095a6:	9b08      	ldr	r3, [sp, #32]
 80095a8:	300c      	adds	r0, #12
 80095aa:	691a      	ldr	r2, [r3, #16]
 80095ac:	f103 010c 	add.w	r1, r3, #12
 80095b0:	3202      	adds	r2, #2
 80095b2:	0092      	lsls	r2, r2, #2
 80095b4:	f7ff fb44 	bl	8008c40 <memcpy>
 80095b8:	ab1c      	add	r3, sp, #112	; 0x70
 80095ba:	9301      	str	r3, [sp, #4]
 80095bc:	ab1b      	add	r3, sp, #108	; 0x6c
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	4642      	mov	r2, r8
 80095c2:	464b      	mov	r3, r9
 80095c4:	4650      	mov	r0, sl
 80095c6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80095ca:	f001 fa59 	bl	800aa80 <__d2b>
 80095ce:	901a      	str	r0, [sp, #104]	; 0x68
 80095d0:	2800      	cmp	r0, #0
 80095d2:	f43f aef8 	beq.w	80093c6 <_strtod_l+0x47e>
 80095d6:	2101      	movs	r1, #1
 80095d8:	4650      	mov	r0, sl
 80095da:	f000 ffa7 	bl	800a52c <__i2b>
 80095de:	4603      	mov	r3, r0
 80095e0:	9004      	str	r0, [sp, #16]
 80095e2:	2800      	cmp	r0, #0
 80095e4:	f43f aeef 	beq.w	80093c6 <_strtod_l+0x47e>
 80095e8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80095ea:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80095ec:	2d00      	cmp	r5, #0
 80095ee:	bfab      	itete	ge
 80095f0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80095f2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80095f4:	18ee      	addge	r6, r5, r3
 80095f6:	1b5c      	sublt	r4, r3, r5
 80095f8:	9b05      	ldr	r3, [sp, #20]
 80095fa:	bfa8      	it	ge
 80095fc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80095fe:	eba5 0503 	sub.w	r5, r5, r3
 8009602:	4415      	add	r5, r2
 8009604:	4b6e      	ldr	r3, [pc, #440]	; (80097c0 <_strtod_l+0x878>)
 8009606:	f105 35ff 	add.w	r5, r5, #4294967295
 800960a:	bfb8      	it	lt
 800960c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800960e:	429d      	cmp	r5, r3
 8009610:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009614:	f280 80c4 	bge.w	80097a0 <_strtod_l+0x858>
 8009618:	1b5b      	subs	r3, r3, r5
 800961a:	2b1f      	cmp	r3, #31
 800961c:	f04f 0701 	mov.w	r7, #1
 8009620:	eba2 0203 	sub.w	r2, r2, r3
 8009624:	f300 80b1 	bgt.w	800978a <_strtod_l+0x842>
 8009628:	2500      	movs	r5, #0
 800962a:	fa07 f303 	lsl.w	r3, r7, r3
 800962e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009630:	18b7      	adds	r7, r6, r2
 8009632:	9b05      	ldr	r3, [sp, #20]
 8009634:	42be      	cmp	r6, r7
 8009636:	4414      	add	r4, r2
 8009638:	441c      	add	r4, r3
 800963a:	4633      	mov	r3, r6
 800963c:	bfa8      	it	ge
 800963e:	463b      	movge	r3, r7
 8009640:	42a3      	cmp	r3, r4
 8009642:	bfa8      	it	ge
 8009644:	4623      	movge	r3, r4
 8009646:	2b00      	cmp	r3, #0
 8009648:	bfc2      	ittt	gt
 800964a:	1aff      	subgt	r7, r7, r3
 800964c:	1ae4      	subgt	r4, r4, r3
 800964e:	1af6      	subgt	r6, r6, r3
 8009650:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009652:	2b00      	cmp	r3, #0
 8009654:	dd17      	ble.n	8009686 <_strtod_l+0x73e>
 8009656:	461a      	mov	r2, r3
 8009658:	4650      	mov	r0, sl
 800965a:	9904      	ldr	r1, [sp, #16]
 800965c:	f001 f824 	bl	800a6a8 <__pow5mult>
 8009660:	9004      	str	r0, [sp, #16]
 8009662:	2800      	cmp	r0, #0
 8009664:	f43f aeaf 	beq.w	80093c6 <_strtod_l+0x47e>
 8009668:	4601      	mov	r1, r0
 800966a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800966c:	4650      	mov	r0, sl
 800966e:	f000 ff73 	bl	800a558 <__multiply>
 8009672:	9009      	str	r0, [sp, #36]	; 0x24
 8009674:	2800      	cmp	r0, #0
 8009676:	f43f aea6 	beq.w	80093c6 <_strtod_l+0x47e>
 800967a:	4650      	mov	r0, sl
 800967c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800967e:	f000 fe55 	bl	800a32c <_Bfree>
 8009682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009684:	931a      	str	r3, [sp, #104]	; 0x68
 8009686:	2f00      	cmp	r7, #0
 8009688:	f300 808e 	bgt.w	80097a8 <_strtod_l+0x860>
 800968c:	9b07      	ldr	r3, [sp, #28]
 800968e:	2b00      	cmp	r3, #0
 8009690:	dd08      	ble.n	80096a4 <_strtod_l+0x75c>
 8009692:	4650      	mov	r0, sl
 8009694:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009696:	9906      	ldr	r1, [sp, #24]
 8009698:	f001 f806 	bl	800a6a8 <__pow5mult>
 800969c:	9006      	str	r0, [sp, #24]
 800969e:	2800      	cmp	r0, #0
 80096a0:	f43f ae91 	beq.w	80093c6 <_strtod_l+0x47e>
 80096a4:	2c00      	cmp	r4, #0
 80096a6:	dd08      	ble.n	80096ba <_strtod_l+0x772>
 80096a8:	4622      	mov	r2, r4
 80096aa:	4650      	mov	r0, sl
 80096ac:	9906      	ldr	r1, [sp, #24]
 80096ae:	f001 f855 	bl	800a75c <__lshift>
 80096b2:	9006      	str	r0, [sp, #24]
 80096b4:	2800      	cmp	r0, #0
 80096b6:	f43f ae86 	beq.w	80093c6 <_strtod_l+0x47e>
 80096ba:	2e00      	cmp	r6, #0
 80096bc:	dd08      	ble.n	80096d0 <_strtod_l+0x788>
 80096be:	4632      	mov	r2, r6
 80096c0:	4650      	mov	r0, sl
 80096c2:	9904      	ldr	r1, [sp, #16]
 80096c4:	f001 f84a 	bl	800a75c <__lshift>
 80096c8:	9004      	str	r0, [sp, #16]
 80096ca:	2800      	cmp	r0, #0
 80096cc:	f43f ae7b 	beq.w	80093c6 <_strtod_l+0x47e>
 80096d0:	4650      	mov	r0, sl
 80096d2:	9a06      	ldr	r2, [sp, #24]
 80096d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80096d6:	f001 f8cd 	bl	800a874 <__mdiff>
 80096da:	4683      	mov	fp, r0
 80096dc:	2800      	cmp	r0, #0
 80096de:	f43f ae72 	beq.w	80093c6 <_strtod_l+0x47e>
 80096e2:	2400      	movs	r4, #0
 80096e4:	68c3      	ldr	r3, [r0, #12]
 80096e6:	9904      	ldr	r1, [sp, #16]
 80096e8:	60c4      	str	r4, [r0, #12]
 80096ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80096ec:	f001 f8a6 	bl	800a83c <__mcmp>
 80096f0:	42a0      	cmp	r0, r4
 80096f2:	da6b      	bge.n	80097cc <_strtod_l+0x884>
 80096f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096f6:	ea53 0308 	orrs.w	r3, r3, r8
 80096fa:	f040 8091 	bne.w	8009820 <_strtod_l+0x8d8>
 80096fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009702:	2b00      	cmp	r3, #0
 8009704:	f040 808c 	bne.w	8009820 <_strtod_l+0x8d8>
 8009708:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800970c:	0d1b      	lsrs	r3, r3, #20
 800970e:	051b      	lsls	r3, r3, #20
 8009710:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009714:	f240 8084 	bls.w	8009820 <_strtod_l+0x8d8>
 8009718:	f8db 3014 	ldr.w	r3, [fp, #20]
 800971c:	b91b      	cbnz	r3, 8009726 <_strtod_l+0x7de>
 800971e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009722:	2b01      	cmp	r3, #1
 8009724:	dd7c      	ble.n	8009820 <_strtod_l+0x8d8>
 8009726:	4659      	mov	r1, fp
 8009728:	2201      	movs	r2, #1
 800972a:	4650      	mov	r0, sl
 800972c:	f001 f816 	bl	800a75c <__lshift>
 8009730:	9904      	ldr	r1, [sp, #16]
 8009732:	4683      	mov	fp, r0
 8009734:	f001 f882 	bl	800a83c <__mcmp>
 8009738:	2800      	cmp	r0, #0
 800973a:	dd71      	ble.n	8009820 <_strtod_l+0x8d8>
 800973c:	9905      	ldr	r1, [sp, #20]
 800973e:	464b      	mov	r3, r9
 8009740:	4a20      	ldr	r2, [pc, #128]	; (80097c4 <_strtod_l+0x87c>)
 8009742:	2900      	cmp	r1, #0
 8009744:	f000 808c 	beq.w	8009860 <_strtod_l+0x918>
 8009748:	ea02 0109 	and.w	r1, r2, r9
 800974c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009750:	f300 8086 	bgt.w	8009860 <_strtod_l+0x918>
 8009754:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009758:	f77f aeaa 	ble.w	80094b0 <_strtod_l+0x568>
 800975c:	4640      	mov	r0, r8
 800975e:	4649      	mov	r1, r9
 8009760:	4b19      	ldr	r3, [pc, #100]	; (80097c8 <_strtod_l+0x880>)
 8009762:	2200      	movs	r2, #0
 8009764:	f7f6 feb8 	bl	80004d8 <__aeabi_dmul>
 8009768:	460b      	mov	r3, r1
 800976a:	4303      	orrs	r3, r0
 800976c:	bf08      	it	eq
 800976e:	2322      	moveq	r3, #34	; 0x22
 8009770:	4680      	mov	r8, r0
 8009772:	4689      	mov	r9, r1
 8009774:	bf08      	it	eq
 8009776:	f8ca 3000 	streq.w	r3, [sl]
 800977a:	e62f      	b.n	80093dc <_strtod_l+0x494>
 800977c:	f04f 32ff 	mov.w	r2, #4294967295
 8009780:	fa02 f303 	lsl.w	r3, r2, r3
 8009784:	ea03 0808 	and.w	r8, r3, r8
 8009788:	e6e0      	b.n	800954c <_strtod_l+0x604>
 800978a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800978e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009792:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009796:	35e2      	adds	r5, #226	; 0xe2
 8009798:	fa07 f505 	lsl.w	r5, r7, r5
 800979c:	970f      	str	r7, [sp, #60]	; 0x3c
 800979e:	e747      	b.n	8009630 <_strtod_l+0x6e8>
 80097a0:	2301      	movs	r3, #1
 80097a2:	2500      	movs	r5, #0
 80097a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80097a6:	e743      	b.n	8009630 <_strtod_l+0x6e8>
 80097a8:	463a      	mov	r2, r7
 80097aa:	4650      	mov	r0, sl
 80097ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80097ae:	f000 ffd5 	bl	800a75c <__lshift>
 80097b2:	901a      	str	r0, [sp, #104]	; 0x68
 80097b4:	2800      	cmp	r0, #0
 80097b6:	f47f af69 	bne.w	800968c <_strtod_l+0x744>
 80097ba:	e604      	b.n	80093c6 <_strtod_l+0x47e>
 80097bc:	0800bf68 	.word	0x0800bf68
 80097c0:	fffffc02 	.word	0xfffffc02
 80097c4:	7ff00000 	.word	0x7ff00000
 80097c8:	39500000 	.word	0x39500000
 80097cc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80097d0:	d165      	bne.n	800989e <_strtod_l+0x956>
 80097d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097d8:	b35a      	cbz	r2, 8009832 <_strtod_l+0x8ea>
 80097da:	4a99      	ldr	r2, [pc, #612]	; (8009a40 <_strtod_l+0xaf8>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d12b      	bne.n	8009838 <_strtod_l+0x8f0>
 80097e0:	9b05      	ldr	r3, [sp, #20]
 80097e2:	4641      	mov	r1, r8
 80097e4:	b303      	cbz	r3, 8009828 <_strtod_l+0x8e0>
 80097e6:	464a      	mov	r2, r9
 80097e8:	4b96      	ldr	r3, [pc, #600]	; (8009a44 <_strtod_l+0xafc>)
 80097ea:	4013      	ands	r3, r2
 80097ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80097f0:	f04f 32ff 	mov.w	r2, #4294967295
 80097f4:	d81b      	bhi.n	800982e <_strtod_l+0x8e6>
 80097f6:	0d1b      	lsrs	r3, r3, #20
 80097f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80097fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009800:	4299      	cmp	r1, r3
 8009802:	d119      	bne.n	8009838 <_strtod_l+0x8f0>
 8009804:	4b90      	ldr	r3, [pc, #576]	; (8009a48 <_strtod_l+0xb00>)
 8009806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009808:	429a      	cmp	r2, r3
 800980a:	d102      	bne.n	8009812 <_strtod_l+0x8ca>
 800980c:	3101      	adds	r1, #1
 800980e:	f43f adda 	beq.w	80093c6 <_strtod_l+0x47e>
 8009812:	f04f 0800 	mov.w	r8, #0
 8009816:	4b8b      	ldr	r3, [pc, #556]	; (8009a44 <_strtod_l+0xafc>)
 8009818:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800981a:	401a      	ands	r2, r3
 800981c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009820:	9b05      	ldr	r3, [sp, #20]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d19a      	bne.n	800975c <_strtod_l+0x814>
 8009826:	e5d9      	b.n	80093dc <_strtod_l+0x494>
 8009828:	f04f 33ff 	mov.w	r3, #4294967295
 800982c:	e7e8      	b.n	8009800 <_strtod_l+0x8b8>
 800982e:	4613      	mov	r3, r2
 8009830:	e7e6      	b.n	8009800 <_strtod_l+0x8b8>
 8009832:	ea53 0308 	orrs.w	r3, r3, r8
 8009836:	d081      	beq.n	800973c <_strtod_l+0x7f4>
 8009838:	b1e5      	cbz	r5, 8009874 <_strtod_l+0x92c>
 800983a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800983c:	421d      	tst	r5, r3
 800983e:	d0ef      	beq.n	8009820 <_strtod_l+0x8d8>
 8009840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009842:	4640      	mov	r0, r8
 8009844:	4649      	mov	r1, r9
 8009846:	9a05      	ldr	r2, [sp, #20]
 8009848:	b1c3      	cbz	r3, 800987c <_strtod_l+0x934>
 800984a:	f7ff fb59 	bl	8008f00 <sulp>
 800984e:	4602      	mov	r2, r0
 8009850:	460b      	mov	r3, r1
 8009852:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009856:	f7f6 fc89 	bl	800016c <__adddf3>
 800985a:	4680      	mov	r8, r0
 800985c:	4689      	mov	r9, r1
 800985e:	e7df      	b.n	8009820 <_strtod_l+0x8d8>
 8009860:	4013      	ands	r3, r2
 8009862:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009866:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800986a:	f04f 38ff 	mov.w	r8, #4294967295
 800986e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009872:	e7d5      	b.n	8009820 <_strtod_l+0x8d8>
 8009874:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009876:	ea13 0f08 	tst.w	r3, r8
 800987a:	e7e0      	b.n	800983e <_strtod_l+0x8f6>
 800987c:	f7ff fb40 	bl	8008f00 <sulp>
 8009880:	4602      	mov	r2, r0
 8009882:	460b      	mov	r3, r1
 8009884:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009888:	f7f6 fc6e 	bl	8000168 <__aeabi_dsub>
 800988c:	2200      	movs	r2, #0
 800988e:	2300      	movs	r3, #0
 8009890:	4680      	mov	r8, r0
 8009892:	4689      	mov	r9, r1
 8009894:	f7f7 f888 	bl	80009a8 <__aeabi_dcmpeq>
 8009898:	2800      	cmp	r0, #0
 800989a:	d0c1      	beq.n	8009820 <_strtod_l+0x8d8>
 800989c:	e608      	b.n	80094b0 <_strtod_l+0x568>
 800989e:	4658      	mov	r0, fp
 80098a0:	9904      	ldr	r1, [sp, #16]
 80098a2:	f001 f949 	bl	800ab38 <__ratio>
 80098a6:	2200      	movs	r2, #0
 80098a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098ac:	4606      	mov	r6, r0
 80098ae:	460f      	mov	r7, r1
 80098b0:	f7f7 f88e 	bl	80009d0 <__aeabi_dcmple>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d070      	beq.n	800999a <_strtod_l+0xa52>
 80098b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d042      	beq.n	8009944 <_strtod_l+0x9fc>
 80098be:	2600      	movs	r6, #0
 80098c0:	4f62      	ldr	r7, [pc, #392]	; (8009a4c <_strtod_l+0xb04>)
 80098c2:	4d62      	ldr	r5, [pc, #392]	; (8009a4c <_strtod_l+0xb04>)
 80098c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098ca:	0d1b      	lsrs	r3, r3, #20
 80098cc:	051b      	lsls	r3, r3, #20
 80098ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80098d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80098d2:	4b5f      	ldr	r3, [pc, #380]	; (8009a50 <_strtod_l+0xb08>)
 80098d4:	429a      	cmp	r2, r3
 80098d6:	f040 80c3 	bne.w	8009a60 <_strtod_l+0xb18>
 80098da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098dc:	4640      	mov	r0, r8
 80098de:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80098e2:	4649      	mov	r1, r9
 80098e4:	f001 f852 	bl	800a98c <__ulp>
 80098e8:	4602      	mov	r2, r0
 80098ea:	460b      	mov	r3, r1
 80098ec:	4630      	mov	r0, r6
 80098ee:	4639      	mov	r1, r7
 80098f0:	f7f6 fdf2 	bl	80004d8 <__aeabi_dmul>
 80098f4:	4642      	mov	r2, r8
 80098f6:	464b      	mov	r3, r9
 80098f8:	f7f6 fc38 	bl	800016c <__adddf3>
 80098fc:	460b      	mov	r3, r1
 80098fe:	4951      	ldr	r1, [pc, #324]	; (8009a44 <_strtod_l+0xafc>)
 8009900:	4a54      	ldr	r2, [pc, #336]	; (8009a54 <_strtod_l+0xb0c>)
 8009902:	4019      	ands	r1, r3
 8009904:	4291      	cmp	r1, r2
 8009906:	4680      	mov	r8, r0
 8009908:	d95d      	bls.n	80099c6 <_strtod_l+0xa7e>
 800990a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800990c:	4b4e      	ldr	r3, [pc, #312]	; (8009a48 <_strtod_l+0xb00>)
 800990e:	429a      	cmp	r2, r3
 8009910:	d103      	bne.n	800991a <_strtod_l+0x9d2>
 8009912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009914:	3301      	adds	r3, #1
 8009916:	f43f ad56 	beq.w	80093c6 <_strtod_l+0x47e>
 800991a:	f04f 38ff 	mov.w	r8, #4294967295
 800991e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009a48 <_strtod_l+0xb00>
 8009922:	4650      	mov	r0, sl
 8009924:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009926:	f000 fd01 	bl	800a32c <_Bfree>
 800992a:	4650      	mov	r0, sl
 800992c:	9906      	ldr	r1, [sp, #24]
 800992e:	f000 fcfd 	bl	800a32c <_Bfree>
 8009932:	4650      	mov	r0, sl
 8009934:	9904      	ldr	r1, [sp, #16]
 8009936:	f000 fcf9 	bl	800a32c <_Bfree>
 800993a:	4659      	mov	r1, fp
 800993c:	4650      	mov	r0, sl
 800993e:	f000 fcf5 	bl	800a32c <_Bfree>
 8009942:	e627      	b.n	8009594 <_strtod_l+0x64c>
 8009944:	f1b8 0f00 	cmp.w	r8, #0
 8009948:	d119      	bne.n	800997e <_strtod_l+0xa36>
 800994a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800994c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009950:	b9e3      	cbnz	r3, 800998c <_strtod_l+0xa44>
 8009952:	2200      	movs	r2, #0
 8009954:	4630      	mov	r0, r6
 8009956:	4639      	mov	r1, r7
 8009958:	4b3c      	ldr	r3, [pc, #240]	; (8009a4c <_strtod_l+0xb04>)
 800995a:	f7f7 f82f 	bl	80009bc <__aeabi_dcmplt>
 800995e:	b9c8      	cbnz	r0, 8009994 <_strtod_l+0xa4c>
 8009960:	2200      	movs	r2, #0
 8009962:	4630      	mov	r0, r6
 8009964:	4639      	mov	r1, r7
 8009966:	4b3c      	ldr	r3, [pc, #240]	; (8009a58 <_strtod_l+0xb10>)
 8009968:	f7f6 fdb6 	bl	80004d8 <__aeabi_dmul>
 800996c:	4604      	mov	r4, r0
 800996e:	460d      	mov	r5, r1
 8009970:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009974:	9416      	str	r4, [sp, #88]	; 0x58
 8009976:	9317      	str	r3, [sp, #92]	; 0x5c
 8009978:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800997c:	e7a2      	b.n	80098c4 <_strtod_l+0x97c>
 800997e:	f1b8 0f01 	cmp.w	r8, #1
 8009982:	d103      	bne.n	800998c <_strtod_l+0xa44>
 8009984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009986:	2b00      	cmp	r3, #0
 8009988:	f43f ad92 	beq.w	80094b0 <_strtod_l+0x568>
 800998c:	2600      	movs	r6, #0
 800998e:	2400      	movs	r4, #0
 8009990:	4f32      	ldr	r7, [pc, #200]	; (8009a5c <_strtod_l+0xb14>)
 8009992:	e796      	b.n	80098c2 <_strtod_l+0x97a>
 8009994:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009996:	4d30      	ldr	r5, [pc, #192]	; (8009a58 <_strtod_l+0xb10>)
 8009998:	e7ea      	b.n	8009970 <_strtod_l+0xa28>
 800999a:	4b2f      	ldr	r3, [pc, #188]	; (8009a58 <_strtod_l+0xb10>)
 800999c:	2200      	movs	r2, #0
 800999e:	4630      	mov	r0, r6
 80099a0:	4639      	mov	r1, r7
 80099a2:	f7f6 fd99 	bl	80004d8 <__aeabi_dmul>
 80099a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099a8:	4604      	mov	r4, r0
 80099aa:	460d      	mov	r5, r1
 80099ac:	b933      	cbnz	r3, 80099bc <_strtod_l+0xa74>
 80099ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099b2:	9010      	str	r0, [sp, #64]	; 0x40
 80099b4:	9311      	str	r3, [sp, #68]	; 0x44
 80099b6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80099ba:	e783      	b.n	80098c4 <_strtod_l+0x97c>
 80099bc:	4602      	mov	r2, r0
 80099be:	460b      	mov	r3, r1
 80099c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80099c4:	e7f7      	b.n	80099b6 <_strtod_l+0xa6e>
 80099c6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80099ca:	9b05      	ldr	r3, [sp, #20]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d1a8      	bne.n	8009922 <_strtod_l+0x9da>
 80099d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80099d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099d6:	0d1b      	lsrs	r3, r3, #20
 80099d8:	051b      	lsls	r3, r3, #20
 80099da:	429a      	cmp	r2, r3
 80099dc:	d1a1      	bne.n	8009922 <_strtod_l+0x9da>
 80099de:	4620      	mov	r0, r4
 80099e0:	4629      	mov	r1, r5
 80099e2:	f7f7 f833 	bl	8000a4c <__aeabi_d2lz>
 80099e6:	f7f6 fd49 	bl	800047c <__aeabi_l2d>
 80099ea:	4602      	mov	r2, r0
 80099ec:	460b      	mov	r3, r1
 80099ee:	4620      	mov	r0, r4
 80099f0:	4629      	mov	r1, r5
 80099f2:	f7f6 fbb9 	bl	8000168 <__aeabi_dsub>
 80099f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80099f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099fc:	ea43 0308 	orr.w	r3, r3, r8
 8009a00:	4313      	orrs	r3, r2
 8009a02:	4604      	mov	r4, r0
 8009a04:	460d      	mov	r5, r1
 8009a06:	d066      	beq.n	8009ad6 <_strtod_l+0xb8e>
 8009a08:	a309      	add	r3, pc, #36	; (adr r3, 8009a30 <_strtod_l+0xae8>)
 8009a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0e:	f7f6 ffd5 	bl	80009bc <__aeabi_dcmplt>
 8009a12:	2800      	cmp	r0, #0
 8009a14:	f47f ace2 	bne.w	80093dc <_strtod_l+0x494>
 8009a18:	a307      	add	r3, pc, #28	; (adr r3, 8009a38 <_strtod_l+0xaf0>)
 8009a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1e:	4620      	mov	r0, r4
 8009a20:	4629      	mov	r1, r5
 8009a22:	f7f6 ffe9 	bl	80009f8 <__aeabi_dcmpgt>
 8009a26:	2800      	cmp	r0, #0
 8009a28:	f43f af7b 	beq.w	8009922 <_strtod_l+0x9da>
 8009a2c:	e4d6      	b.n	80093dc <_strtod_l+0x494>
 8009a2e:	bf00      	nop
 8009a30:	94a03595 	.word	0x94a03595
 8009a34:	3fdfffff 	.word	0x3fdfffff
 8009a38:	35afe535 	.word	0x35afe535
 8009a3c:	3fe00000 	.word	0x3fe00000
 8009a40:	000fffff 	.word	0x000fffff
 8009a44:	7ff00000 	.word	0x7ff00000
 8009a48:	7fefffff 	.word	0x7fefffff
 8009a4c:	3ff00000 	.word	0x3ff00000
 8009a50:	7fe00000 	.word	0x7fe00000
 8009a54:	7c9fffff 	.word	0x7c9fffff
 8009a58:	3fe00000 	.word	0x3fe00000
 8009a5c:	bff00000 	.word	0xbff00000
 8009a60:	9b05      	ldr	r3, [sp, #20]
 8009a62:	b313      	cbz	r3, 8009aaa <_strtod_l+0xb62>
 8009a64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009a6a:	d81e      	bhi.n	8009aaa <_strtod_l+0xb62>
 8009a6c:	a326      	add	r3, pc, #152	; (adr r3, 8009b08 <_strtod_l+0xbc0>)
 8009a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a72:	4620      	mov	r0, r4
 8009a74:	4629      	mov	r1, r5
 8009a76:	f7f6 ffab 	bl	80009d0 <__aeabi_dcmple>
 8009a7a:	b190      	cbz	r0, 8009aa2 <_strtod_l+0xb5a>
 8009a7c:	4629      	mov	r1, r5
 8009a7e:	4620      	mov	r0, r4
 8009a80:	f7f6 ffc4 	bl	8000a0c <__aeabi_d2uiz>
 8009a84:	2801      	cmp	r0, #1
 8009a86:	bf38      	it	cc
 8009a88:	2001      	movcc	r0, #1
 8009a8a:	f7f6 fcab 	bl	80003e4 <__aeabi_ui2d>
 8009a8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a90:	4604      	mov	r4, r0
 8009a92:	460d      	mov	r5, r1
 8009a94:	b9d3      	cbnz	r3, 8009acc <_strtod_l+0xb84>
 8009a96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a9a:	9012      	str	r0, [sp, #72]	; 0x48
 8009a9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a9e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009aa2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009aa4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009aa8:	1a9f      	subs	r7, r3, r2
 8009aaa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009aae:	f000 ff6d 	bl	800a98c <__ulp>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	4639      	mov	r1, r7
 8009aba:	f7f6 fd0d 	bl	80004d8 <__aeabi_dmul>
 8009abe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009ac2:	f7f6 fb53 	bl	800016c <__adddf3>
 8009ac6:	4680      	mov	r8, r0
 8009ac8:	4689      	mov	r9, r1
 8009aca:	e77e      	b.n	80099ca <_strtod_l+0xa82>
 8009acc:	4602      	mov	r2, r0
 8009ace:	460b      	mov	r3, r1
 8009ad0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009ad4:	e7e3      	b.n	8009a9e <_strtod_l+0xb56>
 8009ad6:	a30e      	add	r3, pc, #56	; (adr r3, 8009b10 <_strtod_l+0xbc8>)
 8009ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009adc:	f7f6 ff6e 	bl	80009bc <__aeabi_dcmplt>
 8009ae0:	e7a1      	b.n	8009a26 <_strtod_l+0xade>
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	930a      	str	r3, [sp, #40]	; 0x28
 8009ae6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ae8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009aea:	6013      	str	r3, [r2, #0]
 8009aec:	f7ff ba71 	b.w	8008fd2 <_strtod_l+0x8a>
 8009af0:	2a65      	cmp	r2, #101	; 0x65
 8009af2:	f43f ab63 	beq.w	80091bc <_strtod_l+0x274>
 8009af6:	2a45      	cmp	r2, #69	; 0x45
 8009af8:	f43f ab60 	beq.w	80091bc <_strtod_l+0x274>
 8009afc:	2301      	movs	r3, #1
 8009afe:	f7ff bb95 	b.w	800922c <_strtod_l+0x2e4>
 8009b02:	bf00      	nop
 8009b04:	f3af 8000 	nop.w
 8009b08:	ffc00000 	.word	0xffc00000
 8009b0c:	41dfffff 	.word	0x41dfffff
 8009b10:	94a03595 	.word	0x94a03595
 8009b14:	3fcfffff 	.word	0x3fcfffff

08009b18 <strtod>:
 8009b18:	460a      	mov	r2, r1
 8009b1a:	4601      	mov	r1, r0
 8009b1c:	4802      	ldr	r0, [pc, #8]	; (8009b28 <strtod+0x10>)
 8009b1e:	4b03      	ldr	r3, [pc, #12]	; (8009b2c <strtod+0x14>)
 8009b20:	6800      	ldr	r0, [r0, #0]
 8009b22:	f7ff ba11 	b.w	8008f48 <_strtod_l>
 8009b26:	bf00      	nop
 8009b28:	2000017c 	.word	0x2000017c
 8009b2c:	200001e4 	.word	0x200001e4

08009b30 <_vsniprintf_r>:
 8009b30:	b530      	push	{r4, r5, lr}
 8009b32:	4614      	mov	r4, r2
 8009b34:	2c00      	cmp	r4, #0
 8009b36:	4605      	mov	r5, r0
 8009b38:	461a      	mov	r2, r3
 8009b3a:	b09b      	sub	sp, #108	; 0x6c
 8009b3c:	da05      	bge.n	8009b4a <_vsniprintf_r+0x1a>
 8009b3e:	238b      	movs	r3, #139	; 0x8b
 8009b40:	6003      	str	r3, [r0, #0]
 8009b42:	f04f 30ff 	mov.w	r0, #4294967295
 8009b46:	b01b      	add	sp, #108	; 0x6c
 8009b48:	bd30      	pop	{r4, r5, pc}
 8009b4a:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009b4e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009b52:	bf0c      	ite	eq
 8009b54:	4623      	moveq	r3, r4
 8009b56:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009b5a:	9302      	str	r3, [sp, #8]
 8009b5c:	9305      	str	r3, [sp, #20]
 8009b5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b62:	9100      	str	r1, [sp, #0]
 8009b64:	9104      	str	r1, [sp, #16]
 8009b66:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009b6a:	4669      	mov	r1, sp
 8009b6c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009b6e:	f001 f8c5 	bl	800acfc <_svfiprintf_r>
 8009b72:	1c43      	adds	r3, r0, #1
 8009b74:	bfbc      	itt	lt
 8009b76:	238b      	movlt	r3, #139	; 0x8b
 8009b78:	602b      	strlt	r3, [r5, #0]
 8009b7a:	2c00      	cmp	r4, #0
 8009b7c:	d0e3      	beq.n	8009b46 <_vsniprintf_r+0x16>
 8009b7e:	2200      	movs	r2, #0
 8009b80:	9b00      	ldr	r3, [sp, #0]
 8009b82:	701a      	strb	r2, [r3, #0]
 8009b84:	e7df      	b.n	8009b46 <_vsniprintf_r+0x16>
	...

08009b88 <vsniprintf>:
 8009b88:	b507      	push	{r0, r1, r2, lr}
 8009b8a:	9300      	str	r3, [sp, #0]
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	460a      	mov	r2, r1
 8009b90:	4601      	mov	r1, r0
 8009b92:	4803      	ldr	r0, [pc, #12]	; (8009ba0 <vsniprintf+0x18>)
 8009b94:	6800      	ldr	r0, [r0, #0]
 8009b96:	f7ff ffcb 	bl	8009b30 <_vsniprintf_r>
 8009b9a:	b003      	add	sp, #12
 8009b9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ba0:	2000017c 	.word	0x2000017c

08009ba4 <rshift>:
 8009ba4:	6903      	ldr	r3, [r0, #16]
 8009ba6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009baa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009bae:	f100 0414 	add.w	r4, r0, #20
 8009bb2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009bb6:	dd46      	ble.n	8009c46 <rshift+0xa2>
 8009bb8:	f011 011f 	ands.w	r1, r1, #31
 8009bbc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009bc0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009bc4:	d10c      	bne.n	8009be0 <rshift+0x3c>
 8009bc6:	4629      	mov	r1, r5
 8009bc8:	f100 0710 	add.w	r7, r0, #16
 8009bcc:	42b1      	cmp	r1, r6
 8009bce:	d335      	bcc.n	8009c3c <rshift+0x98>
 8009bd0:	1a9b      	subs	r3, r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	1eea      	subs	r2, r5, #3
 8009bd6:	4296      	cmp	r6, r2
 8009bd8:	bf38      	it	cc
 8009bda:	2300      	movcc	r3, #0
 8009bdc:	4423      	add	r3, r4
 8009bde:	e015      	b.n	8009c0c <rshift+0x68>
 8009be0:	46a1      	mov	r9, r4
 8009be2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009be6:	f1c1 0820 	rsb	r8, r1, #32
 8009bea:	40cf      	lsrs	r7, r1
 8009bec:	f105 0e04 	add.w	lr, r5, #4
 8009bf0:	4576      	cmp	r6, lr
 8009bf2:	46f4      	mov	ip, lr
 8009bf4:	d816      	bhi.n	8009c24 <rshift+0x80>
 8009bf6:	1a9a      	subs	r2, r3, r2
 8009bf8:	0092      	lsls	r2, r2, #2
 8009bfa:	3a04      	subs	r2, #4
 8009bfc:	3501      	adds	r5, #1
 8009bfe:	42ae      	cmp	r6, r5
 8009c00:	bf38      	it	cc
 8009c02:	2200      	movcc	r2, #0
 8009c04:	18a3      	adds	r3, r4, r2
 8009c06:	50a7      	str	r7, [r4, r2]
 8009c08:	b107      	cbz	r7, 8009c0c <rshift+0x68>
 8009c0a:	3304      	adds	r3, #4
 8009c0c:	42a3      	cmp	r3, r4
 8009c0e:	eba3 0204 	sub.w	r2, r3, r4
 8009c12:	bf08      	it	eq
 8009c14:	2300      	moveq	r3, #0
 8009c16:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009c1a:	6102      	str	r2, [r0, #16]
 8009c1c:	bf08      	it	eq
 8009c1e:	6143      	streq	r3, [r0, #20]
 8009c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c24:	f8dc c000 	ldr.w	ip, [ip]
 8009c28:	fa0c fc08 	lsl.w	ip, ip, r8
 8009c2c:	ea4c 0707 	orr.w	r7, ip, r7
 8009c30:	f849 7b04 	str.w	r7, [r9], #4
 8009c34:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009c38:	40cf      	lsrs	r7, r1
 8009c3a:	e7d9      	b.n	8009bf0 <rshift+0x4c>
 8009c3c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009c40:	f847 cf04 	str.w	ip, [r7, #4]!
 8009c44:	e7c2      	b.n	8009bcc <rshift+0x28>
 8009c46:	4623      	mov	r3, r4
 8009c48:	e7e0      	b.n	8009c0c <rshift+0x68>

08009c4a <__hexdig_fun>:
 8009c4a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009c4e:	2b09      	cmp	r3, #9
 8009c50:	d802      	bhi.n	8009c58 <__hexdig_fun+0xe>
 8009c52:	3820      	subs	r0, #32
 8009c54:	b2c0      	uxtb	r0, r0
 8009c56:	4770      	bx	lr
 8009c58:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009c5c:	2b05      	cmp	r3, #5
 8009c5e:	d801      	bhi.n	8009c64 <__hexdig_fun+0x1a>
 8009c60:	3847      	subs	r0, #71	; 0x47
 8009c62:	e7f7      	b.n	8009c54 <__hexdig_fun+0xa>
 8009c64:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009c68:	2b05      	cmp	r3, #5
 8009c6a:	d801      	bhi.n	8009c70 <__hexdig_fun+0x26>
 8009c6c:	3827      	subs	r0, #39	; 0x27
 8009c6e:	e7f1      	b.n	8009c54 <__hexdig_fun+0xa>
 8009c70:	2000      	movs	r0, #0
 8009c72:	4770      	bx	lr

08009c74 <__gethex>:
 8009c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c78:	b08b      	sub	sp, #44	; 0x2c
 8009c7a:	9305      	str	r3, [sp, #20]
 8009c7c:	4bb2      	ldr	r3, [pc, #712]	; (8009f48 <__gethex+0x2d4>)
 8009c7e:	9002      	str	r0, [sp, #8]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	468b      	mov	fp, r1
 8009c84:	4618      	mov	r0, r3
 8009c86:	4690      	mov	r8, r2
 8009c88:	9303      	str	r3, [sp, #12]
 8009c8a:	f7f6 fa61 	bl	8000150 <strlen>
 8009c8e:	4682      	mov	sl, r0
 8009c90:	9b03      	ldr	r3, [sp, #12]
 8009c92:	f8db 2000 	ldr.w	r2, [fp]
 8009c96:	4403      	add	r3, r0
 8009c98:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009c9c:	9306      	str	r3, [sp, #24]
 8009c9e:	1c93      	adds	r3, r2, #2
 8009ca0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009ca4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009ca8:	32fe      	adds	r2, #254	; 0xfe
 8009caa:	18d1      	adds	r1, r2, r3
 8009cac:	461f      	mov	r7, r3
 8009cae:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009cb2:	9101      	str	r1, [sp, #4]
 8009cb4:	2830      	cmp	r0, #48	; 0x30
 8009cb6:	d0f8      	beq.n	8009caa <__gethex+0x36>
 8009cb8:	f7ff ffc7 	bl	8009c4a <__hexdig_fun>
 8009cbc:	4604      	mov	r4, r0
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	d13a      	bne.n	8009d38 <__gethex+0xc4>
 8009cc2:	4652      	mov	r2, sl
 8009cc4:	4638      	mov	r0, r7
 8009cc6:	9903      	ldr	r1, [sp, #12]
 8009cc8:	f001 fab4 	bl	800b234 <strncmp>
 8009ccc:	4605      	mov	r5, r0
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	d166      	bne.n	8009da0 <__gethex+0x12c>
 8009cd2:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009cd6:	eb07 060a 	add.w	r6, r7, sl
 8009cda:	f7ff ffb6 	bl	8009c4a <__hexdig_fun>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d060      	beq.n	8009da4 <__gethex+0x130>
 8009ce2:	4633      	mov	r3, r6
 8009ce4:	7818      	ldrb	r0, [r3, #0]
 8009ce6:	461f      	mov	r7, r3
 8009ce8:	2830      	cmp	r0, #48	; 0x30
 8009cea:	f103 0301 	add.w	r3, r3, #1
 8009cee:	d0f9      	beq.n	8009ce4 <__gethex+0x70>
 8009cf0:	f7ff ffab 	bl	8009c4a <__hexdig_fun>
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	fab0 f480 	clz	r4, r0
 8009cfa:	4635      	mov	r5, r6
 8009cfc:	0964      	lsrs	r4, r4, #5
 8009cfe:	9301      	str	r3, [sp, #4]
 8009d00:	463a      	mov	r2, r7
 8009d02:	4616      	mov	r6, r2
 8009d04:	7830      	ldrb	r0, [r6, #0]
 8009d06:	3201      	adds	r2, #1
 8009d08:	f7ff ff9f 	bl	8009c4a <__hexdig_fun>
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d1f8      	bne.n	8009d02 <__gethex+0x8e>
 8009d10:	4652      	mov	r2, sl
 8009d12:	4630      	mov	r0, r6
 8009d14:	9903      	ldr	r1, [sp, #12]
 8009d16:	f001 fa8d 	bl	800b234 <strncmp>
 8009d1a:	b980      	cbnz	r0, 8009d3e <__gethex+0xca>
 8009d1c:	b94d      	cbnz	r5, 8009d32 <__gethex+0xbe>
 8009d1e:	eb06 050a 	add.w	r5, r6, sl
 8009d22:	462a      	mov	r2, r5
 8009d24:	4616      	mov	r6, r2
 8009d26:	7830      	ldrb	r0, [r6, #0]
 8009d28:	3201      	adds	r2, #1
 8009d2a:	f7ff ff8e 	bl	8009c4a <__hexdig_fun>
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	d1f8      	bne.n	8009d24 <__gethex+0xb0>
 8009d32:	1bad      	subs	r5, r5, r6
 8009d34:	00ad      	lsls	r5, r5, #2
 8009d36:	e004      	b.n	8009d42 <__gethex+0xce>
 8009d38:	2400      	movs	r4, #0
 8009d3a:	4625      	mov	r5, r4
 8009d3c:	e7e0      	b.n	8009d00 <__gethex+0x8c>
 8009d3e:	2d00      	cmp	r5, #0
 8009d40:	d1f7      	bne.n	8009d32 <__gethex+0xbe>
 8009d42:	7833      	ldrb	r3, [r6, #0]
 8009d44:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009d48:	2b50      	cmp	r3, #80	; 0x50
 8009d4a:	d139      	bne.n	8009dc0 <__gethex+0x14c>
 8009d4c:	7873      	ldrb	r3, [r6, #1]
 8009d4e:	2b2b      	cmp	r3, #43	; 0x2b
 8009d50:	d02a      	beq.n	8009da8 <__gethex+0x134>
 8009d52:	2b2d      	cmp	r3, #45	; 0x2d
 8009d54:	d02c      	beq.n	8009db0 <__gethex+0x13c>
 8009d56:	f04f 0900 	mov.w	r9, #0
 8009d5a:	1c71      	adds	r1, r6, #1
 8009d5c:	7808      	ldrb	r0, [r1, #0]
 8009d5e:	f7ff ff74 	bl	8009c4a <__hexdig_fun>
 8009d62:	1e43      	subs	r3, r0, #1
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	2b18      	cmp	r3, #24
 8009d68:	d82a      	bhi.n	8009dc0 <__gethex+0x14c>
 8009d6a:	f1a0 0210 	sub.w	r2, r0, #16
 8009d6e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009d72:	f7ff ff6a 	bl	8009c4a <__hexdig_fun>
 8009d76:	1e43      	subs	r3, r0, #1
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	2b18      	cmp	r3, #24
 8009d7c:	d91b      	bls.n	8009db6 <__gethex+0x142>
 8009d7e:	f1b9 0f00 	cmp.w	r9, #0
 8009d82:	d000      	beq.n	8009d86 <__gethex+0x112>
 8009d84:	4252      	negs	r2, r2
 8009d86:	4415      	add	r5, r2
 8009d88:	f8cb 1000 	str.w	r1, [fp]
 8009d8c:	b1d4      	cbz	r4, 8009dc4 <__gethex+0x150>
 8009d8e:	9b01      	ldr	r3, [sp, #4]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	bf14      	ite	ne
 8009d94:	2700      	movne	r7, #0
 8009d96:	2706      	moveq	r7, #6
 8009d98:	4638      	mov	r0, r7
 8009d9a:	b00b      	add	sp, #44	; 0x2c
 8009d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da0:	463e      	mov	r6, r7
 8009da2:	4625      	mov	r5, r4
 8009da4:	2401      	movs	r4, #1
 8009da6:	e7cc      	b.n	8009d42 <__gethex+0xce>
 8009da8:	f04f 0900 	mov.w	r9, #0
 8009dac:	1cb1      	adds	r1, r6, #2
 8009dae:	e7d5      	b.n	8009d5c <__gethex+0xe8>
 8009db0:	f04f 0901 	mov.w	r9, #1
 8009db4:	e7fa      	b.n	8009dac <__gethex+0x138>
 8009db6:	230a      	movs	r3, #10
 8009db8:	fb03 0202 	mla	r2, r3, r2, r0
 8009dbc:	3a10      	subs	r2, #16
 8009dbe:	e7d6      	b.n	8009d6e <__gethex+0xfa>
 8009dc0:	4631      	mov	r1, r6
 8009dc2:	e7e1      	b.n	8009d88 <__gethex+0x114>
 8009dc4:	4621      	mov	r1, r4
 8009dc6:	1bf3      	subs	r3, r6, r7
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	2b07      	cmp	r3, #7
 8009dcc:	dc0a      	bgt.n	8009de4 <__gethex+0x170>
 8009dce:	9802      	ldr	r0, [sp, #8]
 8009dd0:	f000 fa6c 	bl	800a2ac <_Balloc>
 8009dd4:	4604      	mov	r4, r0
 8009dd6:	b940      	cbnz	r0, 8009dea <__gethex+0x176>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	21de      	movs	r1, #222	; 0xde
 8009ddc:	4b5b      	ldr	r3, [pc, #364]	; (8009f4c <__gethex+0x2d8>)
 8009dde:	485c      	ldr	r0, [pc, #368]	; (8009f50 <__gethex+0x2dc>)
 8009de0:	f001 fa4a 	bl	800b278 <__assert_func>
 8009de4:	3101      	adds	r1, #1
 8009de6:	105b      	asrs	r3, r3, #1
 8009de8:	e7ef      	b.n	8009dca <__gethex+0x156>
 8009dea:	f04f 0b00 	mov.w	fp, #0
 8009dee:	f100 0914 	add.w	r9, r0, #20
 8009df2:	f1ca 0301 	rsb	r3, sl, #1
 8009df6:	f8cd 9010 	str.w	r9, [sp, #16]
 8009dfa:	f8cd b004 	str.w	fp, [sp, #4]
 8009dfe:	9308      	str	r3, [sp, #32]
 8009e00:	42b7      	cmp	r7, r6
 8009e02:	d33f      	bcc.n	8009e84 <__gethex+0x210>
 8009e04:	9f04      	ldr	r7, [sp, #16]
 8009e06:	9b01      	ldr	r3, [sp, #4]
 8009e08:	f847 3b04 	str.w	r3, [r7], #4
 8009e0c:	eba7 0709 	sub.w	r7, r7, r9
 8009e10:	10bf      	asrs	r7, r7, #2
 8009e12:	6127      	str	r7, [r4, #16]
 8009e14:	4618      	mov	r0, r3
 8009e16:	f000 fb3b 	bl	800a490 <__hi0bits>
 8009e1a:	017f      	lsls	r7, r7, #5
 8009e1c:	f8d8 6000 	ldr.w	r6, [r8]
 8009e20:	1a3f      	subs	r7, r7, r0
 8009e22:	42b7      	cmp	r7, r6
 8009e24:	dd62      	ble.n	8009eec <__gethex+0x278>
 8009e26:	1bbf      	subs	r7, r7, r6
 8009e28:	4639      	mov	r1, r7
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	f000 fed5 	bl	800abda <__any_on>
 8009e30:	4682      	mov	sl, r0
 8009e32:	b1a8      	cbz	r0, 8009e60 <__gethex+0x1ec>
 8009e34:	f04f 0a01 	mov.w	sl, #1
 8009e38:	1e7b      	subs	r3, r7, #1
 8009e3a:	1159      	asrs	r1, r3, #5
 8009e3c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009e40:	f003 021f 	and.w	r2, r3, #31
 8009e44:	fa0a f202 	lsl.w	r2, sl, r2
 8009e48:	420a      	tst	r2, r1
 8009e4a:	d009      	beq.n	8009e60 <__gethex+0x1ec>
 8009e4c:	4553      	cmp	r3, sl
 8009e4e:	dd05      	ble.n	8009e5c <__gethex+0x1e8>
 8009e50:	4620      	mov	r0, r4
 8009e52:	1eb9      	subs	r1, r7, #2
 8009e54:	f000 fec1 	bl	800abda <__any_on>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d144      	bne.n	8009ee6 <__gethex+0x272>
 8009e5c:	f04f 0a02 	mov.w	sl, #2
 8009e60:	4639      	mov	r1, r7
 8009e62:	4620      	mov	r0, r4
 8009e64:	f7ff fe9e 	bl	8009ba4 <rshift>
 8009e68:	443d      	add	r5, r7
 8009e6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e6e:	42ab      	cmp	r3, r5
 8009e70:	da4a      	bge.n	8009f08 <__gethex+0x294>
 8009e72:	4621      	mov	r1, r4
 8009e74:	9802      	ldr	r0, [sp, #8]
 8009e76:	f000 fa59 	bl	800a32c <_Bfree>
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e7e:	27a3      	movs	r7, #163	; 0xa3
 8009e80:	6013      	str	r3, [r2, #0]
 8009e82:	e789      	b.n	8009d98 <__gethex+0x124>
 8009e84:	1e73      	subs	r3, r6, #1
 8009e86:	9a06      	ldr	r2, [sp, #24]
 8009e88:	9307      	str	r3, [sp, #28]
 8009e8a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d019      	beq.n	8009ec6 <__gethex+0x252>
 8009e92:	f1bb 0f20 	cmp.w	fp, #32
 8009e96:	d107      	bne.n	8009ea8 <__gethex+0x234>
 8009e98:	9b04      	ldr	r3, [sp, #16]
 8009e9a:	9a01      	ldr	r2, [sp, #4]
 8009e9c:	f843 2b04 	str.w	r2, [r3], #4
 8009ea0:	9304      	str	r3, [sp, #16]
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	469b      	mov	fp, r3
 8009ea6:	9301      	str	r3, [sp, #4]
 8009ea8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009eac:	f7ff fecd 	bl	8009c4a <__hexdig_fun>
 8009eb0:	9b01      	ldr	r3, [sp, #4]
 8009eb2:	f000 000f 	and.w	r0, r0, #15
 8009eb6:	fa00 f00b 	lsl.w	r0, r0, fp
 8009eba:	4303      	orrs	r3, r0
 8009ebc:	9301      	str	r3, [sp, #4]
 8009ebe:	f10b 0b04 	add.w	fp, fp, #4
 8009ec2:	9b07      	ldr	r3, [sp, #28]
 8009ec4:	e00d      	b.n	8009ee2 <__gethex+0x26e>
 8009ec6:	9a08      	ldr	r2, [sp, #32]
 8009ec8:	1e73      	subs	r3, r6, #1
 8009eca:	4413      	add	r3, r2
 8009ecc:	42bb      	cmp	r3, r7
 8009ece:	d3e0      	bcc.n	8009e92 <__gethex+0x21e>
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	4652      	mov	r2, sl
 8009ed4:	9903      	ldr	r1, [sp, #12]
 8009ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ed8:	f001 f9ac 	bl	800b234 <strncmp>
 8009edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	d1d7      	bne.n	8009e92 <__gethex+0x21e>
 8009ee2:	461e      	mov	r6, r3
 8009ee4:	e78c      	b.n	8009e00 <__gethex+0x18c>
 8009ee6:	f04f 0a03 	mov.w	sl, #3
 8009eea:	e7b9      	b.n	8009e60 <__gethex+0x1ec>
 8009eec:	da09      	bge.n	8009f02 <__gethex+0x28e>
 8009eee:	1bf7      	subs	r7, r6, r7
 8009ef0:	4621      	mov	r1, r4
 8009ef2:	463a      	mov	r2, r7
 8009ef4:	9802      	ldr	r0, [sp, #8]
 8009ef6:	f000 fc31 	bl	800a75c <__lshift>
 8009efa:	4604      	mov	r4, r0
 8009efc:	1bed      	subs	r5, r5, r7
 8009efe:	f100 0914 	add.w	r9, r0, #20
 8009f02:	f04f 0a00 	mov.w	sl, #0
 8009f06:	e7b0      	b.n	8009e6a <__gethex+0x1f6>
 8009f08:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009f0c:	42a8      	cmp	r0, r5
 8009f0e:	dd72      	ble.n	8009ff6 <__gethex+0x382>
 8009f10:	1b45      	subs	r5, r0, r5
 8009f12:	42ae      	cmp	r6, r5
 8009f14:	dc35      	bgt.n	8009f82 <__gethex+0x30e>
 8009f16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f1a:	2b02      	cmp	r3, #2
 8009f1c:	d029      	beq.n	8009f72 <__gethex+0x2fe>
 8009f1e:	2b03      	cmp	r3, #3
 8009f20:	d02b      	beq.n	8009f7a <__gethex+0x306>
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d11c      	bne.n	8009f60 <__gethex+0x2ec>
 8009f26:	42ae      	cmp	r6, r5
 8009f28:	d11a      	bne.n	8009f60 <__gethex+0x2ec>
 8009f2a:	2e01      	cmp	r6, #1
 8009f2c:	d112      	bne.n	8009f54 <__gethex+0x2e0>
 8009f2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009f32:	9a05      	ldr	r2, [sp, #20]
 8009f34:	2762      	movs	r7, #98	; 0x62
 8009f36:	6013      	str	r3, [r2, #0]
 8009f38:	2301      	movs	r3, #1
 8009f3a:	6123      	str	r3, [r4, #16]
 8009f3c:	f8c9 3000 	str.w	r3, [r9]
 8009f40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f42:	601c      	str	r4, [r3, #0]
 8009f44:	e728      	b.n	8009d98 <__gethex+0x124>
 8009f46:	bf00      	nop
 8009f48:	0800c008 	.word	0x0800c008
 8009f4c:	0800bf90 	.word	0x0800bf90
 8009f50:	0800bfa1 	.word	0x0800bfa1
 8009f54:	4620      	mov	r0, r4
 8009f56:	1e71      	subs	r1, r6, #1
 8009f58:	f000 fe3f 	bl	800abda <__any_on>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	d1e6      	bne.n	8009f2e <__gethex+0x2ba>
 8009f60:	4621      	mov	r1, r4
 8009f62:	9802      	ldr	r0, [sp, #8]
 8009f64:	f000 f9e2 	bl	800a32c <_Bfree>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f6c:	2750      	movs	r7, #80	; 0x50
 8009f6e:	6013      	str	r3, [r2, #0]
 8009f70:	e712      	b.n	8009d98 <__gethex+0x124>
 8009f72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d1f3      	bne.n	8009f60 <__gethex+0x2ec>
 8009f78:	e7d9      	b.n	8009f2e <__gethex+0x2ba>
 8009f7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d1d6      	bne.n	8009f2e <__gethex+0x2ba>
 8009f80:	e7ee      	b.n	8009f60 <__gethex+0x2ec>
 8009f82:	1e6f      	subs	r7, r5, #1
 8009f84:	f1ba 0f00 	cmp.w	sl, #0
 8009f88:	d132      	bne.n	8009ff0 <__gethex+0x37c>
 8009f8a:	b127      	cbz	r7, 8009f96 <__gethex+0x322>
 8009f8c:	4639      	mov	r1, r7
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f000 fe23 	bl	800abda <__any_on>
 8009f94:	4682      	mov	sl, r0
 8009f96:	2101      	movs	r1, #1
 8009f98:	117b      	asrs	r3, r7, #5
 8009f9a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009f9e:	f007 071f 	and.w	r7, r7, #31
 8009fa2:	fa01 f707 	lsl.w	r7, r1, r7
 8009fa6:	421f      	tst	r7, r3
 8009fa8:	f04f 0702 	mov.w	r7, #2
 8009fac:	4629      	mov	r1, r5
 8009fae:	4620      	mov	r0, r4
 8009fb0:	bf18      	it	ne
 8009fb2:	f04a 0a02 	orrne.w	sl, sl, #2
 8009fb6:	1b76      	subs	r6, r6, r5
 8009fb8:	f7ff fdf4 	bl	8009ba4 <rshift>
 8009fbc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009fc0:	f1ba 0f00 	cmp.w	sl, #0
 8009fc4:	d048      	beq.n	800a058 <__gethex+0x3e4>
 8009fc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009fca:	2b02      	cmp	r3, #2
 8009fcc:	d015      	beq.n	8009ffa <__gethex+0x386>
 8009fce:	2b03      	cmp	r3, #3
 8009fd0:	d017      	beq.n	800a002 <__gethex+0x38e>
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d109      	bne.n	8009fea <__gethex+0x376>
 8009fd6:	f01a 0f02 	tst.w	sl, #2
 8009fda:	d006      	beq.n	8009fea <__gethex+0x376>
 8009fdc:	f8d9 0000 	ldr.w	r0, [r9]
 8009fe0:	ea4a 0a00 	orr.w	sl, sl, r0
 8009fe4:	f01a 0f01 	tst.w	sl, #1
 8009fe8:	d10e      	bne.n	800a008 <__gethex+0x394>
 8009fea:	f047 0710 	orr.w	r7, r7, #16
 8009fee:	e033      	b.n	800a058 <__gethex+0x3e4>
 8009ff0:	f04f 0a01 	mov.w	sl, #1
 8009ff4:	e7cf      	b.n	8009f96 <__gethex+0x322>
 8009ff6:	2701      	movs	r7, #1
 8009ff8:	e7e2      	b.n	8009fc0 <__gethex+0x34c>
 8009ffa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ffc:	f1c3 0301 	rsb	r3, r3, #1
 800a000:	9315      	str	r3, [sp, #84]	; 0x54
 800a002:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a004:	2b00      	cmp	r3, #0
 800a006:	d0f0      	beq.n	8009fea <__gethex+0x376>
 800a008:	f04f 0c00 	mov.w	ip, #0
 800a00c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a010:	f104 0314 	add.w	r3, r4, #20
 800a014:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a018:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a01c:	4618      	mov	r0, r3
 800a01e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a022:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a026:	d01c      	beq.n	800a062 <__gethex+0x3ee>
 800a028:	3201      	adds	r2, #1
 800a02a:	6002      	str	r2, [r0, #0]
 800a02c:	2f02      	cmp	r7, #2
 800a02e:	f104 0314 	add.w	r3, r4, #20
 800a032:	d13d      	bne.n	800a0b0 <__gethex+0x43c>
 800a034:	f8d8 2000 	ldr.w	r2, [r8]
 800a038:	3a01      	subs	r2, #1
 800a03a:	42b2      	cmp	r2, r6
 800a03c:	d10a      	bne.n	800a054 <__gethex+0x3e0>
 800a03e:	2201      	movs	r2, #1
 800a040:	1171      	asrs	r1, r6, #5
 800a042:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a046:	f006 061f 	and.w	r6, r6, #31
 800a04a:	fa02 f606 	lsl.w	r6, r2, r6
 800a04e:	421e      	tst	r6, r3
 800a050:	bf18      	it	ne
 800a052:	4617      	movne	r7, r2
 800a054:	f047 0720 	orr.w	r7, r7, #32
 800a058:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a05a:	601c      	str	r4, [r3, #0]
 800a05c:	9b05      	ldr	r3, [sp, #20]
 800a05e:	601d      	str	r5, [r3, #0]
 800a060:	e69a      	b.n	8009d98 <__gethex+0x124>
 800a062:	4299      	cmp	r1, r3
 800a064:	f843 cc04 	str.w	ip, [r3, #-4]
 800a068:	d8d8      	bhi.n	800a01c <__gethex+0x3a8>
 800a06a:	68a3      	ldr	r3, [r4, #8]
 800a06c:	459b      	cmp	fp, r3
 800a06e:	db17      	blt.n	800a0a0 <__gethex+0x42c>
 800a070:	6861      	ldr	r1, [r4, #4]
 800a072:	9802      	ldr	r0, [sp, #8]
 800a074:	3101      	adds	r1, #1
 800a076:	f000 f919 	bl	800a2ac <_Balloc>
 800a07a:	4681      	mov	r9, r0
 800a07c:	b918      	cbnz	r0, 800a086 <__gethex+0x412>
 800a07e:	4602      	mov	r2, r0
 800a080:	2184      	movs	r1, #132	; 0x84
 800a082:	4b19      	ldr	r3, [pc, #100]	; (800a0e8 <__gethex+0x474>)
 800a084:	e6ab      	b.n	8009dde <__gethex+0x16a>
 800a086:	6922      	ldr	r2, [r4, #16]
 800a088:	f104 010c 	add.w	r1, r4, #12
 800a08c:	3202      	adds	r2, #2
 800a08e:	0092      	lsls	r2, r2, #2
 800a090:	300c      	adds	r0, #12
 800a092:	f7fe fdd5 	bl	8008c40 <memcpy>
 800a096:	4621      	mov	r1, r4
 800a098:	9802      	ldr	r0, [sp, #8]
 800a09a:	f000 f947 	bl	800a32c <_Bfree>
 800a09e:	464c      	mov	r4, r9
 800a0a0:	6923      	ldr	r3, [r4, #16]
 800a0a2:	1c5a      	adds	r2, r3, #1
 800a0a4:	6122      	str	r2, [r4, #16]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a0ac:	615a      	str	r2, [r3, #20]
 800a0ae:	e7bd      	b.n	800a02c <__gethex+0x3b8>
 800a0b0:	6922      	ldr	r2, [r4, #16]
 800a0b2:	455a      	cmp	r2, fp
 800a0b4:	dd0b      	ble.n	800a0ce <__gethex+0x45a>
 800a0b6:	2101      	movs	r1, #1
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f7ff fd73 	bl	8009ba4 <rshift>
 800a0be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0c2:	3501      	adds	r5, #1
 800a0c4:	42ab      	cmp	r3, r5
 800a0c6:	f6ff aed4 	blt.w	8009e72 <__gethex+0x1fe>
 800a0ca:	2701      	movs	r7, #1
 800a0cc:	e7c2      	b.n	800a054 <__gethex+0x3e0>
 800a0ce:	f016 061f 	ands.w	r6, r6, #31
 800a0d2:	d0fa      	beq.n	800a0ca <__gethex+0x456>
 800a0d4:	4453      	add	r3, sl
 800a0d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a0da:	f000 f9d9 	bl	800a490 <__hi0bits>
 800a0de:	f1c6 0620 	rsb	r6, r6, #32
 800a0e2:	42b0      	cmp	r0, r6
 800a0e4:	dbe7      	blt.n	800a0b6 <__gethex+0x442>
 800a0e6:	e7f0      	b.n	800a0ca <__gethex+0x456>
 800a0e8:	0800bf90 	.word	0x0800bf90

0800a0ec <L_shift>:
 800a0ec:	f1c2 0208 	rsb	r2, r2, #8
 800a0f0:	0092      	lsls	r2, r2, #2
 800a0f2:	b570      	push	{r4, r5, r6, lr}
 800a0f4:	f1c2 0620 	rsb	r6, r2, #32
 800a0f8:	6843      	ldr	r3, [r0, #4]
 800a0fa:	6804      	ldr	r4, [r0, #0]
 800a0fc:	fa03 f506 	lsl.w	r5, r3, r6
 800a100:	432c      	orrs	r4, r5
 800a102:	40d3      	lsrs	r3, r2
 800a104:	6004      	str	r4, [r0, #0]
 800a106:	f840 3f04 	str.w	r3, [r0, #4]!
 800a10a:	4288      	cmp	r0, r1
 800a10c:	d3f4      	bcc.n	800a0f8 <L_shift+0xc>
 800a10e:	bd70      	pop	{r4, r5, r6, pc}

0800a110 <__match>:
 800a110:	b530      	push	{r4, r5, lr}
 800a112:	6803      	ldr	r3, [r0, #0]
 800a114:	3301      	adds	r3, #1
 800a116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a11a:	b914      	cbnz	r4, 800a122 <__match+0x12>
 800a11c:	6003      	str	r3, [r0, #0]
 800a11e:	2001      	movs	r0, #1
 800a120:	bd30      	pop	{r4, r5, pc}
 800a122:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a126:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a12a:	2d19      	cmp	r5, #25
 800a12c:	bf98      	it	ls
 800a12e:	3220      	addls	r2, #32
 800a130:	42a2      	cmp	r2, r4
 800a132:	d0f0      	beq.n	800a116 <__match+0x6>
 800a134:	2000      	movs	r0, #0
 800a136:	e7f3      	b.n	800a120 <__match+0x10>

0800a138 <__hexnan>:
 800a138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a13c:	2500      	movs	r5, #0
 800a13e:	680b      	ldr	r3, [r1, #0]
 800a140:	4682      	mov	sl, r0
 800a142:	115e      	asrs	r6, r3, #5
 800a144:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a148:	f013 031f 	ands.w	r3, r3, #31
 800a14c:	bf18      	it	ne
 800a14e:	3604      	addne	r6, #4
 800a150:	1f37      	subs	r7, r6, #4
 800a152:	46b9      	mov	r9, r7
 800a154:	463c      	mov	r4, r7
 800a156:	46ab      	mov	fp, r5
 800a158:	b087      	sub	sp, #28
 800a15a:	4690      	mov	r8, r2
 800a15c:	6802      	ldr	r2, [r0, #0]
 800a15e:	9301      	str	r3, [sp, #4]
 800a160:	f846 5c04 	str.w	r5, [r6, #-4]
 800a164:	9502      	str	r5, [sp, #8]
 800a166:	7851      	ldrb	r1, [r2, #1]
 800a168:	1c53      	adds	r3, r2, #1
 800a16a:	9303      	str	r3, [sp, #12]
 800a16c:	b341      	cbz	r1, 800a1c0 <__hexnan+0x88>
 800a16e:	4608      	mov	r0, r1
 800a170:	9205      	str	r2, [sp, #20]
 800a172:	9104      	str	r1, [sp, #16]
 800a174:	f7ff fd69 	bl	8009c4a <__hexdig_fun>
 800a178:	2800      	cmp	r0, #0
 800a17a:	d14f      	bne.n	800a21c <__hexnan+0xe4>
 800a17c:	9904      	ldr	r1, [sp, #16]
 800a17e:	9a05      	ldr	r2, [sp, #20]
 800a180:	2920      	cmp	r1, #32
 800a182:	d818      	bhi.n	800a1b6 <__hexnan+0x7e>
 800a184:	9b02      	ldr	r3, [sp, #8]
 800a186:	459b      	cmp	fp, r3
 800a188:	dd13      	ble.n	800a1b2 <__hexnan+0x7a>
 800a18a:	454c      	cmp	r4, r9
 800a18c:	d206      	bcs.n	800a19c <__hexnan+0x64>
 800a18e:	2d07      	cmp	r5, #7
 800a190:	dc04      	bgt.n	800a19c <__hexnan+0x64>
 800a192:	462a      	mov	r2, r5
 800a194:	4649      	mov	r1, r9
 800a196:	4620      	mov	r0, r4
 800a198:	f7ff ffa8 	bl	800a0ec <L_shift>
 800a19c:	4544      	cmp	r4, r8
 800a19e:	d950      	bls.n	800a242 <__hexnan+0x10a>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	f1a4 0904 	sub.w	r9, r4, #4
 800a1a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1aa:	461d      	mov	r5, r3
 800a1ac:	464c      	mov	r4, r9
 800a1ae:	f8cd b008 	str.w	fp, [sp, #8]
 800a1b2:	9a03      	ldr	r2, [sp, #12]
 800a1b4:	e7d7      	b.n	800a166 <__hexnan+0x2e>
 800a1b6:	2929      	cmp	r1, #41	; 0x29
 800a1b8:	d156      	bne.n	800a268 <__hexnan+0x130>
 800a1ba:	3202      	adds	r2, #2
 800a1bc:	f8ca 2000 	str.w	r2, [sl]
 800a1c0:	f1bb 0f00 	cmp.w	fp, #0
 800a1c4:	d050      	beq.n	800a268 <__hexnan+0x130>
 800a1c6:	454c      	cmp	r4, r9
 800a1c8:	d206      	bcs.n	800a1d8 <__hexnan+0xa0>
 800a1ca:	2d07      	cmp	r5, #7
 800a1cc:	dc04      	bgt.n	800a1d8 <__hexnan+0xa0>
 800a1ce:	462a      	mov	r2, r5
 800a1d0:	4649      	mov	r1, r9
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	f7ff ff8a 	bl	800a0ec <L_shift>
 800a1d8:	4544      	cmp	r4, r8
 800a1da:	d934      	bls.n	800a246 <__hexnan+0x10e>
 800a1dc:	4623      	mov	r3, r4
 800a1de:	f1a8 0204 	sub.w	r2, r8, #4
 800a1e2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a1e6:	429f      	cmp	r7, r3
 800a1e8:	f842 1f04 	str.w	r1, [r2, #4]!
 800a1ec:	d2f9      	bcs.n	800a1e2 <__hexnan+0xaa>
 800a1ee:	1b3b      	subs	r3, r7, r4
 800a1f0:	f023 0303 	bic.w	r3, r3, #3
 800a1f4:	3304      	adds	r3, #4
 800a1f6:	3401      	adds	r4, #1
 800a1f8:	3e03      	subs	r6, #3
 800a1fa:	42b4      	cmp	r4, r6
 800a1fc:	bf88      	it	hi
 800a1fe:	2304      	movhi	r3, #4
 800a200:	2200      	movs	r2, #0
 800a202:	4443      	add	r3, r8
 800a204:	f843 2b04 	str.w	r2, [r3], #4
 800a208:	429f      	cmp	r7, r3
 800a20a:	d2fb      	bcs.n	800a204 <__hexnan+0xcc>
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	b91b      	cbnz	r3, 800a218 <__hexnan+0xe0>
 800a210:	4547      	cmp	r7, r8
 800a212:	d127      	bne.n	800a264 <__hexnan+0x12c>
 800a214:	2301      	movs	r3, #1
 800a216:	603b      	str	r3, [r7, #0]
 800a218:	2005      	movs	r0, #5
 800a21a:	e026      	b.n	800a26a <__hexnan+0x132>
 800a21c:	3501      	adds	r5, #1
 800a21e:	2d08      	cmp	r5, #8
 800a220:	f10b 0b01 	add.w	fp, fp, #1
 800a224:	dd06      	ble.n	800a234 <__hexnan+0xfc>
 800a226:	4544      	cmp	r4, r8
 800a228:	d9c3      	bls.n	800a1b2 <__hexnan+0x7a>
 800a22a:	2300      	movs	r3, #0
 800a22c:	2501      	movs	r5, #1
 800a22e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a232:	3c04      	subs	r4, #4
 800a234:	6822      	ldr	r2, [r4, #0]
 800a236:	f000 000f 	and.w	r0, r0, #15
 800a23a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a23e:	6022      	str	r2, [r4, #0]
 800a240:	e7b7      	b.n	800a1b2 <__hexnan+0x7a>
 800a242:	2508      	movs	r5, #8
 800a244:	e7b5      	b.n	800a1b2 <__hexnan+0x7a>
 800a246:	9b01      	ldr	r3, [sp, #4]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d0df      	beq.n	800a20c <__hexnan+0xd4>
 800a24c:	f04f 32ff 	mov.w	r2, #4294967295
 800a250:	f1c3 0320 	rsb	r3, r3, #32
 800a254:	fa22 f303 	lsr.w	r3, r2, r3
 800a258:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a25c:	401a      	ands	r2, r3
 800a25e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a262:	e7d3      	b.n	800a20c <__hexnan+0xd4>
 800a264:	3f04      	subs	r7, #4
 800a266:	e7d1      	b.n	800a20c <__hexnan+0xd4>
 800a268:	2004      	movs	r0, #4
 800a26a:	b007      	add	sp, #28
 800a26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a270 <__ascii_mbtowc>:
 800a270:	b082      	sub	sp, #8
 800a272:	b901      	cbnz	r1, 800a276 <__ascii_mbtowc+0x6>
 800a274:	a901      	add	r1, sp, #4
 800a276:	b142      	cbz	r2, 800a28a <__ascii_mbtowc+0x1a>
 800a278:	b14b      	cbz	r3, 800a28e <__ascii_mbtowc+0x1e>
 800a27a:	7813      	ldrb	r3, [r2, #0]
 800a27c:	600b      	str	r3, [r1, #0]
 800a27e:	7812      	ldrb	r2, [r2, #0]
 800a280:	1e10      	subs	r0, r2, #0
 800a282:	bf18      	it	ne
 800a284:	2001      	movne	r0, #1
 800a286:	b002      	add	sp, #8
 800a288:	4770      	bx	lr
 800a28a:	4610      	mov	r0, r2
 800a28c:	e7fb      	b.n	800a286 <__ascii_mbtowc+0x16>
 800a28e:	f06f 0001 	mvn.w	r0, #1
 800a292:	e7f8      	b.n	800a286 <__ascii_mbtowc+0x16>

0800a294 <__malloc_lock>:
 800a294:	4801      	ldr	r0, [pc, #4]	; (800a29c <__malloc_lock+0x8>)
 800a296:	f001 b820 	b.w	800b2da <__retarget_lock_acquire_recursive>
 800a29a:	bf00      	nop
 800a29c:	200015d8 	.word	0x200015d8

0800a2a0 <__malloc_unlock>:
 800a2a0:	4801      	ldr	r0, [pc, #4]	; (800a2a8 <__malloc_unlock+0x8>)
 800a2a2:	f001 b81b 	b.w	800b2dc <__retarget_lock_release_recursive>
 800a2a6:	bf00      	nop
 800a2a8:	200015d8 	.word	0x200015d8

0800a2ac <_Balloc>:
 800a2ac:	b570      	push	{r4, r5, r6, lr}
 800a2ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a2b0:	4604      	mov	r4, r0
 800a2b2:	460d      	mov	r5, r1
 800a2b4:	b976      	cbnz	r6, 800a2d4 <_Balloc+0x28>
 800a2b6:	2010      	movs	r0, #16
 800a2b8:	f7fe fca4 	bl	8008c04 <malloc>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	6260      	str	r0, [r4, #36]	; 0x24
 800a2c0:	b920      	cbnz	r0, 800a2cc <_Balloc+0x20>
 800a2c2:	2166      	movs	r1, #102	; 0x66
 800a2c4:	4b17      	ldr	r3, [pc, #92]	; (800a324 <_Balloc+0x78>)
 800a2c6:	4818      	ldr	r0, [pc, #96]	; (800a328 <_Balloc+0x7c>)
 800a2c8:	f000 ffd6 	bl	800b278 <__assert_func>
 800a2cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2d0:	6006      	str	r6, [r0, #0]
 800a2d2:	60c6      	str	r6, [r0, #12]
 800a2d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a2d6:	68f3      	ldr	r3, [r6, #12]
 800a2d8:	b183      	cbz	r3, 800a2fc <_Balloc+0x50>
 800a2da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2e2:	b9b8      	cbnz	r0, 800a314 <_Balloc+0x68>
 800a2e4:	2101      	movs	r1, #1
 800a2e6:	fa01 f605 	lsl.w	r6, r1, r5
 800a2ea:	1d72      	adds	r2, r6, #5
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	0092      	lsls	r2, r2, #2
 800a2f0:	f000 fc94 	bl	800ac1c <_calloc_r>
 800a2f4:	b160      	cbz	r0, 800a310 <_Balloc+0x64>
 800a2f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2fa:	e00e      	b.n	800a31a <_Balloc+0x6e>
 800a2fc:	2221      	movs	r2, #33	; 0x21
 800a2fe:	2104      	movs	r1, #4
 800a300:	4620      	mov	r0, r4
 800a302:	f000 fc8b 	bl	800ac1c <_calloc_r>
 800a306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a308:	60f0      	str	r0, [r6, #12]
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d1e4      	bne.n	800a2da <_Balloc+0x2e>
 800a310:	2000      	movs	r0, #0
 800a312:	bd70      	pop	{r4, r5, r6, pc}
 800a314:	6802      	ldr	r2, [r0, #0]
 800a316:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a31a:	2300      	movs	r3, #0
 800a31c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a320:	e7f7      	b.n	800a312 <_Balloc+0x66>
 800a322:	bf00      	nop
 800a324:	0800c01c 	.word	0x0800c01c
 800a328:	0800c033 	.word	0x0800c033

0800a32c <_Bfree>:
 800a32c:	b570      	push	{r4, r5, r6, lr}
 800a32e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a330:	4605      	mov	r5, r0
 800a332:	460c      	mov	r4, r1
 800a334:	b976      	cbnz	r6, 800a354 <_Bfree+0x28>
 800a336:	2010      	movs	r0, #16
 800a338:	f7fe fc64 	bl	8008c04 <malloc>
 800a33c:	4602      	mov	r2, r0
 800a33e:	6268      	str	r0, [r5, #36]	; 0x24
 800a340:	b920      	cbnz	r0, 800a34c <_Bfree+0x20>
 800a342:	218a      	movs	r1, #138	; 0x8a
 800a344:	4b08      	ldr	r3, [pc, #32]	; (800a368 <_Bfree+0x3c>)
 800a346:	4809      	ldr	r0, [pc, #36]	; (800a36c <_Bfree+0x40>)
 800a348:	f000 ff96 	bl	800b278 <__assert_func>
 800a34c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a350:	6006      	str	r6, [r0, #0]
 800a352:	60c6      	str	r6, [r0, #12]
 800a354:	b13c      	cbz	r4, 800a366 <_Bfree+0x3a>
 800a356:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a358:	6862      	ldr	r2, [r4, #4]
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a360:	6021      	str	r1, [r4, #0]
 800a362:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a366:	bd70      	pop	{r4, r5, r6, pc}
 800a368:	0800c01c 	.word	0x0800c01c
 800a36c:	0800c033 	.word	0x0800c033

0800a370 <__multadd>:
 800a370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a374:	4607      	mov	r7, r0
 800a376:	460c      	mov	r4, r1
 800a378:	461e      	mov	r6, r3
 800a37a:	2000      	movs	r0, #0
 800a37c:	690d      	ldr	r5, [r1, #16]
 800a37e:	f101 0c14 	add.w	ip, r1, #20
 800a382:	f8dc 3000 	ldr.w	r3, [ip]
 800a386:	3001      	adds	r0, #1
 800a388:	b299      	uxth	r1, r3
 800a38a:	fb02 6101 	mla	r1, r2, r1, r6
 800a38e:	0c1e      	lsrs	r6, r3, #16
 800a390:	0c0b      	lsrs	r3, r1, #16
 800a392:	fb02 3306 	mla	r3, r2, r6, r3
 800a396:	b289      	uxth	r1, r1
 800a398:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a39c:	4285      	cmp	r5, r0
 800a39e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a3a2:	f84c 1b04 	str.w	r1, [ip], #4
 800a3a6:	dcec      	bgt.n	800a382 <__multadd+0x12>
 800a3a8:	b30e      	cbz	r6, 800a3ee <__multadd+0x7e>
 800a3aa:	68a3      	ldr	r3, [r4, #8]
 800a3ac:	42ab      	cmp	r3, r5
 800a3ae:	dc19      	bgt.n	800a3e4 <__multadd+0x74>
 800a3b0:	6861      	ldr	r1, [r4, #4]
 800a3b2:	4638      	mov	r0, r7
 800a3b4:	3101      	adds	r1, #1
 800a3b6:	f7ff ff79 	bl	800a2ac <_Balloc>
 800a3ba:	4680      	mov	r8, r0
 800a3bc:	b928      	cbnz	r0, 800a3ca <__multadd+0x5a>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	21b5      	movs	r1, #181	; 0xb5
 800a3c2:	4b0c      	ldr	r3, [pc, #48]	; (800a3f4 <__multadd+0x84>)
 800a3c4:	480c      	ldr	r0, [pc, #48]	; (800a3f8 <__multadd+0x88>)
 800a3c6:	f000 ff57 	bl	800b278 <__assert_func>
 800a3ca:	6922      	ldr	r2, [r4, #16]
 800a3cc:	f104 010c 	add.w	r1, r4, #12
 800a3d0:	3202      	adds	r2, #2
 800a3d2:	0092      	lsls	r2, r2, #2
 800a3d4:	300c      	adds	r0, #12
 800a3d6:	f7fe fc33 	bl	8008c40 <memcpy>
 800a3da:	4621      	mov	r1, r4
 800a3dc:	4638      	mov	r0, r7
 800a3de:	f7ff ffa5 	bl	800a32c <_Bfree>
 800a3e2:	4644      	mov	r4, r8
 800a3e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a3e8:	3501      	adds	r5, #1
 800a3ea:	615e      	str	r6, [r3, #20]
 800a3ec:	6125      	str	r5, [r4, #16]
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3f4:	0800bf90 	.word	0x0800bf90
 800a3f8:	0800c033 	.word	0x0800c033

0800a3fc <__s2b>:
 800a3fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a400:	4615      	mov	r5, r2
 800a402:	2209      	movs	r2, #9
 800a404:	461f      	mov	r7, r3
 800a406:	3308      	adds	r3, #8
 800a408:	460c      	mov	r4, r1
 800a40a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a40e:	4606      	mov	r6, r0
 800a410:	2201      	movs	r2, #1
 800a412:	2100      	movs	r1, #0
 800a414:	429a      	cmp	r2, r3
 800a416:	db09      	blt.n	800a42c <__s2b+0x30>
 800a418:	4630      	mov	r0, r6
 800a41a:	f7ff ff47 	bl	800a2ac <_Balloc>
 800a41e:	b940      	cbnz	r0, 800a432 <__s2b+0x36>
 800a420:	4602      	mov	r2, r0
 800a422:	21ce      	movs	r1, #206	; 0xce
 800a424:	4b18      	ldr	r3, [pc, #96]	; (800a488 <__s2b+0x8c>)
 800a426:	4819      	ldr	r0, [pc, #100]	; (800a48c <__s2b+0x90>)
 800a428:	f000 ff26 	bl	800b278 <__assert_func>
 800a42c:	0052      	lsls	r2, r2, #1
 800a42e:	3101      	adds	r1, #1
 800a430:	e7f0      	b.n	800a414 <__s2b+0x18>
 800a432:	9b08      	ldr	r3, [sp, #32]
 800a434:	2d09      	cmp	r5, #9
 800a436:	6143      	str	r3, [r0, #20]
 800a438:	f04f 0301 	mov.w	r3, #1
 800a43c:	6103      	str	r3, [r0, #16]
 800a43e:	dd16      	ble.n	800a46e <__s2b+0x72>
 800a440:	f104 0909 	add.w	r9, r4, #9
 800a444:	46c8      	mov	r8, r9
 800a446:	442c      	add	r4, r5
 800a448:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a44c:	4601      	mov	r1, r0
 800a44e:	220a      	movs	r2, #10
 800a450:	4630      	mov	r0, r6
 800a452:	3b30      	subs	r3, #48	; 0x30
 800a454:	f7ff ff8c 	bl	800a370 <__multadd>
 800a458:	45a0      	cmp	r8, r4
 800a45a:	d1f5      	bne.n	800a448 <__s2b+0x4c>
 800a45c:	f1a5 0408 	sub.w	r4, r5, #8
 800a460:	444c      	add	r4, r9
 800a462:	1b2d      	subs	r5, r5, r4
 800a464:	1963      	adds	r3, r4, r5
 800a466:	42bb      	cmp	r3, r7
 800a468:	db04      	blt.n	800a474 <__s2b+0x78>
 800a46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a46e:	2509      	movs	r5, #9
 800a470:	340a      	adds	r4, #10
 800a472:	e7f6      	b.n	800a462 <__s2b+0x66>
 800a474:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a478:	4601      	mov	r1, r0
 800a47a:	220a      	movs	r2, #10
 800a47c:	4630      	mov	r0, r6
 800a47e:	3b30      	subs	r3, #48	; 0x30
 800a480:	f7ff ff76 	bl	800a370 <__multadd>
 800a484:	e7ee      	b.n	800a464 <__s2b+0x68>
 800a486:	bf00      	nop
 800a488:	0800bf90 	.word	0x0800bf90
 800a48c:	0800c033 	.word	0x0800c033

0800a490 <__hi0bits>:
 800a490:	0c02      	lsrs	r2, r0, #16
 800a492:	0412      	lsls	r2, r2, #16
 800a494:	4603      	mov	r3, r0
 800a496:	b9ca      	cbnz	r2, 800a4cc <__hi0bits+0x3c>
 800a498:	0403      	lsls	r3, r0, #16
 800a49a:	2010      	movs	r0, #16
 800a49c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a4a0:	bf04      	itt	eq
 800a4a2:	021b      	lsleq	r3, r3, #8
 800a4a4:	3008      	addeq	r0, #8
 800a4a6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a4aa:	bf04      	itt	eq
 800a4ac:	011b      	lsleq	r3, r3, #4
 800a4ae:	3004      	addeq	r0, #4
 800a4b0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a4b4:	bf04      	itt	eq
 800a4b6:	009b      	lsleq	r3, r3, #2
 800a4b8:	3002      	addeq	r0, #2
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	db05      	blt.n	800a4ca <__hi0bits+0x3a>
 800a4be:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a4c2:	f100 0001 	add.w	r0, r0, #1
 800a4c6:	bf08      	it	eq
 800a4c8:	2020      	moveq	r0, #32
 800a4ca:	4770      	bx	lr
 800a4cc:	2000      	movs	r0, #0
 800a4ce:	e7e5      	b.n	800a49c <__hi0bits+0xc>

0800a4d0 <__lo0bits>:
 800a4d0:	6803      	ldr	r3, [r0, #0]
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	f013 0007 	ands.w	r0, r3, #7
 800a4d8:	d00b      	beq.n	800a4f2 <__lo0bits+0x22>
 800a4da:	07d9      	lsls	r1, r3, #31
 800a4dc:	d421      	bmi.n	800a522 <__lo0bits+0x52>
 800a4de:	0798      	lsls	r0, r3, #30
 800a4e0:	bf49      	itett	mi
 800a4e2:	085b      	lsrmi	r3, r3, #1
 800a4e4:	089b      	lsrpl	r3, r3, #2
 800a4e6:	2001      	movmi	r0, #1
 800a4e8:	6013      	strmi	r3, [r2, #0]
 800a4ea:	bf5c      	itt	pl
 800a4ec:	2002      	movpl	r0, #2
 800a4ee:	6013      	strpl	r3, [r2, #0]
 800a4f0:	4770      	bx	lr
 800a4f2:	b299      	uxth	r1, r3
 800a4f4:	b909      	cbnz	r1, 800a4fa <__lo0bits+0x2a>
 800a4f6:	2010      	movs	r0, #16
 800a4f8:	0c1b      	lsrs	r3, r3, #16
 800a4fa:	b2d9      	uxtb	r1, r3
 800a4fc:	b909      	cbnz	r1, 800a502 <__lo0bits+0x32>
 800a4fe:	3008      	adds	r0, #8
 800a500:	0a1b      	lsrs	r3, r3, #8
 800a502:	0719      	lsls	r1, r3, #28
 800a504:	bf04      	itt	eq
 800a506:	091b      	lsreq	r3, r3, #4
 800a508:	3004      	addeq	r0, #4
 800a50a:	0799      	lsls	r1, r3, #30
 800a50c:	bf04      	itt	eq
 800a50e:	089b      	lsreq	r3, r3, #2
 800a510:	3002      	addeq	r0, #2
 800a512:	07d9      	lsls	r1, r3, #31
 800a514:	d403      	bmi.n	800a51e <__lo0bits+0x4e>
 800a516:	085b      	lsrs	r3, r3, #1
 800a518:	f100 0001 	add.w	r0, r0, #1
 800a51c:	d003      	beq.n	800a526 <__lo0bits+0x56>
 800a51e:	6013      	str	r3, [r2, #0]
 800a520:	4770      	bx	lr
 800a522:	2000      	movs	r0, #0
 800a524:	4770      	bx	lr
 800a526:	2020      	movs	r0, #32
 800a528:	4770      	bx	lr
	...

0800a52c <__i2b>:
 800a52c:	b510      	push	{r4, lr}
 800a52e:	460c      	mov	r4, r1
 800a530:	2101      	movs	r1, #1
 800a532:	f7ff febb 	bl	800a2ac <_Balloc>
 800a536:	4602      	mov	r2, r0
 800a538:	b928      	cbnz	r0, 800a546 <__i2b+0x1a>
 800a53a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a53e:	4b04      	ldr	r3, [pc, #16]	; (800a550 <__i2b+0x24>)
 800a540:	4804      	ldr	r0, [pc, #16]	; (800a554 <__i2b+0x28>)
 800a542:	f000 fe99 	bl	800b278 <__assert_func>
 800a546:	2301      	movs	r3, #1
 800a548:	6144      	str	r4, [r0, #20]
 800a54a:	6103      	str	r3, [r0, #16]
 800a54c:	bd10      	pop	{r4, pc}
 800a54e:	bf00      	nop
 800a550:	0800bf90 	.word	0x0800bf90
 800a554:	0800c033 	.word	0x0800c033

0800a558 <__multiply>:
 800a558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55c:	4691      	mov	r9, r2
 800a55e:	690a      	ldr	r2, [r1, #16]
 800a560:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a564:	460c      	mov	r4, r1
 800a566:	429a      	cmp	r2, r3
 800a568:	bfbe      	ittt	lt
 800a56a:	460b      	movlt	r3, r1
 800a56c:	464c      	movlt	r4, r9
 800a56e:	4699      	movlt	r9, r3
 800a570:	6927      	ldr	r7, [r4, #16]
 800a572:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a576:	68a3      	ldr	r3, [r4, #8]
 800a578:	6861      	ldr	r1, [r4, #4]
 800a57a:	eb07 060a 	add.w	r6, r7, sl
 800a57e:	42b3      	cmp	r3, r6
 800a580:	b085      	sub	sp, #20
 800a582:	bfb8      	it	lt
 800a584:	3101      	addlt	r1, #1
 800a586:	f7ff fe91 	bl	800a2ac <_Balloc>
 800a58a:	b930      	cbnz	r0, 800a59a <__multiply+0x42>
 800a58c:	4602      	mov	r2, r0
 800a58e:	f240 115d 	movw	r1, #349	; 0x15d
 800a592:	4b43      	ldr	r3, [pc, #268]	; (800a6a0 <__multiply+0x148>)
 800a594:	4843      	ldr	r0, [pc, #268]	; (800a6a4 <__multiply+0x14c>)
 800a596:	f000 fe6f 	bl	800b278 <__assert_func>
 800a59a:	f100 0514 	add.w	r5, r0, #20
 800a59e:	462b      	mov	r3, r5
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a5a6:	4543      	cmp	r3, r8
 800a5a8:	d321      	bcc.n	800a5ee <__multiply+0x96>
 800a5aa:	f104 0314 	add.w	r3, r4, #20
 800a5ae:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a5b2:	f109 0314 	add.w	r3, r9, #20
 800a5b6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a5ba:	9202      	str	r2, [sp, #8]
 800a5bc:	1b3a      	subs	r2, r7, r4
 800a5be:	3a15      	subs	r2, #21
 800a5c0:	f022 0203 	bic.w	r2, r2, #3
 800a5c4:	3204      	adds	r2, #4
 800a5c6:	f104 0115 	add.w	r1, r4, #21
 800a5ca:	428f      	cmp	r7, r1
 800a5cc:	bf38      	it	cc
 800a5ce:	2204      	movcc	r2, #4
 800a5d0:	9201      	str	r2, [sp, #4]
 800a5d2:	9a02      	ldr	r2, [sp, #8]
 800a5d4:	9303      	str	r3, [sp, #12]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d80c      	bhi.n	800a5f4 <__multiply+0x9c>
 800a5da:	2e00      	cmp	r6, #0
 800a5dc:	dd03      	ble.n	800a5e6 <__multiply+0x8e>
 800a5de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d059      	beq.n	800a69a <__multiply+0x142>
 800a5e6:	6106      	str	r6, [r0, #16]
 800a5e8:	b005      	add	sp, #20
 800a5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ee:	f843 2b04 	str.w	r2, [r3], #4
 800a5f2:	e7d8      	b.n	800a5a6 <__multiply+0x4e>
 800a5f4:	f8b3 a000 	ldrh.w	sl, [r3]
 800a5f8:	f1ba 0f00 	cmp.w	sl, #0
 800a5fc:	d023      	beq.n	800a646 <__multiply+0xee>
 800a5fe:	46a9      	mov	r9, r5
 800a600:	f04f 0c00 	mov.w	ip, #0
 800a604:	f104 0e14 	add.w	lr, r4, #20
 800a608:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a60c:	f8d9 1000 	ldr.w	r1, [r9]
 800a610:	fa1f fb82 	uxth.w	fp, r2
 800a614:	b289      	uxth	r1, r1
 800a616:	fb0a 110b 	mla	r1, sl, fp, r1
 800a61a:	4461      	add	r1, ip
 800a61c:	f8d9 c000 	ldr.w	ip, [r9]
 800a620:	0c12      	lsrs	r2, r2, #16
 800a622:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a626:	fb0a c202 	mla	r2, sl, r2, ip
 800a62a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a62e:	b289      	uxth	r1, r1
 800a630:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a634:	4577      	cmp	r7, lr
 800a636:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a63a:	f849 1b04 	str.w	r1, [r9], #4
 800a63e:	d8e3      	bhi.n	800a608 <__multiply+0xb0>
 800a640:	9a01      	ldr	r2, [sp, #4]
 800a642:	f845 c002 	str.w	ip, [r5, r2]
 800a646:	9a03      	ldr	r2, [sp, #12]
 800a648:	3304      	adds	r3, #4
 800a64a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a64e:	f1b9 0f00 	cmp.w	r9, #0
 800a652:	d020      	beq.n	800a696 <__multiply+0x13e>
 800a654:	46ae      	mov	lr, r5
 800a656:	f04f 0a00 	mov.w	sl, #0
 800a65a:	6829      	ldr	r1, [r5, #0]
 800a65c:	f104 0c14 	add.w	ip, r4, #20
 800a660:	f8bc b000 	ldrh.w	fp, [ip]
 800a664:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a668:	b289      	uxth	r1, r1
 800a66a:	fb09 220b 	mla	r2, r9, fp, r2
 800a66e:	4492      	add	sl, r2
 800a670:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a674:	f84e 1b04 	str.w	r1, [lr], #4
 800a678:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a67c:	f8be 1000 	ldrh.w	r1, [lr]
 800a680:	0c12      	lsrs	r2, r2, #16
 800a682:	fb09 1102 	mla	r1, r9, r2, r1
 800a686:	4567      	cmp	r7, ip
 800a688:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a68c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a690:	d8e6      	bhi.n	800a660 <__multiply+0x108>
 800a692:	9a01      	ldr	r2, [sp, #4]
 800a694:	50a9      	str	r1, [r5, r2]
 800a696:	3504      	adds	r5, #4
 800a698:	e79b      	b.n	800a5d2 <__multiply+0x7a>
 800a69a:	3e01      	subs	r6, #1
 800a69c:	e79d      	b.n	800a5da <__multiply+0x82>
 800a69e:	bf00      	nop
 800a6a0:	0800bf90 	.word	0x0800bf90
 800a6a4:	0800c033 	.word	0x0800c033

0800a6a8 <__pow5mult>:
 800a6a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6ac:	4615      	mov	r5, r2
 800a6ae:	f012 0203 	ands.w	r2, r2, #3
 800a6b2:	4606      	mov	r6, r0
 800a6b4:	460f      	mov	r7, r1
 800a6b6:	d007      	beq.n	800a6c8 <__pow5mult+0x20>
 800a6b8:	4c25      	ldr	r4, [pc, #148]	; (800a750 <__pow5mult+0xa8>)
 800a6ba:	3a01      	subs	r2, #1
 800a6bc:	2300      	movs	r3, #0
 800a6be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a6c2:	f7ff fe55 	bl	800a370 <__multadd>
 800a6c6:	4607      	mov	r7, r0
 800a6c8:	10ad      	asrs	r5, r5, #2
 800a6ca:	d03d      	beq.n	800a748 <__pow5mult+0xa0>
 800a6cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a6ce:	b97c      	cbnz	r4, 800a6f0 <__pow5mult+0x48>
 800a6d0:	2010      	movs	r0, #16
 800a6d2:	f7fe fa97 	bl	8008c04 <malloc>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	6270      	str	r0, [r6, #36]	; 0x24
 800a6da:	b928      	cbnz	r0, 800a6e8 <__pow5mult+0x40>
 800a6dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a6e0:	4b1c      	ldr	r3, [pc, #112]	; (800a754 <__pow5mult+0xac>)
 800a6e2:	481d      	ldr	r0, [pc, #116]	; (800a758 <__pow5mult+0xb0>)
 800a6e4:	f000 fdc8 	bl	800b278 <__assert_func>
 800a6e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a6ec:	6004      	str	r4, [r0, #0]
 800a6ee:	60c4      	str	r4, [r0, #12]
 800a6f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a6f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a6f8:	b94c      	cbnz	r4, 800a70e <__pow5mult+0x66>
 800a6fa:	f240 2171 	movw	r1, #625	; 0x271
 800a6fe:	4630      	mov	r0, r6
 800a700:	f7ff ff14 	bl	800a52c <__i2b>
 800a704:	2300      	movs	r3, #0
 800a706:	4604      	mov	r4, r0
 800a708:	f8c8 0008 	str.w	r0, [r8, #8]
 800a70c:	6003      	str	r3, [r0, #0]
 800a70e:	f04f 0900 	mov.w	r9, #0
 800a712:	07eb      	lsls	r3, r5, #31
 800a714:	d50a      	bpl.n	800a72c <__pow5mult+0x84>
 800a716:	4639      	mov	r1, r7
 800a718:	4622      	mov	r2, r4
 800a71a:	4630      	mov	r0, r6
 800a71c:	f7ff ff1c 	bl	800a558 <__multiply>
 800a720:	4680      	mov	r8, r0
 800a722:	4639      	mov	r1, r7
 800a724:	4630      	mov	r0, r6
 800a726:	f7ff fe01 	bl	800a32c <_Bfree>
 800a72a:	4647      	mov	r7, r8
 800a72c:	106d      	asrs	r5, r5, #1
 800a72e:	d00b      	beq.n	800a748 <__pow5mult+0xa0>
 800a730:	6820      	ldr	r0, [r4, #0]
 800a732:	b938      	cbnz	r0, 800a744 <__pow5mult+0x9c>
 800a734:	4622      	mov	r2, r4
 800a736:	4621      	mov	r1, r4
 800a738:	4630      	mov	r0, r6
 800a73a:	f7ff ff0d 	bl	800a558 <__multiply>
 800a73e:	6020      	str	r0, [r4, #0]
 800a740:	f8c0 9000 	str.w	r9, [r0]
 800a744:	4604      	mov	r4, r0
 800a746:	e7e4      	b.n	800a712 <__pow5mult+0x6a>
 800a748:	4638      	mov	r0, r7
 800a74a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a74e:	bf00      	nop
 800a750:	0800c180 	.word	0x0800c180
 800a754:	0800c01c 	.word	0x0800c01c
 800a758:	0800c033 	.word	0x0800c033

0800a75c <__lshift>:
 800a75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a760:	460c      	mov	r4, r1
 800a762:	4607      	mov	r7, r0
 800a764:	4691      	mov	r9, r2
 800a766:	6923      	ldr	r3, [r4, #16]
 800a768:	6849      	ldr	r1, [r1, #4]
 800a76a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a76e:	68a3      	ldr	r3, [r4, #8]
 800a770:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a774:	f108 0601 	add.w	r6, r8, #1
 800a778:	42b3      	cmp	r3, r6
 800a77a:	db0b      	blt.n	800a794 <__lshift+0x38>
 800a77c:	4638      	mov	r0, r7
 800a77e:	f7ff fd95 	bl	800a2ac <_Balloc>
 800a782:	4605      	mov	r5, r0
 800a784:	b948      	cbnz	r0, 800a79a <__lshift+0x3e>
 800a786:	4602      	mov	r2, r0
 800a788:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a78c:	4b29      	ldr	r3, [pc, #164]	; (800a834 <__lshift+0xd8>)
 800a78e:	482a      	ldr	r0, [pc, #168]	; (800a838 <__lshift+0xdc>)
 800a790:	f000 fd72 	bl	800b278 <__assert_func>
 800a794:	3101      	adds	r1, #1
 800a796:	005b      	lsls	r3, r3, #1
 800a798:	e7ee      	b.n	800a778 <__lshift+0x1c>
 800a79a:	2300      	movs	r3, #0
 800a79c:	f100 0114 	add.w	r1, r0, #20
 800a7a0:	f100 0210 	add.w	r2, r0, #16
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	4553      	cmp	r3, sl
 800a7a8:	db37      	blt.n	800a81a <__lshift+0xbe>
 800a7aa:	6920      	ldr	r0, [r4, #16]
 800a7ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a7b0:	f104 0314 	add.w	r3, r4, #20
 800a7b4:	f019 091f 	ands.w	r9, r9, #31
 800a7b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a7bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a7c0:	d02f      	beq.n	800a822 <__lshift+0xc6>
 800a7c2:	468a      	mov	sl, r1
 800a7c4:	f04f 0c00 	mov.w	ip, #0
 800a7c8:	f1c9 0e20 	rsb	lr, r9, #32
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	fa02 f209 	lsl.w	r2, r2, r9
 800a7d2:	ea42 020c 	orr.w	r2, r2, ip
 800a7d6:	f84a 2b04 	str.w	r2, [sl], #4
 800a7da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7de:	4298      	cmp	r0, r3
 800a7e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a7e4:	d8f2      	bhi.n	800a7cc <__lshift+0x70>
 800a7e6:	1b03      	subs	r3, r0, r4
 800a7e8:	3b15      	subs	r3, #21
 800a7ea:	f023 0303 	bic.w	r3, r3, #3
 800a7ee:	3304      	adds	r3, #4
 800a7f0:	f104 0215 	add.w	r2, r4, #21
 800a7f4:	4290      	cmp	r0, r2
 800a7f6:	bf38      	it	cc
 800a7f8:	2304      	movcc	r3, #4
 800a7fa:	f841 c003 	str.w	ip, [r1, r3]
 800a7fe:	f1bc 0f00 	cmp.w	ip, #0
 800a802:	d001      	beq.n	800a808 <__lshift+0xac>
 800a804:	f108 0602 	add.w	r6, r8, #2
 800a808:	3e01      	subs	r6, #1
 800a80a:	4638      	mov	r0, r7
 800a80c:	4621      	mov	r1, r4
 800a80e:	612e      	str	r6, [r5, #16]
 800a810:	f7ff fd8c 	bl	800a32c <_Bfree>
 800a814:	4628      	mov	r0, r5
 800a816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a81a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a81e:	3301      	adds	r3, #1
 800a820:	e7c1      	b.n	800a7a6 <__lshift+0x4a>
 800a822:	3904      	subs	r1, #4
 800a824:	f853 2b04 	ldr.w	r2, [r3], #4
 800a828:	4298      	cmp	r0, r3
 800a82a:	f841 2f04 	str.w	r2, [r1, #4]!
 800a82e:	d8f9      	bhi.n	800a824 <__lshift+0xc8>
 800a830:	e7ea      	b.n	800a808 <__lshift+0xac>
 800a832:	bf00      	nop
 800a834:	0800bf90 	.word	0x0800bf90
 800a838:	0800c033 	.word	0x0800c033

0800a83c <__mcmp>:
 800a83c:	4603      	mov	r3, r0
 800a83e:	690a      	ldr	r2, [r1, #16]
 800a840:	6900      	ldr	r0, [r0, #16]
 800a842:	b530      	push	{r4, r5, lr}
 800a844:	1a80      	subs	r0, r0, r2
 800a846:	d10d      	bne.n	800a864 <__mcmp+0x28>
 800a848:	3314      	adds	r3, #20
 800a84a:	3114      	adds	r1, #20
 800a84c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a850:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a854:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a858:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a85c:	4295      	cmp	r5, r2
 800a85e:	d002      	beq.n	800a866 <__mcmp+0x2a>
 800a860:	d304      	bcc.n	800a86c <__mcmp+0x30>
 800a862:	2001      	movs	r0, #1
 800a864:	bd30      	pop	{r4, r5, pc}
 800a866:	42a3      	cmp	r3, r4
 800a868:	d3f4      	bcc.n	800a854 <__mcmp+0x18>
 800a86a:	e7fb      	b.n	800a864 <__mcmp+0x28>
 800a86c:	f04f 30ff 	mov.w	r0, #4294967295
 800a870:	e7f8      	b.n	800a864 <__mcmp+0x28>
	...

0800a874 <__mdiff>:
 800a874:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a878:	460d      	mov	r5, r1
 800a87a:	4607      	mov	r7, r0
 800a87c:	4611      	mov	r1, r2
 800a87e:	4628      	mov	r0, r5
 800a880:	4614      	mov	r4, r2
 800a882:	f7ff ffdb 	bl	800a83c <__mcmp>
 800a886:	1e06      	subs	r6, r0, #0
 800a888:	d111      	bne.n	800a8ae <__mdiff+0x3a>
 800a88a:	4631      	mov	r1, r6
 800a88c:	4638      	mov	r0, r7
 800a88e:	f7ff fd0d 	bl	800a2ac <_Balloc>
 800a892:	4602      	mov	r2, r0
 800a894:	b928      	cbnz	r0, 800a8a2 <__mdiff+0x2e>
 800a896:	f240 2132 	movw	r1, #562	; 0x232
 800a89a:	4b3a      	ldr	r3, [pc, #232]	; (800a984 <__mdiff+0x110>)
 800a89c:	483a      	ldr	r0, [pc, #232]	; (800a988 <__mdiff+0x114>)
 800a89e:	f000 fceb 	bl	800b278 <__assert_func>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a8a8:	4610      	mov	r0, r2
 800a8aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8ae:	bfa4      	itt	ge
 800a8b0:	4623      	movge	r3, r4
 800a8b2:	462c      	movge	r4, r5
 800a8b4:	4638      	mov	r0, r7
 800a8b6:	6861      	ldr	r1, [r4, #4]
 800a8b8:	bfa6      	itte	ge
 800a8ba:	461d      	movge	r5, r3
 800a8bc:	2600      	movge	r6, #0
 800a8be:	2601      	movlt	r6, #1
 800a8c0:	f7ff fcf4 	bl	800a2ac <_Balloc>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	b918      	cbnz	r0, 800a8d0 <__mdiff+0x5c>
 800a8c8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a8cc:	4b2d      	ldr	r3, [pc, #180]	; (800a984 <__mdiff+0x110>)
 800a8ce:	e7e5      	b.n	800a89c <__mdiff+0x28>
 800a8d0:	f102 0814 	add.w	r8, r2, #20
 800a8d4:	46c2      	mov	sl, r8
 800a8d6:	f04f 0c00 	mov.w	ip, #0
 800a8da:	6927      	ldr	r7, [r4, #16]
 800a8dc:	60c6      	str	r6, [r0, #12]
 800a8de:	692e      	ldr	r6, [r5, #16]
 800a8e0:	f104 0014 	add.w	r0, r4, #20
 800a8e4:	f105 0914 	add.w	r9, r5, #20
 800a8e8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a8ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a8f0:	3410      	adds	r4, #16
 800a8f2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a8f6:	f859 3b04 	ldr.w	r3, [r9], #4
 800a8fa:	fa1f f18b 	uxth.w	r1, fp
 800a8fe:	448c      	add	ip, r1
 800a900:	b299      	uxth	r1, r3
 800a902:	0c1b      	lsrs	r3, r3, #16
 800a904:	ebac 0101 	sub.w	r1, ip, r1
 800a908:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a90c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a910:	b289      	uxth	r1, r1
 800a912:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a916:	454e      	cmp	r6, r9
 800a918:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a91c:	f84a 3b04 	str.w	r3, [sl], #4
 800a920:	d8e7      	bhi.n	800a8f2 <__mdiff+0x7e>
 800a922:	1b73      	subs	r3, r6, r5
 800a924:	3b15      	subs	r3, #21
 800a926:	f023 0303 	bic.w	r3, r3, #3
 800a92a:	3515      	adds	r5, #21
 800a92c:	3304      	adds	r3, #4
 800a92e:	42ae      	cmp	r6, r5
 800a930:	bf38      	it	cc
 800a932:	2304      	movcc	r3, #4
 800a934:	4418      	add	r0, r3
 800a936:	4443      	add	r3, r8
 800a938:	461e      	mov	r6, r3
 800a93a:	4605      	mov	r5, r0
 800a93c:	4575      	cmp	r5, lr
 800a93e:	d30e      	bcc.n	800a95e <__mdiff+0xea>
 800a940:	f10e 0103 	add.w	r1, lr, #3
 800a944:	1a09      	subs	r1, r1, r0
 800a946:	f021 0103 	bic.w	r1, r1, #3
 800a94a:	3803      	subs	r0, #3
 800a94c:	4586      	cmp	lr, r0
 800a94e:	bf38      	it	cc
 800a950:	2100      	movcc	r1, #0
 800a952:	4419      	add	r1, r3
 800a954:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a958:	b18b      	cbz	r3, 800a97e <__mdiff+0x10a>
 800a95a:	6117      	str	r7, [r2, #16]
 800a95c:	e7a4      	b.n	800a8a8 <__mdiff+0x34>
 800a95e:	f855 8b04 	ldr.w	r8, [r5], #4
 800a962:	fa1f f188 	uxth.w	r1, r8
 800a966:	4461      	add	r1, ip
 800a968:	140c      	asrs	r4, r1, #16
 800a96a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a96e:	b289      	uxth	r1, r1
 800a970:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a974:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a978:	f846 1b04 	str.w	r1, [r6], #4
 800a97c:	e7de      	b.n	800a93c <__mdiff+0xc8>
 800a97e:	3f01      	subs	r7, #1
 800a980:	e7e8      	b.n	800a954 <__mdiff+0xe0>
 800a982:	bf00      	nop
 800a984:	0800bf90 	.word	0x0800bf90
 800a988:	0800c033 	.word	0x0800c033

0800a98c <__ulp>:
 800a98c:	4b11      	ldr	r3, [pc, #68]	; (800a9d4 <__ulp+0x48>)
 800a98e:	400b      	ands	r3, r1
 800a990:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a994:	2b00      	cmp	r3, #0
 800a996:	dd02      	ble.n	800a99e <__ulp+0x12>
 800a998:	2000      	movs	r0, #0
 800a99a:	4619      	mov	r1, r3
 800a99c:	4770      	bx	lr
 800a99e:	425b      	negs	r3, r3
 800a9a0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a9a4:	f04f 0000 	mov.w	r0, #0
 800a9a8:	f04f 0100 	mov.w	r1, #0
 800a9ac:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a9b0:	da04      	bge.n	800a9bc <__ulp+0x30>
 800a9b2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a9b6:	fa43 f102 	asr.w	r1, r3, r2
 800a9ba:	4770      	bx	lr
 800a9bc:	f1a2 0314 	sub.w	r3, r2, #20
 800a9c0:	2b1e      	cmp	r3, #30
 800a9c2:	bfd6      	itet	le
 800a9c4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a9c8:	2301      	movgt	r3, #1
 800a9ca:	fa22 f303 	lsrle.w	r3, r2, r3
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	7ff00000 	.word	0x7ff00000

0800a9d8 <__b2d>:
 800a9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9dc:	6907      	ldr	r7, [r0, #16]
 800a9de:	f100 0914 	add.w	r9, r0, #20
 800a9e2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a9e6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800a9ea:	f1a7 0804 	sub.w	r8, r7, #4
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	f7ff fd4e 	bl	800a490 <__hi0bits>
 800a9f4:	f1c0 0320 	rsb	r3, r0, #32
 800a9f8:	280a      	cmp	r0, #10
 800a9fa:	600b      	str	r3, [r1, #0]
 800a9fc:	491f      	ldr	r1, [pc, #124]	; (800aa7c <__b2d+0xa4>)
 800a9fe:	dc17      	bgt.n	800aa30 <__b2d+0x58>
 800aa00:	45c1      	cmp	r9, r8
 800aa02:	bf28      	it	cs
 800aa04:	2200      	movcs	r2, #0
 800aa06:	f1c0 0c0b 	rsb	ip, r0, #11
 800aa0a:	fa26 f30c 	lsr.w	r3, r6, ip
 800aa0e:	bf38      	it	cc
 800aa10:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800aa14:	ea43 0501 	orr.w	r5, r3, r1
 800aa18:	f100 0315 	add.w	r3, r0, #21
 800aa1c:	fa06 f303 	lsl.w	r3, r6, r3
 800aa20:	fa22 f20c 	lsr.w	r2, r2, ip
 800aa24:	ea43 0402 	orr.w	r4, r3, r2
 800aa28:	4620      	mov	r0, r4
 800aa2a:	4629      	mov	r1, r5
 800aa2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa30:	45c1      	cmp	r9, r8
 800aa32:	bf2e      	itee	cs
 800aa34:	2200      	movcs	r2, #0
 800aa36:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800aa3a:	f1a7 0808 	subcc.w	r8, r7, #8
 800aa3e:	f1b0 030b 	subs.w	r3, r0, #11
 800aa42:	d016      	beq.n	800aa72 <__b2d+0x9a>
 800aa44:	f1c3 0720 	rsb	r7, r3, #32
 800aa48:	fa22 f107 	lsr.w	r1, r2, r7
 800aa4c:	45c8      	cmp	r8, r9
 800aa4e:	fa06 f603 	lsl.w	r6, r6, r3
 800aa52:	ea46 0601 	orr.w	r6, r6, r1
 800aa56:	bf94      	ite	ls
 800aa58:	2100      	movls	r1, #0
 800aa5a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800aa5e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800aa62:	fa02 f003 	lsl.w	r0, r2, r3
 800aa66:	40f9      	lsrs	r1, r7
 800aa68:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aa6c:	ea40 0401 	orr.w	r4, r0, r1
 800aa70:	e7da      	b.n	800aa28 <__b2d+0x50>
 800aa72:	4614      	mov	r4, r2
 800aa74:	ea46 0501 	orr.w	r5, r6, r1
 800aa78:	e7d6      	b.n	800aa28 <__b2d+0x50>
 800aa7a:	bf00      	nop
 800aa7c:	3ff00000 	.word	0x3ff00000

0800aa80 <__d2b>:
 800aa80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800aa84:	2101      	movs	r1, #1
 800aa86:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800aa8a:	4690      	mov	r8, r2
 800aa8c:	461d      	mov	r5, r3
 800aa8e:	f7ff fc0d 	bl	800a2ac <_Balloc>
 800aa92:	4604      	mov	r4, r0
 800aa94:	b930      	cbnz	r0, 800aaa4 <__d2b+0x24>
 800aa96:	4602      	mov	r2, r0
 800aa98:	f240 310a 	movw	r1, #778	; 0x30a
 800aa9c:	4b24      	ldr	r3, [pc, #144]	; (800ab30 <__d2b+0xb0>)
 800aa9e:	4825      	ldr	r0, [pc, #148]	; (800ab34 <__d2b+0xb4>)
 800aaa0:	f000 fbea 	bl	800b278 <__assert_func>
 800aaa4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800aaa8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800aaac:	bb2d      	cbnz	r5, 800aafa <__d2b+0x7a>
 800aaae:	9301      	str	r3, [sp, #4]
 800aab0:	f1b8 0300 	subs.w	r3, r8, #0
 800aab4:	d026      	beq.n	800ab04 <__d2b+0x84>
 800aab6:	4668      	mov	r0, sp
 800aab8:	9300      	str	r3, [sp, #0]
 800aaba:	f7ff fd09 	bl	800a4d0 <__lo0bits>
 800aabe:	9900      	ldr	r1, [sp, #0]
 800aac0:	b1f0      	cbz	r0, 800ab00 <__d2b+0x80>
 800aac2:	9a01      	ldr	r2, [sp, #4]
 800aac4:	f1c0 0320 	rsb	r3, r0, #32
 800aac8:	fa02 f303 	lsl.w	r3, r2, r3
 800aacc:	430b      	orrs	r3, r1
 800aace:	40c2      	lsrs	r2, r0
 800aad0:	6163      	str	r3, [r4, #20]
 800aad2:	9201      	str	r2, [sp, #4]
 800aad4:	9b01      	ldr	r3, [sp, #4]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	bf14      	ite	ne
 800aada:	2102      	movne	r1, #2
 800aadc:	2101      	moveq	r1, #1
 800aade:	61a3      	str	r3, [r4, #24]
 800aae0:	6121      	str	r1, [r4, #16]
 800aae2:	b1c5      	cbz	r5, 800ab16 <__d2b+0x96>
 800aae4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aae8:	4405      	add	r5, r0
 800aaea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aaee:	603d      	str	r5, [r7, #0]
 800aaf0:	6030      	str	r0, [r6, #0]
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	b002      	add	sp, #8
 800aaf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aafa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aafe:	e7d6      	b.n	800aaae <__d2b+0x2e>
 800ab00:	6161      	str	r1, [r4, #20]
 800ab02:	e7e7      	b.n	800aad4 <__d2b+0x54>
 800ab04:	a801      	add	r0, sp, #4
 800ab06:	f7ff fce3 	bl	800a4d0 <__lo0bits>
 800ab0a:	2101      	movs	r1, #1
 800ab0c:	9b01      	ldr	r3, [sp, #4]
 800ab0e:	6121      	str	r1, [r4, #16]
 800ab10:	6163      	str	r3, [r4, #20]
 800ab12:	3020      	adds	r0, #32
 800ab14:	e7e5      	b.n	800aae2 <__d2b+0x62>
 800ab16:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800ab1a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab1e:	6038      	str	r0, [r7, #0]
 800ab20:	6918      	ldr	r0, [r3, #16]
 800ab22:	f7ff fcb5 	bl	800a490 <__hi0bits>
 800ab26:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800ab2a:	6031      	str	r1, [r6, #0]
 800ab2c:	e7e1      	b.n	800aaf2 <__d2b+0x72>
 800ab2e:	bf00      	nop
 800ab30:	0800bf90 	.word	0x0800bf90
 800ab34:	0800c033 	.word	0x0800c033

0800ab38 <__ratio>:
 800ab38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab3c:	4688      	mov	r8, r1
 800ab3e:	4669      	mov	r1, sp
 800ab40:	4681      	mov	r9, r0
 800ab42:	f7ff ff49 	bl	800a9d8 <__b2d>
 800ab46:	460f      	mov	r7, r1
 800ab48:	4604      	mov	r4, r0
 800ab4a:	460d      	mov	r5, r1
 800ab4c:	4640      	mov	r0, r8
 800ab4e:	a901      	add	r1, sp, #4
 800ab50:	f7ff ff42 	bl	800a9d8 <__b2d>
 800ab54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab58:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ab5c:	468b      	mov	fp, r1
 800ab5e:	eba3 0c02 	sub.w	ip, r3, r2
 800ab62:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ab66:	1a9b      	subs	r3, r3, r2
 800ab68:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	bfd5      	itete	le
 800ab70:	460a      	movle	r2, r1
 800ab72:	462a      	movgt	r2, r5
 800ab74:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab78:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ab7c:	bfd8      	it	le
 800ab7e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ab82:	465b      	mov	r3, fp
 800ab84:	4602      	mov	r2, r0
 800ab86:	4639      	mov	r1, r7
 800ab88:	4620      	mov	r0, r4
 800ab8a:	f7f5 fdcf 	bl	800072c <__aeabi_ddiv>
 800ab8e:	b003      	add	sp, #12
 800ab90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab94 <__copybits>:
 800ab94:	3901      	subs	r1, #1
 800ab96:	b570      	push	{r4, r5, r6, lr}
 800ab98:	1149      	asrs	r1, r1, #5
 800ab9a:	6914      	ldr	r4, [r2, #16]
 800ab9c:	3101      	adds	r1, #1
 800ab9e:	f102 0314 	add.w	r3, r2, #20
 800aba2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aba6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800abaa:	1f05      	subs	r5, r0, #4
 800abac:	42a3      	cmp	r3, r4
 800abae:	d30c      	bcc.n	800abca <__copybits+0x36>
 800abb0:	1aa3      	subs	r3, r4, r2
 800abb2:	3b11      	subs	r3, #17
 800abb4:	f023 0303 	bic.w	r3, r3, #3
 800abb8:	3211      	adds	r2, #17
 800abba:	42a2      	cmp	r2, r4
 800abbc:	bf88      	it	hi
 800abbe:	2300      	movhi	r3, #0
 800abc0:	4418      	add	r0, r3
 800abc2:	2300      	movs	r3, #0
 800abc4:	4288      	cmp	r0, r1
 800abc6:	d305      	bcc.n	800abd4 <__copybits+0x40>
 800abc8:	bd70      	pop	{r4, r5, r6, pc}
 800abca:	f853 6b04 	ldr.w	r6, [r3], #4
 800abce:	f845 6f04 	str.w	r6, [r5, #4]!
 800abd2:	e7eb      	b.n	800abac <__copybits+0x18>
 800abd4:	f840 3b04 	str.w	r3, [r0], #4
 800abd8:	e7f4      	b.n	800abc4 <__copybits+0x30>

0800abda <__any_on>:
 800abda:	f100 0214 	add.w	r2, r0, #20
 800abde:	6900      	ldr	r0, [r0, #16]
 800abe0:	114b      	asrs	r3, r1, #5
 800abe2:	4298      	cmp	r0, r3
 800abe4:	b510      	push	{r4, lr}
 800abe6:	db11      	blt.n	800ac0c <__any_on+0x32>
 800abe8:	dd0a      	ble.n	800ac00 <__any_on+0x26>
 800abea:	f011 011f 	ands.w	r1, r1, #31
 800abee:	d007      	beq.n	800ac00 <__any_on+0x26>
 800abf0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800abf4:	fa24 f001 	lsr.w	r0, r4, r1
 800abf8:	fa00 f101 	lsl.w	r1, r0, r1
 800abfc:	428c      	cmp	r4, r1
 800abfe:	d10b      	bne.n	800ac18 <__any_on+0x3e>
 800ac00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d803      	bhi.n	800ac10 <__any_on+0x36>
 800ac08:	2000      	movs	r0, #0
 800ac0a:	bd10      	pop	{r4, pc}
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	e7f7      	b.n	800ac00 <__any_on+0x26>
 800ac10:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac14:	2900      	cmp	r1, #0
 800ac16:	d0f5      	beq.n	800ac04 <__any_on+0x2a>
 800ac18:	2001      	movs	r0, #1
 800ac1a:	e7f6      	b.n	800ac0a <__any_on+0x30>

0800ac1c <_calloc_r>:
 800ac1c:	b570      	push	{r4, r5, r6, lr}
 800ac1e:	fba1 5402 	umull	r5, r4, r1, r2
 800ac22:	b934      	cbnz	r4, 800ac32 <_calloc_r+0x16>
 800ac24:	4629      	mov	r1, r5
 800ac26:	f7fe f8a3 	bl	8008d70 <_malloc_r>
 800ac2a:	4606      	mov	r6, r0
 800ac2c:	b928      	cbnz	r0, 800ac3a <_calloc_r+0x1e>
 800ac2e:	4630      	mov	r0, r6
 800ac30:	bd70      	pop	{r4, r5, r6, pc}
 800ac32:	220c      	movs	r2, #12
 800ac34:	2600      	movs	r6, #0
 800ac36:	6002      	str	r2, [r0, #0]
 800ac38:	e7f9      	b.n	800ac2e <_calloc_r+0x12>
 800ac3a:	462a      	mov	r2, r5
 800ac3c:	4621      	mov	r1, r4
 800ac3e:	f7fe f827 	bl	8008c90 <memset>
 800ac42:	e7f4      	b.n	800ac2e <_calloc_r+0x12>

0800ac44 <__ssputs_r>:
 800ac44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac48:	688e      	ldr	r6, [r1, #8]
 800ac4a:	4682      	mov	sl, r0
 800ac4c:	429e      	cmp	r6, r3
 800ac4e:	460c      	mov	r4, r1
 800ac50:	4690      	mov	r8, r2
 800ac52:	461f      	mov	r7, r3
 800ac54:	d838      	bhi.n	800acc8 <__ssputs_r+0x84>
 800ac56:	898a      	ldrh	r2, [r1, #12]
 800ac58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac5c:	d032      	beq.n	800acc4 <__ssputs_r+0x80>
 800ac5e:	6825      	ldr	r5, [r4, #0]
 800ac60:	6909      	ldr	r1, [r1, #16]
 800ac62:	3301      	adds	r3, #1
 800ac64:	eba5 0901 	sub.w	r9, r5, r1
 800ac68:	6965      	ldr	r5, [r4, #20]
 800ac6a:	444b      	add	r3, r9
 800ac6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac74:	106d      	asrs	r5, r5, #1
 800ac76:	429d      	cmp	r5, r3
 800ac78:	bf38      	it	cc
 800ac7a:	461d      	movcc	r5, r3
 800ac7c:	0553      	lsls	r3, r2, #21
 800ac7e:	d531      	bpl.n	800ace4 <__ssputs_r+0xa0>
 800ac80:	4629      	mov	r1, r5
 800ac82:	f7fe f875 	bl	8008d70 <_malloc_r>
 800ac86:	4606      	mov	r6, r0
 800ac88:	b950      	cbnz	r0, 800aca0 <__ssputs_r+0x5c>
 800ac8a:	230c      	movs	r3, #12
 800ac8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac90:	f8ca 3000 	str.w	r3, [sl]
 800ac94:	89a3      	ldrh	r3, [r4, #12]
 800ac96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac9a:	81a3      	strh	r3, [r4, #12]
 800ac9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aca0:	464a      	mov	r2, r9
 800aca2:	6921      	ldr	r1, [r4, #16]
 800aca4:	f7fd ffcc 	bl	8008c40 <memcpy>
 800aca8:	89a3      	ldrh	r3, [r4, #12]
 800acaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acb2:	81a3      	strh	r3, [r4, #12]
 800acb4:	6126      	str	r6, [r4, #16]
 800acb6:	444e      	add	r6, r9
 800acb8:	6026      	str	r6, [r4, #0]
 800acba:	463e      	mov	r6, r7
 800acbc:	6165      	str	r5, [r4, #20]
 800acbe:	eba5 0509 	sub.w	r5, r5, r9
 800acc2:	60a5      	str	r5, [r4, #8]
 800acc4:	42be      	cmp	r6, r7
 800acc6:	d900      	bls.n	800acca <__ssputs_r+0x86>
 800acc8:	463e      	mov	r6, r7
 800acca:	4632      	mov	r2, r6
 800accc:	4641      	mov	r1, r8
 800acce:	6820      	ldr	r0, [r4, #0]
 800acd0:	f7fd ffc4 	bl	8008c5c <memmove>
 800acd4:	68a3      	ldr	r3, [r4, #8]
 800acd6:	2000      	movs	r0, #0
 800acd8:	1b9b      	subs	r3, r3, r6
 800acda:	60a3      	str	r3, [r4, #8]
 800acdc:	6823      	ldr	r3, [r4, #0]
 800acde:	4433      	add	r3, r6
 800ace0:	6023      	str	r3, [r4, #0]
 800ace2:	e7db      	b.n	800ac9c <__ssputs_r+0x58>
 800ace4:	462a      	mov	r2, r5
 800ace6:	f000 fafa 	bl	800b2de <_realloc_r>
 800acea:	4606      	mov	r6, r0
 800acec:	2800      	cmp	r0, #0
 800acee:	d1e1      	bne.n	800acb4 <__ssputs_r+0x70>
 800acf0:	4650      	mov	r0, sl
 800acf2:	6921      	ldr	r1, [r4, #16]
 800acf4:	f7fd ffd4 	bl	8008ca0 <_free_r>
 800acf8:	e7c7      	b.n	800ac8a <__ssputs_r+0x46>
	...

0800acfc <_svfiprintf_r>:
 800acfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad00:	4698      	mov	r8, r3
 800ad02:	898b      	ldrh	r3, [r1, #12]
 800ad04:	4607      	mov	r7, r0
 800ad06:	061b      	lsls	r3, r3, #24
 800ad08:	460d      	mov	r5, r1
 800ad0a:	4614      	mov	r4, r2
 800ad0c:	b09d      	sub	sp, #116	; 0x74
 800ad0e:	d50e      	bpl.n	800ad2e <_svfiprintf_r+0x32>
 800ad10:	690b      	ldr	r3, [r1, #16]
 800ad12:	b963      	cbnz	r3, 800ad2e <_svfiprintf_r+0x32>
 800ad14:	2140      	movs	r1, #64	; 0x40
 800ad16:	f7fe f82b 	bl	8008d70 <_malloc_r>
 800ad1a:	6028      	str	r0, [r5, #0]
 800ad1c:	6128      	str	r0, [r5, #16]
 800ad1e:	b920      	cbnz	r0, 800ad2a <_svfiprintf_r+0x2e>
 800ad20:	230c      	movs	r3, #12
 800ad22:	603b      	str	r3, [r7, #0]
 800ad24:	f04f 30ff 	mov.w	r0, #4294967295
 800ad28:	e0d1      	b.n	800aece <_svfiprintf_r+0x1d2>
 800ad2a:	2340      	movs	r3, #64	; 0x40
 800ad2c:	616b      	str	r3, [r5, #20]
 800ad2e:	2300      	movs	r3, #0
 800ad30:	9309      	str	r3, [sp, #36]	; 0x24
 800ad32:	2320      	movs	r3, #32
 800ad34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad38:	2330      	movs	r3, #48	; 0x30
 800ad3a:	f04f 0901 	mov.w	r9, #1
 800ad3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aee8 <_svfiprintf_r+0x1ec>
 800ad46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad4a:	4623      	mov	r3, r4
 800ad4c:	469a      	mov	sl, r3
 800ad4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad52:	b10a      	cbz	r2, 800ad58 <_svfiprintf_r+0x5c>
 800ad54:	2a25      	cmp	r2, #37	; 0x25
 800ad56:	d1f9      	bne.n	800ad4c <_svfiprintf_r+0x50>
 800ad58:	ebba 0b04 	subs.w	fp, sl, r4
 800ad5c:	d00b      	beq.n	800ad76 <_svfiprintf_r+0x7a>
 800ad5e:	465b      	mov	r3, fp
 800ad60:	4622      	mov	r2, r4
 800ad62:	4629      	mov	r1, r5
 800ad64:	4638      	mov	r0, r7
 800ad66:	f7ff ff6d 	bl	800ac44 <__ssputs_r>
 800ad6a:	3001      	adds	r0, #1
 800ad6c:	f000 80aa 	beq.w	800aec4 <_svfiprintf_r+0x1c8>
 800ad70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad72:	445a      	add	r2, fp
 800ad74:	9209      	str	r2, [sp, #36]	; 0x24
 800ad76:	f89a 3000 	ldrb.w	r3, [sl]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	f000 80a2 	beq.w	800aec4 <_svfiprintf_r+0x1c8>
 800ad80:	2300      	movs	r3, #0
 800ad82:	f04f 32ff 	mov.w	r2, #4294967295
 800ad86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad8a:	f10a 0a01 	add.w	sl, sl, #1
 800ad8e:	9304      	str	r3, [sp, #16]
 800ad90:	9307      	str	r3, [sp, #28]
 800ad92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad96:	931a      	str	r3, [sp, #104]	; 0x68
 800ad98:	4654      	mov	r4, sl
 800ad9a:	2205      	movs	r2, #5
 800ad9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ada0:	4851      	ldr	r0, [pc, #324]	; (800aee8 <_svfiprintf_r+0x1ec>)
 800ada2:	f7fd ff3f 	bl	8008c24 <memchr>
 800ada6:	9a04      	ldr	r2, [sp, #16]
 800ada8:	b9d8      	cbnz	r0, 800ade2 <_svfiprintf_r+0xe6>
 800adaa:	06d0      	lsls	r0, r2, #27
 800adac:	bf44      	itt	mi
 800adae:	2320      	movmi	r3, #32
 800adb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adb4:	0711      	lsls	r1, r2, #28
 800adb6:	bf44      	itt	mi
 800adb8:	232b      	movmi	r3, #43	; 0x2b
 800adba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adbe:	f89a 3000 	ldrb.w	r3, [sl]
 800adc2:	2b2a      	cmp	r3, #42	; 0x2a
 800adc4:	d015      	beq.n	800adf2 <_svfiprintf_r+0xf6>
 800adc6:	4654      	mov	r4, sl
 800adc8:	2000      	movs	r0, #0
 800adca:	f04f 0c0a 	mov.w	ip, #10
 800adce:	9a07      	ldr	r2, [sp, #28]
 800add0:	4621      	mov	r1, r4
 800add2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800add6:	3b30      	subs	r3, #48	; 0x30
 800add8:	2b09      	cmp	r3, #9
 800adda:	d94e      	bls.n	800ae7a <_svfiprintf_r+0x17e>
 800addc:	b1b0      	cbz	r0, 800ae0c <_svfiprintf_r+0x110>
 800adde:	9207      	str	r2, [sp, #28]
 800ade0:	e014      	b.n	800ae0c <_svfiprintf_r+0x110>
 800ade2:	eba0 0308 	sub.w	r3, r0, r8
 800ade6:	fa09 f303 	lsl.w	r3, r9, r3
 800adea:	4313      	orrs	r3, r2
 800adec:	46a2      	mov	sl, r4
 800adee:	9304      	str	r3, [sp, #16]
 800adf0:	e7d2      	b.n	800ad98 <_svfiprintf_r+0x9c>
 800adf2:	9b03      	ldr	r3, [sp, #12]
 800adf4:	1d19      	adds	r1, r3, #4
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	9103      	str	r1, [sp, #12]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	bfbb      	ittet	lt
 800adfe:	425b      	neglt	r3, r3
 800ae00:	f042 0202 	orrlt.w	r2, r2, #2
 800ae04:	9307      	strge	r3, [sp, #28]
 800ae06:	9307      	strlt	r3, [sp, #28]
 800ae08:	bfb8      	it	lt
 800ae0a:	9204      	strlt	r2, [sp, #16]
 800ae0c:	7823      	ldrb	r3, [r4, #0]
 800ae0e:	2b2e      	cmp	r3, #46	; 0x2e
 800ae10:	d10c      	bne.n	800ae2c <_svfiprintf_r+0x130>
 800ae12:	7863      	ldrb	r3, [r4, #1]
 800ae14:	2b2a      	cmp	r3, #42	; 0x2a
 800ae16:	d135      	bne.n	800ae84 <_svfiprintf_r+0x188>
 800ae18:	9b03      	ldr	r3, [sp, #12]
 800ae1a:	3402      	adds	r4, #2
 800ae1c:	1d1a      	adds	r2, r3, #4
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	9203      	str	r2, [sp, #12]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	bfb8      	it	lt
 800ae26:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae2a:	9305      	str	r3, [sp, #20]
 800ae2c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800aeec <_svfiprintf_r+0x1f0>
 800ae30:	2203      	movs	r2, #3
 800ae32:	4650      	mov	r0, sl
 800ae34:	7821      	ldrb	r1, [r4, #0]
 800ae36:	f7fd fef5 	bl	8008c24 <memchr>
 800ae3a:	b140      	cbz	r0, 800ae4e <_svfiprintf_r+0x152>
 800ae3c:	2340      	movs	r3, #64	; 0x40
 800ae3e:	eba0 000a 	sub.w	r0, r0, sl
 800ae42:	fa03 f000 	lsl.w	r0, r3, r0
 800ae46:	9b04      	ldr	r3, [sp, #16]
 800ae48:	3401      	adds	r4, #1
 800ae4a:	4303      	orrs	r3, r0
 800ae4c:	9304      	str	r3, [sp, #16]
 800ae4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae52:	2206      	movs	r2, #6
 800ae54:	4826      	ldr	r0, [pc, #152]	; (800aef0 <_svfiprintf_r+0x1f4>)
 800ae56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae5a:	f7fd fee3 	bl	8008c24 <memchr>
 800ae5e:	2800      	cmp	r0, #0
 800ae60:	d038      	beq.n	800aed4 <_svfiprintf_r+0x1d8>
 800ae62:	4b24      	ldr	r3, [pc, #144]	; (800aef4 <_svfiprintf_r+0x1f8>)
 800ae64:	bb1b      	cbnz	r3, 800aeae <_svfiprintf_r+0x1b2>
 800ae66:	9b03      	ldr	r3, [sp, #12]
 800ae68:	3307      	adds	r3, #7
 800ae6a:	f023 0307 	bic.w	r3, r3, #7
 800ae6e:	3308      	adds	r3, #8
 800ae70:	9303      	str	r3, [sp, #12]
 800ae72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae74:	4433      	add	r3, r6
 800ae76:	9309      	str	r3, [sp, #36]	; 0x24
 800ae78:	e767      	b.n	800ad4a <_svfiprintf_r+0x4e>
 800ae7a:	460c      	mov	r4, r1
 800ae7c:	2001      	movs	r0, #1
 800ae7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae82:	e7a5      	b.n	800add0 <_svfiprintf_r+0xd4>
 800ae84:	2300      	movs	r3, #0
 800ae86:	f04f 0c0a 	mov.w	ip, #10
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	3401      	adds	r4, #1
 800ae8e:	9305      	str	r3, [sp, #20]
 800ae90:	4620      	mov	r0, r4
 800ae92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae96:	3a30      	subs	r2, #48	; 0x30
 800ae98:	2a09      	cmp	r2, #9
 800ae9a:	d903      	bls.n	800aea4 <_svfiprintf_r+0x1a8>
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d0c5      	beq.n	800ae2c <_svfiprintf_r+0x130>
 800aea0:	9105      	str	r1, [sp, #20]
 800aea2:	e7c3      	b.n	800ae2c <_svfiprintf_r+0x130>
 800aea4:	4604      	mov	r4, r0
 800aea6:	2301      	movs	r3, #1
 800aea8:	fb0c 2101 	mla	r1, ip, r1, r2
 800aeac:	e7f0      	b.n	800ae90 <_svfiprintf_r+0x194>
 800aeae:	ab03      	add	r3, sp, #12
 800aeb0:	9300      	str	r3, [sp, #0]
 800aeb2:	462a      	mov	r2, r5
 800aeb4:	4638      	mov	r0, r7
 800aeb6:	4b10      	ldr	r3, [pc, #64]	; (800aef8 <_svfiprintf_r+0x1fc>)
 800aeb8:	a904      	add	r1, sp, #16
 800aeba:	f3af 8000 	nop.w
 800aebe:	1c42      	adds	r2, r0, #1
 800aec0:	4606      	mov	r6, r0
 800aec2:	d1d6      	bne.n	800ae72 <_svfiprintf_r+0x176>
 800aec4:	89ab      	ldrh	r3, [r5, #12]
 800aec6:	065b      	lsls	r3, r3, #25
 800aec8:	f53f af2c 	bmi.w	800ad24 <_svfiprintf_r+0x28>
 800aecc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aece:	b01d      	add	sp, #116	; 0x74
 800aed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed4:	ab03      	add	r3, sp, #12
 800aed6:	9300      	str	r3, [sp, #0]
 800aed8:	462a      	mov	r2, r5
 800aeda:	4638      	mov	r0, r7
 800aedc:	4b06      	ldr	r3, [pc, #24]	; (800aef8 <_svfiprintf_r+0x1fc>)
 800aede:	a904      	add	r1, sp, #16
 800aee0:	f000 f87c 	bl	800afdc <_printf_i>
 800aee4:	e7eb      	b.n	800aebe <_svfiprintf_r+0x1c2>
 800aee6:	bf00      	nop
 800aee8:	0800c18c 	.word	0x0800c18c
 800aeec:	0800c192 	.word	0x0800c192
 800aef0:	0800c196 	.word	0x0800c196
 800aef4:	00000000 	.word	0x00000000
 800aef8:	0800ac45 	.word	0x0800ac45

0800aefc <_printf_common>:
 800aefc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af00:	4616      	mov	r6, r2
 800af02:	4699      	mov	r9, r3
 800af04:	688a      	ldr	r2, [r1, #8]
 800af06:	690b      	ldr	r3, [r1, #16]
 800af08:	4607      	mov	r7, r0
 800af0a:	4293      	cmp	r3, r2
 800af0c:	bfb8      	it	lt
 800af0e:	4613      	movlt	r3, r2
 800af10:	6033      	str	r3, [r6, #0]
 800af12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af16:	460c      	mov	r4, r1
 800af18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af1c:	b10a      	cbz	r2, 800af22 <_printf_common+0x26>
 800af1e:	3301      	adds	r3, #1
 800af20:	6033      	str	r3, [r6, #0]
 800af22:	6823      	ldr	r3, [r4, #0]
 800af24:	0699      	lsls	r1, r3, #26
 800af26:	bf42      	ittt	mi
 800af28:	6833      	ldrmi	r3, [r6, #0]
 800af2a:	3302      	addmi	r3, #2
 800af2c:	6033      	strmi	r3, [r6, #0]
 800af2e:	6825      	ldr	r5, [r4, #0]
 800af30:	f015 0506 	ands.w	r5, r5, #6
 800af34:	d106      	bne.n	800af44 <_printf_common+0x48>
 800af36:	f104 0a19 	add.w	sl, r4, #25
 800af3a:	68e3      	ldr	r3, [r4, #12]
 800af3c:	6832      	ldr	r2, [r6, #0]
 800af3e:	1a9b      	subs	r3, r3, r2
 800af40:	42ab      	cmp	r3, r5
 800af42:	dc28      	bgt.n	800af96 <_printf_common+0x9a>
 800af44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af48:	1e13      	subs	r3, r2, #0
 800af4a:	6822      	ldr	r2, [r4, #0]
 800af4c:	bf18      	it	ne
 800af4e:	2301      	movne	r3, #1
 800af50:	0692      	lsls	r2, r2, #26
 800af52:	d42d      	bmi.n	800afb0 <_printf_common+0xb4>
 800af54:	4649      	mov	r1, r9
 800af56:	4638      	mov	r0, r7
 800af58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af5c:	47c0      	blx	r8
 800af5e:	3001      	adds	r0, #1
 800af60:	d020      	beq.n	800afa4 <_printf_common+0xa8>
 800af62:	6823      	ldr	r3, [r4, #0]
 800af64:	68e5      	ldr	r5, [r4, #12]
 800af66:	f003 0306 	and.w	r3, r3, #6
 800af6a:	2b04      	cmp	r3, #4
 800af6c:	bf18      	it	ne
 800af6e:	2500      	movne	r5, #0
 800af70:	6832      	ldr	r2, [r6, #0]
 800af72:	f04f 0600 	mov.w	r6, #0
 800af76:	68a3      	ldr	r3, [r4, #8]
 800af78:	bf08      	it	eq
 800af7a:	1aad      	subeq	r5, r5, r2
 800af7c:	6922      	ldr	r2, [r4, #16]
 800af7e:	bf08      	it	eq
 800af80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af84:	4293      	cmp	r3, r2
 800af86:	bfc4      	itt	gt
 800af88:	1a9b      	subgt	r3, r3, r2
 800af8a:	18ed      	addgt	r5, r5, r3
 800af8c:	341a      	adds	r4, #26
 800af8e:	42b5      	cmp	r5, r6
 800af90:	d11a      	bne.n	800afc8 <_printf_common+0xcc>
 800af92:	2000      	movs	r0, #0
 800af94:	e008      	b.n	800afa8 <_printf_common+0xac>
 800af96:	2301      	movs	r3, #1
 800af98:	4652      	mov	r2, sl
 800af9a:	4649      	mov	r1, r9
 800af9c:	4638      	mov	r0, r7
 800af9e:	47c0      	blx	r8
 800afa0:	3001      	adds	r0, #1
 800afa2:	d103      	bne.n	800afac <_printf_common+0xb0>
 800afa4:	f04f 30ff 	mov.w	r0, #4294967295
 800afa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afac:	3501      	adds	r5, #1
 800afae:	e7c4      	b.n	800af3a <_printf_common+0x3e>
 800afb0:	2030      	movs	r0, #48	; 0x30
 800afb2:	18e1      	adds	r1, r4, r3
 800afb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800afb8:	1c5a      	adds	r2, r3, #1
 800afba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800afbe:	4422      	add	r2, r4
 800afc0:	3302      	adds	r3, #2
 800afc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800afc6:	e7c5      	b.n	800af54 <_printf_common+0x58>
 800afc8:	2301      	movs	r3, #1
 800afca:	4622      	mov	r2, r4
 800afcc:	4649      	mov	r1, r9
 800afce:	4638      	mov	r0, r7
 800afd0:	47c0      	blx	r8
 800afd2:	3001      	adds	r0, #1
 800afd4:	d0e6      	beq.n	800afa4 <_printf_common+0xa8>
 800afd6:	3601      	adds	r6, #1
 800afd8:	e7d9      	b.n	800af8e <_printf_common+0x92>
	...

0800afdc <_printf_i>:
 800afdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afe0:	7e0f      	ldrb	r7, [r1, #24]
 800afe2:	4691      	mov	r9, r2
 800afe4:	2f78      	cmp	r7, #120	; 0x78
 800afe6:	4680      	mov	r8, r0
 800afe8:	460c      	mov	r4, r1
 800afea:	469a      	mov	sl, r3
 800afec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800afee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aff2:	d807      	bhi.n	800b004 <_printf_i+0x28>
 800aff4:	2f62      	cmp	r7, #98	; 0x62
 800aff6:	d80a      	bhi.n	800b00e <_printf_i+0x32>
 800aff8:	2f00      	cmp	r7, #0
 800affa:	f000 80d9 	beq.w	800b1b0 <_printf_i+0x1d4>
 800affe:	2f58      	cmp	r7, #88	; 0x58
 800b000:	f000 80a4 	beq.w	800b14c <_printf_i+0x170>
 800b004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b008:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b00c:	e03a      	b.n	800b084 <_printf_i+0xa8>
 800b00e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b012:	2b15      	cmp	r3, #21
 800b014:	d8f6      	bhi.n	800b004 <_printf_i+0x28>
 800b016:	a101      	add	r1, pc, #4	; (adr r1, 800b01c <_printf_i+0x40>)
 800b018:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b01c:	0800b075 	.word	0x0800b075
 800b020:	0800b089 	.word	0x0800b089
 800b024:	0800b005 	.word	0x0800b005
 800b028:	0800b005 	.word	0x0800b005
 800b02c:	0800b005 	.word	0x0800b005
 800b030:	0800b005 	.word	0x0800b005
 800b034:	0800b089 	.word	0x0800b089
 800b038:	0800b005 	.word	0x0800b005
 800b03c:	0800b005 	.word	0x0800b005
 800b040:	0800b005 	.word	0x0800b005
 800b044:	0800b005 	.word	0x0800b005
 800b048:	0800b197 	.word	0x0800b197
 800b04c:	0800b0b9 	.word	0x0800b0b9
 800b050:	0800b179 	.word	0x0800b179
 800b054:	0800b005 	.word	0x0800b005
 800b058:	0800b005 	.word	0x0800b005
 800b05c:	0800b1b9 	.word	0x0800b1b9
 800b060:	0800b005 	.word	0x0800b005
 800b064:	0800b0b9 	.word	0x0800b0b9
 800b068:	0800b005 	.word	0x0800b005
 800b06c:	0800b005 	.word	0x0800b005
 800b070:	0800b181 	.word	0x0800b181
 800b074:	682b      	ldr	r3, [r5, #0]
 800b076:	1d1a      	adds	r2, r3, #4
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	602a      	str	r2, [r5, #0]
 800b07c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b084:	2301      	movs	r3, #1
 800b086:	e0a4      	b.n	800b1d2 <_printf_i+0x1f6>
 800b088:	6820      	ldr	r0, [r4, #0]
 800b08a:	6829      	ldr	r1, [r5, #0]
 800b08c:	0606      	lsls	r6, r0, #24
 800b08e:	f101 0304 	add.w	r3, r1, #4
 800b092:	d50a      	bpl.n	800b0aa <_printf_i+0xce>
 800b094:	680e      	ldr	r6, [r1, #0]
 800b096:	602b      	str	r3, [r5, #0]
 800b098:	2e00      	cmp	r6, #0
 800b09a:	da03      	bge.n	800b0a4 <_printf_i+0xc8>
 800b09c:	232d      	movs	r3, #45	; 0x2d
 800b09e:	4276      	negs	r6, r6
 800b0a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0a4:	230a      	movs	r3, #10
 800b0a6:	485e      	ldr	r0, [pc, #376]	; (800b220 <_printf_i+0x244>)
 800b0a8:	e019      	b.n	800b0de <_printf_i+0x102>
 800b0aa:	680e      	ldr	r6, [r1, #0]
 800b0ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b0b0:	602b      	str	r3, [r5, #0]
 800b0b2:	bf18      	it	ne
 800b0b4:	b236      	sxthne	r6, r6
 800b0b6:	e7ef      	b.n	800b098 <_printf_i+0xbc>
 800b0b8:	682b      	ldr	r3, [r5, #0]
 800b0ba:	6820      	ldr	r0, [r4, #0]
 800b0bc:	1d19      	adds	r1, r3, #4
 800b0be:	6029      	str	r1, [r5, #0]
 800b0c0:	0601      	lsls	r1, r0, #24
 800b0c2:	d501      	bpl.n	800b0c8 <_printf_i+0xec>
 800b0c4:	681e      	ldr	r6, [r3, #0]
 800b0c6:	e002      	b.n	800b0ce <_printf_i+0xf2>
 800b0c8:	0646      	lsls	r6, r0, #25
 800b0ca:	d5fb      	bpl.n	800b0c4 <_printf_i+0xe8>
 800b0cc:	881e      	ldrh	r6, [r3, #0]
 800b0ce:	2f6f      	cmp	r7, #111	; 0x6f
 800b0d0:	bf0c      	ite	eq
 800b0d2:	2308      	moveq	r3, #8
 800b0d4:	230a      	movne	r3, #10
 800b0d6:	4852      	ldr	r0, [pc, #328]	; (800b220 <_printf_i+0x244>)
 800b0d8:	2100      	movs	r1, #0
 800b0da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0de:	6865      	ldr	r5, [r4, #4]
 800b0e0:	2d00      	cmp	r5, #0
 800b0e2:	bfa8      	it	ge
 800b0e4:	6821      	ldrge	r1, [r4, #0]
 800b0e6:	60a5      	str	r5, [r4, #8]
 800b0e8:	bfa4      	itt	ge
 800b0ea:	f021 0104 	bicge.w	r1, r1, #4
 800b0ee:	6021      	strge	r1, [r4, #0]
 800b0f0:	b90e      	cbnz	r6, 800b0f6 <_printf_i+0x11a>
 800b0f2:	2d00      	cmp	r5, #0
 800b0f4:	d04d      	beq.n	800b192 <_printf_i+0x1b6>
 800b0f6:	4615      	mov	r5, r2
 800b0f8:	fbb6 f1f3 	udiv	r1, r6, r3
 800b0fc:	fb03 6711 	mls	r7, r3, r1, r6
 800b100:	5dc7      	ldrb	r7, [r0, r7]
 800b102:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b106:	4637      	mov	r7, r6
 800b108:	42bb      	cmp	r3, r7
 800b10a:	460e      	mov	r6, r1
 800b10c:	d9f4      	bls.n	800b0f8 <_printf_i+0x11c>
 800b10e:	2b08      	cmp	r3, #8
 800b110:	d10b      	bne.n	800b12a <_printf_i+0x14e>
 800b112:	6823      	ldr	r3, [r4, #0]
 800b114:	07de      	lsls	r6, r3, #31
 800b116:	d508      	bpl.n	800b12a <_printf_i+0x14e>
 800b118:	6923      	ldr	r3, [r4, #16]
 800b11a:	6861      	ldr	r1, [r4, #4]
 800b11c:	4299      	cmp	r1, r3
 800b11e:	bfde      	ittt	le
 800b120:	2330      	movle	r3, #48	; 0x30
 800b122:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b126:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b12a:	1b52      	subs	r2, r2, r5
 800b12c:	6122      	str	r2, [r4, #16]
 800b12e:	464b      	mov	r3, r9
 800b130:	4621      	mov	r1, r4
 800b132:	4640      	mov	r0, r8
 800b134:	f8cd a000 	str.w	sl, [sp]
 800b138:	aa03      	add	r2, sp, #12
 800b13a:	f7ff fedf 	bl	800aefc <_printf_common>
 800b13e:	3001      	adds	r0, #1
 800b140:	d14c      	bne.n	800b1dc <_printf_i+0x200>
 800b142:	f04f 30ff 	mov.w	r0, #4294967295
 800b146:	b004      	add	sp, #16
 800b148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b14c:	4834      	ldr	r0, [pc, #208]	; (800b220 <_printf_i+0x244>)
 800b14e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b152:	6829      	ldr	r1, [r5, #0]
 800b154:	6823      	ldr	r3, [r4, #0]
 800b156:	f851 6b04 	ldr.w	r6, [r1], #4
 800b15a:	6029      	str	r1, [r5, #0]
 800b15c:	061d      	lsls	r5, r3, #24
 800b15e:	d514      	bpl.n	800b18a <_printf_i+0x1ae>
 800b160:	07df      	lsls	r7, r3, #31
 800b162:	bf44      	itt	mi
 800b164:	f043 0320 	orrmi.w	r3, r3, #32
 800b168:	6023      	strmi	r3, [r4, #0]
 800b16a:	b91e      	cbnz	r6, 800b174 <_printf_i+0x198>
 800b16c:	6823      	ldr	r3, [r4, #0]
 800b16e:	f023 0320 	bic.w	r3, r3, #32
 800b172:	6023      	str	r3, [r4, #0]
 800b174:	2310      	movs	r3, #16
 800b176:	e7af      	b.n	800b0d8 <_printf_i+0xfc>
 800b178:	6823      	ldr	r3, [r4, #0]
 800b17a:	f043 0320 	orr.w	r3, r3, #32
 800b17e:	6023      	str	r3, [r4, #0]
 800b180:	2378      	movs	r3, #120	; 0x78
 800b182:	4828      	ldr	r0, [pc, #160]	; (800b224 <_printf_i+0x248>)
 800b184:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b188:	e7e3      	b.n	800b152 <_printf_i+0x176>
 800b18a:	0659      	lsls	r1, r3, #25
 800b18c:	bf48      	it	mi
 800b18e:	b2b6      	uxthmi	r6, r6
 800b190:	e7e6      	b.n	800b160 <_printf_i+0x184>
 800b192:	4615      	mov	r5, r2
 800b194:	e7bb      	b.n	800b10e <_printf_i+0x132>
 800b196:	682b      	ldr	r3, [r5, #0]
 800b198:	6826      	ldr	r6, [r4, #0]
 800b19a:	1d18      	adds	r0, r3, #4
 800b19c:	6961      	ldr	r1, [r4, #20]
 800b19e:	6028      	str	r0, [r5, #0]
 800b1a0:	0635      	lsls	r5, r6, #24
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	d501      	bpl.n	800b1aa <_printf_i+0x1ce>
 800b1a6:	6019      	str	r1, [r3, #0]
 800b1a8:	e002      	b.n	800b1b0 <_printf_i+0x1d4>
 800b1aa:	0670      	lsls	r0, r6, #25
 800b1ac:	d5fb      	bpl.n	800b1a6 <_printf_i+0x1ca>
 800b1ae:	8019      	strh	r1, [r3, #0]
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	4615      	mov	r5, r2
 800b1b4:	6123      	str	r3, [r4, #16]
 800b1b6:	e7ba      	b.n	800b12e <_printf_i+0x152>
 800b1b8:	682b      	ldr	r3, [r5, #0]
 800b1ba:	2100      	movs	r1, #0
 800b1bc:	1d1a      	adds	r2, r3, #4
 800b1be:	602a      	str	r2, [r5, #0]
 800b1c0:	681d      	ldr	r5, [r3, #0]
 800b1c2:	6862      	ldr	r2, [r4, #4]
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	f7fd fd2d 	bl	8008c24 <memchr>
 800b1ca:	b108      	cbz	r0, 800b1d0 <_printf_i+0x1f4>
 800b1cc:	1b40      	subs	r0, r0, r5
 800b1ce:	6060      	str	r0, [r4, #4]
 800b1d0:	6863      	ldr	r3, [r4, #4]
 800b1d2:	6123      	str	r3, [r4, #16]
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1da:	e7a8      	b.n	800b12e <_printf_i+0x152>
 800b1dc:	462a      	mov	r2, r5
 800b1de:	4649      	mov	r1, r9
 800b1e0:	4640      	mov	r0, r8
 800b1e2:	6923      	ldr	r3, [r4, #16]
 800b1e4:	47d0      	blx	sl
 800b1e6:	3001      	adds	r0, #1
 800b1e8:	d0ab      	beq.n	800b142 <_printf_i+0x166>
 800b1ea:	6823      	ldr	r3, [r4, #0]
 800b1ec:	079b      	lsls	r3, r3, #30
 800b1ee:	d413      	bmi.n	800b218 <_printf_i+0x23c>
 800b1f0:	68e0      	ldr	r0, [r4, #12]
 800b1f2:	9b03      	ldr	r3, [sp, #12]
 800b1f4:	4298      	cmp	r0, r3
 800b1f6:	bfb8      	it	lt
 800b1f8:	4618      	movlt	r0, r3
 800b1fa:	e7a4      	b.n	800b146 <_printf_i+0x16a>
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	4632      	mov	r2, r6
 800b200:	4649      	mov	r1, r9
 800b202:	4640      	mov	r0, r8
 800b204:	47d0      	blx	sl
 800b206:	3001      	adds	r0, #1
 800b208:	d09b      	beq.n	800b142 <_printf_i+0x166>
 800b20a:	3501      	adds	r5, #1
 800b20c:	68e3      	ldr	r3, [r4, #12]
 800b20e:	9903      	ldr	r1, [sp, #12]
 800b210:	1a5b      	subs	r3, r3, r1
 800b212:	42ab      	cmp	r3, r5
 800b214:	dcf2      	bgt.n	800b1fc <_printf_i+0x220>
 800b216:	e7eb      	b.n	800b1f0 <_printf_i+0x214>
 800b218:	2500      	movs	r5, #0
 800b21a:	f104 0619 	add.w	r6, r4, #25
 800b21e:	e7f5      	b.n	800b20c <_printf_i+0x230>
 800b220:	0800c19d 	.word	0x0800c19d
 800b224:	0800c1ae 	.word	0x0800c1ae

0800b228 <nan>:
 800b228:	2000      	movs	r0, #0
 800b22a:	4901      	ldr	r1, [pc, #4]	; (800b230 <nan+0x8>)
 800b22c:	4770      	bx	lr
 800b22e:	bf00      	nop
 800b230:	7ff80000 	.word	0x7ff80000

0800b234 <strncmp>:
 800b234:	4603      	mov	r3, r0
 800b236:	b510      	push	{r4, lr}
 800b238:	b172      	cbz	r2, 800b258 <strncmp+0x24>
 800b23a:	3901      	subs	r1, #1
 800b23c:	1884      	adds	r4, r0, r2
 800b23e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b242:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b246:	4290      	cmp	r0, r2
 800b248:	d101      	bne.n	800b24e <strncmp+0x1a>
 800b24a:	42a3      	cmp	r3, r4
 800b24c:	d101      	bne.n	800b252 <strncmp+0x1e>
 800b24e:	1a80      	subs	r0, r0, r2
 800b250:	bd10      	pop	{r4, pc}
 800b252:	2800      	cmp	r0, #0
 800b254:	d1f3      	bne.n	800b23e <strncmp+0xa>
 800b256:	e7fa      	b.n	800b24e <strncmp+0x1a>
 800b258:	4610      	mov	r0, r2
 800b25a:	e7f9      	b.n	800b250 <strncmp+0x1c>

0800b25c <__ascii_wctomb>:
 800b25c:	4603      	mov	r3, r0
 800b25e:	4608      	mov	r0, r1
 800b260:	b141      	cbz	r1, 800b274 <__ascii_wctomb+0x18>
 800b262:	2aff      	cmp	r2, #255	; 0xff
 800b264:	d904      	bls.n	800b270 <__ascii_wctomb+0x14>
 800b266:	228a      	movs	r2, #138	; 0x8a
 800b268:	f04f 30ff 	mov.w	r0, #4294967295
 800b26c:	601a      	str	r2, [r3, #0]
 800b26e:	4770      	bx	lr
 800b270:	2001      	movs	r0, #1
 800b272:	700a      	strb	r2, [r1, #0]
 800b274:	4770      	bx	lr
	...

0800b278 <__assert_func>:
 800b278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b27a:	4614      	mov	r4, r2
 800b27c:	461a      	mov	r2, r3
 800b27e:	4b09      	ldr	r3, [pc, #36]	; (800b2a4 <__assert_func+0x2c>)
 800b280:	4605      	mov	r5, r0
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	68d8      	ldr	r0, [r3, #12]
 800b286:	b14c      	cbz	r4, 800b29c <__assert_func+0x24>
 800b288:	4b07      	ldr	r3, [pc, #28]	; (800b2a8 <__assert_func+0x30>)
 800b28a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b28e:	9100      	str	r1, [sp, #0]
 800b290:	462b      	mov	r3, r5
 800b292:	4906      	ldr	r1, [pc, #24]	; (800b2ac <__assert_func+0x34>)
 800b294:	f000 f80e 	bl	800b2b4 <fiprintf>
 800b298:	f7fd fc82 	bl	8008ba0 <abort>
 800b29c:	4b04      	ldr	r3, [pc, #16]	; (800b2b0 <__assert_func+0x38>)
 800b29e:	461c      	mov	r4, r3
 800b2a0:	e7f3      	b.n	800b28a <__assert_func+0x12>
 800b2a2:	bf00      	nop
 800b2a4:	2000017c 	.word	0x2000017c
 800b2a8:	0800c1bf 	.word	0x0800c1bf
 800b2ac:	0800c1cc 	.word	0x0800c1cc
 800b2b0:	0800c1fa 	.word	0x0800c1fa

0800b2b4 <fiprintf>:
 800b2b4:	b40e      	push	{r1, r2, r3}
 800b2b6:	b503      	push	{r0, r1, lr}
 800b2b8:	4601      	mov	r1, r0
 800b2ba:	ab03      	add	r3, sp, #12
 800b2bc:	4805      	ldr	r0, [pc, #20]	; (800b2d4 <fiprintf+0x20>)
 800b2be:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2c2:	6800      	ldr	r0, [r0, #0]
 800b2c4:	9301      	str	r3, [sp, #4]
 800b2c6:	f000 f861 	bl	800b38c <_vfiprintf_r>
 800b2ca:	b002      	add	sp, #8
 800b2cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2d0:	b003      	add	sp, #12
 800b2d2:	4770      	bx	lr
 800b2d4:	2000017c 	.word	0x2000017c

0800b2d8 <__retarget_lock_init_recursive>:
 800b2d8:	4770      	bx	lr

0800b2da <__retarget_lock_acquire_recursive>:
 800b2da:	4770      	bx	lr

0800b2dc <__retarget_lock_release_recursive>:
 800b2dc:	4770      	bx	lr

0800b2de <_realloc_r>:
 800b2de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e2:	4680      	mov	r8, r0
 800b2e4:	4614      	mov	r4, r2
 800b2e6:	460e      	mov	r6, r1
 800b2e8:	b921      	cbnz	r1, 800b2f4 <_realloc_r+0x16>
 800b2ea:	4611      	mov	r1, r2
 800b2ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f0:	f7fd bd3e 	b.w	8008d70 <_malloc_r>
 800b2f4:	b92a      	cbnz	r2, 800b302 <_realloc_r+0x24>
 800b2f6:	f7fd fcd3 	bl	8008ca0 <_free_r>
 800b2fa:	4625      	mov	r5, r4
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b302:	f000 fc4b 	bl	800bb9c <_malloc_usable_size_r>
 800b306:	4284      	cmp	r4, r0
 800b308:	4607      	mov	r7, r0
 800b30a:	d802      	bhi.n	800b312 <_realloc_r+0x34>
 800b30c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b310:	d812      	bhi.n	800b338 <_realloc_r+0x5a>
 800b312:	4621      	mov	r1, r4
 800b314:	4640      	mov	r0, r8
 800b316:	f7fd fd2b 	bl	8008d70 <_malloc_r>
 800b31a:	4605      	mov	r5, r0
 800b31c:	2800      	cmp	r0, #0
 800b31e:	d0ed      	beq.n	800b2fc <_realloc_r+0x1e>
 800b320:	42bc      	cmp	r4, r7
 800b322:	4622      	mov	r2, r4
 800b324:	4631      	mov	r1, r6
 800b326:	bf28      	it	cs
 800b328:	463a      	movcs	r2, r7
 800b32a:	f7fd fc89 	bl	8008c40 <memcpy>
 800b32e:	4631      	mov	r1, r6
 800b330:	4640      	mov	r0, r8
 800b332:	f7fd fcb5 	bl	8008ca0 <_free_r>
 800b336:	e7e1      	b.n	800b2fc <_realloc_r+0x1e>
 800b338:	4635      	mov	r5, r6
 800b33a:	e7df      	b.n	800b2fc <_realloc_r+0x1e>

0800b33c <__sfputc_r>:
 800b33c:	6893      	ldr	r3, [r2, #8]
 800b33e:	b410      	push	{r4}
 800b340:	3b01      	subs	r3, #1
 800b342:	2b00      	cmp	r3, #0
 800b344:	6093      	str	r3, [r2, #8]
 800b346:	da07      	bge.n	800b358 <__sfputc_r+0x1c>
 800b348:	6994      	ldr	r4, [r2, #24]
 800b34a:	42a3      	cmp	r3, r4
 800b34c:	db01      	blt.n	800b352 <__sfputc_r+0x16>
 800b34e:	290a      	cmp	r1, #10
 800b350:	d102      	bne.n	800b358 <__sfputc_r+0x1c>
 800b352:	bc10      	pop	{r4}
 800b354:	f000 b94a 	b.w	800b5ec <__swbuf_r>
 800b358:	6813      	ldr	r3, [r2, #0]
 800b35a:	1c58      	adds	r0, r3, #1
 800b35c:	6010      	str	r0, [r2, #0]
 800b35e:	7019      	strb	r1, [r3, #0]
 800b360:	4608      	mov	r0, r1
 800b362:	bc10      	pop	{r4}
 800b364:	4770      	bx	lr

0800b366 <__sfputs_r>:
 800b366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b368:	4606      	mov	r6, r0
 800b36a:	460f      	mov	r7, r1
 800b36c:	4614      	mov	r4, r2
 800b36e:	18d5      	adds	r5, r2, r3
 800b370:	42ac      	cmp	r4, r5
 800b372:	d101      	bne.n	800b378 <__sfputs_r+0x12>
 800b374:	2000      	movs	r0, #0
 800b376:	e007      	b.n	800b388 <__sfputs_r+0x22>
 800b378:	463a      	mov	r2, r7
 800b37a:	4630      	mov	r0, r6
 800b37c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b380:	f7ff ffdc 	bl	800b33c <__sfputc_r>
 800b384:	1c43      	adds	r3, r0, #1
 800b386:	d1f3      	bne.n	800b370 <__sfputs_r+0xa>
 800b388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b38c <_vfiprintf_r>:
 800b38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b390:	460d      	mov	r5, r1
 800b392:	4614      	mov	r4, r2
 800b394:	4698      	mov	r8, r3
 800b396:	4606      	mov	r6, r0
 800b398:	b09d      	sub	sp, #116	; 0x74
 800b39a:	b118      	cbz	r0, 800b3a4 <_vfiprintf_r+0x18>
 800b39c:	6983      	ldr	r3, [r0, #24]
 800b39e:	b90b      	cbnz	r3, 800b3a4 <_vfiprintf_r+0x18>
 800b3a0:	f000 fafa 	bl	800b998 <__sinit>
 800b3a4:	4b89      	ldr	r3, [pc, #548]	; (800b5cc <_vfiprintf_r+0x240>)
 800b3a6:	429d      	cmp	r5, r3
 800b3a8:	d11b      	bne.n	800b3e2 <_vfiprintf_r+0x56>
 800b3aa:	6875      	ldr	r5, [r6, #4]
 800b3ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3ae:	07d9      	lsls	r1, r3, #31
 800b3b0:	d405      	bmi.n	800b3be <_vfiprintf_r+0x32>
 800b3b2:	89ab      	ldrh	r3, [r5, #12]
 800b3b4:	059a      	lsls	r2, r3, #22
 800b3b6:	d402      	bmi.n	800b3be <_vfiprintf_r+0x32>
 800b3b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3ba:	f7ff ff8e 	bl	800b2da <__retarget_lock_acquire_recursive>
 800b3be:	89ab      	ldrh	r3, [r5, #12]
 800b3c0:	071b      	lsls	r3, r3, #28
 800b3c2:	d501      	bpl.n	800b3c8 <_vfiprintf_r+0x3c>
 800b3c4:	692b      	ldr	r3, [r5, #16]
 800b3c6:	b9eb      	cbnz	r3, 800b404 <_vfiprintf_r+0x78>
 800b3c8:	4629      	mov	r1, r5
 800b3ca:	4630      	mov	r0, r6
 800b3cc:	f000 f960 	bl	800b690 <__swsetup_r>
 800b3d0:	b1c0      	cbz	r0, 800b404 <_vfiprintf_r+0x78>
 800b3d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3d4:	07dc      	lsls	r4, r3, #31
 800b3d6:	d50e      	bpl.n	800b3f6 <_vfiprintf_r+0x6a>
 800b3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3dc:	b01d      	add	sp, #116	; 0x74
 800b3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e2:	4b7b      	ldr	r3, [pc, #492]	; (800b5d0 <_vfiprintf_r+0x244>)
 800b3e4:	429d      	cmp	r5, r3
 800b3e6:	d101      	bne.n	800b3ec <_vfiprintf_r+0x60>
 800b3e8:	68b5      	ldr	r5, [r6, #8]
 800b3ea:	e7df      	b.n	800b3ac <_vfiprintf_r+0x20>
 800b3ec:	4b79      	ldr	r3, [pc, #484]	; (800b5d4 <_vfiprintf_r+0x248>)
 800b3ee:	429d      	cmp	r5, r3
 800b3f0:	bf08      	it	eq
 800b3f2:	68f5      	ldreq	r5, [r6, #12]
 800b3f4:	e7da      	b.n	800b3ac <_vfiprintf_r+0x20>
 800b3f6:	89ab      	ldrh	r3, [r5, #12]
 800b3f8:	0598      	lsls	r0, r3, #22
 800b3fa:	d4ed      	bmi.n	800b3d8 <_vfiprintf_r+0x4c>
 800b3fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3fe:	f7ff ff6d 	bl	800b2dc <__retarget_lock_release_recursive>
 800b402:	e7e9      	b.n	800b3d8 <_vfiprintf_r+0x4c>
 800b404:	2300      	movs	r3, #0
 800b406:	9309      	str	r3, [sp, #36]	; 0x24
 800b408:	2320      	movs	r3, #32
 800b40a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b40e:	2330      	movs	r3, #48	; 0x30
 800b410:	f04f 0901 	mov.w	r9, #1
 800b414:	f8cd 800c 	str.w	r8, [sp, #12]
 800b418:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b5d8 <_vfiprintf_r+0x24c>
 800b41c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b420:	4623      	mov	r3, r4
 800b422:	469a      	mov	sl, r3
 800b424:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b428:	b10a      	cbz	r2, 800b42e <_vfiprintf_r+0xa2>
 800b42a:	2a25      	cmp	r2, #37	; 0x25
 800b42c:	d1f9      	bne.n	800b422 <_vfiprintf_r+0x96>
 800b42e:	ebba 0b04 	subs.w	fp, sl, r4
 800b432:	d00b      	beq.n	800b44c <_vfiprintf_r+0xc0>
 800b434:	465b      	mov	r3, fp
 800b436:	4622      	mov	r2, r4
 800b438:	4629      	mov	r1, r5
 800b43a:	4630      	mov	r0, r6
 800b43c:	f7ff ff93 	bl	800b366 <__sfputs_r>
 800b440:	3001      	adds	r0, #1
 800b442:	f000 80aa 	beq.w	800b59a <_vfiprintf_r+0x20e>
 800b446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b448:	445a      	add	r2, fp
 800b44a:	9209      	str	r2, [sp, #36]	; 0x24
 800b44c:	f89a 3000 	ldrb.w	r3, [sl]
 800b450:	2b00      	cmp	r3, #0
 800b452:	f000 80a2 	beq.w	800b59a <_vfiprintf_r+0x20e>
 800b456:	2300      	movs	r3, #0
 800b458:	f04f 32ff 	mov.w	r2, #4294967295
 800b45c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b460:	f10a 0a01 	add.w	sl, sl, #1
 800b464:	9304      	str	r3, [sp, #16]
 800b466:	9307      	str	r3, [sp, #28]
 800b468:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b46c:	931a      	str	r3, [sp, #104]	; 0x68
 800b46e:	4654      	mov	r4, sl
 800b470:	2205      	movs	r2, #5
 800b472:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b476:	4858      	ldr	r0, [pc, #352]	; (800b5d8 <_vfiprintf_r+0x24c>)
 800b478:	f7fd fbd4 	bl	8008c24 <memchr>
 800b47c:	9a04      	ldr	r2, [sp, #16]
 800b47e:	b9d8      	cbnz	r0, 800b4b8 <_vfiprintf_r+0x12c>
 800b480:	06d1      	lsls	r1, r2, #27
 800b482:	bf44      	itt	mi
 800b484:	2320      	movmi	r3, #32
 800b486:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b48a:	0713      	lsls	r3, r2, #28
 800b48c:	bf44      	itt	mi
 800b48e:	232b      	movmi	r3, #43	; 0x2b
 800b490:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b494:	f89a 3000 	ldrb.w	r3, [sl]
 800b498:	2b2a      	cmp	r3, #42	; 0x2a
 800b49a:	d015      	beq.n	800b4c8 <_vfiprintf_r+0x13c>
 800b49c:	4654      	mov	r4, sl
 800b49e:	2000      	movs	r0, #0
 800b4a0:	f04f 0c0a 	mov.w	ip, #10
 800b4a4:	9a07      	ldr	r2, [sp, #28]
 800b4a6:	4621      	mov	r1, r4
 800b4a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4ac:	3b30      	subs	r3, #48	; 0x30
 800b4ae:	2b09      	cmp	r3, #9
 800b4b0:	d94e      	bls.n	800b550 <_vfiprintf_r+0x1c4>
 800b4b2:	b1b0      	cbz	r0, 800b4e2 <_vfiprintf_r+0x156>
 800b4b4:	9207      	str	r2, [sp, #28]
 800b4b6:	e014      	b.n	800b4e2 <_vfiprintf_r+0x156>
 800b4b8:	eba0 0308 	sub.w	r3, r0, r8
 800b4bc:	fa09 f303 	lsl.w	r3, r9, r3
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	46a2      	mov	sl, r4
 800b4c4:	9304      	str	r3, [sp, #16]
 800b4c6:	e7d2      	b.n	800b46e <_vfiprintf_r+0xe2>
 800b4c8:	9b03      	ldr	r3, [sp, #12]
 800b4ca:	1d19      	adds	r1, r3, #4
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	9103      	str	r1, [sp, #12]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	bfbb      	ittet	lt
 800b4d4:	425b      	neglt	r3, r3
 800b4d6:	f042 0202 	orrlt.w	r2, r2, #2
 800b4da:	9307      	strge	r3, [sp, #28]
 800b4dc:	9307      	strlt	r3, [sp, #28]
 800b4de:	bfb8      	it	lt
 800b4e0:	9204      	strlt	r2, [sp, #16]
 800b4e2:	7823      	ldrb	r3, [r4, #0]
 800b4e4:	2b2e      	cmp	r3, #46	; 0x2e
 800b4e6:	d10c      	bne.n	800b502 <_vfiprintf_r+0x176>
 800b4e8:	7863      	ldrb	r3, [r4, #1]
 800b4ea:	2b2a      	cmp	r3, #42	; 0x2a
 800b4ec:	d135      	bne.n	800b55a <_vfiprintf_r+0x1ce>
 800b4ee:	9b03      	ldr	r3, [sp, #12]
 800b4f0:	3402      	adds	r4, #2
 800b4f2:	1d1a      	adds	r2, r3, #4
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	9203      	str	r2, [sp, #12]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	bfb8      	it	lt
 800b4fc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b500:	9305      	str	r3, [sp, #20]
 800b502:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b5dc <_vfiprintf_r+0x250>
 800b506:	2203      	movs	r2, #3
 800b508:	4650      	mov	r0, sl
 800b50a:	7821      	ldrb	r1, [r4, #0]
 800b50c:	f7fd fb8a 	bl	8008c24 <memchr>
 800b510:	b140      	cbz	r0, 800b524 <_vfiprintf_r+0x198>
 800b512:	2340      	movs	r3, #64	; 0x40
 800b514:	eba0 000a 	sub.w	r0, r0, sl
 800b518:	fa03 f000 	lsl.w	r0, r3, r0
 800b51c:	9b04      	ldr	r3, [sp, #16]
 800b51e:	3401      	adds	r4, #1
 800b520:	4303      	orrs	r3, r0
 800b522:	9304      	str	r3, [sp, #16]
 800b524:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b528:	2206      	movs	r2, #6
 800b52a:	482d      	ldr	r0, [pc, #180]	; (800b5e0 <_vfiprintf_r+0x254>)
 800b52c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b530:	f7fd fb78 	bl	8008c24 <memchr>
 800b534:	2800      	cmp	r0, #0
 800b536:	d03f      	beq.n	800b5b8 <_vfiprintf_r+0x22c>
 800b538:	4b2a      	ldr	r3, [pc, #168]	; (800b5e4 <_vfiprintf_r+0x258>)
 800b53a:	bb1b      	cbnz	r3, 800b584 <_vfiprintf_r+0x1f8>
 800b53c:	9b03      	ldr	r3, [sp, #12]
 800b53e:	3307      	adds	r3, #7
 800b540:	f023 0307 	bic.w	r3, r3, #7
 800b544:	3308      	adds	r3, #8
 800b546:	9303      	str	r3, [sp, #12]
 800b548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b54a:	443b      	add	r3, r7
 800b54c:	9309      	str	r3, [sp, #36]	; 0x24
 800b54e:	e767      	b.n	800b420 <_vfiprintf_r+0x94>
 800b550:	460c      	mov	r4, r1
 800b552:	2001      	movs	r0, #1
 800b554:	fb0c 3202 	mla	r2, ip, r2, r3
 800b558:	e7a5      	b.n	800b4a6 <_vfiprintf_r+0x11a>
 800b55a:	2300      	movs	r3, #0
 800b55c:	f04f 0c0a 	mov.w	ip, #10
 800b560:	4619      	mov	r1, r3
 800b562:	3401      	adds	r4, #1
 800b564:	9305      	str	r3, [sp, #20]
 800b566:	4620      	mov	r0, r4
 800b568:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b56c:	3a30      	subs	r2, #48	; 0x30
 800b56e:	2a09      	cmp	r2, #9
 800b570:	d903      	bls.n	800b57a <_vfiprintf_r+0x1ee>
 800b572:	2b00      	cmp	r3, #0
 800b574:	d0c5      	beq.n	800b502 <_vfiprintf_r+0x176>
 800b576:	9105      	str	r1, [sp, #20]
 800b578:	e7c3      	b.n	800b502 <_vfiprintf_r+0x176>
 800b57a:	4604      	mov	r4, r0
 800b57c:	2301      	movs	r3, #1
 800b57e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b582:	e7f0      	b.n	800b566 <_vfiprintf_r+0x1da>
 800b584:	ab03      	add	r3, sp, #12
 800b586:	9300      	str	r3, [sp, #0]
 800b588:	462a      	mov	r2, r5
 800b58a:	4630      	mov	r0, r6
 800b58c:	4b16      	ldr	r3, [pc, #88]	; (800b5e8 <_vfiprintf_r+0x25c>)
 800b58e:	a904      	add	r1, sp, #16
 800b590:	f3af 8000 	nop.w
 800b594:	4607      	mov	r7, r0
 800b596:	1c78      	adds	r0, r7, #1
 800b598:	d1d6      	bne.n	800b548 <_vfiprintf_r+0x1bc>
 800b59a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b59c:	07d9      	lsls	r1, r3, #31
 800b59e:	d405      	bmi.n	800b5ac <_vfiprintf_r+0x220>
 800b5a0:	89ab      	ldrh	r3, [r5, #12]
 800b5a2:	059a      	lsls	r2, r3, #22
 800b5a4:	d402      	bmi.n	800b5ac <_vfiprintf_r+0x220>
 800b5a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5a8:	f7ff fe98 	bl	800b2dc <__retarget_lock_release_recursive>
 800b5ac:	89ab      	ldrh	r3, [r5, #12]
 800b5ae:	065b      	lsls	r3, r3, #25
 800b5b0:	f53f af12 	bmi.w	800b3d8 <_vfiprintf_r+0x4c>
 800b5b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5b6:	e711      	b.n	800b3dc <_vfiprintf_r+0x50>
 800b5b8:	ab03      	add	r3, sp, #12
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	462a      	mov	r2, r5
 800b5be:	4630      	mov	r0, r6
 800b5c0:	4b09      	ldr	r3, [pc, #36]	; (800b5e8 <_vfiprintf_r+0x25c>)
 800b5c2:	a904      	add	r1, sp, #16
 800b5c4:	f7ff fd0a 	bl	800afdc <_printf_i>
 800b5c8:	e7e4      	b.n	800b594 <_vfiprintf_r+0x208>
 800b5ca:	bf00      	nop
 800b5cc:	0800c31c 	.word	0x0800c31c
 800b5d0:	0800c33c 	.word	0x0800c33c
 800b5d4:	0800c2fc 	.word	0x0800c2fc
 800b5d8:	0800c18c 	.word	0x0800c18c
 800b5dc:	0800c192 	.word	0x0800c192
 800b5e0:	0800c196 	.word	0x0800c196
 800b5e4:	00000000 	.word	0x00000000
 800b5e8:	0800b367 	.word	0x0800b367

0800b5ec <__swbuf_r>:
 800b5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ee:	460e      	mov	r6, r1
 800b5f0:	4614      	mov	r4, r2
 800b5f2:	4605      	mov	r5, r0
 800b5f4:	b118      	cbz	r0, 800b5fe <__swbuf_r+0x12>
 800b5f6:	6983      	ldr	r3, [r0, #24]
 800b5f8:	b90b      	cbnz	r3, 800b5fe <__swbuf_r+0x12>
 800b5fa:	f000 f9cd 	bl	800b998 <__sinit>
 800b5fe:	4b21      	ldr	r3, [pc, #132]	; (800b684 <__swbuf_r+0x98>)
 800b600:	429c      	cmp	r4, r3
 800b602:	d12b      	bne.n	800b65c <__swbuf_r+0x70>
 800b604:	686c      	ldr	r4, [r5, #4]
 800b606:	69a3      	ldr	r3, [r4, #24]
 800b608:	60a3      	str	r3, [r4, #8]
 800b60a:	89a3      	ldrh	r3, [r4, #12]
 800b60c:	071a      	lsls	r2, r3, #28
 800b60e:	d52f      	bpl.n	800b670 <__swbuf_r+0x84>
 800b610:	6923      	ldr	r3, [r4, #16]
 800b612:	b36b      	cbz	r3, 800b670 <__swbuf_r+0x84>
 800b614:	6923      	ldr	r3, [r4, #16]
 800b616:	6820      	ldr	r0, [r4, #0]
 800b618:	b2f6      	uxtb	r6, r6
 800b61a:	1ac0      	subs	r0, r0, r3
 800b61c:	6963      	ldr	r3, [r4, #20]
 800b61e:	4637      	mov	r7, r6
 800b620:	4283      	cmp	r3, r0
 800b622:	dc04      	bgt.n	800b62e <__swbuf_r+0x42>
 800b624:	4621      	mov	r1, r4
 800b626:	4628      	mov	r0, r5
 800b628:	f000 f922 	bl	800b870 <_fflush_r>
 800b62c:	bb30      	cbnz	r0, 800b67c <__swbuf_r+0x90>
 800b62e:	68a3      	ldr	r3, [r4, #8]
 800b630:	3001      	adds	r0, #1
 800b632:	3b01      	subs	r3, #1
 800b634:	60a3      	str	r3, [r4, #8]
 800b636:	6823      	ldr	r3, [r4, #0]
 800b638:	1c5a      	adds	r2, r3, #1
 800b63a:	6022      	str	r2, [r4, #0]
 800b63c:	701e      	strb	r6, [r3, #0]
 800b63e:	6963      	ldr	r3, [r4, #20]
 800b640:	4283      	cmp	r3, r0
 800b642:	d004      	beq.n	800b64e <__swbuf_r+0x62>
 800b644:	89a3      	ldrh	r3, [r4, #12]
 800b646:	07db      	lsls	r3, r3, #31
 800b648:	d506      	bpl.n	800b658 <__swbuf_r+0x6c>
 800b64a:	2e0a      	cmp	r6, #10
 800b64c:	d104      	bne.n	800b658 <__swbuf_r+0x6c>
 800b64e:	4621      	mov	r1, r4
 800b650:	4628      	mov	r0, r5
 800b652:	f000 f90d 	bl	800b870 <_fflush_r>
 800b656:	b988      	cbnz	r0, 800b67c <__swbuf_r+0x90>
 800b658:	4638      	mov	r0, r7
 800b65a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b65c:	4b0a      	ldr	r3, [pc, #40]	; (800b688 <__swbuf_r+0x9c>)
 800b65e:	429c      	cmp	r4, r3
 800b660:	d101      	bne.n	800b666 <__swbuf_r+0x7a>
 800b662:	68ac      	ldr	r4, [r5, #8]
 800b664:	e7cf      	b.n	800b606 <__swbuf_r+0x1a>
 800b666:	4b09      	ldr	r3, [pc, #36]	; (800b68c <__swbuf_r+0xa0>)
 800b668:	429c      	cmp	r4, r3
 800b66a:	bf08      	it	eq
 800b66c:	68ec      	ldreq	r4, [r5, #12]
 800b66e:	e7ca      	b.n	800b606 <__swbuf_r+0x1a>
 800b670:	4621      	mov	r1, r4
 800b672:	4628      	mov	r0, r5
 800b674:	f000 f80c 	bl	800b690 <__swsetup_r>
 800b678:	2800      	cmp	r0, #0
 800b67a:	d0cb      	beq.n	800b614 <__swbuf_r+0x28>
 800b67c:	f04f 37ff 	mov.w	r7, #4294967295
 800b680:	e7ea      	b.n	800b658 <__swbuf_r+0x6c>
 800b682:	bf00      	nop
 800b684:	0800c31c 	.word	0x0800c31c
 800b688:	0800c33c 	.word	0x0800c33c
 800b68c:	0800c2fc 	.word	0x0800c2fc

0800b690 <__swsetup_r>:
 800b690:	4b32      	ldr	r3, [pc, #200]	; (800b75c <__swsetup_r+0xcc>)
 800b692:	b570      	push	{r4, r5, r6, lr}
 800b694:	681d      	ldr	r5, [r3, #0]
 800b696:	4606      	mov	r6, r0
 800b698:	460c      	mov	r4, r1
 800b69a:	b125      	cbz	r5, 800b6a6 <__swsetup_r+0x16>
 800b69c:	69ab      	ldr	r3, [r5, #24]
 800b69e:	b913      	cbnz	r3, 800b6a6 <__swsetup_r+0x16>
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	f000 f979 	bl	800b998 <__sinit>
 800b6a6:	4b2e      	ldr	r3, [pc, #184]	; (800b760 <__swsetup_r+0xd0>)
 800b6a8:	429c      	cmp	r4, r3
 800b6aa:	d10f      	bne.n	800b6cc <__swsetup_r+0x3c>
 800b6ac:	686c      	ldr	r4, [r5, #4]
 800b6ae:	89a3      	ldrh	r3, [r4, #12]
 800b6b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6b4:	0719      	lsls	r1, r3, #28
 800b6b6:	d42c      	bmi.n	800b712 <__swsetup_r+0x82>
 800b6b8:	06dd      	lsls	r5, r3, #27
 800b6ba:	d411      	bmi.n	800b6e0 <__swsetup_r+0x50>
 800b6bc:	2309      	movs	r3, #9
 800b6be:	6033      	str	r3, [r6, #0]
 800b6c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c8:	81a3      	strh	r3, [r4, #12]
 800b6ca:	e03e      	b.n	800b74a <__swsetup_r+0xba>
 800b6cc:	4b25      	ldr	r3, [pc, #148]	; (800b764 <__swsetup_r+0xd4>)
 800b6ce:	429c      	cmp	r4, r3
 800b6d0:	d101      	bne.n	800b6d6 <__swsetup_r+0x46>
 800b6d2:	68ac      	ldr	r4, [r5, #8]
 800b6d4:	e7eb      	b.n	800b6ae <__swsetup_r+0x1e>
 800b6d6:	4b24      	ldr	r3, [pc, #144]	; (800b768 <__swsetup_r+0xd8>)
 800b6d8:	429c      	cmp	r4, r3
 800b6da:	bf08      	it	eq
 800b6dc:	68ec      	ldreq	r4, [r5, #12]
 800b6de:	e7e6      	b.n	800b6ae <__swsetup_r+0x1e>
 800b6e0:	0758      	lsls	r0, r3, #29
 800b6e2:	d512      	bpl.n	800b70a <__swsetup_r+0x7a>
 800b6e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6e6:	b141      	cbz	r1, 800b6fa <__swsetup_r+0x6a>
 800b6e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6ec:	4299      	cmp	r1, r3
 800b6ee:	d002      	beq.n	800b6f6 <__swsetup_r+0x66>
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	f7fd fad5 	bl	8008ca0 <_free_r>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	6363      	str	r3, [r4, #52]	; 0x34
 800b6fa:	89a3      	ldrh	r3, [r4, #12]
 800b6fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b700:	81a3      	strh	r3, [r4, #12]
 800b702:	2300      	movs	r3, #0
 800b704:	6063      	str	r3, [r4, #4]
 800b706:	6923      	ldr	r3, [r4, #16]
 800b708:	6023      	str	r3, [r4, #0]
 800b70a:	89a3      	ldrh	r3, [r4, #12]
 800b70c:	f043 0308 	orr.w	r3, r3, #8
 800b710:	81a3      	strh	r3, [r4, #12]
 800b712:	6923      	ldr	r3, [r4, #16]
 800b714:	b94b      	cbnz	r3, 800b72a <__swsetup_r+0x9a>
 800b716:	89a3      	ldrh	r3, [r4, #12]
 800b718:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b71c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b720:	d003      	beq.n	800b72a <__swsetup_r+0x9a>
 800b722:	4621      	mov	r1, r4
 800b724:	4630      	mov	r0, r6
 800b726:	f000 f9f9 	bl	800bb1c <__smakebuf_r>
 800b72a:	89a0      	ldrh	r0, [r4, #12]
 800b72c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b730:	f010 0301 	ands.w	r3, r0, #1
 800b734:	d00a      	beq.n	800b74c <__swsetup_r+0xbc>
 800b736:	2300      	movs	r3, #0
 800b738:	60a3      	str	r3, [r4, #8]
 800b73a:	6963      	ldr	r3, [r4, #20]
 800b73c:	425b      	negs	r3, r3
 800b73e:	61a3      	str	r3, [r4, #24]
 800b740:	6923      	ldr	r3, [r4, #16]
 800b742:	b943      	cbnz	r3, 800b756 <__swsetup_r+0xc6>
 800b744:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b748:	d1ba      	bne.n	800b6c0 <__swsetup_r+0x30>
 800b74a:	bd70      	pop	{r4, r5, r6, pc}
 800b74c:	0781      	lsls	r1, r0, #30
 800b74e:	bf58      	it	pl
 800b750:	6963      	ldrpl	r3, [r4, #20]
 800b752:	60a3      	str	r3, [r4, #8]
 800b754:	e7f4      	b.n	800b740 <__swsetup_r+0xb0>
 800b756:	2000      	movs	r0, #0
 800b758:	e7f7      	b.n	800b74a <__swsetup_r+0xba>
 800b75a:	bf00      	nop
 800b75c:	2000017c 	.word	0x2000017c
 800b760:	0800c31c 	.word	0x0800c31c
 800b764:	0800c33c 	.word	0x0800c33c
 800b768:	0800c2fc 	.word	0x0800c2fc

0800b76c <__sflush_r>:
 800b76c:	898a      	ldrh	r2, [r1, #12]
 800b76e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b770:	4605      	mov	r5, r0
 800b772:	0710      	lsls	r0, r2, #28
 800b774:	460c      	mov	r4, r1
 800b776:	d457      	bmi.n	800b828 <__sflush_r+0xbc>
 800b778:	684b      	ldr	r3, [r1, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	dc04      	bgt.n	800b788 <__sflush_r+0x1c>
 800b77e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b780:	2b00      	cmp	r3, #0
 800b782:	dc01      	bgt.n	800b788 <__sflush_r+0x1c>
 800b784:	2000      	movs	r0, #0
 800b786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b788:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b78a:	2e00      	cmp	r6, #0
 800b78c:	d0fa      	beq.n	800b784 <__sflush_r+0x18>
 800b78e:	2300      	movs	r3, #0
 800b790:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b794:	682f      	ldr	r7, [r5, #0]
 800b796:	602b      	str	r3, [r5, #0]
 800b798:	d032      	beq.n	800b800 <__sflush_r+0x94>
 800b79a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b79c:	89a3      	ldrh	r3, [r4, #12]
 800b79e:	075a      	lsls	r2, r3, #29
 800b7a0:	d505      	bpl.n	800b7ae <__sflush_r+0x42>
 800b7a2:	6863      	ldr	r3, [r4, #4]
 800b7a4:	1ac0      	subs	r0, r0, r3
 800b7a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b7a8:	b10b      	cbz	r3, 800b7ae <__sflush_r+0x42>
 800b7aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b7ac:	1ac0      	subs	r0, r0, r3
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	6a21      	ldr	r1, [r4, #32]
 800b7b8:	47b0      	blx	r6
 800b7ba:	1c43      	adds	r3, r0, #1
 800b7bc:	89a3      	ldrh	r3, [r4, #12]
 800b7be:	d106      	bne.n	800b7ce <__sflush_r+0x62>
 800b7c0:	6829      	ldr	r1, [r5, #0]
 800b7c2:	291d      	cmp	r1, #29
 800b7c4:	d82c      	bhi.n	800b820 <__sflush_r+0xb4>
 800b7c6:	4a29      	ldr	r2, [pc, #164]	; (800b86c <__sflush_r+0x100>)
 800b7c8:	40ca      	lsrs	r2, r1
 800b7ca:	07d6      	lsls	r6, r2, #31
 800b7cc:	d528      	bpl.n	800b820 <__sflush_r+0xb4>
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	6062      	str	r2, [r4, #4]
 800b7d2:	6922      	ldr	r2, [r4, #16]
 800b7d4:	04d9      	lsls	r1, r3, #19
 800b7d6:	6022      	str	r2, [r4, #0]
 800b7d8:	d504      	bpl.n	800b7e4 <__sflush_r+0x78>
 800b7da:	1c42      	adds	r2, r0, #1
 800b7dc:	d101      	bne.n	800b7e2 <__sflush_r+0x76>
 800b7de:	682b      	ldr	r3, [r5, #0]
 800b7e0:	b903      	cbnz	r3, 800b7e4 <__sflush_r+0x78>
 800b7e2:	6560      	str	r0, [r4, #84]	; 0x54
 800b7e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7e6:	602f      	str	r7, [r5, #0]
 800b7e8:	2900      	cmp	r1, #0
 800b7ea:	d0cb      	beq.n	800b784 <__sflush_r+0x18>
 800b7ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7f0:	4299      	cmp	r1, r3
 800b7f2:	d002      	beq.n	800b7fa <__sflush_r+0x8e>
 800b7f4:	4628      	mov	r0, r5
 800b7f6:	f7fd fa53 	bl	8008ca0 <_free_r>
 800b7fa:	2000      	movs	r0, #0
 800b7fc:	6360      	str	r0, [r4, #52]	; 0x34
 800b7fe:	e7c2      	b.n	800b786 <__sflush_r+0x1a>
 800b800:	6a21      	ldr	r1, [r4, #32]
 800b802:	2301      	movs	r3, #1
 800b804:	4628      	mov	r0, r5
 800b806:	47b0      	blx	r6
 800b808:	1c41      	adds	r1, r0, #1
 800b80a:	d1c7      	bne.n	800b79c <__sflush_r+0x30>
 800b80c:	682b      	ldr	r3, [r5, #0]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d0c4      	beq.n	800b79c <__sflush_r+0x30>
 800b812:	2b1d      	cmp	r3, #29
 800b814:	d001      	beq.n	800b81a <__sflush_r+0xae>
 800b816:	2b16      	cmp	r3, #22
 800b818:	d101      	bne.n	800b81e <__sflush_r+0xb2>
 800b81a:	602f      	str	r7, [r5, #0]
 800b81c:	e7b2      	b.n	800b784 <__sflush_r+0x18>
 800b81e:	89a3      	ldrh	r3, [r4, #12]
 800b820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b824:	81a3      	strh	r3, [r4, #12]
 800b826:	e7ae      	b.n	800b786 <__sflush_r+0x1a>
 800b828:	690f      	ldr	r7, [r1, #16]
 800b82a:	2f00      	cmp	r7, #0
 800b82c:	d0aa      	beq.n	800b784 <__sflush_r+0x18>
 800b82e:	0793      	lsls	r3, r2, #30
 800b830:	bf18      	it	ne
 800b832:	2300      	movne	r3, #0
 800b834:	680e      	ldr	r6, [r1, #0]
 800b836:	bf08      	it	eq
 800b838:	694b      	ldreq	r3, [r1, #20]
 800b83a:	1bf6      	subs	r6, r6, r7
 800b83c:	600f      	str	r7, [r1, #0]
 800b83e:	608b      	str	r3, [r1, #8]
 800b840:	2e00      	cmp	r6, #0
 800b842:	dd9f      	ble.n	800b784 <__sflush_r+0x18>
 800b844:	4633      	mov	r3, r6
 800b846:	463a      	mov	r2, r7
 800b848:	4628      	mov	r0, r5
 800b84a:	6a21      	ldr	r1, [r4, #32]
 800b84c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b850:	47e0      	blx	ip
 800b852:	2800      	cmp	r0, #0
 800b854:	dc06      	bgt.n	800b864 <__sflush_r+0xf8>
 800b856:	89a3      	ldrh	r3, [r4, #12]
 800b858:	f04f 30ff 	mov.w	r0, #4294967295
 800b85c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b860:	81a3      	strh	r3, [r4, #12]
 800b862:	e790      	b.n	800b786 <__sflush_r+0x1a>
 800b864:	4407      	add	r7, r0
 800b866:	1a36      	subs	r6, r6, r0
 800b868:	e7ea      	b.n	800b840 <__sflush_r+0xd4>
 800b86a:	bf00      	nop
 800b86c:	20400001 	.word	0x20400001

0800b870 <_fflush_r>:
 800b870:	b538      	push	{r3, r4, r5, lr}
 800b872:	690b      	ldr	r3, [r1, #16]
 800b874:	4605      	mov	r5, r0
 800b876:	460c      	mov	r4, r1
 800b878:	b913      	cbnz	r3, 800b880 <_fflush_r+0x10>
 800b87a:	2500      	movs	r5, #0
 800b87c:	4628      	mov	r0, r5
 800b87e:	bd38      	pop	{r3, r4, r5, pc}
 800b880:	b118      	cbz	r0, 800b88a <_fflush_r+0x1a>
 800b882:	6983      	ldr	r3, [r0, #24]
 800b884:	b90b      	cbnz	r3, 800b88a <_fflush_r+0x1a>
 800b886:	f000 f887 	bl	800b998 <__sinit>
 800b88a:	4b14      	ldr	r3, [pc, #80]	; (800b8dc <_fflush_r+0x6c>)
 800b88c:	429c      	cmp	r4, r3
 800b88e:	d11b      	bne.n	800b8c8 <_fflush_r+0x58>
 800b890:	686c      	ldr	r4, [r5, #4]
 800b892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d0ef      	beq.n	800b87a <_fflush_r+0xa>
 800b89a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b89c:	07d0      	lsls	r0, r2, #31
 800b89e:	d404      	bmi.n	800b8aa <_fflush_r+0x3a>
 800b8a0:	0599      	lsls	r1, r3, #22
 800b8a2:	d402      	bmi.n	800b8aa <_fflush_r+0x3a>
 800b8a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8a6:	f7ff fd18 	bl	800b2da <__retarget_lock_acquire_recursive>
 800b8aa:	4628      	mov	r0, r5
 800b8ac:	4621      	mov	r1, r4
 800b8ae:	f7ff ff5d 	bl	800b76c <__sflush_r>
 800b8b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8b4:	4605      	mov	r5, r0
 800b8b6:	07da      	lsls	r2, r3, #31
 800b8b8:	d4e0      	bmi.n	800b87c <_fflush_r+0xc>
 800b8ba:	89a3      	ldrh	r3, [r4, #12]
 800b8bc:	059b      	lsls	r3, r3, #22
 800b8be:	d4dd      	bmi.n	800b87c <_fflush_r+0xc>
 800b8c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8c2:	f7ff fd0b 	bl	800b2dc <__retarget_lock_release_recursive>
 800b8c6:	e7d9      	b.n	800b87c <_fflush_r+0xc>
 800b8c8:	4b05      	ldr	r3, [pc, #20]	; (800b8e0 <_fflush_r+0x70>)
 800b8ca:	429c      	cmp	r4, r3
 800b8cc:	d101      	bne.n	800b8d2 <_fflush_r+0x62>
 800b8ce:	68ac      	ldr	r4, [r5, #8]
 800b8d0:	e7df      	b.n	800b892 <_fflush_r+0x22>
 800b8d2:	4b04      	ldr	r3, [pc, #16]	; (800b8e4 <_fflush_r+0x74>)
 800b8d4:	429c      	cmp	r4, r3
 800b8d6:	bf08      	it	eq
 800b8d8:	68ec      	ldreq	r4, [r5, #12]
 800b8da:	e7da      	b.n	800b892 <_fflush_r+0x22>
 800b8dc:	0800c31c 	.word	0x0800c31c
 800b8e0:	0800c33c 	.word	0x0800c33c
 800b8e4:	0800c2fc 	.word	0x0800c2fc

0800b8e8 <std>:
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	b510      	push	{r4, lr}
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	e9c0 3300 	strd	r3, r3, [r0]
 800b8f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8f6:	6083      	str	r3, [r0, #8]
 800b8f8:	8181      	strh	r1, [r0, #12]
 800b8fa:	6643      	str	r3, [r0, #100]	; 0x64
 800b8fc:	81c2      	strh	r2, [r0, #14]
 800b8fe:	6183      	str	r3, [r0, #24]
 800b900:	4619      	mov	r1, r3
 800b902:	2208      	movs	r2, #8
 800b904:	305c      	adds	r0, #92	; 0x5c
 800b906:	f7fd f9c3 	bl	8008c90 <memset>
 800b90a:	4b05      	ldr	r3, [pc, #20]	; (800b920 <std+0x38>)
 800b90c:	6224      	str	r4, [r4, #32]
 800b90e:	6263      	str	r3, [r4, #36]	; 0x24
 800b910:	4b04      	ldr	r3, [pc, #16]	; (800b924 <std+0x3c>)
 800b912:	62a3      	str	r3, [r4, #40]	; 0x28
 800b914:	4b04      	ldr	r3, [pc, #16]	; (800b928 <std+0x40>)
 800b916:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b918:	4b04      	ldr	r3, [pc, #16]	; (800b92c <std+0x44>)
 800b91a:	6323      	str	r3, [r4, #48]	; 0x30
 800b91c:	bd10      	pop	{r4, pc}
 800b91e:	bf00      	nop
 800b920:	0800bbad 	.word	0x0800bbad
 800b924:	0800bbcf 	.word	0x0800bbcf
 800b928:	0800bc07 	.word	0x0800bc07
 800b92c:	0800bc2b 	.word	0x0800bc2b

0800b930 <_cleanup_r>:
 800b930:	4901      	ldr	r1, [pc, #4]	; (800b938 <_cleanup_r+0x8>)
 800b932:	f000 b8af 	b.w	800ba94 <_fwalk_reent>
 800b936:	bf00      	nop
 800b938:	0800b871 	.word	0x0800b871

0800b93c <__sfmoreglue>:
 800b93c:	2268      	movs	r2, #104	; 0x68
 800b93e:	b570      	push	{r4, r5, r6, lr}
 800b940:	1e4d      	subs	r5, r1, #1
 800b942:	4355      	muls	r5, r2
 800b944:	460e      	mov	r6, r1
 800b946:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b94a:	f7fd fa11 	bl	8008d70 <_malloc_r>
 800b94e:	4604      	mov	r4, r0
 800b950:	b140      	cbz	r0, 800b964 <__sfmoreglue+0x28>
 800b952:	2100      	movs	r1, #0
 800b954:	e9c0 1600 	strd	r1, r6, [r0]
 800b958:	300c      	adds	r0, #12
 800b95a:	60a0      	str	r0, [r4, #8]
 800b95c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b960:	f7fd f996 	bl	8008c90 <memset>
 800b964:	4620      	mov	r0, r4
 800b966:	bd70      	pop	{r4, r5, r6, pc}

0800b968 <__sfp_lock_acquire>:
 800b968:	4801      	ldr	r0, [pc, #4]	; (800b970 <__sfp_lock_acquire+0x8>)
 800b96a:	f7ff bcb6 	b.w	800b2da <__retarget_lock_acquire_recursive>
 800b96e:	bf00      	nop
 800b970:	200015d9 	.word	0x200015d9

0800b974 <__sfp_lock_release>:
 800b974:	4801      	ldr	r0, [pc, #4]	; (800b97c <__sfp_lock_release+0x8>)
 800b976:	f7ff bcb1 	b.w	800b2dc <__retarget_lock_release_recursive>
 800b97a:	bf00      	nop
 800b97c:	200015d9 	.word	0x200015d9

0800b980 <__sinit_lock_acquire>:
 800b980:	4801      	ldr	r0, [pc, #4]	; (800b988 <__sinit_lock_acquire+0x8>)
 800b982:	f7ff bcaa 	b.w	800b2da <__retarget_lock_acquire_recursive>
 800b986:	bf00      	nop
 800b988:	200015da 	.word	0x200015da

0800b98c <__sinit_lock_release>:
 800b98c:	4801      	ldr	r0, [pc, #4]	; (800b994 <__sinit_lock_release+0x8>)
 800b98e:	f7ff bca5 	b.w	800b2dc <__retarget_lock_release_recursive>
 800b992:	bf00      	nop
 800b994:	200015da 	.word	0x200015da

0800b998 <__sinit>:
 800b998:	b510      	push	{r4, lr}
 800b99a:	4604      	mov	r4, r0
 800b99c:	f7ff fff0 	bl	800b980 <__sinit_lock_acquire>
 800b9a0:	69a3      	ldr	r3, [r4, #24]
 800b9a2:	b11b      	cbz	r3, 800b9ac <__sinit+0x14>
 800b9a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9a8:	f7ff bff0 	b.w	800b98c <__sinit_lock_release>
 800b9ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b9b0:	6523      	str	r3, [r4, #80]	; 0x50
 800b9b2:	4b13      	ldr	r3, [pc, #76]	; (800ba00 <__sinit+0x68>)
 800b9b4:	4a13      	ldr	r2, [pc, #76]	; (800ba04 <__sinit+0x6c>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b9ba:	42a3      	cmp	r3, r4
 800b9bc:	bf08      	it	eq
 800b9be:	2301      	moveq	r3, #1
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	bf08      	it	eq
 800b9c4:	61a3      	streq	r3, [r4, #24]
 800b9c6:	f000 f81f 	bl	800ba08 <__sfp>
 800b9ca:	6060      	str	r0, [r4, #4]
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	f000 f81b 	bl	800ba08 <__sfp>
 800b9d2:	60a0      	str	r0, [r4, #8]
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	f000 f817 	bl	800ba08 <__sfp>
 800b9da:	2200      	movs	r2, #0
 800b9dc:	2104      	movs	r1, #4
 800b9de:	60e0      	str	r0, [r4, #12]
 800b9e0:	6860      	ldr	r0, [r4, #4]
 800b9e2:	f7ff ff81 	bl	800b8e8 <std>
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	2109      	movs	r1, #9
 800b9ea:	68a0      	ldr	r0, [r4, #8]
 800b9ec:	f7ff ff7c 	bl	800b8e8 <std>
 800b9f0:	2202      	movs	r2, #2
 800b9f2:	2112      	movs	r1, #18
 800b9f4:	68e0      	ldr	r0, [r4, #12]
 800b9f6:	f7ff ff77 	bl	800b8e8 <std>
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	61a3      	str	r3, [r4, #24]
 800b9fe:	e7d1      	b.n	800b9a4 <__sinit+0xc>
 800ba00:	0800bf2c 	.word	0x0800bf2c
 800ba04:	0800b931 	.word	0x0800b931

0800ba08 <__sfp>:
 800ba08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba0a:	4607      	mov	r7, r0
 800ba0c:	f7ff ffac 	bl	800b968 <__sfp_lock_acquire>
 800ba10:	4b1e      	ldr	r3, [pc, #120]	; (800ba8c <__sfp+0x84>)
 800ba12:	681e      	ldr	r6, [r3, #0]
 800ba14:	69b3      	ldr	r3, [r6, #24]
 800ba16:	b913      	cbnz	r3, 800ba1e <__sfp+0x16>
 800ba18:	4630      	mov	r0, r6
 800ba1a:	f7ff ffbd 	bl	800b998 <__sinit>
 800ba1e:	3648      	adds	r6, #72	; 0x48
 800ba20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ba24:	3b01      	subs	r3, #1
 800ba26:	d503      	bpl.n	800ba30 <__sfp+0x28>
 800ba28:	6833      	ldr	r3, [r6, #0]
 800ba2a:	b30b      	cbz	r3, 800ba70 <__sfp+0x68>
 800ba2c:	6836      	ldr	r6, [r6, #0]
 800ba2e:	e7f7      	b.n	800ba20 <__sfp+0x18>
 800ba30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ba34:	b9d5      	cbnz	r5, 800ba6c <__sfp+0x64>
 800ba36:	4b16      	ldr	r3, [pc, #88]	; (800ba90 <__sfp+0x88>)
 800ba38:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ba3c:	60e3      	str	r3, [r4, #12]
 800ba3e:	6665      	str	r5, [r4, #100]	; 0x64
 800ba40:	f7ff fc4a 	bl	800b2d8 <__retarget_lock_init_recursive>
 800ba44:	f7ff ff96 	bl	800b974 <__sfp_lock_release>
 800ba48:	2208      	movs	r2, #8
 800ba4a:	4629      	mov	r1, r5
 800ba4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ba54:	6025      	str	r5, [r4, #0]
 800ba56:	61a5      	str	r5, [r4, #24]
 800ba58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba5c:	f7fd f918 	bl	8008c90 <memset>
 800ba60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba68:	4620      	mov	r0, r4
 800ba6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba6c:	3468      	adds	r4, #104	; 0x68
 800ba6e:	e7d9      	b.n	800ba24 <__sfp+0x1c>
 800ba70:	2104      	movs	r1, #4
 800ba72:	4638      	mov	r0, r7
 800ba74:	f7ff ff62 	bl	800b93c <__sfmoreglue>
 800ba78:	4604      	mov	r4, r0
 800ba7a:	6030      	str	r0, [r6, #0]
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	d1d5      	bne.n	800ba2c <__sfp+0x24>
 800ba80:	f7ff ff78 	bl	800b974 <__sfp_lock_release>
 800ba84:	230c      	movs	r3, #12
 800ba86:	603b      	str	r3, [r7, #0]
 800ba88:	e7ee      	b.n	800ba68 <__sfp+0x60>
 800ba8a:	bf00      	nop
 800ba8c:	0800bf2c 	.word	0x0800bf2c
 800ba90:	ffff0001 	.word	0xffff0001

0800ba94 <_fwalk_reent>:
 800ba94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba98:	4606      	mov	r6, r0
 800ba9a:	4688      	mov	r8, r1
 800ba9c:	2700      	movs	r7, #0
 800ba9e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800baa2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800baa6:	f1b9 0901 	subs.w	r9, r9, #1
 800baaa:	d505      	bpl.n	800bab8 <_fwalk_reent+0x24>
 800baac:	6824      	ldr	r4, [r4, #0]
 800baae:	2c00      	cmp	r4, #0
 800bab0:	d1f7      	bne.n	800baa2 <_fwalk_reent+0xe>
 800bab2:	4638      	mov	r0, r7
 800bab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bab8:	89ab      	ldrh	r3, [r5, #12]
 800baba:	2b01      	cmp	r3, #1
 800babc:	d907      	bls.n	800bace <_fwalk_reent+0x3a>
 800babe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bac2:	3301      	adds	r3, #1
 800bac4:	d003      	beq.n	800bace <_fwalk_reent+0x3a>
 800bac6:	4629      	mov	r1, r5
 800bac8:	4630      	mov	r0, r6
 800baca:	47c0      	blx	r8
 800bacc:	4307      	orrs	r7, r0
 800bace:	3568      	adds	r5, #104	; 0x68
 800bad0:	e7e9      	b.n	800baa6 <_fwalk_reent+0x12>

0800bad2 <__swhatbuf_r>:
 800bad2:	b570      	push	{r4, r5, r6, lr}
 800bad4:	460e      	mov	r6, r1
 800bad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bada:	4614      	mov	r4, r2
 800badc:	2900      	cmp	r1, #0
 800bade:	461d      	mov	r5, r3
 800bae0:	b096      	sub	sp, #88	; 0x58
 800bae2:	da08      	bge.n	800baf6 <__swhatbuf_r+0x24>
 800bae4:	2200      	movs	r2, #0
 800bae6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800baea:	602a      	str	r2, [r5, #0]
 800baec:	061a      	lsls	r2, r3, #24
 800baee:	d410      	bmi.n	800bb12 <__swhatbuf_r+0x40>
 800baf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baf4:	e00e      	b.n	800bb14 <__swhatbuf_r+0x42>
 800baf6:	466a      	mov	r2, sp
 800baf8:	f000 f8be 	bl	800bc78 <_fstat_r>
 800bafc:	2800      	cmp	r0, #0
 800bafe:	dbf1      	blt.n	800bae4 <__swhatbuf_r+0x12>
 800bb00:	9a01      	ldr	r2, [sp, #4]
 800bb02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb0a:	425a      	negs	r2, r3
 800bb0c:	415a      	adcs	r2, r3
 800bb0e:	602a      	str	r2, [r5, #0]
 800bb10:	e7ee      	b.n	800baf0 <__swhatbuf_r+0x1e>
 800bb12:	2340      	movs	r3, #64	; 0x40
 800bb14:	2000      	movs	r0, #0
 800bb16:	6023      	str	r3, [r4, #0]
 800bb18:	b016      	add	sp, #88	; 0x58
 800bb1a:	bd70      	pop	{r4, r5, r6, pc}

0800bb1c <__smakebuf_r>:
 800bb1c:	898b      	ldrh	r3, [r1, #12]
 800bb1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb20:	079d      	lsls	r5, r3, #30
 800bb22:	4606      	mov	r6, r0
 800bb24:	460c      	mov	r4, r1
 800bb26:	d507      	bpl.n	800bb38 <__smakebuf_r+0x1c>
 800bb28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb2c:	6023      	str	r3, [r4, #0]
 800bb2e:	6123      	str	r3, [r4, #16]
 800bb30:	2301      	movs	r3, #1
 800bb32:	6163      	str	r3, [r4, #20]
 800bb34:	b002      	add	sp, #8
 800bb36:	bd70      	pop	{r4, r5, r6, pc}
 800bb38:	466a      	mov	r2, sp
 800bb3a:	ab01      	add	r3, sp, #4
 800bb3c:	f7ff ffc9 	bl	800bad2 <__swhatbuf_r>
 800bb40:	9900      	ldr	r1, [sp, #0]
 800bb42:	4605      	mov	r5, r0
 800bb44:	4630      	mov	r0, r6
 800bb46:	f7fd f913 	bl	8008d70 <_malloc_r>
 800bb4a:	b948      	cbnz	r0, 800bb60 <__smakebuf_r+0x44>
 800bb4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb50:	059a      	lsls	r2, r3, #22
 800bb52:	d4ef      	bmi.n	800bb34 <__smakebuf_r+0x18>
 800bb54:	f023 0303 	bic.w	r3, r3, #3
 800bb58:	f043 0302 	orr.w	r3, r3, #2
 800bb5c:	81a3      	strh	r3, [r4, #12]
 800bb5e:	e7e3      	b.n	800bb28 <__smakebuf_r+0xc>
 800bb60:	4b0d      	ldr	r3, [pc, #52]	; (800bb98 <__smakebuf_r+0x7c>)
 800bb62:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb64:	89a3      	ldrh	r3, [r4, #12]
 800bb66:	6020      	str	r0, [r4, #0]
 800bb68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb6c:	81a3      	strh	r3, [r4, #12]
 800bb6e:	9b00      	ldr	r3, [sp, #0]
 800bb70:	6120      	str	r0, [r4, #16]
 800bb72:	6163      	str	r3, [r4, #20]
 800bb74:	9b01      	ldr	r3, [sp, #4]
 800bb76:	b15b      	cbz	r3, 800bb90 <__smakebuf_r+0x74>
 800bb78:	4630      	mov	r0, r6
 800bb7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb7e:	f000 f88d 	bl	800bc9c <_isatty_r>
 800bb82:	b128      	cbz	r0, 800bb90 <__smakebuf_r+0x74>
 800bb84:	89a3      	ldrh	r3, [r4, #12]
 800bb86:	f023 0303 	bic.w	r3, r3, #3
 800bb8a:	f043 0301 	orr.w	r3, r3, #1
 800bb8e:	81a3      	strh	r3, [r4, #12]
 800bb90:	89a0      	ldrh	r0, [r4, #12]
 800bb92:	4305      	orrs	r5, r0
 800bb94:	81a5      	strh	r5, [r4, #12]
 800bb96:	e7cd      	b.n	800bb34 <__smakebuf_r+0x18>
 800bb98:	0800b931 	.word	0x0800b931

0800bb9c <_malloc_usable_size_r>:
 800bb9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bba0:	1f18      	subs	r0, r3, #4
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	bfbc      	itt	lt
 800bba6:	580b      	ldrlt	r3, [r1, r0]
 800bba8:	18c0      	addlt	r0, r0, r3
 800bbaa:	4770      	bx	lr

0800bbac <__sread>:
 800bbac:	b510      	push	{r4, lr}
 800bbae:	460c      	mov	r4, r1
 800bbb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbb4:	f000 f894 	bl	800bce0 <_read_r>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	bfab      	itete	ge
 800bbbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bbbe:	89a3      	ldrhlt	r3, [r4, #12]
 800bbc0:	181b      	addge	r3, r3, r0
 800bbc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bbc6:	bfac      	ite	ge
 800bbc8:	6563      	strge	r3, [r4, #84]	; 0x54
 800bbca:	81a3      	strhlt	r3, [r4, #12]
 800bbcc:	bd10      	pop	{r4, pc}

0800bbce <__swrite>:
 800bbce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbd2:	461f      	mov	r7, r3
 800bbd4:	898b      	ldrh	r3, [r1, #12]
 800bbd6:	4605      	mov	r5, r0
 800bbd8:	05db      	lsls	r3, r3, #23
 800bbda:	460c      	mov	r4, r1
 800bbdc:	4616      	mov	r6, r2
 800bbde:	d505      	bpl.n	800bbec <__swrite+0x1e>
 800bbe0:	2302      	movs	r3, #2
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbe8:	f000 f868 	bl	800bcbc <_lseek_r>
 800bbec:	89a3      	ldrh	r3, [r4, #12]
 800bbee:	4632      	mov	r2, r6
 800bbf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bbf4:	81a3      	strh	r3, [r4, #12]
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	463b      	mov	r3, r7
 800bbfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc02:	f000 b817 	b.w	800bc34 <_write_r>

0800bc06 <__sseek>:
 800bc06:	b510      	push	{r4, lr}
 800bc08:	460c      	mov	r4, r1
 800bc0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc0e:	f000 f855 	bl	800bcbc <_lseek_r>
 800bc12:	1c43      	adds	r3, r0, #1
 800bc14:	89a3      	ldrh	r3, [r4, #12]
 800bc16:	bf15      	itete	ne
 800bc18:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc22:	81a3      	strheq	r3, [r4, #12]
 800bc24:	bf18      	it	ne
 800bc26:	81a3      	strhne	r3, [r4, #12]
 800bc28:	bd10      	pop	{r4, pc}

0800bc2a <__sclose>:
 800bc2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc2e:	f000 b813 	b.w	800bc58 <_close_r>
	...

0800bc34 <_write_r>:
 800bc34:	b538      	push	{r3, r4, r5, lr}
 800bc36:	4604      	mov	r4, r0
 800bc38:	4608      	mov	r0, r1
 800bc3a:	4611      	mov	r1, r2
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	4d05      	ldr	r5, [pc, #20]	; (800bc54 <_write_r+0x20>)
 800bc40:	602a      	str	r2, [r5, #0]
 800bc42:	461a      	mov	r2, r3
 800bc44:	f7f8 fd85 	bl	8004752 <_write>
 800bc48:	1c43      	adds	r3, r0, #1
 800bc4a:	d102      	bne.n	800bc52 <_write_r+0x1e>
 800bc4c:	682b      	ldr	r3, [r5, #0]
 800bc4e:	b103      	cbz	r3, 800bc52 <_write_r+0x1e>
 800bc50:	6023      	str	r3, [r4, #0]
 800bc52:	bd38      	pop	{r3, r4, r5, pc}
 800bc54:	200015d4 	.word	0x200015d4

0800bc58 <_close_r>:
 800bc58:	b538      	push	{r3, r4, r5, lr}
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	4d05      	ldr	r5, [pc, #20]	; (800bc74 <_close_r+0x1c>)
 800bc5e:	4604      	mov	r4, r0
 800bc60:	4608      	mov	r0, r1
 800bc62:	602b      	str	r3, [r5, #0]
 800bc64:	f7f8 fd82 	bl	800476c <_close>
 800bc68:	1c43      	adds	r3, r0, #1
 800bc6a:	d102      	bne.n	800bc72 <_close_r+0x1a>
 800bc6c:	682b      	ldr	r3, [r5, #0]
 800bc6e:	b103      	cbz	r3, 800bc72 <_close_r+0x1a>
 800bc70:	6023      	str	r3, [r4, #0]
 800bc72:	bd38      	pop	{r3, r4, r5, pc}
 800bc74:	200015d4 	.word	0x200015d4

0800bc78 <_fstat_r>:
 800bc78:	b538      	push	{r3, r4, r5, lr}
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	4d06      	ldr	r5, [pc, #24]	; (800bc98 <_fstat_r+0x20>)
 800bc7e:	4604      	mov	r4, r0
 800bc80:	4608      	mov	r0, r1
 800bc82:	4611      	mov	r1, r2
 800bc84:	602b      	str	r3, [r5, #0]
 800bc86:	f7f8 fd74 	bl	8004772 <_fstat>
 800bc8a:	1c43      	adds	r3, r0, #1
 800bc8c:	d102      	bne.n	800bc94 <_fstat_r+0x1c>
 800bc8e:	682b      	ldr	r3, [r5, #0]
 800bc90:	b103      	cbz	r3, 800bc94 <_fstat_r+0x1c>
 800bc92:	6023      	str	r3, [r4, #0]
 800bc94:	bd38      	pop	{r3, r4, r5, pc}
 800bc96:	bf00      	nop
 800bc98:	200015d4 	.word	0x200015d4

0800bc9c <_isatty_r>:
 800bc9c:	b538      	push	{r3, r4, r5, lr}
 800bc9e:	2300      	movs	r3, #0
 800bca0:	4d05      	ldr	r5, [pc, #20]	; (800bcb8 <_isatty_r+0x1c>)
 800bca2:	4604      	mov	r4, r0
 800bca4:	4608      	mov	r0, r1
 800bca6:	602b      	str	r3, [r5, #0]
 800bca8:	f7f8 fd68 	bl	800477c <_isatty>
 800bcac:	1c43      	adds	r3, r0, #1
 800bcae:	d102      	bne.n	800bcb6 <_isatty_r+0x1a>
 800bcb0:	682b      	ldr	r3, [r5, #0]
 800bcb2:	b103      	cbz	r3, 800bcb6 <_isatty_r+0x1a>
 800bcb4:	6023      	str	r3, [r4, #0]
 800bcb6:	bd38      	pop	{r3, r4, r5, pc}
 800bcb8:	200015d4 	.word	0x200015d4

0800bcbc <_lseek_r>:
 800bcbc:	b538      	push	{r3, r4, r5, lr}
 800bcbe:	4604      	mov	r4, r0
 800bcc0:	4608      	mov	r0, r1
 800bcc2:	4611      	mov	r1, r2
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	4d05      	ldr	r5, [pc, #20]	; (800bcdc <_lseek_r+0x20>)
 800bcc8:	602a      	str	r2, [r5, #0]
 800bcca:	461a      	mov	r2, r3
 800bccc:	f7f8 fd58 	bl	8004780 <_lseek>
 800bcd0:	1c43      	adds	r3, r0, #1
 800bcd2:	d102      	bne.n	800bcda <_lseek_r+0x1e>
 800bcd4:	682b      	ldr	r3, [r5, #0]
 800bcd6:	b103      	cbz	r3, 800bcda <_lseek_r+0x1e>
 800bcd8:	6023      	str	r3, [r4, #0]
 800bcda:	bd38      	pop	{r3, r4, r5, pc}
 800bcdc:	200015d4 	.word	0x200015d4

0800bce0 <_read_r>:
 800bce0:	b538      	push	{r3, r4, r5, lr}
 800bce2:	4604      	mov	r4, r0
 800bce4:	4608      	mov	r0, r1
 800bce6:	4611      	mov	r1, r2
 800bce8:	2200      	movs	r2, #0
 800bcea:	4d05      	ldr	r5, [pc, #20]	; (800bd00 <_read_r+0x20>)
 800bcec:	602a      	str	r2, [r5, #0]
 800bcee:	461a      	mov	r2, r3
 800bcf0:	f7f8 fd22 	bl	8004738 <_read>
 800bcf4:	1c43      	adds	r3, r0, #1
 800bcf6:	d102      	bne.n	800bcfe <_read_r+0x1e>
 800bcf8:	682b      	ldr	r3, [r5, #0]
 800bcfa:	b103      	cbz	r3, 800bcfe <_read_r+0x1e>
 800bcfc:	6023      	str	r3, [r4, #0]
 800bcfe:	bd38      	pop	{r3, r4, r5, pc}
 800bd00:	200015d4 	.word	0x200015d4

0800bd04 <_init>:
 800bd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd06:	bf00      	nop
 800bd08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd0a:	bc08      	pop	{r3}
 800bd0c:	469e      	mov	lr, r3
 800bd0e:	4770      	bx	lr

0800bd10 <_fini>:
 800bd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd12:	bf00      	nop
 800bd14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd16:	bc08      	pop	{r3}
 800bd18:	469e      	mov	lr, r3
 800bd1a:	4770      	bx	lr
